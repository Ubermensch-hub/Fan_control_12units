
Fan_control_12units.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dd0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08003e8c  08003e8c  00004e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f74  08003f74  00005024  2**0
                  CONTENTS
  4 .ARM          00000000  08003f74  08003f74  00005024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f74  08003f74  00005024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f74  08003f74  00004f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f78  08003f78  00004f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08003f7c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000024  08003fa0  00005024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08003fa0  000051a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b67e  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002054  00000000  00000000  000106ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00012720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000097b  00000000  00000000  00013370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fd8  00000000  00000000  00013ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f55d  00000000  00000000  0002ccc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1a7b  00000000  00000000  0003c220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ddc9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b3c  00000000  00000000  000ddce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000e081c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000024 	.word	0x20000024
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003e74 	.word	0x08003e74

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000028 	.word	0x20000028
 8000100:	08003e74 	.word	0x08003e74

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800021c:	b590      	push	{r4, r7, lr}
 800021e:	b08b      	sub	sp, #44	@ 0x2c
 8000220:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000222:	2414      	movs	r4, #20
 8000224:	193b      	adds	r3, r7, r4
 8000226:	0018      	movs	r0, r3
 8000228:	2314      	movs	r3, #20
 800022a:	001a      	movs	r2, r3
 800022c:	2100      	movs	r1, #0
 800022e:	f003 fdf5 	bl	8003e1c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000232:	4b6b      	ldr	r3, [pc, #428]	@ (80003e0 <MX_GPIO_Init+0x1c4>)
 8000234:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000236:	4b6a      	ldr	r3, [pc, #424]	@ (80003e0 <MX_GPIO_Init+0x1c4>)
 8000238:	2104      	movs	r1, #4
 800023a:	430a      	orrs	r2, r1
 800023c:	635a      	str	r2, [r3, #52]	@ 0x34
 800023e:	4b68      	ldr	r3, [pc, #416]	@ (80003e0 <MX_GPIO_Init+0x1c4>)
 8000240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000242:	2204      	movs	r2, #4
 8000244:	4013      	ands	r3, r2
 8000246:	613b      	str	r3, [r7, #16]
 8000248:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800024a:	4b65      	ldr	r3, [pc, #404]	@ (80003e0 <MX_GPIO_Init+0x1c4>)
 800024c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800024e:	4b64      	ldr	r3, [pc, #400]	@ (80003e0 <MX_GPIO_Init+0x1c4>)
 8000250:	2120      	movs	r1, #32
 8000252:	430a      	orrs	r2, r1
 8000254:	635a      	str	r2, [r3, #52]	@ 0x34
 8000256:	4b62      	ldr	r3, [pc, #392]	@ (80003e0 <MX_GPIO_Init+0x1c4>)
 8000258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800025a:	2220      	movs	r2, #32
 800025c:	4013      	ands	r3, r2
 800025e:	60fb      	str	r3, [r7, #12]
 8000260:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000262:	4b5f      	ldr	r3, [pc, #380]	@ (80003e0 <MX_GPIO_Init+0x1c4>)
 8000264:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000266:	4b5e      	ldr	r3, [pc, #376]	@ (80003e0 <MX_GPIO_Init+0x1c4>)
 8000268:	2101      	movs	r1, #1
 800026a:	430a      	orrs	r2, r1
 800026c:	635a      	str	r2, [r3, #52]	@ 0x34
 800026e:	4b5c      	ldr	r3, [pc, #368]	@ (80003e0 <MX_GPIO_Init+0x1c4>)
 8000270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000272:	2201      	movs	r2, #1
 8000274:	4013      	ands	r3, r2
 8000276:	60bb      	str	r3, [r7, #8]
 8000278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800027a:	4b59      	ldr	r3, [pc, #356]	@ (80003e0 <MX_GPIO_Init+0x1c4>)
 800027c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800027e:	4b58      	ldr	r3, [pc, #352]	@ (80003e0 <MX_GPIO_Init+0x1c4>)
 8000280:	2102      	movs	r1, #2
 8000282:	430a      	orrs	r2, r1
 8000284:	635a      	str	r2, [r3, #52]	@ 0x34
 8000286:	4b56      	ldr	r3, [pc, #344]	@ (80003e0 <MX_GPIO_Init+0x1c4>)
 8000288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800028a:	2202      	movs	r2, #2
 800028c:	4013      	ands	r3, r2
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000292:	4b53      	ldr	r3, [pc, #332]	@ (80003e0 <MX_GPIO_Init+0x1c4>)
 8000294:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000296:	4b52      	ldr	r3, [pc, #328]	@ (80003e0 <MX_GPIO_Init+0x1c4>)
 8000298:	2108      	movs	r1, #8
 800029a:	430a      	orrs	r2, r1
 800029c:	635a      	str	r2, [r3, #52]	@ 0x34
 800029e:	4b50      	ldr	r3, [pc, #320]	@ (80003e0 <MX_GPIO_Init+0x1c4>)
 80002a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80002a2:	2208      	movs	r2, #8
 80002a4:	4013      	ands	r3, r2
 80002a6:	603b      	str	r3, [r7, #0]
 80002a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MC_Tach_OUT_0_Pin|MC_Tach_OUT_1_Pin|MC_Tach_OUT_2_Pin|MC_Tach_OUT_3_Pin
 80002aa:	23fc      	movs	r3, #252	@ 0xfc
 80002ac:	021b      	lsls	r3, r3, #8
 80002ae:	484d      	ldr	r0, [pc, #308]	@ (80003e4 <MX_GPIO_Init+0x1c8>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	0019      	movs	r1, r3
 80002b4:	f001 f9f0 	bl	8001698 <HAL_GPIO_WritePin>
                          |MC_Tach_OUT_4_Pin|MC_Tach_OUT_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FAN_Tach_IN_11_Pin|FAN_Tach_IN_0_Pin|FAN_Tach_IN_1_Pin|FAN_Tach_IN_2_Pin
 80002b8:	193b      	adds	r3, r7, r4
 80002ba:	4a4b      	ldr	r2, [pc, #300]	@ (80003e8 <MX_GPIO_Init+0x1cc>)
 80002bc:	601a      	str	r2, [r3, #0]
                          |FAN_Tach_IN_3_Pin|FAN_Tach_IN_4_Pin|FAN_Tach_IN_5_Pin|FAN_Tach_IN_6_Pin
                          |FAN_Tach_IN_7_Pin|FAN_Tach_IN_8_Pin|FAN_Tach_IN_9_Pin|FAN_Tach_IN_10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002be:	193b      	adds	r3, r7, r4
 80002c0:	2288      	movs	r2, #136	@ 0x88
 80002c2:	0352      	lsls	r2, r2, #13
 80002c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002c6:	193b      	adds	r3, r7, r4
 80002c8:	2201      	movs	r2, #1
 80002ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	4a47      	ldr	r2, [pc, #284]	@ (80003ec <MX_GPIO_Init+0x1d0>)
 80002d0:	0019      	movs	r1, r3
 80002d2:	0010      	movs	r0, r2
 80002d4:	f001 f87c 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80002d8:	0021      	movs	r1, r4
 80002da:	193b      	adds	r3, r7, r4
 80002dc:	22f0      	movs	r2, #240	@ 0xf0
 80002de:	0212      	lsls	r2, r2, #8
 80002e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002e2:	000c      	movs	r4, r1
 80002e4:	193b      	adds	r3, r7, r4
 80002e6:	2203      	movs	r2, #3
 80002e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ea:	193b      	adds	r3, r7, r4
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	4a3e      	ldr	r2, [pc, #248]	@ (80003ec <MX_GPIO_Init+0x1d0>)
 80002f4:	0019      	movs	r1, r3
 80002f6:	0010      	movs	r0, r2
 80002f8:	f001 f86a 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80002fc:	193b      	adds	r3, r7, r4
 80002fe:	2207      	movs	r2, #7
 8000300:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000302:	193b      	adds	r3, r7, r4
 8000304:	2203      	movs	r2, #3
 8000306:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000308:	193b      	adds	r3, r7, r4
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800030e:	193b      	adds	r3, r7, r4
 8000310:	4a37      	ldr	r2, [pc, #220]	@ (80003f0 <MX_GPIO_Init+0x1d4>)
 8000312:	0019      	movs	r1, r3
 8000314:	0010      	movs	r0, r2
 8000316:	f001 f85b 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA9 PA10
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_10
 800031a:	193b      	adds	r3, r7, r4
 800031c:	4a35      	ldr	r2, [pc, #212]	@ (80003f4 <MX_GPIO_Init+0x1d8>)
 800031e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000320:	193b      	adds	r3, r7, r4
 8000322:	2203      	movs	r2, #3
 8000324:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000326:	193b      	adds	r3, r7, r4
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800032c:	193a      	adds	r2, r7, r4
 800032e:	23a0      	movs	r3, #160	@ 0xa0
 8000330:	05db      	lsls	r3, r3, #23
 8000332:	0011      	movs	r1, r2
 8000334:	0018      	movs	r0, r3
 8000336:	f001 f84b 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB4 PB5 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7
 800033a:	0021      	movs	r1, r4
 800033c:	187b      	adds	r3, r7, r1
 800033e:	22ed      	movs	r2, #237	@ 0xed
 8000340:	0092      	lsls	r2, r2, #2
 8000342:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000344:	000c      	movs	r4, r1
 8000346:	193b      	adds	r3, r7, r4
 8000348:	2203      	movs	r2, #3
 800034a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034c:	193b      	adds	r3, r7, r4
 800034e:	2200      	movs	r2, #0
 8000350:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000352:	193b      	adds	r3, r7, r4
 8000354:	4a23      	ldr	r2, [pc, #140]	@ (80003e4 <MX_GPIO_Init+0x1c8>)
 8000356:	0019      	movs	r1, r3
 8000358:	0010      	movs	r0, r2
 800035a:	f001 f839 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = MC_Tach_OUT_0_Pin|MC_Tach_OUT_1_Pin|MC_Tach_OUT_2_Pin|MC_Tach_OUT_3_Pin
 800035e:	0021      	movs	r1, r4
 8000360:	187b      	adds	r3, r7, r1
 8000362:	22fc      	movs	r2, #252	@ 0xfc
 8000364:	0212      	lsls	r2, r2, #8
 8000366:	601a      	str	r2, [r3, #0]
                          |MC_Tach_OUT_4_Pin|MC_Tach_OUT_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000368:	000c      	movs	r4, r1
 800036a:	193b      	adds	r3, r7, r4
 800036c:	2201      	movs	r2, #1
 800036e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000370:	193b      	adds	r3, r7, r4
 8000372:	2200      	movs	r2, #0
 8000374:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000376:	193b      	adds	r3, r7, r4
 8000378:	2202      	movs	r2, #2
 800037a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800037c:	193b      	adds	r3, r7, r4
 800037e:	4a19      	ldr	r2, [pc, #100]	@ (80003e4 <MX_GPIO_Init+0x1c8>)
 8000380:	0019      	movs	r1, r3
 8000382:	0010      	movs	r0, r2
 8000384:	f001 f824 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 PD1
                           PD2 PD3 PD4 PD5
                           PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1
 8000388:	0021      	movs	r1, r4
 800038a:	187b      	adds	r3, r7, r1
 800038c:	4a1a      	ldr	r2, [pc, #104]	@ (80003f8 <MX_GPIO_Init+0x1dc>)
 800038e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000390:	187b      	adds	r3, r7, r1
 8000392:	2203      	movs	r2, #3
 8000394:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000396:	187b      	adds	r3, r7, r1
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800039c:	187b      	adds	r3, r7, r1
 800039e:	4a17      	ldr	r2, [pc, #92]	@ (80003fc <MX_GPIO_Init+0x1e0>)
 80003a0:	0019      	movs	r1, r3
 80003a2:	0010      	movs	r0, r2
 80003a4:	f001 f814 	bl	80013d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2100      	movs	r1, #0
 80003ac:	2005      	movs	r0, #5
 80003ae:	f000 ffdd 	bl	800136c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80003b2:	2005      	movs	r0, #5
 80003b4:	f000 ffef 	bl	8001396 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2100      	movs	r1, #0
 80003bc:	2006      	movs	r0, #6
 80003be:	f000 ffd5 	bl	800136c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80003c2:	2006      	movs	r0, #6
 80003c4:	f000 ffe7 	bl	8001396 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80003c8:	2200      	movs	r2, #0
 80003ca:	2100      	movs	r1, #0
 80003cc:	2007      	movs	r0, #7
 80003ce:	f000 ffcd 	bl	800136c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80003d2:	2007      	movs	r0, #7
 80003d4:	f000 ffdf 	bl	8001396 <HAL_NVIC_EnableIRQ>

}
 80003d8:	46c0      	nop			@ (mov r8, r8)
 80003da:	46bd      	mov	sp, r7
 80003dc:	b00b      	add	sp, #44	@ 0x2c
 80003de:	bd90      	pop	{r4, r7, pc}
 80003e0:	40021000 	.word	0x40021000
 80003e4:	50000400 	.word	0x50000400
 80003e8:	00000fff 	.word	0x00000fff
 80003ec:	50000800 	.word	0x50000800
 80003f0:	50001400 	.word	0x50001400
 80003f4:	00009630 	.word	0x00009630
 80003f8:	0000037f 	.word	0x0000037f
 80003fc:	50000c00 	.word	0x50000c00

08000400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000404:	f000 fe5c 	bl	80010c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000408:	f000 f838 	bl	800047c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800040c:	f7ff ff06 	bl	800021c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000410:	f000 fb48 	bl	8000aa4 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000414:	f000 f984 	bl	8000720 <MX_TIM1_Init>
  MX_RTC_Init();
 8000418:	f000 f898 	bl	800054c <MX_RTC_Init>
  MX_TIM2_Init();
 800041c:	f000 fa84 	bl	8000928 <MX_TIM2_Init>
  MX_TIM16_Init();
 8000420:	f000 fbd8 	bl	8000bd4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // запуск PWM на необходимых каналах таймеров
 8000424:	4b13      	ldr	r3, [pc, #76]	@ (8000474 <main+0x74>)
 8000426:	2100      	movs	r1, #0
 8000428:	0018      	movs	r0, r3
 800042a:	f002 fa93 	bl	8002954 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800042e:	4b11      	ldr	r3, [pc, #68]	@ (8000474 <main+0x74>)
 8000430:	2104      	movs	r1, #4
 8000432:	0018      	movs	r0, r3
 8000434:	f002 fa8e 	bl	8002954 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000438:	4b0e      	ldr	r3, [pc, #56]	@ (8000474 <main+0x74>)
 800043a:	2108      	movs	r1, #8
 800043c:	0018      	movs	r0, r3
 800043e:	f002 fa89 	bl	8002954 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000442:	4b0c      	ldr	r3, [pc, #48]	@ (8000474 <main+0x74>)
 8000444:	210c      	movs	r1, #12
 8000446:	0018      	movs	r0, r3
 8000448:	f002 fa84 	bl	8002954 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800044c:	4b0a      	ldr	r3, [pc, #40]	@ (8000478 <main+0x78>)
 800044e:	2108      	movs	r1, #8
 8000450:	0018      	movs	r0, r3
 8000452:	f002 fa7f 	bl	8002954 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000456:	4b08      	ldr	r3, [pc, #32]	@ (8000478 <main+0x78>)
 8000458:	210c      	movs	r1, #12
 800045a:	0018      	movs	r0, r3
 800045c:	f002 fa7a 	bl	8002954 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  set_PWM();
 8000460:	f000 fde0 	bl	8001024 <set_PWM>
	  adjust_PWM();
 8000464:	f000 fdaa 	bl	8000fbc <adjust_PWM>

	  HAL_Delay(10);
 8000468:	200a      	movs	r0, #10
 800046a:	f000 feaf 	bl	80011cc <HAL_Delay>
	  set_PWM();
 800046e:	46c0      	nop			@ (mov r8, r8)
 8000470:	e7f6      	b.n	8000460 <main+0x60>
 8000472:	46c0      	nop			@ (mov r8, r8)
 8000474:	2000006c 	.word	0x2000006c
 8000478:	200000b8 	.word	0x200000b8

0800047c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800047c:	b590      	push	{r4, r7, lr}
 800047e:	b093      	sub	sp, #76	@ 0x4c
 8000480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000482:	2410      	movs	r4, #16
 8000484:	193b      	adds	r3, r7, r4
 8000486:	0018      	movs	r0, r3
 8000488:	2338      	movs	r3, #56	@ 0x38
 800048a:	001a      	movs	r2, r3
 800048c:	2100      	movs	r1, #0
 800048e:	f003 fcc5 	bl	8003e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000492:	003b      	movs	r3, r7
 8000494:	0018      	movs	r0, r3
 8000496:	2310      	movs	r3, #16
 8000498:	001a      	movs	r2, r3
 800049a:	2100      	movs	r1, #0
 800049c:	f003 fcbe 	bl	8003e1c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004a0:	2380      	movs	r3, #128	@ 0x80
 80004a2:	009b      	lsls	r3, r3, #2
 80004a4:	0018      	movs	r0, r3
 80004a6:	f001 f953 	bl	8001750 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80004aa:	193b      	adds	r3, r7, r4
 80004ac:	220a      	movs	r2, #10
 80004ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2280      	movs	r2, #128	@ 0x80
 80004b4:	0052      	lsls	r2, r2, #1
 80004b6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004b8:	0021      	movs	r1, r4
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2200      	movs	r2, #0
 80004be:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2240      	movs	r2, #64	@ 0x40
 80004c4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2201      	movs	r2, #1
 80004ca:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2202      	movs	r2, #2
 80004d0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2202      	movs	r2, #2
 80004d6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	2200      	movs	r2, #0
 80004dc:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	2208      	movs	r2, #8
 80004e2:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	2280      	movs	r2, #128	@ 0x80
 80004e8:	0292      	lsls	r2, r2, #10
 80004ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	22c0      	movs	r2, #192	@ 0xc0
 80004f0:	04d2      	lsls	r2, r2, #19
 80004f2:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2280      	movs	r2, #128	@ 0x80
 80004f8:	0592      	lsls	r2, r2, #22
 80004fa:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	0018      	movs	r0, r3
 8000500:	f001 f966 	bl	80017d0 <HAL_RCC_OscConfig>
 8000504:	1e03      	subs	r3, r0, #0
 8000506:	d001      	beq.n	800050c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000508:	f000 f819 	bl	800053e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800050c:	003b      	movs	r3, r7
 800050e:	2207      	movs	r2, #7
 8000510:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000512:	003b      	movs	r3, r7
 8000514:	2202      	movs	r2, #2
 8000516:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000518:	003b      	movs	r3, r7
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800051e:	003b      	movs	r3, r7
 8000520:	2200      	movs	r2, #0
 8000522:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000524:	003b      	movs	r3, r7
 8000526:	2102      	movs	r1, #2
 8000528:	0018      	movs	r0, r3
 800052a:	f001 fc6b 	bl	8001e04 <HAL_RCC_ClockConfig>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d001      	beq.n	8000536 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000532:	f000 f804 	bl	800053e <Error_Handler>
  }
}
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b013      	add	sp, #76	@ 0x4c
 800053c:	bd90      	pop	{r4, r7, pc}

0800053e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000542:	b672      	cpsid	i
}
 8000544:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */

  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000546:	46c0      	nop			@ (mov r8, r8)
 8000548:	e7fd      	b.n	8000546 <Error_Handler+0x8>
	...

0800054c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000550:	4b13      	ldr	r3, [pc, #76]	@ (80005a0 <MX_RTC_Init+0x54>)
 8000552:	4a14      	ldr	r2, [pc, #80]	@ (80005a4 <MX_RTC_Init+0x58>)
 8000554:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000556:	4b12      	ldr	r3, [pc, #72]	@ (80005a0 <MX_RTC_Init+0x54>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800055c:	4b10      	ldr	r3, [pc, #64]	@ (80005a0 <MX_RTC_Init+0x54>)
 800055e:	227f      	movs	r2, #127	@ 0x7f
 8000560:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000562:	4b0f      	ldr	r3, [pc, #60]	@ (80005a0 <MX_RTC_Init+0x54>)
 8000564:	22ff      	movs	r2, #255	@ 0xff
 8000566:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000568:	4b0d      	ldr	r3, [pc, #52]	@ (80005a0 <MX_RTC_Init+0x54>)
 800056a:	2200      	movs	r2, #0
 800056c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800056e:	4b0c      	ldr	r3, [pc, #48]	@ (80005a0 <MX_RTC_Init+0x54>)
 8000570:	2200      	movs	r2, #0
 8000572:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000574:	4b0a      	ldr	r3, [pc, #40]	@ (80005a0 <MX_RTC_Init+0x54>)
 8000576:	2200      	movs	r2, #0
 8000578:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800057a:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <MX_RTC_Init+0x54>)
 800057c:	2280      	movs	r2, #128	@ 0x80
 800057e:	05d2      	lsls	r2, r2, #23
 8000580:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000582:	4b07      	ldr	r3, [pc, #28]	@ (80005a0 <MX_RTC_Init+0x54>)
 8000584:	2200      	movs	r2, #0
 8000586:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000588:	4b05      	ldr	r3, [pc, #20]	@ (80005a0 <MX_RTC_Init+0x54>)
 800058a:	0018      	movs	r0, r3
 800058c:	f001 ff7c 	bl	8002488 <HAL_RTC_Init>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d001      	beq.n	8000598 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8000594:	f7ff ffd3 	bl	800053e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000598:	46c0      	nop			@ (mov r8, r8)
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	20000040 	.word	0x20000040
 80005a4:	40002800 	.word	0x40002800

080005a8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b091      	sub	sp, #68	@ 0x44
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005b0:	240c      	movs	r4, #12
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	0018      	movs	r0, r3
 80005b6:	2334      	movs	r3, #52	@ 0x34
 80005b8:	001a      	movs	r2, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	f003 fc2e 	bl	8003e1c <memset>
  if(rtcHandle->Instance==RTC)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a15      	ldr	r2, [pc, #84]	@ (800061c <HAL_RTC_MspInit+0x74>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d124      	bne.n	8000614 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	2280      	movs	r2, #128	@ 0x80
 80005ce:	0292      	lsls	r2, r2, #10
 80005d0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	2280      	movs	r2, #128	@ 0x80
 80005d6:	0092      	lsls	r2, r2, #2
 80005d8:	631a      	str	r2, [r3, #48]	@ 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005da:	193b      	adds	r3, r7, r4
 80005dc:	0018      	movs	r0, r3
 80005de:	f001 fd9b 	bl	8002118 <HAL_RCCEx_PeriphCLKConfig>
 80005e2:	1e03      	subs	r3, r0, #0
 80005e4:	d001      	beq.n	80005ea <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80005e6:	f7ff ffaa 	bl	800053e <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80005ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000620 <HAL_RTC_MspInit+0x78>)
 80005ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80005ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <HAL_RTC_MspInit+0x78>)
 80005f0:	2180      	movs	r1, #128	@ 0x80
 80005f2:	0209      	lsls	r1, r1, #8
 80005f4:	430a      	orrs	r2, r1
 80005f6:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80005f8:	4b09      	ldr	r3, [pc, #36]	@ (8000620 <HAL_RTC_MspInit+0x78>)
 80005fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80005fc:	4b08      	ldr	r3, [pc, #32]	@ (8000620 <HAL_RTC_MspInit+0x78>)
 80005fe:	2180      	movs	r1, #128	@ 0x80
 8000600:	00c9      	lsls	r1, r1, #3
 8000602:	430a      	orrs	r2, r1
 8000604:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000606:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <HAL_RTC_MspInit+0x78>)
 8000608:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800060a:	2380      	movs	r3, #128	@ 0x80
 800060c:	00db      	lsls	r3, r3, #3
 800060e:	4013      	ands	r3, r2
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000614:	46c0      	nop			@ (mov r8, r8)
 8000616:	46bd      	mov	sp, r7
 8000618:	b011      	add	sp, #68	@ 0x44
 800061a:	bd90      	pop	{r4, r7, pc}
 800061c:	40002800 	.word	0x40002800
 8000620:	40021000 	.word	0x40021000

08000624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800062a:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <HAL_MspInit+0x44>)
 800062c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800062e:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <HAL_MspInit+0x44>)
 8000630:	2101      	movs	r1, #1
 8000632:	430a      	orrs	r2, r1
 8000634:	641a      	str	r2, [r3, #64]	@ 0x40
 8000636:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <HAL_MspInit+0x44>)
 8000638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063a:	2201      	movs	r2, #1
 800063c:	4013      	ands	r3, r2
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000642:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <HAL_MspInit+0x44>)
 8000644:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000646:	4b08      	ldr	r3, [pc, #32]	@ (8000668 <HAL_MspInit+0x44>)
 8000648:	2180      	movs	r1, #128	@ 0x80
 800064a:	0549      	lsls	r1, r1, #21
 800064c:	430a      	orrs	r2, r1
 800064e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000650:	4b05      	ldr	r3, [pc, #20]	@ (8000668 <HAL_MspInit+0x44>)
 8000652:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000654:	2380      	movs	r3, #128	@ 0x80
 8000656:	055b      	lsls	r3, r3, #21
 8000658:	4013      	ands	r3, r2
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065e:	46c0      	nop			@ (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b002      	add	sp, #8
 8000664:	bd80      	pop	{r7, pc}
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	40021000 	.word	0x40021000

0800066c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000670:	46c0      	nop			@ (mov r8, r8)
 8000672:	e7fd      	b.n	8000670 <NMI_Handler+0x4>

08000674 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000678:	46c0      	nop			@ (mov r8, r8)
 800067a:	e7fd      	b.n	8000678 <HardFault_Handler+0x4>

0800067c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000680:	46c0      	nop			@ (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068a:	46c0      	nop			@ (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000694:	f000 fd7e 	bl	8001194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000698:	46c0      	nop			@ (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FAN_Tach_IN_0_Pin);
 80006a2:	2001      	movs	r0, #1
 80006a4:	f001 f816 	bl	80016d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(FAN_Tach_IN_1_Pin);
 80006a8:	2002      	movs	r0, #2
 80006aa:	f001 f813 	bl	80016d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FAN_Tach_IN_2_Pin);
 80006b8:	2004      	movs	r0, #4
 80006ba:	f001 f80b 	bl	80016d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(FAN_Tach_IN_3_Pin);
 80006be:	2008      	movs	r0, #8
 80006c0:	f001 f808 	bl	80016d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80006c4:	46c0      	nop			@ (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FAN_Tach_IN_4_Pin);
 80006ce:	2010      	movs	r0, #16
 80006d0:	f001 f800 	bl	80016d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(FAN_Tach_IN_5_Pin);
 80006d4:	2020      	movs	r0, #32
 80006d6:	f000 fffd 	bl	80016d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(FAN_Tach_IN_6_Pin);
 80006da:	2040      	movs	r0, #64	@ 0x40
 80006dc:	f000 fffa 	bl	80016d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(FAN_Tach_IN_7_Pin);
 80006e0:	2080      	movs	r0, #128	@ 0x80
 80006e2:	f000 fff7 	bl	80016d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(FAN_Tach_IN_8_Pin);
 80006e6:	2380      	movs	r3, #128	@ 0x80
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 fff2 	bl	80016d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(FAN_Tach_IN_9_Pin);
 80006f0:	2380      	movs	r3, #128	@ 0x80
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	0018      	movs	r0, r3
 80006f6:	f000 ffed 	bl	80016d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(FAN_Tach_IN_10_Pin);
 80006fa:	2380      	movs	r3, #128	@ 0x80
 80006fc:	00db      	lsls	r3, r3, #3
 80006fe:	0018      	movs	r0, r3
 8000700:	f000 ffe8 	bl	80016d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(FAN_Tach_IN_11_Pin);
 8000704:	2380      	movs	r3, #128	@ 0x80
 8000706:	011b      	lsls	r3, r3, #4
 8000708:	0018      	movs	r0, r3
 800070a:	f000 ffe3 	bl	80016d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800070e:	46c0      	nop			@ (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000718:	46c0      	nop			@ (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b09c      	sub	sp, #112	@ 0x70
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000726:	2360      	movs	r3, #96	@ 0x60
 8000728:	18fb      	adds	r3, r7, r3
 800072a:	0018      	movs	r0, r3
 800072c:	2310      	movs	r3, #16
 800072e:	001a      	movs	r2, r3
 8000730:	2100      	movs	r1, #0
 8000732:	f003 fb73 	bl	8003e1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000736:	2354      	movs	r3, #84	@ 0x54
 8000738:	18fb      	adds	r3, r7, r3
 800073a:	0018      	movs	r0, r3
 800073c:	230c      	movs	r3, #12
 800073e:	001a      	movs	r2, r3
 8000740:	2100      	movs	r1, #0
 8000742:	f003 fb6b 	bl	8003e1c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000746:	2338      	movs	r3, #56	@ 0x38
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	0018      	movs	r0, r3
 800074c:	231c      	movs	r3, #28
 800074e:	001a      	movs	r2, r3
 8000750:	2100      	movs	r1, #0
 8000752:	f003 fb63 	bl	8003e1c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	0018      	movs	r0, r3
 800075a:	2334      	movs	r3, #52	@ 0x34
 800075c:	001a      	movs	r2, r3
 800075e:	2100      	movs	r1, #0
 8000760:	f003 fb5c 	bl	8003e1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000764:	4b6a      	ldr	r3, [pc, #424]	@ (8000910 <MX_TIM1_Init+0x1f0>)
 8000766:	4a6b      	ldr	r2, [pc, #428]	@ (8000914 <MX_TIM1_Init+0x1f4>)
 8000768:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 25;
 800076a:	4b69      	ldr	r3, [pc, #420]	@ (8000910 <MX_TIM1_Init+0x1f0>)
 800076c:	2219      	movs	r2, #25
 800076e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000770:	4b67      	ldr	r3, [pc, #412]	@ (8000910 <MX_TIM1_Init+0x1f0>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000776:	4b66      	ldr	r3, [pc, #408]	@ (8000910 <MX_TIM1_Init+0x1f0>)
 8000778:	2263      	movs	r2, #99	@ 0x63
 800077a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077c:	4b64      	ldr	r3, [pc, #400]	@ (8000910 <MX_TIM1_Init+0x1f0>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000782:	4b63      	ldr	r3, [pc, #396]	@ (8000910 <MX_TIM1_Init+0x1f0>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000788:	4b61      	ldr	r3, [pc, #388]	@ (8000910 <MX_TIM1_Init+0x1f0>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800078e:	4b60      	ldr	r3, [pc, #384]	@ (8000910 <MX_TIM1_Init+0x1f0>)
 8000790:	0018      	movs	r0, r3
 8000792:	f001 ffc7 	bl	8002724 <HAL_TIM_Base_Init>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d001      	beq.n	800079e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800079a:	f7ff fed0 	bl	800053e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800079e:	2160      	movs	r1, #96	@ 0x60
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2280      	movs	r2, #128	@ 0x80
 80007a4:	0152      	lsls	r2, r2, #5
 80007a6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007a8:	187a      	adds	r2, r7, r1
 80007aa:	4b59      	ldr	r3, [pc, #356]	@ (8000910 <MX_TIM1_Init+0x1f0>)
 80007ac:	0011      	movs	r1, r2
 80007ae:	0018      	movs	r0, r3
 80007b0:	f002 fc1e 	bl	8002ff0 <HAL_TIM_ConfigClockSource>
 80007b4:	1e03      	subs	r3, r0, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80007b8:	f7ff fec1 	bl	800053e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007bc:	4b54      	ldr	r3, [pc, #336]	@ (8000910 <MX_TIM1_Init+0x1f0>)
 80007be:	0018      	movs	r0, r3
 80007c0:	f002 f868 	bl	8002894 <HAL_TIM_PWM_Init>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80007c8:	f7ff feb9 	bl	800053e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007cc:	2154      	movs	r1, #84	@ 0x54
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007e0:	187a      	adds	r2, r7, r1
 80007e2:	4b4b      	ldr	r3, [pc, #300]	@ (8000910 <MX_TIM1_Init+0x1f0>)
 80007e4:	0011      	movs	r1, r2
 80007e6:	0018      	movs	r0, r3
 80007e8:	f003 fa0e 	bl	8003c08 <HAL_TIMEx_MasterConfigSynchronization>
 80007ec:	1e03      	subs	r3, r0, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80007f0:	f7ff fea5 	bl	800053e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007f4:	2138      	movs	r1, #56	@ 0x38
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2260      	movs	r2, #96	@ 0x60
 80007fa:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = MC_PWM_OUT_3_PW;
 80007fc:	4b46      	ldr	r3, [pc, #280]	@ (8000918 <MX_TIM1_Init+0x1f8>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	001a      	movs	r2, r3
 8000802:	187b      	adds	r3, r7, r1
 8000804:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000824:	1879      	adds	r1, r7, r1
 8000826:	4b3a      	ldr	r3, [pc, #232]	@ (8000910 <MX_TIM1_Init+0x1f0>)
 8000828:	2200      	movs	r2, #0
 800082a:	0018      	movs	r0, r3
 800082c:	f002 fae0 	bl	8002df0 <HAL_TIM_PWM_ConfigChannel>
 8000830:	1e03      	subs	r3, r0, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000834:	f7ff fe83 	bl	800053e <Error_Handler>
  }
  sConfigOC.Pulse = MC_PWM_OUT_1_PW;
 8000838:	4b38      	ldr	r3, [pc, #224]	@ (800091c <MX_TIM1_Init+0x1fc>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	001a      	movs	r2, r3
 800083e:	2138      	movs	r1, #56	@ 0x38
 8000840:	187b      	adds	r3, r7, r1
 8000842:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000844:	1879      	adds	r1, r7, r1
 8000846:	4b32      	ldr	r3, [pc, #200]	@ (8000910 <MX_TIM1_Init+0x1f0>)
 8000848:	2204      	movs	r2, #4
 800084a:	0018      	movs	r0, r3
 800084c:	f002 fad0 	bl	8002df0 <HAL_TIM_PWM_ConfigChannel>
 8000850:	1e03      	subs	r3, r0, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000854:	f7ff fe73 	bl	800053e <Error_Handler>
  }
  sConfigOC.Pulse = MC_PWM_OUT_0_PW;
 8000858:	4b31      	ldr	r3, [pc, #196]	@ (8000920 <MX_TIM1_Init+0x200>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	001a      	movs	r2, r3
 800085e:	2138      	movs	r1, #56	@ 0x38
 8000860:	187b      	adds	r3, r7, r1
 8000862:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000864:	1879      	adds	r1, r7, r1
 8000866:	4b2a      	ldr	r3, [pc, #168]	@ (8000910 <MX_TIM1_Init+0x1f0>)
 8000868:	2208      	movs	r2, #8
 800086a:	0018      	movs	r0, r3
 800086c:	f002 fac0 	bl	8002df0 <HAL_TIM_PWM_ConfigChannel>
 8000870:	1e03      	subs	r3, r0, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8000874:	f7ff fe63 	bl	800053e <Error_Handler>
  }
  sConfigOC.Pulse = MC_PWM_OUT_2_PW;
 8000878:	4b2a      	ldr	r3, [pc, #168]	@ (8000924 <MX_TIM1_Init+0x204>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	001a      	movs	r2, r3
 800087e:	2138      	movs	r1, #56	@ 0x38
 8000880:	187b      	adds	r3, r7, r1
 8000882:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000884:	1879      	adds	r1, r7, r1
 8000886:	4b22      	ldr	r3, [pc, #136]	@ (8000910 <MX_TIM1_Init+0x1f0>)
 8000888:	220c      	movs	r2, #12
 800088a:	0018      	movs	r0, r3
 800088c:	f002 fab0 	bl	8002df0 <HAL_TIM_PWM_ConfigChannel>
 8000890:	1e03      	subs	r3, r0, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM1_Init+0x178>
  {
    Error_Handler();
 8000894:	f7ff fe53 	bl	800053e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2200      	movs	r2, #0
 80008a2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2280      	movs	r2, #128	@ 0x80
 80008ba:	0192      	lsls	r2, r2, #6
 80008bc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2280      	movs	r2, #128	@ 0x80
 80008d4:	0492      	lsls	r2, r2, #18
 80008d6:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2200      	movs	r2, #0
 80008dc:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2200      	movs	r2, #0
 80008e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2200      	movs	r2, #0
 80008e8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008ea:	1d3a      	adds	r2, r7, #4
 80008ec:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <MX_TIM1_Init+0x1f0>)
 80008ee:	0011      	movs	r1, r2
 80008f0:	0018      	movs	r0, r3
 80008f2:	f003 f9f7 	bl	8003ce4 <HAL_TIMEx_ConfigBreakDeadTime>
 80008f6:	1e03      	subs	r3, r0, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM1_Init+0x1de>
  {
    Error_Handler();
 80008fa:	f7ff fe20 	bl	800053e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008fe:	4b04      	ldr	r3, [pc, #16]	@ (8000910 <MX_TIM1_Init+0x1f0>)
 8000900:	0018      	movs	r0, r3
 8000902:	f000 fad1 	bl	8000ea8 <HAL_TIM_MspPostInit>

}
 8000906:	46c0      	nop			@ (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	b01c      	add	sp, #112	@ 0x70
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	2000006c 	.word	0x2000006c
 8000914:	40012c00 	.word	0x40012c00
 8000918:	20000010 	.word	0x20000010
 800091c:	20000008 	.word	0x20000008
 8000920:	20000004 	.word	0x20000004
 8000924:	2000000c 	.word	0x2000000c

08000928 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b092      	sub	sp, #72	@ 0x48
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092e:	2338      	movs	r3, #56	@ 0x38
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	0018      	movs	r0, r3
 8000934:	2310      	movs	r3, #16
 8000936:	001a      	movs	r2, r3
 8000938:	2100      	movs	r1, #0
 800093a:	f003 fa6f 	bl	8003e1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093e:	232c      	movs	r3, #44	@ 0x2c
 8000940:	18fb      	adds	r3, r7, r3
 8000942:	0018      	movs	r0, r3
 8000944:	230c      	movs	r3, #12
 8000946:	001a      	movs	r2, r3
 8000948:	2100      	movs	r1, #0
 800094a:	f003 fa67 	bl	8003e1c <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800094e:	231c      	movs	r3, #28
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	0018      	movs	r0, r3
 8000954:	2310      	movs	r3, #16
 8000956:	001a      	movs	r2, r3
 8000958:	2100      	movs	r1, #0
 800095a:	f003 fa5f 	bl	8003e1c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800095e:	003b      	movs	r3, r7
 8000960:	0018      	movs	r0, r3
 8000962:	231c      	movs	r3, #28
 8000964:	001a      	movs	r2, r3
 8000966:	2100      	movs	r1, #0
 8000968:	f003 fa58 	bl	8003e1c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800096c:	4b4b      	ldr	r3, [pc, #300]	@ (8000a9c <MX_TIM2_Init+0x174>)
 800096e:	2280      	movs	r2, #128	@ 0x80
 8000970:	05d2      	lsls	r2, r2, #23
 8000972:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25;
 8000974:	4b49      	ldr	r3, [pc, #292]	@ (8000a9c <MX_TIM2_Init+0x174>)
 8000976:	2219      	movs	r2, #25
 8000978:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097a:	4b48      	ldr	r3, [pc, #288]	@ (8000a9c <MX_TIM2_Init+0x174>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000980:	4b46      	ldr	r3, [pc, #280]	@ (8000a9c <MX_TIM2_Init+0x174>)
 8000982:	2263      	movs	r2, #99	@ 0x63
 8000984:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000986:	4b45      	ldr	r3, [pc, #276]	@ (8000a9c <MX_TIM2_Init+0x174>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098c:	4b43      	ldr	r3, [pc, #268]	@ (8000a9c <MX_TIM2_Init+0x174>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000992:	4b42      	ldr	r3, [pc, #264]	@ (8000a9c <MX_TIM2_Init+0x174>)
 8000994:	0018      	movs	r0, r3
 8000996:	f001 fec5 	bl	8002724 <HAL_TIM_Base_Init>
 800099a:	1e03      	subs	r3, r0, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800099e:	f7ff fdce 	bl	800053e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a2:	2138      	movs	r1, #56	@ 0x38
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2280      	movs	r2, #128	@ 0x80
 80009a8:	0152      	lsls	r2, r2, #5
 80009aa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ac:	187a      	adds	r2, r7, r1
 80009ae:	4b3b      	ldr	r3, [pc, #236]	@ (8000a9c <MX_TIM2_Init+0x174>)
 80009b0:	0011      	movs	r1, r2
 80009b2:	0018      	movs	r0, r3
 80009b4:	f002 fb1c 	bl	8002ff0 <HAL_TIM_ConfigClockSource>
 80009b8:	1e03      	subs	r3, r0, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80009bc:	f7ff fdbf 	bl	800053e <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80009c0:	4b36      	ldr	r3, [pc, #216]	@ (8000a9c <MX_TIM2_Init+0x174>)
 80009c2:	0018      	movs	r0, r3
 80009c4:	f002 f8b0 	bl	8002b28 <HAL_TIM_IC_Init>
 80009c8:	1e03      	subs	r3, r0, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80009cc:	f7ff fdb7 	bl	800053e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009d0:	4b32      	ldr	r3, [pc, #200]	@ (8000a9c <MX_TIM2_Init+0x174>)
 80009d2:	0018      	movs	r0, r3
 80009d4:	f001 ff5e 	bl	8002894 <HAL_TIM_PWM_Init>
 80009d8:	1e03      	subs	r3, r0, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 80009dc:	f7ff fdaf 	bl	800053e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e0:	212c      	movs	r1, #44	@ 0x2c
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ee:	187a      	adds	r2, r7, r1
 80009f0:	4b2a      	ldr	r3, [pc, #168]	@ (8000a9c <MX_TIM2_Init+0x174>)
 80009f2:	0011      	movs	r1, r2
 80009f4:	0018      	movs	r0, r3
 80009f6:	f003 f907 	bl	8003c08 <HAL_TIMEx_MasterConfigSynchronization>
 80009fa:	1e03      	subs	r3, r0, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80009fe:	f7ff fd9e 	bl	800053e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a02:	211c      	movs	r1, #28
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a1c:	1879      	adds	r1, r7, r1
 8000a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a9c <MX_TIM2_Init+0x174>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	0018      	movs	r0, r3
 8000a24:	f002 f940 	bl	8002ca8 <HAL_TIM_IC_ConfigChannel>
 8000a28:	1e03      	subs	r3, r0, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000a2c:	f7ff fd87 	bl	800053e <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000a30:	231c      	movs	r3, #28
 8000a32:	18f9      	adds	r1, r7, r3
 8000a34:	4b19      	ldr	r3, [pc, #100]	@ (8000a9c <MX_TIM2_Init+0x174>)
 8000a36:	2204      	movs	r2, #4
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f002 f935 	bl	8002ca8 <HAL_TIM_IC_ConfigChannel>
 8000a3e:	1e03      	subs	r3, r0, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM2_Init+0x11e>
  {
    Error_Handler();
 8000a42:	f7ff fd7c 	bl	800053e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a46:	003b      	movs	r3, r7
 8000a48:	2260      	movs	r2, #96	@ 0x60
 8000a4a:	601a      	str	r2, [r3, #0]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a4c:	003b      	movs	r3, r7
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a52:	003b      	movs	r3, r7
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a58:	0039      	movs	r1, r7
 8000a5a:	4b10      	ldr	r3, [pc, #64]	@ (8000a9c <MX_TIM2_Init+0x174>)
 8000a5c:	2208      	movs	r2, #8
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f002 f9c6 	bl	8002df0 <HAL_TIM_PWM_ConfigChannel>
 8000a64:	1e03      	subs	r3, r0, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM2_Init+0x144>
  {
    Error_Handler();
 8000a68:	f7ff fd69 	bl	800053e <Error_Handler>
  }
  sConfigOC.Pulse = MC_PWM_OUT_4_PW;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa0 <MX_TIM2_Init+0x178>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	001a      	movs	r2, r3
 8000a72:	003b      	movs	r3, r7
 8000a74:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a76:	0039      	movs	r1, r7
 8000a78:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <MX_TIM2_Init+0x174>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f002 f9b7 	bl	8002df0 <HAL_TIM_PWM_ConfigChannel>
 8000a82:	1e03      	subs	r3, r0, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM2_Init+0x162>
  {
    Error_Handler();
 8000a86:	f7ff fd5a 	bl	800053e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a8a:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <MX_TIM2_Init+0x174>)
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f000 fa0b 	bl	8000ea8 <HAL_TIM_MspPostInit>

}
 8000a92:	46c0      	nop			@ (mov r8, r8)
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b012      	add	sp, #72	@ 0x48
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			@ (mov r8, r8)
 8000a9c:	200000b8 	.word	0x200000b8
 8000aa0:	20000014 	.word	0x20000014

08000aa4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08c      	sub	sp, #48	@ 0x30
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aaa:	2320      	movs	r3, #32
 8000aac:	18fb      	adds	r3, r7, r3
 8000aae:	0018      	movs	r0, r3
 8000ab0:	2310      	movs	r3, #16
 8000ab2:	001a      	movs	r2, r3
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f003 f9b1 	bl	8003e1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aba:	2314      	movs	r3, #20
 8000abc:	18fb      	adds	r3, r7, r3
 8000abe:	0018      	movs	r0, r3
 8000ac0:	230c      	movs	r3, #12
 8000ac2:	001a      	movs	r2, r3
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	f003 f9a9 	bl	8003e1c <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	0018      	movs	r0, r3
 8000ace:	2310      	movs	r3, #16
 8000ad0:	001a      	movs	r2, r3
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	f003 f9a2 	bl	8003e1c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ad8:	4b3c      	ldr	r3, [pc, #240]	@ (8000bcc <MX_TIM3_Init+0x128>)
 8000ada:	4a3d      	ldr	r2, [pc, #244]	@ (8000bd0 <MX_TIM3_Init+0x12c>)
 8000adc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 25;
 8000ade:	4b3b      	ldr	r3, [pc, #236]	@ (8000bcc <MX_TIM3_Init+0x128>)
 8000ae0:	2219      	movs	r2, #25
 8000ae2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae4:	4b39      	ldr	r3, [pc, #228]	@ (8000bcc <MX_TIM3_Init+0x128>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000aea:	4b38      	ldr	r3, [pc, #224]	@ (8000bcc <MX_TIM3_Init+0x128>)
 8000aec:	2263      	movs	r2, #99	@ 0x63
 8000aee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af0:	4b36      	ldr	r3, [pc, #216]	@ (8000bcc <MX_TIM3_Init+0x128>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af6:	4b35      	ldr	r3, [pc, #212]	@ (8000bcc <MX_TIM3_Init+0x128>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000afc:	4b33      	ldr	r3, [pc, #204]	@ (8000bcc <MX_TIM3_Init+0x128>)
 8000afe:	0018      	movs	r0, r3
 8000b00:	f001 fe10 	bl	8002724 <HAL_TIM_Base_Init>
 8000b04:	1e03      	subs	r3, r0, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000b08:	f7ff fd19 	bl	800053e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b0c:	2120      	movs	r1, #32
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2280      	movs	r2, #128	@ 0x80
 8000b12:	0152      	lsls	r2, r2, #5
 8000b14:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b16:	187a      	adds	r2, r7, r1
 8000b18:	4b2c      	ldr	r3, [pc, #176]	@ (8000bcc <MX_TIM3_Init+0x128>)
 8000b1a:	0011      	movs	r1, r2
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f002 fa67 	bl	8002ff0 <HAL_TIM_ConfigClockSource>
 8000b22:	1e03      	subs	r3, r0, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000b26:	f7ff fd0a 	bl	800053e <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000b2a:	4b28      	ldr	r3, [pc, #160]	@ (8000bcc <MX_TIM3_Init+0x128>)
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f001 fffb 	bl	8002b28 <HAL_TIM_IC_Init>
 8000b32:	1e03      	subs	r3, r0, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000b36:	f7ff fd02 	bl	800053e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3a:	2114      	movs	r1, #20
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b48:	187a      	adds	r2, r7, r1
 8000b4a:	4b20      	ldr	r3, [pc, #128]	@ (8000bcc <MX_TIM3_Init+0x128>)
 8000b4c:	0011      	movs	r1, r2
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f003 f85a 	bl	8003c08 <HAL_TIMEx_MasterConfigSynchronization>
 8000b54:	1e03      	subs	r3, r0, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000b58:	f7ff fcf1 	bl	800053e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2201      	movs	r2, #1
 8000b66:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b74:	1d39      	adds	r1, r7, #4
 8000b76:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <MX_TIM3_Init+0x128>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f002 f894 	bl	8002ca8 <HAL_TIM_IC_ConfigChannel>
 8000b80:	1e03      	subs	r3, r0, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000b84:	f7ff fcdb 	bl	800053e <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b88:	1d39      	adds	r1, r7, #4
 8000b8a:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <MX_TIM3_Init+0x128>)
 8000b8c:	2204      	movs	r2, #4
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f002 f88a 	bl	8002ca8 <HAL_TIM_IC_ConfigChannel>
 8000b94:	1e03      	subs	r3, r0, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8000b98:	f7ff fcd1 	bl	800053e <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000b9c:	1d39      	adds	r1, r7, #4
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <MX_TIM3_Init+0x128>)
 8000ba0:	2208      	movs	r2, #8
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f002 f880 	bl	8002ca8 <HAL_TIM_IC_ConfigChannel>
 8000ba8:	1e03      	subs	r3, r0, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 8000bac:	f7ff fcc7 	bl	800053e <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000bb0:	1d39      	adds	r1, r7, #4
 8000bb2:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <MX_TIM3_Init+0x128>)
 8000bb4:	220c      	movs	r2, #12
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f002 f876 	bl	8002ca8 <HAL_TIM_IC_ConfigChannel>
 8000bbc:	1e03      	subs	r3, r0, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 8000bc0:	f7ff fcbd 	bl	800053e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bc4:	46c0      	nop			@ (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b00c      	add	sp, #48	@ 0x30
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000104 	.word	0x20000104
 8000bd0:	40000400 	.word	0x40000400

08000bd4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b094      	sub	sp, #80	@ 0x50
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bda:	2334      	movs	r3, #52	@ 0x34
 8000bdc:	18fb      	adds	r3, r7, r3
 8000bde:	0018      	movs	r0, r3
 8000be0:	231c      	movs	r3, #28
 8000be2:	001a      	movs	r2, r3
 8000be4:	2100      	movs	r1, #0
 8000be6:	f003 f919 	bl	8003e1c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bea:	003b      	movs	r3, r7
 8000bec:	0018      	movs	r0, r3
 8000bee:	2334      	movs	r3, #52	@ 0x34
 8000bf0:	001a      	movs	r2, r3
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	f003 f912 	bl	8003e1c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000bf8:	4b35      	ldr	r3, [pc, #212]	@ (8000cd0 <MX_TIM16_Init+0xfc>)
 8000bfa:	4a36      	ldr	r2, [pc, #216]	@ (8000cd4 <MX_TIM16_Init+0x100>)
 8000bfc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000bfe:	4b34      	ldr	r3, [pc, #208]	@ (8000cd0 <MX_TIM16_Init+0xfc>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c04:	4b32      	ldr	r3, [pc, #200]	@ (8000cd0 <MX_TIM16_Init+0xfc>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000c0a:	4b31      	ldr	r3, [pc, #196]	@ (8000cd0 <MX_TIM16_Init+0xfc>)
 8000c0c:	4a32      	ldr	r2, [pc, #200]	@ (8000cd8 <MX_TIM16_Init+0x104>)
 8000c0e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c10:	4b2f      	ldr	r3, [pc, #188]	@ (8000cd0 <MX_TIM16_Init+0xfc>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000c16:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd0 <MX_TIM16_Init+0xfc>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000cd0 <MX_TIM16_Init+0xfc>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000c22:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd0 <MX_TIM16_Init+0xfc>)
 8000c24:	0018      	movs	r0, r3
 8000c26:	f001 fd7d 	bl	8002724 <HAL_TIM_Base_Init>
 8000c2a:	1e03      	subs	r3, r0, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8000c2e:	f7ff fc86 	bl	800053e <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8000c32:	4b27      	ldr	r3, [pc, #156]	@ (8000cd0 <MX_TIM16_Init+0xfc>)
 8000c34:	0018      	movs	r0, r3
 8000c36:	f001 fdcd 	bl	80027d4 <HAL_TIM_OC_Init>
 8000c3a:	1e03      	subs	r3, r0, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8000c3e:	f7ff fc7e 	bl	800053e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000c42:	2134      	movs	r1, #52	@ 0x34
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2200      	movs	r2, #0
 8000c5a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2200      	movs	r2, #0
 8000c66:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c6e:	1879      	adds	r1, r7, r1
 8000c70:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <MX_TIM16_Init+0xfc>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	0018      	movs	r0, r3
 8000c76:	f001 ffb7 	bl	8002be8 <HAL_TIM_OC_ConfigChannel>
 8000c7a:	1e03      	subs	r3, r0, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8000c7e:	f7ff fc5e 	bl	800053e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c82:	003b      	movs	r3, r7
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c88:	003b      	movs	r3, r7
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c8e:	003b      	movs	r3, r7
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c94:	003b      	movs	r3, r7
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c9a:	003b      	movs	r3, r7
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ca0:	003b      	movs	r3, r7
 8000ca2:	2280      	movs	r2, #128	@ 0x80
 8000ca4:	0192      	lsls	r2, r2, #6
 8000ca6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ca8:	003b      	movs	r3, r7
 8000caa:	2200      	movs	r2, #0
 8000cac:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cae:	003b      	movs	r3, r7
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000cb4:	003a      	movs	r2, r7
 8000cb6:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <MX_TIM16_Init+0xfc>)
 8000cb8:	0011      	movs	r1, r2
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f003 f812 	bl	8003ce4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cc0:	1e03      	subs	r3, r0, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8000cc4:	f7ff fc3b 	bl	800053e <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000cc8:	46c0      	nop			@ (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b014      	add	sp, #80	@ 0x50
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000150 	.word	0x20000150
 8000cd4:	40014400 	.word	0x40014400
 8000cd8:	0000ffff 	.word	0x0000ffff

08000cdc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cdc:	b590      	push	{r4, r7, lr}
 8000cde:	b09d      	sub	sp, #116	@ 0x74
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	235c      	movs	r3, #92	@ 0x5c
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	0018      	movs	r0, r3
 8000cea:	2314      	movs	r3, #20
 8000cec:	001a      	movs	r2, r3
 8000cee:	2100      	movs	r1, #0
 8000cf0:	f003 f894 	bl	8003e1c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cf4:	2428      	movs	r4, #40	@ 0x28
 8000cf6:	193b      	adds	r3, r7, r4
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	2334      	movs	r3, #52	@ 0x34
 8000cfc:	001a      	movs	r2, r3
 8000cfe:	2100      	movs	r1, #0
 8000d00:	f003 f88c 	bl	8003e1c <memset>
  if(tim_baseHandle->Instance==TIM1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a62      	ldr	r2, [pc, #392]	@ (8000e94 <HAL_TIM_Base_MspInit+0x1b8>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d11d      	bne.n	8000d4a <HAL_TIM_Base_MspInit+0x6e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000d0e:	193b      	adds	r3, r7, r4
 8000d10:	2280      	movs	r2, #128	@ 0x80
 8000d12:	0392      	lsls	r2, r2, #14
 8000d14:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000d16:	193b      	adds	r3, r7, r4
 8000d18:	2200      	movs	r2, #0
 8000d1a:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d1c:	193b      	adds	r3, r7, r4
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f001 f9fa 	bl	8002118 <HAL_RCCEx_PeriphCLKConfig>
 8000d24:	1e03      	subs	r3, r0, #0
 8000d26:	d001      	beq.n	8000d2c <HAL_TIM_Base_MspInit+0x50>
    {
      Error_Handler();
 8000d28:	f7ff fc09 	bl	800053e <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d2c:	4b5a      	ldr	r3, [pc, #360]	@ (8000e98 <HAL_TIM_Base_MspInit+0x1bc>)
 8000d2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d30:	4b59      	ldr	r3, [pc, #356]	@ (8000e98 <HAL_TIM_Base_MspInit+0x1bc>)
 8000d32:	2180      	movs	r1, #128	@ 0x80
 8000d34:	0109      	lsls	r1, r1, #4
 8000d36:	430a      	orrs	r2, r1
 8000d38:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d3a:	4b57      	ldr	r3, [pc, #348]	@ (8000e98 <HAL_TIM_Base_MspInit+0x1bc>)
 8000d3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d3e:	2380      	movs	r3, #128	@ 0x80
 8000d40:	011b      	lsls	r3, r3, #4
 8000d42:	4013      	ands	r3, r2
 8000d44:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000d48:	e09f      	b.n	8000e8a <HAL_TIM_Base_MspInit+0x1ae>
  else if(tim_baseHandle->Instance==TIM2)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	2380      	movs	r3, #128	@ 0x80
 8000d50:	05db      	lsls	r3, r3, #23
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d12f      	bne.n	8000db6 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d56:	4b50      	ldr	r3, [pc, #320]	@ (8000e98 <HAL_TIM_Base_MspInit+0x1bc>)
 8000d58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d5a:	4b4f      	ldr	r3, [pc, #316]	@ (8000e98 <HAL_TIM_Base_MspInit+0x1bc>)
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d62:	4b4d      	ldr	r3, [pc, #308]	@ (8000e98 <HAL_TIM_Base_MspInit+0x1bc>)
 8000d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d66:	2201      	movs	r2, #1
 8000d68:	4013      	ands	r3, r2
 8000d6a:	623b      	str	r3, [r7, #32]
 8000d6c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	4b4a      	ldr	r3, [pc, #296]	@ (8000e98 <HAL_TIM_Base_MspInit+0x1bc>)
 8000d70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d72:	4b49      	ldr	r3, [pc, #292]	@ (8000e98 <HAL_TIM_Base_MspInit+0x1bc>)
 8000d74:	2101      	movs	r1, #1
 8000d76:	430a      	orrs	r2, r1
 8000d78:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d7a:	4b47      	ldr	r3, [pc, #284]	@ (8000e98 <HAL_TIM_Base_MspInit+0x1bc>)
 8000d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d7e:	2201      	movs	r2, #1
 8000d80:	4013      	ands	r3, r2
 8000d82:	61fb      	str	r3, [r7, #28]
 8000d84:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = Buf_PWM_IN_5_Pin|Buf_PWM_IN_4_Pin;
 8000d86:	215c      	movs	r1, #92	@ 0x5c
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	2202      	movs	r2, #2
 8000d92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2201      	movs	r2, #1
 8000d98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	2202      	movs	r2, #2
 8000da4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	187a      	adds	r2, r7, r1
 8000da8:	23a0      	movs	r3, #160	@ 0xa0
 8000daa:	05db      	lsls	r3, r3, #23
 8000dac:	0011      	movs	r1, r2
 8000dae:	0018      	movs	r0, r3
 8000db0:	f000 fb0e 	bl	80013d0 <HAL_GPIO_Init>
}
 8000db4:	e069      	b.n	8000e8a <HAL_TIM_Base_MspInit+0x1ae>
  else if(tim_baseHandle->Instance==TIM3)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a38      	ldr	r2, [pc, #224]	@ (8000e9c <HAL_TIM_Base_MspInit+0x1c0>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d151      	bne.n	8000e64 <HAL_TIM_Base_MspInit+0x188>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dc0:	4b35      	ldr	r3, [pc, #212]	@ (8000e98 <HAL_TIM_Base_MspInit+0x1bc>)
 8000dc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dc4:	4b34      	ldr	r3, [pc, #208]	@ (8000e98 <HAL_TIM_Base_MspInit+0x1bc>)
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dcc:	4b32      	ldr	r3, [pc, #200]	@ (8000e98 <HAL_TIM_Base_MspInit+0x1bc>)
 8000dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
 8000dd6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	4b2f      	ldr	r3, [pc, #188]	@ (8000e98 <HAL_TIM_Base_MspInit+0x1bc>)
 8000dda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ddc:	4b2e      	ldr	r3, [pc, #184]	@ (8000e98 <HAL_TIM_Base_MspInit+0x1bc>)
 8000dde:	2101      	movs	r1, #1
 8000de0:	430a      	orrs	r2, r1
 8000de2:	635a      	str	r2, [r3, #52]	@ 0x34
 8000de4:	4b2c      	ldr	r3, [pc, #176]	@ (8000e98 <HAL_TIM_Base_MspInit+0x1bc>)
 8000de6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000de8:	2201      	movs	r2, #1
 8000dea:	4013      	ands	r3, r2
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df0:	4b29      	ldr	r3, [pc, #164]	@ (8000e98 <HAL_TIM_Base_MspInit+0x1bc>)
 8000df2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000df4:	4b28      	ldr	r3, [pc, #160]	@ (8000e98 <HAL_TIM_Base_MspInit+0x1bc>)
 8000df6:	2102      	movs	r1, #2
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dfc:	4b26      	ldr	r3, [pc, #152]	@ (8000e98 <HAL_TIM_Base_MspInit+0x1bc>)
 8000dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e00:	2202      	movs	r2, #2
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Buf_PWM_IN_3_Pin|Buf_PWM_IN_2_Pin;
 8000e08:	245c      	movs	r4, #92	@ 0x5c
 8000e0a:	193b      	adds	r3, r7, r4
 8000e0c:	22c0      	movs	r2, #192	@ 0xc0
 8000e0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	193b      	adds	r3, r7, r4
 8000e12:	2202      	movs	r2, #2
 8000e14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e16:	193b      	adds	r3, r7, r4
 8000e18:	2201      	movs	r2, #1
 8000e1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e1c:	193b      	adds	r3, r7, r4
 8000e1e:	2202      	movs	r2, #2
 8000e20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000e22:	193b      	adds	r3, r7, r4
 8000e24:	2201      	movs	r2, #1
 8000e26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e28:	193a      	adds	r2, r7, r4
 8000e2a:	23a0      	movs	r3, #160	@ 0xa0
 8000e2c:	05db      	lsls	r3, r3, #23
 8000e2e:	0011      	movs	r1, r2
 8000e30:	0018      	movs	r0, r3
 8000e32:	f000 facd 	bl	80013d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Buf_PWM_IN_1_Pin|Buf_PWM_IN_0_Pin;
 8000e36:	0021      	movs	r1, r4
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	2202      	movs	r2, #2
 8000e42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2201      	movs	r2, #1
 8000e48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	2201      	movs	r2, #1
 8000e54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e56:	187b      	adds	r3, r7, r1
 8000e58:	4a11      	ldr	r2, [pc, #68]	@ (8000ea0 <HAL_TIM_Base_MspInit+0x1c4>)
 8000e5a:	0019      	movs	r1, r3
 8000e5c:	0010      	movs	r0, r2
 8000e5e:	f000 fab7 	bl	80013d0 <HAL_GPIO_Init>
}
 8000e62:	e012      	b.n	8000e8a <HAL_TIM_Base_MspInit+0x1ae>
  else if(tim_baseHandle->Instance==TIM16)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0e      	ldr	r2, [pc, #56]	@ (8000ea4 <HAL_TIM_Base_MspInit+0x1c8>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d10d      	bne.n	8000e8a <HAL_TIM_Base_MspInit+0x1ae>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e98 <HAL_TIM_Base_MspInit+0x1bc>)
 8000e70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e72:	4b09      	ldr	r3, [pc, #36]	@ (8000e98 <HAL_TIM_Base_MspInit+0x1bc>)
 8000e74:	2180      	movs	r1, #128	@ 0x80
 8000e76:	0289      	lsls	r1, r1, #10
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e7c:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_TIM_Base_MspInit+0x1bc>)
 8000e7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e80:	2380      	movs	r3, #128	@ 0x80
 8000e82:	029b      	lsls	r3, r3, #10
 8000e84:	4013      	ands	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
}
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b01d      	add	sp, #116	@ 0x74
 8000e90:	bd90      	pop	{r4, r7, pc}
 8000e92:	46c0      	nop			@ (mov r8, r8)
 8000e94:	40012c00 	.word	0x40012c00
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40000400 	.word	0x40000400
 8000ea0:	50000400 	.word	0x50000400
 8000ea4:	40014400 	.word	0x40014400

08000ea8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b08b      	sub	sp, #44	@ 0x2c
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	2414      	movs	r4, #20
 8000eb2:	193b      	adds	r3, r7, r4
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	2314      	movs	r3, #20
 8000eb8:	001a      	movs	r2, r3
 8000eba:	2100      	movs	r1, #0
 8000ebc:	f002 ffae 	bl	8003e1c <memset>
  if(timHandle->Instance==TIM1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a3a      	ldr	r2, [pc, #232]	@ (8000fb0 <HAL_TIM_MspPostInit+0x108>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d145      	bne.n	8000f56 <HAL_TIM_MspPostInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	4b3a      	ldr	r3, [pc, #232]	@ (8000fb4 <HAL_TIM_MspPostInit+0x10c>)
 8000ecc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ece:	4b39      	ldr	r3, [pc, #228]	@ (8000fb4 <HAL_TIM_MspPostInit+0x10c>)
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ed6:	4b37      	ldr	r3, [pc, #220]	@ (8000fb4 <HAL_TIM_MspPostInit+0x10c>)
 8000ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000eda:	2201      	movs	r2, #1
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee2:	4b34      	ldr	r3, [pc, #208]	@ (8000fb4 <HAL_TIM_MspPostInit+0x10c>)
 8000ee4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ee6:	4b33      	ldr	r3, [pc, #204]	@ (8000fb4 <HAL_TIM_MspPostInit+0x10c>)
 8000ee8:	2102      	movs	r1, #2
 8000eea:	430a      	orrs	r2, r1
 8000eec:	635a      	str	r2, [r3, #52]	@ 0x34
 8000eee:	4b31      	ldr	r3, [pc, #196]	@ (8000fb4 <HAL_TIM_MspPostInit+0x10c>)
 8000ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA11 [PA9]     ------> TIM1_CH4
    PB3     ------> TIM1_CH2
    PB6     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = MC_PWM_OUT_3_Pin|MC_PWM_OUT_2_Pin;
 8000efa:	193b      	adds	r3, r7, r4
 8000efc:	2290      	movs	r2, #144	@ 0x90
 8000efe:	0112      	lsls	r2, r2, #4
 8000f00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	193b      	adds	r3, r7, r4
 8000f04:	2202      	movs	r2, #2
 8000f06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f08:	193b      	adds	r3, r7, r4
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f0e:	193b      	adds	r3, r7, r4
 8000f10:	2202      	movs	r2, #2
 8000f12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000f14:	193b      	adds	r3, r7, r4
 8000f16:	2202      	movs	r2, #2
 8000f18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	193a      	adds	r2, r7, r4
 8000f1c:	23a0      	movs	r3, #160	@ 0xa0
 8000f1e:	05db      	lsls	r3, r3, #23
 8000f20:	0011      	movs	r1, r2
 8000f22:	0018      	movs	r0, r3
 8000f24:	f000 fa54 	bl	80013d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MC_PWM_OUT_1_Pin|MC_PWM_OUT_0_Pin;
 8000f28:	0021      	movs	r1, r4
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	2248      	movs	r2, #72	@ 0x48
 8000f2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	2202      	movs	r2, #2
 8000f34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	2201      	movs	r2, #1
 8000f3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f3c:	187b      	adds	r3, r7, r1
 8000f3e:	2202      	movs	r2, #2
 8000f40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f42:	187b      	adds	r3, r7, r1
 8000f44:	2201      	movs	r2, #1
 8000f46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	4a1b      	ldr	r2, [pc, #108]	@ (8000fb8 <HAL_TIM_MspPostInit+0x110>)
 8000f4c:	0019      	movs	r1, r3
 8000f4e:	0010      	movs	r0, r2
 8000f50:	f000 fa3e 	bl	80013d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f54:	e028      	b.n	8000fa8 <HAL_TIM_MspPostInit+0x100>
  else if(timHandle->Instance==TIM2)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	2380      	movs	r3, #128	@ 0x80
 8000f5c:	05db      	lsls	r3, r3, #23
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d122      	bne.n	8000fa8 <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	4b14      	ldr	r3, [pc, #80]	@ (8000fb4 <HAL_TIM_MspPostInit+0x10c>)
 8000f64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f66:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <HAL_TIM_MspPostInit+0x10c>)
 8000f68:	2101      	movs	r1, #1
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f6e:	4b11      	ldr	r3, [pc, #68]	@ (8000fb4 <HAL_TIM_MspPostInit+0x10c>)
 8000f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f72:	2201      	movs	r2, #1
 8000f74:	4013      	ands	r3, r2
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MC_PWM_OUT_5_Pin|MC_PWM_OUT_4_Pin;
 8000f7a:	2114      	movs	r1, #20
 8000f7c:	187b      	adds	r3, r7, r1
 8000f7e:	220c      	movs	r2, #12
 8000f80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	187b      	adds	r3, r7, r1
 8000f84:	2202      	movs	r2, #2
 8000f86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f88:	187b      	adds	r3, r7, r1
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f8e:	187b      	adds	r3, r7, r1
 8000f90:	2202      	movs	r2, #2
 8000f92:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	2202      	movs	r2, #2
 8000f98:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9a:	187a      	adds	r2, r7, r1
 8000f9c:	23a0      	movs	r3, #160	@ 0xa0
 8000f9e:	05db      	lsls	r3, r3, #23
 8000fa0:	0011      	movs	r1, r2
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f000 fa14 	bl	80013d0 <HAL_GPIO_Init>
}
 8000fa8:	46c0      	nop			@ (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b00b      	add	sp, #44	@ 0x2c
 8000fae:	bd90      	pop	{r4, r7, pc}
 8000fb0:	40012c00 	.word	0x40012c00
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	50000400 	.word	0x50000400

08000fbc <adjust_PWM>:
  }
 tim3Ch4.lastCapture = currentCapture;
 }
}
void adjust_PWM()
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, MC_PWM_OUT_3_PW);
 8000fc0:	4b10      	ldr	r3, [pc, #64]	@ (8001004 <adjust_PWM+0x48>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b10      	ldr	r3, [pc, #64]	@ (8001008 <adjust_PWM+0x4c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	635a      	str	r2, [r3, #52]	@ 0x34
__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, MC_PWM_OUT_1_PW);
 8000fca:	4b10      	ldr	r3, [pc, #64]	@ (800100c <adjust_PWM+0x50>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	4b0e      	ldr	r3, [pc, #56]	@ (8001008 <adjust_PWM+0x4c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	639a      	str	r2, [r3, #56]	@ 0x38
__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, MC_PWM_OUT_0_PW);
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <adjust_PWM+0x54>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001008 <adjust_PWM+0x4c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	63da      	str	r2, [r3, #60]	@ 0x3c
__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, MC_PWM_OUT_2_PW);
 8000fde:	4b0d      	ldr	r3, [pc, #52]	@ (8001014 <adjust_PWM+0x58>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	4b09      	ldr	r3, [pc, #36]	@ (8001008 <adjust_PWM+0x4c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	641a      	str	r2, [r3, #64]	@ 0x40
__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, MC_PWM_OUT_5_PW);
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8001018 <adjust_PWM+0x5c>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <adjust_PWM+0x60>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	63da      	str	r2, [r3, #60]	@ 0x3c
__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, MC_PWM_OUT_4_PW);
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8001020 <adjust_PWM+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	4b09      	ldr	r3, [pc, #36]	@ (800101c <adjust_PWM+0x60>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000ffc:	46c0      	nop			@ (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	46c0      	nop			@ (mov r8, r8)
 8001004:	20000010 	.word	0x20000010
 8001008:	2000006c 	.word	0x2000006c
 800100c:	20000008 	.word	0x20000008
 8001010:	20000004 	.word	0x20000004
 8001014:	2000000c 	.word	0x2000000c
 8001018:	20000018 	.word	0x20000018
 800101c:	200000b8 	.word	0x200000b8
 8001020:	20000014 	.word	0x20000014

08001024 <set_PWM>:

void set_PWM()
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0

	MC_PWM_OUT_0_PW = 75;
 8001028:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <set_PWM+0x30>)
 800102a:	224b      	movs	r2, #75	@ 0x4b
 800102c:	601a      	str	r2, [r3, #0]
	MC_PWM_OUT_1_PW = 75;
 800102e:	4b0a      	ldr	r3, [pc, #40]	@ (8001058 <set_PWM+0x34>)
 8001030:	224b      	movs	r2, #75	@ 0x4b
 8001032:	601a      	str	r2, [r3, #0]
	MC_PWM_OUT_2_PW = 75;
 8001034:	4b09      	ldr	r3, [pc, #36]	@ (800105c <set_PWM+0x38>)
 8001036:	224b      	movs	r2, #75	@ 0x4b
 8001038:	601a      	str	r2, [r3, #0]
	MC_PWM_OUT_3_PW = 75;
 800103a:	4b09      	ldr	r3, [pc, #36]	@ (8001060 <set_PWM+0x3c>)
 800103c:	224b      	movs	r2, #75	@ 0x4b
 800103e:	601a      	str	r2, [r3, #0]
	MC_PWM_OUT_4_PW = 75;
 8001040:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <set_PWM+0x40>)
 8001042:	224b      	movs	r2, #75	@ 0x4b
 8001044:	601a      	str	r2, [r3, #0]
	MC_PWM_OUT_5_PW = 75;
 8001046:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <set_PWM+0x44>)
 8001048:	224b      	movs	r2, #75	@ 0x4b
 800104a:	601a      	str	r2, [r3, #0]

}
 800104c:	46c0      	nop			@ (mov r8, r8)
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	46c0      	nop			@ (mov r8, r8)
 8001054:	20000004 	.word	0x20000004
 8001058:	20000008 	.word	0x20000008
 800105c:	2000000c 	.word	0x2000000c
 8001060:	20000010 	.word	0x20000010
 8001064:	20000014 	.word	0x20000014
 8001068:	20000018 	.word	0x20000018

0800106c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800106c:	480d      	ldr	r0, [pc, #52]	@ (80010a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800106e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001070:	f7ff fb50 	bl	8000714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001074:	480c      	ldr	r0, [pc, #48]	@ (80010a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001076:	490d      	ldr	r1, [pc, #52]	@ (80010ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001078:	4a0d      	ldr	r2, [pc, #52]	@ (80010b0 <LoopForever+0xe>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800107c:	e002      	b.n	8001084 <LoopCopyDataInit>

0800107e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001082:	3304      	adds	r3, #4

08001084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001088:	d3f9      	bcc.n	800107e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108a:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800108c:	4c0a      	ldr	r4, [pc, #40]	@ (80010b8 <LoopForever+0x16>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001090:	e001      	b.n	8001096 <LoopFillZerobss>

08001092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001094:	3204      	adds	r2, #4

08001096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001098:	d3fb      	bcc.n	8001092 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800109a:	f002 fec7 	bl	8003e2c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800109e:	f7ff f9af 	bl	8000400 <main>

080010a2 <LoopForever>:

LoopForever:
  b LoopForever
 80010a2:	e7fe      	b.n	80010a2 <LoopForever>
  ldr   r0, =_estack
 80010a4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ac:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80010b0:	08003f7c 	.word	0x08003f7c
  ldr r2, =_sbss
 80010b4:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80010b8:	200001a0 	.word	0x200001a0

080010bc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC1_COMP_IRQHandler>
	...

080010c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010c6:	1dfb      	adds	r3, r7, #7
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010cc:	4b0b      	ldr	r3, [pc, #44]	@ (80010fc <HAL_Init+0x3c>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b0a      	ldr	r3, [pc, #40]	@ (80010fc <HAL_Init+0x3c>)
 80010d2:	2180      	movs	r1, #128	@ 0x80
 80010d4:	0049      	lsls	r1, r1, #1
 80010d6:	430a      	orrs	r2, r1
 80010d8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010da:	2003      	movs	r0, #3
 80010dc:	f000 f810 	bl	8001100 <HAL_InitTick>
 80010e0:	1e03      	subs	r3, r0, #0
 80010e2:	d003      	beq.n	80010ec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80010e4:	1dfb      	adds	r3, r7, #7
 80010e6:	2201      	movs	r2, #1
 80010e8:	701a      	strb	r2, [r3, #0]
 80010ea:	e001      	b.n	80010f0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80010ec:	f7ff fa9a 	bl	8000624 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010f0:	1dfb      	adds	r3, r7, #7
 80010f2:	781b      	ldrb	r3, [r3, #0]
}
 80010f4:	0018      	movs	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	b002      	add	sp, #8
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40022000 	.word	0x40022000

08001100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001108:	230f      	movs	r3, #15
 800110a:	18fb      	adds	r3, r7, r3
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001110:	4b1d      	ldr	r3, [pc, #116]	@ (8001188 <HAL_InitTick+0x88>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d02b      	beq.n	8001170 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001118:	4b1c      	ldr	r3, [pc, #112]	@ (800118c <HAL_InitTick+0x8c>)
 800111a:	681c      	ldr	r4, [r3, #0]
 800111c:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <HAL_InitTick+0x88>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	0019      	movs	r1, r3
 8001122:	23fa      	movs	r3, #250	@ 0xfa
 8001124:	0098      	lsls	r0, r3, #2
 8001126:	f7fe ffed 	bl	8000104 <__udivsi3>
 800112a:	0003      	movs	r3, r0
 800112c:	0019      	movs	r1, r3
 800112e:	0020      	movs	r0, r4
 8001130:	f7fe ffe8 	bl	8000104 <__udivsi3>
 8001134:	0003      	movs	r3, r0
 8001136:	0018      	movs	r0, r3
 8001138:	f000 f93d 	bl	80013b6 <HAL_SYSTICK_Config>
 800113c:	1e03      	subs	r3, r0, #0
 800113e:	d112      	bne.n	8001166 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b03      	cmp	r3, #3
 8001144:	d80a      	bhi.n	800115c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	2301      	movs	r3, #1
 800114a:	425b      	negs	r3, r3
 800114c:	2200      	movs	r2, #0
 800114e:	0018      	movs	r0, r3
 8001150:	f000 f90c 	bl	800136c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001154:	4b0e      	ldr	r3, [pc, #56]	@ (8001190 <HAL_InitTick+0x90>)
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	e00d      	b.n	8001178 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800115c:	230f      	movs	r3, #15
 800115e:	18fb      	adds	r3, r7, r3
 8001160:	2201      	movs	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
 8001164:	e008      	b.n	8001178 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001166:	230f      	movs	r3, #15
 8001168:	18fb      	adds	r3, r7, r3
 800116a:	2201      	movs	r2, #1
 800116c:	701a      	strb	r2, [r3, #0]
 800116e:	e003      	b.n	8001178 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001170:	230f      	movs	r3, #15
 8001172:	18fb      	adds	r3, r7, r3
 8001174:	2201      	movs	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001178:	230f      	movs	r3, #15
 800117a:	18fb      	adds	r3, r7, r3
 800117c:	781b      	ldrb	r3, [r3, #0]
}
 800117e:	0018      	movs	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	b005      	add	sp, #20
 8001184:	bd90      	pop	{r4, r7, pc}
 8001186:	46c0      	nop			@ (mov r8, r8)
 8001188:	20000020 	.word	0x20000020
 800118c:	20000000 	.word	0x20000000
 8001190:	2000001c 	.word	0x2000001c

08001194 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001198:	4b05      	ldr	r3, [pc, #20]	@ (80011b0 <HAL_IncTick+0x1c>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	001a      	movs	r2, r3
 800119e:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <HAL_IncTick+0x20>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	18d2      	adds	r2, r2, r3
 80011a4:	4b03      	ldr	r3, [pc, #12]	@ (80011b4 <HAL_IncTick+0x20>)
 80011a6:	601a      	str	r2, [r3, #0]
}
 80011a8:	46c0      	nop			@ (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	46c0      	nop			@ (mov r8, r8)
 80011b0:	20000020 	.word	0x20000020
 80011b4:	2000019c 	.word	0x2000019c

080011b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  return uwTick;
 80011bc:	4b02      	ldr	r3, [pc, #8]	@ (80011c8 <HAL_GetTick+0x10>)
 80011be:	681b      	ldr	r3, [r3, #0]
}
 80011c0:	0018      	movs	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	46c0      	nop			@ (mov r8, r8)
 80011c8:	2000019c 	.word	0x2000019c

080011cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d4:	f7ff fff0 	bl	80011b8 <HAL_GetTick>
 80011d8:	0003      	movs	r3, r0
 80011da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	3301      	adds	r3, #1
 80011e4:	d005      	beq.n	80011f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001210 <HAL_Delay+0x44>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	001a      	movs	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	189b      	adds	r3, r3, r2
 80011f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011f2:	46c0      	nop			@ (mov r8, r8)
 80011f4:	f7ff ffe0 	bl	80011b8 <HAL_GetTick>
 80011f8:	0002      	movs	r2, r0
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	429a      	cmp	r2, r3
 8001202:	d8f7      	bhi.n	80011f4 <HAL_Delay+0x28>
  {
  }
}
 8001204:	46c0      	nop			@ (mov r8, r8)
 8001206:	46c0      	nop			@ (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b004      	add	sp, #16
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			@ (mov r8, r8)
 8001210:	20000020 	.word	0x20000020

08001214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	0002      	movs	r2, r0
 800121c:	1dfb      	adds	r3, r7, #7
 800121e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001220:	1dfb      	adds	r3, r7, #7
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b7f      	cmp	r3, #127	@ 0x7f
 8001226:	d809      	bhi.n	800123c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001228:	1dfb      	adds	r3, r7, #7
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	001a      	movs	r2, r3
 800122e:	231f      	movs	r3, #31
 8001230:	401a      	ands	r2, r3
 8001232:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <__NVIC_EnableIRQ+0x30>)
 8001234:	2101      	movs	r1, #1
 8001236:	4091      	lsls	r1, r2
 8001238:	000a      	movs	r2, r1
 800123a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800123c:	46c0      	nop			@ (mov r8, r8)
 800123e:	46bd      	mov	sp, r7
 8001240:	b002      	add	sp, #8
 8001242:	bd80      	pop	{r7, pc}
 8001244:	e000e100 	.word	0xe000e100

08001248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001248:	b590      	push	{r4, r7, lr}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	0002      	movs	r2, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	1dfb      	adds	r3, r7, #7
 8001254:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001256:	1dfb      	adds	r3, r7, #7
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b7f      	cmp	r3, #127	@ 0x7f
 800125c:	d828      	bhi.n	80012b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800125e:	4a2f      	ldr	r2, [pc, #188]	@ (800131c <__NVIC_SetPriority+0xd4>)
 8001260:	1dfb      	adds	r3, r7, #7
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	b25b      	sxtb	r3, r3
 8001266:	089b      	lsrs	r3, r3, #2
 8001268:	33c0      	adds	r3, #192	@ 0xc0
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	589b      	ldr	r3, [r3, r2]
 800126e:	1dfa      	adds	r2, r7, #7
 8001270:	7812      	ldrb	r2, [r2, #0]
 8001272:	0011      	movs	r1, r2
 8001274:	2203      	movs	r2, #3
 8001276:	400a      	ands	r2, r1
 8001278:	00d2      	lsls	r2, r2, #3
 800127a:	21ff      	movs	r1, #255	@ 0xff
 800127c:	4091      	lsls	r1, r2
 800127e:	000a      	movs	r2, r1
 8001280:	43d2      	mvns	r2, r2
 8001282:	401a      	ands	r2, r3
 8001284:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	019b      	lsls	r3, r3, #6
 800128a:	22ff      	movs	r2, #255	@ 0xff
 800128c:	401a      	ands	r2, r3
 800128e:	1dfb      	adds	r3, r7, #7
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	0018      	movs	r0, r3
 8001294:	2303      	movs	r3, #3
 8001296:	4003      	ands	r3, r0
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800129c:	481f      	ldr	r0, [pc, #124]	@ (800131c <__NVIC_SetPriority+0xd4>)
 800129e:	1dfb      	adds	r3, r7, #7
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	b25b      	sxtb	r3, r3
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	430a      	orrs	r2, r1
 80012a8:	33c0      	adds	r3, #192	@ 0xc0
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012ae:	e031      	b.n	8001314 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001320 <__NVIC_SetPriority+0xd8>)
 80012b2:	1dfb      	adds	r3, r7, #7
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	0019      	movs	r1, r3
 80012b8:	230f      	movs	r3, #15
 80012ba:	400b      	ands	r3, r1
 80012bc:	3b08      	subs	r3, #8
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	3306      	adds	r3, #6
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	18d3      	adds	r3, r2, r3
 80012c6:	3304      	adds	r3, #4
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	1dfa      	adds	r2, r7, #7
 80012cc:	7812      	ldrb	r2, [r2, #0]
 80012ce:	0011      	movs	r1, r2
 80012d0:	2203      	movs	r2, #3
 80012d2:	400a      	ands	r2, r1
 80012d4:	00d2      	lsls	r2, r2, #3
 80012d6:	21ff      	movs	r1, #255	@ 0xff
 80012d8:	4091      	lsls	r1, r2
 80012da:	000a      	movs	r2, r1
 80012dc:	43d2      	mvns	r2, r2
 80012de:	401a      	ands	r2, r3
 80012e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	019b      	lsls	r3, r3, #6
 80012e6:	22ff      	movs	r2, #255	@ 0xff
 80012e8:	401a      	ands	r2, r3
 80012ea:	1dfb      	adds	r3, r7, #7
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	0018      	movs	r0, r3
 80012f0:	2303      	movs	r3, #3
 80012f2:	4003      	ands	r3, r0
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012f8:	4809      	ldr	r0, [pc, #36]	@ (8001320 <__NVIC_SetPriority+0xd8>)
 80012fa:	1dfb      	adds	r3, r7, #7
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	001c      	movs	r4, r3
 8001300:	230f      	movs	r3, #15
 8001302:	4023      	ands	r3, r4
 8001304:	3b08      	subs	r3, #8
 8001306:	089b      	lsrs	r3, r3, #2
 8001308:	430a      	orrs	r2, r1
 800130a:	3306      	adds	r3, #6
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	18c3      	adds	r3, r0, r3
 8001310:	3304      	adds	r3, #4
 8001312:	601a      	str	r2, [r3, #0]
}
 8001314:	46c0      	nop			@ (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	b003      	add	sp, #12
 800131a:	bd90      	pop	{r4, r7, pc}
 800131c:	e000e100 	.word	0xe000e100
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	1e5a      	subs	r2, r3, #1
 8001330:	2380      	movs	r3, #128	@ 0x80
 8001332:	045b      	lsls	r3, r3, #17
 8001334:	429a      	cmp	r2, r3
 8001336:	d301      	bcc.n	800133c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001338:	2301      	movs	r3, #1
 800133a:	e010      	b.n	800135e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133c:	4b0a      	ldr	r3, [pc, #40]	@ (8001368 <SysTick_Config+0x44>)
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	3a01      	subs	r2, #1
 8001342:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001344:	2301      	movs	r3, #1
 8001346:	425b      	negs	r3, r3
 8001348:	2103      	movs	r1, #3
 800134a:	0018      	movs	r0, r3
 800134c:	f7ff ff7c 	bl	8001248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001350:	4b05      	ldr	r3, [pc, #20]	@ (8001368 <SysTick_Config+0x44>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001356:	4b04      	ldr	r3, [pc, #16]	@ (8001368 <SysTick_Config+0x44>)
 8001358:	2207      	movs	r2, #7
 800135a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800135c:	2300      	movs	r3, #0
}
 800135e:	0018      	movs	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	b002      	add	sp, #8
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			@ (mov r8, r8)
 8001368:	e000e010 	.word	0xe000e010

0800136c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	210f      	movs	r1, #15
 8001378:	187b      	adds	r3, r7, r1
 800137a:	1c02      	adds	r2, r0, #0
 800137c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	187b      	adds	r3, r7, r1
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b25b      	sxtb	r3, r3
 8001386:	0011      	movs	r1, r2
 8001388:	0018      	movs	r0, r3
 800138a:	f7ff ff5d 	bl	8001248 <__NVIC_SetPriority>
}
 800138e:	46c0      	nop			@ (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	b004      	add	sp, #16
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	0002      	movs	r2, r0
 800139e:	1dfb      	adds	r3, r7, #7
 80013a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a2:	1dfb      	adds	r3, r7, #7
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	b25b      	sxtb	r3, r3
 80013a8:	0018      	movs	r0, r3
 80013aa:	f7ff ff33 	bl	8001214 <__NVIC_EnableIRQ>
}
 80013ae:	46c0      	nop			@ (mov r8, r8)
 80013b0:	46bd      	mov	sp, r7
 80013b2:	b002      	add	sp, #8
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	0018      	movs	r0, r3
 80013c2:	f7ff ffaf 	bl	8001324 <SysTick_Config>
 80013c6:	0003      	movs	r3, r0
}
 80013c8:	0018      	movs	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b002      	add	sp, #8
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013de:	e147      	b.n	8001670 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2101      	movs	r1, #1
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	4091      	lsls	r1, r2
 80013ea:	000a      	movs	r2, r1
 80013ec:	4013      	ands	r3, r2
 80013ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d100      	bne.n	80013f8 <HAL_GPIO_Init+0x28>
 80013f6:	e138      	b.n	800166a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2203      	movs	r2, #3
 80013fe:	4013      	ands	r3, r2
 8001400:	2b01      	cmp	r3, #1
 8001402:	d005      	beq.n	8001410 <HAL_GPIO_Init+0x40>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2203      	movs	r2, #3
 800140a:	4013      	ands	r3, r2
 800140c:	2b02      	cmp	r3, #2
 800140e:	d130      	bne.n	8001472 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	409a      	lsls	r2, r3
 800141e:	0013      	movs	r3, r2
 8001420:	43da      	mvns	r2, r3
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	68da      	ldr	r2, [r3, #12]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	409a      	lsls	r2, r3
 8001432:	0013      	movs	r3, r2
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001446:	2201      	movs	r2, #1
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	409a      	lsls	r2, r3
 800144c:	0013      	movs	r3, r2
 800144e:	43da      	mvns	r2, r3
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	091b      	lsrs	r3, r3, #4
 800145c:	2201      	movs	r2, #1
 800145e:	401a      	ands	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	409a      	lsls	r2, r3
 8001464:	0013      	movs	r3, r2
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2203      	movs	r2, #3
 8001478:	4013      	ands	r3, r2
 800147a:	2b03      	cmp	r3, #3
 800147c:	d017      	beq.n	80014ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	2203      	movs	r2, #3
 800148a:	409a      	lsls	r2, r3
 800148c:	0013      	movs	r3, r2
 800148e:	43da      	mvns	r2, r3
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	409a      	lsls	r2, r3
 80014a0:	0013      	movs	r3, r2
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2203      	movs	r2, #3
 80014b4:	4013      	ands	r3, r2
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d123      	bne.n	8001502 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	08da      	lsrs	r2, r3, #3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3208      	adds	r2, #8
 80014c2:	0092      	lsls	r2, r2, #2
 80014c4:	58d3      	ldr	r3, [r2, r3]
 80014c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	2207      	movs	r2, #7
 80014cc:	4013      	ands	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	220f      	movs	r2, #15
 80014d2:	409a      	lsls	r2, r3
 80014d4:	0013      	movs	r3, r2
 80014d6:	43da      	mvns	r2, r3
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	691a      	ldr	r2, [r3, #16]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	2107      	movs	r1, #7
 80014e6:	400b      	ands	r3, r1
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	409a      	lsls	r2, r3
 80014ec:	0013      	movs	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	08da      	lsrs	r2, r3, #3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3208      	adds	r2, #8
 80014fc:	0092      	lsls	r2, r2, #2
 80014fe:	6939      	ldr	r1, [r7, #16]
 8001500:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	2203      	movs	r2, #3
 800150e:	409a      	lsls	r2, r3
 8001510:	0013      	movs	r3, r2
 8001512:	43da      	mvns	r2, r3
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2203      	movs	r2, #3
 8001520:	401a      	ands	r2, r3
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	409a      	lsls	r2, r3
 8001528:	0013      	movs	r3, r2
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	23c0      	movs	r3, #192	@ 0xc0
 800153c:	029b      	lsls	r3, r3, #10
 800153e:	4013      	ands	r3, r2
 8001540:	d100      	bne.n	8001544 <HAL_GPIO_Init+0x174>
 8001542:	e092      	b.n	800166a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001544:	4a50      	ldr	r2, [pc, #320]	@ (8001688 <HAL_GPIO_Init+0x2b8>)
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	3318      	adds	r3, #24
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	589b      	ldr	r3, [r3, r2]
 8001550:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	2203      	movs	r2, #3
 8001556:	4013      	ands	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	220f      	movs	r2, #15
 800155c:	409a      	lsls	r2, r3
 800155e:	0013      	movs	r3, r2
 8001560:	43da      	mvns	r2, r3
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	23a0      	movs	r3, #160	@ 0xa0
 800156c:	05db      	lsls	r3, r3, #23
 800156e:	429a      	cmp	r2, r3
 8001570:	d013      	beq.n	800159a <HAL_GPIO_Init+0x1ca>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a45      	ldr	r2, [pc, #276]	@ (800168c <HAL_GPIO_Init+0x2bc>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d00d      	beq.n	8001596 <HAL_GPIO_Init+0x1c6>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a44      	ldr	r2, [pc, #272]	@ (8001690 <HAL_GPIO_Init+0x2c0>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d007      	beq.n	8001592 <HAL_GPIO_Init+0x1c2>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a43      	ldr	r2, [pc, #268]	@ (8001694 <HAL_GPIO_Init+0x2c4>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d101      	bne.n	800158e <HAL_GPIO_Init+0x1be>
 800158a:	2303      	movs	r3, #3
 800158c:	e006      	b.n	800159c <HAL_GPIO_Init+0x1cc>
 800158e:	2305      	movs	r3, #5
 8001590:	e004      	b.n	800159c <HAL_GPIO_Init+0x1cc>
 8001592:	2302      	movs	r3, #2
 8001594:	e002      	b.n	800159c <HAL_GPIO_Init+0x1cc>
 8001596:	2301      	movs	r3, #1
 8001598:	e000      	b.n	800159c <HAL_GPIO_Init+0x1cc>
 800159a:	2300      	movs	r3, #0
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	2103      	movs	r1, #3
 80015a0:	400a      	ands	r2, r1
 80015a2:	00d2      	lsls	r2, r2, #3
 80015a4:	4093      	lsls	r3, r2
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80015ac:	4936      	ldr	r1, [pc, #216]	@ (8001688 <HAL_GPIO_Init+0x2b8>)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	089b      	lsrs	r3, r3, #2
 80015b2:	3318      	adds	r3, #24
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015ba:	4b33      	ldr	r3, [pc, #204]	@ (8001688 <HAL_GPIO_Init+0x2b8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	43da      	mvns	r2, r3
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4013      	ands	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	2380      	movs	r3, #128	@ 0x80
 80015d0:	035b      	lsls	r3, r3, #13
 80015d2:	4013      	ands	r3, r2
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4313      	orrs	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015de:	4b2a      	ldr	r3, [pc, #168]	@ (8001688 <HAL_GPIO_Init+0x2b8>)
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80015e4:	4b28      	ldr	r3, [pc, #160]	@ (8001688 <HAL_GPIO_Init+0x2b8>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	43da      	mvns	r2, r3
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	2380      	movs	r3, #128	@ 0x80
 80015fa:	039b      	lsls	r3, r3, #14
 80015fc:	4013      	ands	r3, r2
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001608:	4b1f      	ldr	r3, [pc, #124]	@ (8001688 <HAL_GPIO_Init+0x2b8>)
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800160e:	4a1e      	ldr	r2, [pc, #120]	@ (8001688 <HAL_GPIO_Init+0x2b8>)
 8001610:	2384      	movs	r3, #132	@ 0x84
 8001612:	58d3      	ldr	r3, [r2, r3]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	43da      	mvns	r2, r3
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	4013      	ands	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	2380      	movs	r3, #128	@ 0x80
 8001626:	029b      	lsls	r3, r3, #10
 8001628:	4013      	ands	r3, r2
 800162a:	d003      	beq.n	8001634 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001634:	4914      	ldr	r1, [pc, #80]	@ (8001688 <HAL_GPIO_Init+0x2b8>)
 8001636:	2284      	movs	r2, #132	@ 0x84
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800163c:	4a12      	ldr	r2, [pc, #72]	@ (8001688 <HAL_GPIO_Init+0x2b8>)
 800163e:	2380      	movs	r3, #128	@ 0x80
 8001640:	58d3      	ldr	r3, [r2, r3]
 8001642:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	43da      	mvns	r2, r3
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	4013      	ands	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	2380      	movs	r3, #128	@ 0x80
 8001654:	025b      	lsls	r3, r3, #9
 8001656:	4013      	ands	r3, r2
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4313      	orrs	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001662:	4909      	ldr	r1, [pc, #36]	@ (8001688 <HAL_GPIO_Init+0x2b8>)
 8001664:	2280      	movs	r2, #128	@ 0x80
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	40da      	lsrs	r2, r3
 8001678:	1e13      	subs	r3, r2, #0
 800167a:	d000      	beq.n	800167e <HAL_GPIO_Init+0x2ae>
 800167c:	e6b0      	b.n	80013e0 <HAL_GPIO_Init+0x10>
  }
}
 800167e:	46c0      	nop			@ (mov r8, r8)
 8001680:	46c0      	nop			@ (mov r8, r8)
 8001682:	46bd      	mov	sp, r7
 8001684:	b006      	add	sp, #24
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40021800 	.word	0x40021800
 800168c:	50000400 	.word	0x50000400
 8001690:	50000800 	.word	0x50000800
 8001694:	50000c00 	.word	0x50000c00

08001698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	0008      	movs	r0, r1
 80016a2:	0011      	movs	r1, r2
 80016a4:	1cbb      	adds	r3, r7, #2
 80016a6:	1c02      	adds	r2, r0, #0
 80016a8:	801a      	strh	r2, [r3, #0]
 80016aa:	1c7b      	adds	r3, r7, #1
 80016ac:	1c0a      	adds	r2, r1, #0
 80016ae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016b0:	1c7b      	adds	r3, r7, #1
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d004      	beq.n	80016c2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016b8:	1cbb      	adds	r3, r7, #2
 80016ba:	881a      	ldrh	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016c0:	e003      	b.n	80016ca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016c2:	1cbb      	adds	r3, r7, #2
 80016c4:	881a      	ldrh	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016ca:	46c0      	nop			@ (mov r8, r8)
 80016cc:	46bd      	mov	sp, r7
 80016ce:	b002      	add	sp, #8
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	0002      	movs	r2, r0
 80016dc:	1dbb      	adds	r3, r7, #6
 80016de:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80016e0:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	1dba      	adds	r2, r7, #6
 80016e6:	8812      	ldrh	r2, [r2, #0]
 80016e8:	4013      	ands	r3, r2
 80016ea:	d008      	beq.n	80016fe <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80016ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001724 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80016ee:	1dba      	adds	r2, r7, #6
 80016f0:	8812      	ldrh	r2, [r2, #0]
 80016f2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80016f4:	1dbb      	adds	r3, r7, #6
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	0018      	movs	r0, r3
 80016fa:	f000 f815 	bl	8001728 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80016fe:	4b09      	ldr	r3, [pc, #36]	@ (8001724 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	1dba      	adds	r2, r7, #6
 8001704:	8812      	ldrh	r2, [r2, #0]
 8001706:	4013      	ands	r3, r2
 8001708:	d008      	beq.n	800171c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800170a:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800170c:	1dba      	adds	r2, r7, #6
 800170e:	8812      	ldrh	r2, [r2, #0]
 8001710:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001712:	1dbb      	adds	r3, r7, #6
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	0018      	movs	r0, r3
 8001718:	f000 f810 	bl	800173c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800171c:	46c0      	nop			@ (mov r8, r8)
 800171e:	46bd      	mov	sp, r7
 8001720:	b002      	add	sp, #8
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40021800 	.word	0x40021800

08001728 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	0002      	movs	r2, r0
 8001730:	1dbb      	adds	r3, r7, #6
 8001732:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001734:	46c0      	nop			@ (mov r8, r8)
 8001736:	46bd      	mov	sp, r7
 8001738:	b002      	add	sp, #8
 800173a:	bd80      	pop	{r7, pc}

0800173c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	0002      	movs	r2, r0
 8001744:	1dbb      	adds	r3, r7, #6
 8001746:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001748:	46c0      	nop			@ (mov r8, r8)
 800174a:	46bd      	mov	sp, r7
 800174c:	b002      	add	sp, #8
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001758:	4b19      	ldr	r3, [pc, #100]	@ (80017c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a19      	ldr	r2, [pc, #100]	@ (80017c4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800175e:	4013      	ands	r3, r2
 8001760:	0019      	movs	r1, r3
 8001762:	4b17      	ldr	r3, [pc, #92]	@ (80017c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	430a      	orrs	r2, r1
 8001768:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	2380      	movs	r3, #128	@ 0x80
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	429a      	cmp	r2, r3
 8001772:	d11f      	bne.n	80017b4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001774:	4b14      	ldr	r3, [pc, #80]	@ (80017c8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	0013      	movs	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	189b      	adds	r3, r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	4912      	ldr	r1, [pc, #72]	@ (80017cc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001782:	0018      	movs	r0, r3
 8001784:	f7fe fcbe 	bl	8000104 <__udivsi3>
 8001788:	0003      	movs	r3, r0
 800178a:	3301      	adds	r3, #1
 800178c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800178e:	e008      	b.n	80017a2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	3b01      	subs	r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	e001      	b.n	80017a2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e009      	b.n	80017b6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017a2:	4b07      	ldr	r3, [pc, #28]	@ (80017c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80017a4:	695a      	ldr	r2, [r3, #20]
 80017a6:	2380      	movs	r3, #128	@ 0x80
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	401a      	ands	r2, r3
 80017ac:	2380      	movs	r3, #128	@ 0x80
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d0ed      	beq.n	8001790 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	0018      	movs	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b004      	add	sp, #16
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	46c0      	nop			@ (mov r8, r8)
 80017c0:	40007000 	.word	0x40007000
 80017c4:	fffff9ff 	.word	0xfffff9ff
 80017c8:	20000000 	.word	0x20000000
 80017cc:	000f4240 	.word	0x000f4240

080017d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e2fe      	b.n	8001de0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2201      	movs	r2, #1
 80017e8:	4013      	ands	r3, r2
 80017ea:	d100      	bne.n	80017ee <HAL_RCC_OscConfig+0x1e>
 80017ec:	e07c      	b.n	80018e8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ee:	4bc3      	ldr	r3, [pc, #780]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2238      	movs	r2, #56	@ 0x38
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017f8:	4bc0      	ldr	r3, [pc, #768]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	2203      	movs	r2, #3
 80017fe:	4013      	ands	r3, r2
 8001800:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	2b10      	cmp	r3, #16
 8001806:	d102      	bne.n	800180e <HAL_RCC_OscConfig+0x3e>
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	2b03      	cmp	r3, #3
 800180c:	d002      	beq.n	8001814 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	2b08      	cmp	r3, #8
 8001812:	d10b      	bne.n	800182c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001814:	4bb9      	ldr	r3, [pc, #740]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	2380      	movs	r3, #128	@ 0x80
 800181a:	029b      	lsls	r3, r3, #10
 800181c:	4013      	ands	r3, r2
 800181e:	d062      	beq.n	80018e6 <HAL_RCC_OscConfig+0x116>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d15e      	bne.n	80018e6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e2d9      	b.n	8001de0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	2380      	movs	r3, #128	@ 0x80
 8001832:	025b      	lsls	r3, r3, #9
 8001834:	429a      	cmp	r2, r3
 8001836:	d107      	bne.n	8001848 <HAL_RCC_OscConfig+0x78>
 8001838:	4bb0      	ldr	r3, [pc, #704]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4baf      	ldr	r3, [pc, #700]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 800183e:	2180      	movs	r1, #128	@ 0x80
 8001840:	0249      	lsls	r1, r1, #9
 8001842:	430a      	orrs	r2, r1
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	e020      	b.n	800188a <HAL_RCC_OscConfig+0xba>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	23a0      	movs	r3, #160	@ 0xa0
 800184e:	02db      	lsls	r3, r3, #11
 8001850:	429a      	cmp	r2, r3
 8001852:	d10e      	bne.n	8001872 <HAL_RCC_OscConfig+0xa2>
 8001854:	4ba9      	ldr	r3, [pc, #676]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4ba8      	ldr	r3, [pc, #672]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 800185a:	2180      	movs	r1, #128	@ 0x80
 800185c:	02c9      	lsls	r1, r1, #11
 800185e:	430a      	orrs	r2, r1
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	4ba6      	ldr	r3, [pc, #664]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4ba5      	ldr	r3, [pc, #660]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 8001868:	2180      	movs	r1, #128	@ 0x80
 800186a:	0249      	lsls	r1, r1, #9
 800186c:	430a      	orrs	r2, r1
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	e00b      	b.n	800188a <HAL_RCC_OscConfig+0xba>
 8001872:	4ba2      	ldr	r3, [pc, #648]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	4ba1      	ldr	r3, [pc, #644]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 8001878:	49a1      	ldr	r1, [pc, #644]	@ (8001b00 <HAL_RCC_OscConfig+0x330>)
 800187a:	400a      	ands	r2, r1
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	4b9f      	ldr	r3, [pc, #636]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	4b9e      	ldr	r3, [pc, #632]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 8001884:	499f      	ldr	r1, [pc, #636]	@ (8001b04 <HAL_RCC_OscConfig+0x334>)
 8001886:	400a      	ands	r2, r1
 8001888:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d014      	beq.n	80018bc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001892:	f7ff fc91 	bl	80011b8 <HAL_GetTick>
 8001896:	0003      	movs	r3, r0
 8001898:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800189c:	f7ff fc8c 	bl	80011b8 <HAL_GetTick>
 80018a0:	0002      	movs	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b64      	cmp	r3, #100	@ 0x64
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e298      	b.n	8001de0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ae:	4b93      	ldr	r3, [pc, #588]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	2380      	movs	r3, #128	@ 0x80
 80018b4:	029b      	lsls	r3, r3, #10
 80018b6:	4013      	ands	r3, r2
 80018b8:	d0f0      	beq.n	800189c <HAL_RCC_OscConfig+0xcc>
 80018ba:	e015      	b.n	80018e8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018bc:	f7ff fc7c 	bl	80011b8 <HAL_GetTick>
 80018c0:	0003      	movs	r3, r0
 80018c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c6:	f7ff fc77 	bl	80011b8 <HAL_GetTick>
 80018ca:	0002      	movs	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b64      	cmp	r3, #100	@ 0x64
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e283      	b.n	8001de0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018d8:	4b88      	ldr	r3, [pc, #544]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	2380      	movs	r3, #128	@ 0x80
 80018de:	029b      	lsls	r3, r3, #10
 80018e0:	4013      	ands	r3, r2
 80018e2:	d1f0      	bne.n	80018c6 <HAL_RCC_OscConfig+0xf6>
 80018e4:	e000      	b.n	80018e8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2202      	movs	r2, #2
 80018ee:	4013      	ands	r3, r2
 80018f0:	d100      	bne.n	80018f4 <HAL_RCC_OscConfig+0x124>
 80018f2:	e099      	b.n	8001a28 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018f4:	4b81      	ldr	r3, [pc, #516]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2238      	movs	r2, #56	@ 0x38
 80018fa:	4013      	ands	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018fe:	4b7f      	ldr	r3, [pc, #508]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	2203      	movs	r2, #3
 8001904:	4013      	ands	r3, r2
 8001906:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	2b10      	cmp	r3, #16
 800190c:	d102      	bne.n	8001914 <HAL_RCC_OscConfig+0x144>
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d002      	beq.n	800191a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d135      	bne.n	8001986 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800191a:	4b78      	ldr	r3, [pc, #480]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	2380      	movs	r3, #128	@ 0x80
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	4013      	ands	r3, r2
 8001924:	d005      	beq.n	8001932 <HAL_RCC_OscConfig+0x162>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e256      	b.n	8001de0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001932:	4b72      	ldr	r3, [pc, #456]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	4a74      	ldr	r2, [pc, #464]	@ (8001b08 <HAL_RCC_OscConfig+0x338>)
 8001938:	4013      	ands	r3, r2
 800193a:	0019      	movs	r1, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	021a      	lsls	r2, r3, #8
 8001942:	4b6e      	ldr	r3, [pc, #440]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 8001944:	430a      	orrs	r2, r1
 8001946:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d112      	bne.n	8001974 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800194e:	4b6b      	ldr	r3, [pc, #428]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a6e      	ldr	r2, [pc, #440]	@ (8001b0c <HAL_RCC_OscConfig+0x33c>)
 8001954:	4013      	ands	r3, r2
 8001956:	0019      	movs	r1, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691a      	ldr	r2, [r3, #16]
 800195c:	4b67      	ldr	r3, [pc, #412]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 800195e:	430a      	orrs	r2, r1
 8001960:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001962:	4b66      	ldr	r3, [pc, #408]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	0adb      	lsrs	r3, r3, #11
 8001968:	2207      	movs	r2, #7
 800196a:	4013      	ands	r3, r2
 800196c:	4a68      	ldr	r2, [pc, #416]	@ (8001b10 <HAL_RCC_OscConfig+0x340>)
 800196e:	40da      	lsrs	r2, r3
 8001970:	4b68      	ldr	r3, [pc, #416]	@ (8001b14 <HAL_RCC_OscConfig+0x344>)
 8001972:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001974:	4b68      	ldr	r3, [pc, #416]	@ (8001b18 <HAL_RCC_OscConfig+0x348>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	0018      	movs	r0, r3
 800197a:	f7ff fbc1 	bl	8001100 <HAL_InitTick>
 800197e:	1e03      	subs	r3, r0, #0
 8001980:	d051      	beq.n	8001a26 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e22c      	b.n	8001de0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d030      	beq.n	80019f0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800198e:	4b5b      	ldr	r3, [pc, #364]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a5e      	ldr	r2, [pc, #376]	@ (8001b0c <HAL_RCC_OscConfig+0x33c>)
 8001994:	4013      	ands	r3, r2
 8001996:	0019      	movs	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691a      	ldr	r2, [r3, #16]
 800199c:	4b57      	ldr	r3, [pc, #348]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 800199e:	430a      	orrs	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80019a2:	4b56      	ldr	r3, [pc, #344]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	4b55      	ldr	r3, [pc, #340]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 80019a8:	2180      	movs	r1, #128	@ 0x80
 80019aa:	0049      	lsls	r1, r1, #1
 80019ac:	430a      	orrs	r2, r1
 80019ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b0:	f7ff fc02 	bl	80011b8 <HAL_GetTick>
 80019b4:	0003      	movs	r3, r0
 80019b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ba:	f7ff fbfd 	bl	80011b8 <HAL_GetTick>
 80019be:	0002      	movs	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e209      	b.n	8001de0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019cc:	4b4b      	ldr	r3, [pc, #300]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	2380      	movs	r3, #128	@ 0x80
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	4013      	ands	r3, r2
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d8:	4b48      	ldr	r3, [pc, #288]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	4a4a      	ldr	r2, [pc, #296]	@ (8001b08 <HAL_RCC_OscConfig+0x338>)
 80019de:	4013      	ands	r3, r2
 80019e0:	0019      	movs	r1, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	021a      	lsls	r2, r3, #8
 80019e8:	4b44      	ldr	r3, [pc, #272]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 80019ea:	430a      	orrs	r2, r1
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	e01b      	b.n	8001a28 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80019f0:	4b42      	ldr	r3, [pc, #264]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b41      	ldr	r3, [pc, #260]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 80019f6:	4949      	ldr	r1, [pc, #292]	@ (8001b1c <HAL_RCC_OscConfig+0x34c>)
 80019f8:	400a      	ands	r2, r1
 80019fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fc:	f7ff fbdc 	bl	80011b8 <HAL_GetTick>
 8001a00:	0003      	movs	r3, r0
 8001a02:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a06:	f7ff fbd7 	bl	80011b8 <HAL_GetTick>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e1e3      	b.n	8001de0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a18:	4b38      	ldr	r3, [pc, #224]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	2380      	movs	r3, #128	@ 0x80
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	4013      	ands	r3, r2
 8001a22:	d1f0      	bne.n	8001a06 <HAL_RCC_OscConfig+0x236>
 8001a24:	e000      	b.n	8001a28 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a26:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2208      	movs	r2, #8
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d047      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a32:	4b32      	ldr	r3, [pc, #200]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2238      	movs	r2, #56	@ 0x38
 8001a38:	4013      	ands	r3, r2
 8001a3a:	2b18      	cmp	r3, #24
 8001a3c:	d10a      	bne.n	8001a54 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001a3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 8001a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a42:	2202      	movs	r2, #2
 8001a44:	4013      	ands	r3, r2
 8001a46:	d03c      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x2f2>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d138      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e1c5      	b.n	8001de0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d019      	beq.n	8001a90 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001a5c:	4b27      	ldr	r3, [pc, #156]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 8001a5e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a60:	4b26      	ldr	r3, [pc, #152]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 8001a62:	2101      	movs	r1, #1
 8001a64:	430a      	orrs	r2, r1
 8001a66:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a68:	f7ff fba6 	bl	80011b8 <HAL_GetTick>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a72:	f7ff fba1 	bl	80011b8 <HAL_GetTick>
 8001a76:	0002      	movs	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e1ad      	b.n	8001de0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a84:	4b1d      	ldr	r3, [pc, #116]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 8001a86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a88:	2202      	movs	r2, #2
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d0f1      	beq.n	8001a72 <HAL_RCC_OscConfig+0x2a2>
 8001a8e:	e018      	b.n	8001ac2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001a90:	4b1a      	ldr	r3, [pc, #104]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 8001a92:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a94:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 8001a96:	2101      	movs	r1, #1
 8001a98:	438a      	bics	r2, r1
 8001a9a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7ff fb8c 	bl	80011b8 <HAL_GetTick>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa6:	f7ff fb87 	bl	80011b8 <HAL_GetTick>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e193      	b.n	8001de0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ab8:	4b10      	ldr	r3, [pc, #64]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 8001aba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001abc:	2202      	movs	r2, #2
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d1f1      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2204      	movs	r2, #4
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d100      	bne.n	8001ace <HAL_RCC_OscConfig+0x2fe>
 8001acc:	e0c6      	b.n	8001c5c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ace:	231f      	movs	r3, #31
 8001ad0:	18fb      	adds	r3, r7, r3
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001ad6:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	2238      	movs	r2, #56	@ 0x38
 8001adc:	4013      	ands	r3, r2
 8001ade:	2b20      	cmp	r3, #32
 8001ae0:	d11e      	bne.n	8001b20 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001ae2:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <HAL_RCC_OscConfig+0x32c>)
 8001ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d100      	bne.n	8001aee <HAL_RCC_OscConfig+0x31e>
 8001aec:	e0b6      	b.n	8001c5c <HAL_RCC_OscConfig+0x48c>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d000      	beq.n	8001af8 <HAL_RCC_OscConfig+0x328>
 8001af6:	e0b1      	b.n	8001c5c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e171      	b.n	8001de0 <HAL_RCC_OscConfig+0x610>
 8001afc:	40021000 	.word	0x40021000
 8001b00:	fffeffff 	.word	0xfffeffff
 8001b04:	fffbffff 	.word	0xfffbffff
 8001b08:	ffff80ff 	.word	0xffff80ff
 8001b0c:	ffffc7ff 	.word	0xffffc7ff
 8001b10:	00f42400 	.word	0x00f42400
 8001b14:	20000000 	.word	0x20000000
 8001b18:	2000001c 	.word	0x2000001c
 8001b1c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b20:	4bb1      	ldr	r3, [pc, #708]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001b22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b24:	2380      	movs	r3, #128	@ 0x80
 8001b26:	055b      	lsls	r3, r3, #21
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d101      	bne.n	8001b30 <HAL_RCC_OscConfig+0x360>
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e000      	b.n	8001b32 <HAL_RCC_OscConfig+0x362>
 8001b30:	2300      	movs	r3, #0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d011      	beq.n	8001b5a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001b36:	4bac      	ldr	r3, [pc, #688]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001b38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b3a:	4bab      	ldr	r3, [pc, #684]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001b3c:	2180      	movs	r1, #128	@ 0x80
 8001b3e:	0549      	lsls	r1, r1, #21
 8001b40:	430a      	orrs	r2, r1
 8001b42:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b44:	4ba8      	ldr	r3, [pc, #672]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001b46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b48:	2380      	movs	r3, #128	@ 0x80
 8001b4a:	055b      	lsls	r3, r3, #21
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001b52:	231f      	movs	r3, #31
 8001b54:	18fb      	adds	r3, r7, r3
 8001b56:	2201      	movs	r2, #1
 8001b58:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b5a:	4ba4      	ldr	r3, [pc, #656]	@ (8001dec <HAL_RCC_OscConfig+0x61c>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	2380      	movs	r3, #128	@ 0x80
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4013      	ands	r3, r2
 8001b64:	d11a      	bne.n	8001b9c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b66:	4ba1      	ldr	r3, [pc, #644]	@ (8001dec <HAL_RCC_OscConfig+0x61c>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4ba0      	ldr	r3, [pc, #640]	@ (8001dec <HAL_RCC_OscConfig+0x61c>)
 8001b6c:	2180      	movs	r1, #128	@ 0x80
 8001b6e:	0049      	lsls	r1, r1, #1
 8001b70:	430a      	orrs	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001b74:	f7ff fb20 	bl	80011b8 <HAL_GetTick>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b7e:	f7ff fb1b 	bl	80011b8 <HAL_GetTick>
 8001b82:	0002      	movs	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e127      	b.n	8001de0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b90:	4b96      	ldr	r3, [pc, #600]	@ (8001dec <HAL_RCC_OscConfig+0x61c>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	2380      	movs	r3, #128	@ 0x80
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d0f0      	beq.n	8001b7e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d106      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x3e2>
 8001ba4:	4b90      	ldr	r3, [pc, #576]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001ba6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ba8:	4b8f      	ldr	r3, [pc, #572]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001baa:	2101      	movs	r1, #1
 8001bac:	430a      	orrs	r2, r1
 8001bae:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bb0:	e01c      	b.n	8001bec <HAL_RCC_OscConfig+0x41c>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b05      	cmp	r3, #5
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x404>
 8001bba:	4b8b      	ldr	r3, [pc, #556]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001bbc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bbe:	4b8a      	ldr	r3, [pc, #552]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001bc0:	2104      	movs	r1, #4
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bc6:	4b88      	ldr	r3, [pc, #544]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001bc8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bca:	4b87      	ldr	r3, [pc, #540]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001bcc:	2101      	movs	r1, #1
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bd2:	e00b      	b.n	8001bec <HAL_RCC_OscConfig+0x41c>
 8001bd4:	4b84      	ldr	r3, [pc, #528]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001bd6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bd8:	4b83      	ldr	r3, [pc, #524]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001bda:	2101      	movs	r1, #1
 8001bdc:	438a      	bics	r2, r1
 8001bde:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001be0:	4b81      	ldr	r3, [pc, #516]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001be2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001be4:	4b80      	ldr	r3, [pc, #512]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001be6:	2104      	movs	r1, #4
 8001be8:	438a      	bics	r2, r1
 8001bea:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d014      	beq.n	8001c1e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fae0 	bl	80011b8 <HAL_GetTick>
 8001bf8:	0003      	movs	r3, r0
 8001bfa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bfc:	e009      	b.n	8001c12 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfe:	f7ff fadb 	bl	80011b8 <HAL_GetTick>
 8001c02:	0002      	movs	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	4a79      	ldr	r2, [pc, #484]	@ (8001df0 <HAL_RCC_OscConfig+0x620>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e0e6      	b.n	8001de0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c12:	4b75      	ldr	r3, [pc, #468]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c16:	2202      	movs	r2, #2
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d0f0      	beq.n	8001bfe <HAL_RCC_OscConfig+0x42e>
 8001c1c:	e013      	b.n	8001c46 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1e:	f7ff facb 	bl	80011b8 <HAL_GetTick>
 8001c22:	0003      	movs	r3, r0
 8001c24:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c26:	e009      	b.n	8001c3c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c28:	f7ff fac6 	bl	80011b8 <HAL_GetTick>
 8001c2c:	0002      	movs	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	4a6f      	ldr	r2, [pc, #444]	@ (8001df0 <HAL_RCC_OscConfig+0x620>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e0d1      	b.n	8001de0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c3c:	4b6a      	ldr	r3, [pc, #424]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c40:	2202      	movs	r2, #2
 8001c42:	4013      	ands	r3, r2
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001c46:	231f      	movs	r3, #31
 8001c48:	18fb      	adds	r3, r7, r3
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d105      	bne.n	8001c5c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001c50:	4b65      	ldr	r3, [pc, #404]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001c52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c54:	4b64      	ldr	r3, [pc, #400]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001c56:	4967      	ldr	r1, [pc, #412]	@ (8001df4 <HAL_RCC_OscConfig+0x624>)
 8001c58:	400a      	ands	r2, r1
 8001c5a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d100      	bne.n	8001c66 <HAL_RCC_OscConfig+0x496>
 8001c64:	e0bb      	b.n	8001dde <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c66:	4b60      	ldr	r3, [pc, #384]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	2238      	movs	r2, #56	@ 0x38
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	2b10      	cmp	r3, #16
 8001c70:	d100      	bne.n	8001c74 <HAL_RCC_OscConfig+0x4a4>
 8001c72:	e07b      	b.n	8001d6c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d156      	bne.n	8001d2a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7c:	4b5a      	ldr	r3, [pc, #360]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b59      	ldr	r3, [pc, #356]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001c82:	495d      	ldr	r1, [pc, #372]	@ (8001df8 <HAL_RCC_OscConfig+0x628>)
 8001c84:	400a      	ands	r2, r1
 8001c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c88:	f7ff fa96 	bl	80011b8 <HAL_GetTick>
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c92:	f7ff fa91 	bl	80011b8 <HAL_GetTick>
 8001c96:	0002      	movs	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e09d      	b.n	8001de0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca4:	4b50      	ldr	r3, [pc, #320]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	2380      	movs	r3, #128	@ 0x80
 8001caa:	049b      	lsls	r3, r3, #18
 8001cac:	4013      	ands	r3, r2
 8001cae:	d1f0      	bne.n	8001c92 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb0:	4b4d      	ldr	r3, [pc, #308]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	4a51      	ldr	r2, [pc, #324]	@ (8001dfc <HAL_RCC_OscConfig+0x62c>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	0019      	movs	r1, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a1a      	ldr	r2, [r3, #32]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	4b42      	ldr	r3, [pc, #264]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce4:	4b40      	ldr	r3, [pc, #256]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b3f      	ldr	r3, [pc, #252]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001cea:	2180      	movs	r1, #128	@ 0x80
 8001cec:	0449      	lsls	r1, r1, #17
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001cf2:	4b3d      	ldr	r3, [pc, #244]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	4b3c      	ldr	r3, [pc, #240]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001cf8:	2180      	movs	r1, #128	@ 0x80
 8001cfa:	0549      	lsls	r1, r1, #21
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d00:	f7ff fa5a 	bl	80011b8 <HAL_GetTick>
 8001d04:	0003      	movs	r3, r0
 8001d06:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0a:	f7ff fa55 	bl	80011b8 <HAL_GetTick>
 8001d0e:	0002      	movs	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e061      	b.n	8001de0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d1c:	4b32      	ldr	r3, [pc, #200]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	2380      	movs	r3, #128	@ 0x80
 8001d22:	049b      	lsls	r3, r3, #18
 8001d24:	4013      	ands	r3, r2
 8001d26:	d0f0      	beq.n	8001d0a <HAL_RCC_OscConfig+0x53a>
 8001d28:	e059      	b.n	8001dde <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	4b2e      	ldr	r3, [pc, #184]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001d30:	4931      	ldr	r1, [pc, #196]	@ (8001df8 <HAL_RCC_OscConfig+0x628>)
 8001d32:	400a      	ands	r2, r1
 8001d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d36:	f7ff fa3f 	bl	80011b8 <HAL_GetTick>
 8001d3a:	0003      	movs	r3, r0
 8001d3c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d40:	f7ff fa3a 	bl	80011b8 <HAL_GetTick>
 8001d44:	0002      	movs	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e046      	b.n	8001de0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d52:	4b25      	ldr	r3, [pc, #148]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	2380      	movs	r3, #128	@ 0x80
 8001d58:	049b      	lsls	r3, r3, #18
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001d5e:	4b22      	ldr	r3, [pc, #136]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	4b21      	ldr	r3, [pc, #132]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001d64:	4926      	ldr	r1, [pc, #152]	@ (8001e00 <HAL_RCC_OscConfig+0x630>)
 8001d66:	400a      	ands	r2, r1
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	e038      	b.n	8001dde <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e033      	b.n	8001de0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001d78:	4b1b      	ldr	r3, [pc, #108]	@ (8001de8 <HAL_RCC_OscConfig+0x618>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	2203      	movs	r2, #3
 8001d82:	401a      	ands	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d126      	bne.n	8001dda <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	2270      	movs	r2, #112	@ 0x70
 8001d90:	401a      	ands	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d11f      	bne.n	8001dda <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	23fe      	movs	r3, #254	@ 0xfe
 8001d9e:	01db      	lsls	r3, r3, #7
 8001da0:	401a      	ands	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d116      	bne.n	8001dda <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	23f8      	movs	r3, #248	@ 0xf8
 8001db0:	039b      	lsls	r3, r3, #14
 8001db2:	401a      	ands	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d10e      	bne.n	8001dda <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	23e0      	movs	r3, #224	@ 0xe0
 8001dc0:	051b      	lsls	r3, r3, #20
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d106      	bne.n	8001dda <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	0f5b      	lsrs	r3, r3, #29
 8001dd0:	075a      	lsls	r2, r3, #29
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d001      	beq.n	8001dde <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	0018      	movs	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b008      	add	sp, #32
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40007000 	.word	0x40007000
 8001df0:	00001388 	.word	0x00001388
 8001df4:	efffffff 	.word	0xefffffff
 8001df8:	feffffff 	.word	0xfeffffff
 8001dfc:	11c1808c 	.word	0x11c1808c
 8001e00:	eefefffc 	.word	0xeefefffc

08001e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0e9      	b.n	8001fec <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e18:	4b76      	ldr	r3, [pc, #472]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2207      	movs	r2, #7
 8001e1e:	4013      	ands	r3, r2
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d91e      	bls.n	8001e64 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	4b73      	ldr	r3, [pc, #460]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2207      	movs	r2, #7
 8001e2c:	4393      	bics	r3, r2
 8001e2e:	0019      	movs	r1, r3
 8001e30:	4b70      	ldr	r3, [pc, #448]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e38:	f7ff f9be 	bl	80011b8 <HAL_GetTick>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e40:	e009      	b.n	8001e56 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e42:	f7ff f9b9 	bl	80011b8 <HAL_GetTick>
 8001e46:	0002      	movs	r2, r0
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1f4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e0ca      	b.n	8001fec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e56:	4b67      	ldr	r3, [pc, #412]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2207      	movs	r2, #7
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d1ee      	bne.n	8001e42 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2202      	movs	r2, #2
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d015      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2204      	movs	r2, #4
 8001e74:	4013      	ands	r3, r2
 8001e76:	d006      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e78:	4b60      	ldr	r3, [pc, #384]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f8>)
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	4b5f      	ldr	r3, [pc, #380]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f8>)
 8001e7e:	21e0      	movs	r1, #224	@ 0xe0
 8001e80:	01c9      	lsls	r1, r1, #7
 8001e82:	430a      	orrs	r2, r1
 8001e84:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e86:	4b5d      	ldr	r3, [pc, #372]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f8>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	4a5d      	ldr	r2, [pc, #372]	@ (8002000 <HAL_RCC_ClockConfig+0x1fc>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	0019      	movs	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	4b59      	ldr	r3, [pc, #356]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f8>)
 8001e96:	430a      	orrs	r2, r1
 8001e98:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d057      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d107      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eac:	4b53      	ldr	r3, [pc, #332]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f8>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	2380      	movs	r3, #128	@ 0x80
 8001eb2:	029b      	lsls	r3, r3, #10
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d12b      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e097      	b.n	8001fec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d107      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec4:	4b4d      	ldr	r3, [pc, #308]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f8>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	2380      	movs	r3, #128	@ 0x80
 8001eca:	049b      	lsls	r3, r3, #18
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d11f      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e08b      	b.n	8001fec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d107      	bne.n	8001eec <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001edc:	4b47      	ldr	r3, [pc, #284]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f8>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	2380      	movs	r3, #128	@ 0x80
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d113      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e07f      	b.n	8001fec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d106      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ef4:	4b41      	ldr	r3, [pc, #260]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f8>)
 8001ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ef8:	2202      	movs	r2, #2
 8001efa:	4013      	ands	r3, r2
 8001efc:	d108      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e074      	b.n	8001fec <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f02:	4b3e      	ldr	r3, [pc, #248]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f8>)
 8001f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f06:	2202      	movs	r2, #2
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d101      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e06d      	b.n	8001fec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f10:	4b3a      	ldr	r3, [pc, #232]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f8>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2207      	movs	r2, #7
 8001f16:	4393      	bics	r3, r2
 8001f18:	0019      	movs	r1, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	4b37      	ldr	r3, [pc, #220]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f8>)
 8001f20:	430a      	orrs	r2, r1
 8001f22:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f24:	f7ff f948 	bl	80011b8 <HAL_GetTick>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2c:	e009      	b.n	8001f42 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f2e:	f7ff f943 	bl	80011b8 <HAL_GetTick>
 8001f32:	0002      	movs	r2, r0
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	4a2f      	ldr	r2, [pc, #188]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1f4>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e054      	b.n	8001fec <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f42:	4b2e      	ldr	r3, [pc, #184]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f8>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2238      	movs	r2, #56	@ 0x38
 8001f48:	401a      	ands	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d1ec      	bne.n	8001f2e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f54:	4b27      	ldr	r3, [pc, #156]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2207      	movs	r2, #7
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d21e      	bcs.n	8001fa0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f62:	4b24      	ldr	r3, [pc, #144]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2207      	movs	r2, #7
 8001f68:	4393      	bics	r3, r2
 8001f6a:	0019      	movs	r1, r3
 8001f6c:	4b21      	ldr	r3, [pc, #132]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f74:	f7ff f920 	bl	80011b8 <HAL_GetTick>
 8001f78:	0003      	movs	r3, r0
 8001f7a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f7c:	e009      	b.n	8001f92 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7e:	f7ff f91b 	bl	80011b8 <HAL_GetTick>
 8001f82:	0002      	movs	r2, r0
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	4a1b      	ldr	r2, [pc, #108]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1f4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e02c      	b.n	8001fec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f92:	4b18      	ldr	r3, [pc, #96]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2207      	movs	r2, #7
 8001f98:	4013      	ands	r3, r2
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d1ee      	bne.n	8001f7e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d009      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001faa:	4b14      	ldr	r3, [pc, #80]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f8>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	4a15      	ldr	r2, [pc, #84]	@ (8002004 <HAL_RCC_ClockConfig+0x200>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	4b10      	ldr	r3, [pc, #64]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f8>)
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001fbe:	f000 f829 	bl	8002014 <HAL_RCC_GetSysClockFreq>
 8001fc2:	0001      	movs	r1, r0
 8001fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001ffc <HAL_RCC_ClockConfig+0x1f8>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	220f      	movs	r2, #15
 8001fcc:	401a      	ands	r2, r3
 8001fce:	4b0e      	ldr	r3, [pc, #56]	@ (8002008 <HAL_RCC_ClockConfig+0x204>)
 8001fd0:	0092      	lsls	r2, r2, #2
 8001fd2:	58d3      	ldr	r3, [r2, r3]
 8001fd4:	221f      	movs	r2, #31
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	000a      	movs	r2, r1
 8001fda:	40da      	lsrs	r2, r3
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <HAL_RCC_ClockConfig+0x208>)
 8001fde:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8002010 <HAL_RCC_ClockConfig+0x20c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f7ff f88b 	bl	8001100 <HAL_InitTick>
 8001fea:	0003      	movs	r3, r0
}
 8001fec:	0018      	movs	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b004      	add	sp, #16
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40022000 	.word	0x40022000
 8001ff8:	00001388 	.word	0x00001388
 8001ffc:	40021000 	.word	0x40021000
 8002000:	fffff0ff 	.word	0xfffff0ff
 8002004:	ffff8fff 	.word	0xffff8fff
 8002008:	08003e8c 	.word	0x08003e8c
 800200c:	20000000 	.word	0x20000000
 8002010:	2000001c 	.word	0x2000001c

08002014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800201a:	4b3c      	ldr	r3, [pc, #240]	@ (800210c <HAL_RCC_GetSysClockFreq+0xf8>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2238      	movs	r2, #56	@ 0x38
 8002020:	4013      	ands	r3, r2
 8002022:	d10f      	bne.n	8002044 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002024:	4b39      	ldr	r3, [pc, #228]	@ (800210c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	0adb      	lsrs	r3, r3, #11
 800202a:	2207      	movs	r2, #7
 800202c:	4013      	ands	r3, r2
 800202e:	2201      	movs	r2, #1
 8002030:	409a      	lsls	r2, r3
 8002032:	0013      	movs	r3, r2
 8002034:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002036:	6839      	ldr	r1, [r7, #0]
 8002038:	4835      	ldr	r0, [pc, #212]	@ (8002110 <HAL_RCC_GetSysClockFreq+0xfc>)
 800203a:	f7fe f863 	bl	8000104 <__udivsi3>
 800203e:	0003      	movs	r3, r0
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	e05d      	b.n	8002100 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002044:	4b31      	ldr	r3, [pc, #196]	@ (800210c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2238      	movs	r2, #56	@ 0x38
 800204a:	4013      	ands	r3, r2
 800204c:	2b08      	cmp	r3, #8
 800204e:	d102      	bne.n	8002056 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002050:	4b30      	ldr	r3, [pc, #192]	@ (8002114 <HAL_RCC_GetSysClockFreq+0x100>)
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	e054      	b.n	8002100 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002056:	4b2d      	ldr	r3, [pc, #180]	@ (800210c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2238      	movs	r2, #56	@ 0x38
 800205c:	4013      	ands	r3, r2
 800205e:	2b10      	cmp	r3, #16
 8002060:	d138      	bne.n	80020d4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002062:	4b2a      	ldr	r3, [pc, #168]	@ (800210c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	2203      	movs	r2, #3
 8002068:	4013      	ands	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800206c:	4b27      	ldr	r3, [pc, #156]	@ (800210c <HAL_RCC_GetSysClockFreq+0xf8>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	091b      	lsrs	r3, r3, #4
 8002072:	2207      	movs	r2, #7
 8002074:	4013      	ands	r3, r2
 8002076:	3301      	adds	r3, #1
 8002078:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2b03      	cmp	r3, #3
 800207e:	d10d      	bne.n	800209c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	4824      	ldr	r0, [pc, #144]	@ (8002114 <HAL_RCC_GetSysClockFreq+0x100>)
 8002084:	f7fe f83e 	bl	8000104 <__udivsi3>
 8002088:	0003      	movs	r3, r0
 800208a:	0019      	movs	r1, r3
 800208c:	4b1f      	ldr	r3, [pc, #124]	@ (800210c <HAL_RCC_GetSysClockFreq+0xf8>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	0a1b      	lsrs	r3, r3, #8
 8002092:	227f      	movs	r2, #127	@ 0x7f
 8002094:	4013      	ands	r3, r2
 8002096:	434b      	muls	r3, r1
 8002098:	617b      	str	r3, [r7, #20]
        break;
 800209a:	e00d      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800209c:	68b9      	ldr	r1, [r7, #8]
 800209e:	481c      	ldr	r0, [pc, #112]	@ (8002110 <HAL_RCC_GetSysClockFreq+0xfc>)
 80020a0:	f7fe f830 	bl	8000104 <__udivsi3>
 80020a4:	0003      	movs	r3, r0
 80020a6:	0019      	movs	r1, r3
 80020a8:	4b18      	ldr	r3, [pc, #96]	@ (800210c <HAL_RCC_GetSysClockFreq+0xf8>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	0a1b      	lsrs	r3, r3, #8
 80020ae:	227f      	movs	r2, #127	@ 0x7f
 80020b0:	4013      	ands	r3, r2
 80020b2:	434b      	muls	r3, r1
 80020b4:	617b      	str	r3, [r7, #20]
        break;
 80020b6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80020b8:	4b14      	ldr	r3, [pc, #80]	@ (800210c <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	0f5b      	lsrs	r3, r3, #29
 80020be:	2207      	movs	r2, #7
 80020c0:	4013      	ands	r3, r2
 80020c2:	3301      	adds	r3, #1
 80020c4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	6978      	ldr	r0, [r7, #20]
 80020ca:	f7fe f81b 	bl	8000104 <__udivsi3>
 80020ce:	0003      	movs	r3, r0
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	e015      	b.n	8002100 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80020d4:	4b0d      	ldr	r3, [pc, #52]	@ (800210c <HAL_RCC_GetSysClockFreq+0xf8>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2238      	movs	r2, #56	@ 0x38
 80020da:	4013      	ands	r3, r2
 80020dc:	2b20      	cmp	r3, #32
 80020de:	d103      	bne.n	80020e8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80020e0:	2380      	movs	r3, #128	@ 0x80
 80020e2:	021b      	lsls	r3, r3, #8
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	e00b      	b.n	8002100 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80020e8:	4b08      	ldr	r3, [pc, #32]	@ (800210c <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	2238      	movs	r2, #56	@ 0x38
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b18      	cmp	r3, #24
 80020f2:	d103      	bne.n	80020fc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80020f4:	23fa      	movs	r3, #250	@ 0xfa
 80020f6:	01db      	lsls	r3, r3, #7
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	e001      	b.n	8002100 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002100:	693b      	ldr	r3, [r7, #16]
}
 8002102:	0018      	movs	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	b006      	add	sp, #24
 8002108:	bd80      	pop	{r7, pc}
 800210a:	46c0      	nop			@ (mov r8, r8)
 800210c:	40021000 	.word	0x40021000
 8002110:	00f42400 	.word	0x00f42400
 8002114:	007a1200 	.word	0x007a1200

08002118 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002120:	2313      	movs	r3, #19
 8002122:	18fb      	adds	r3, r7, r3
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002128:	2312      	movs	r3, #18
 800212a:	18fb      	adds	r3, r7, r3
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	2380      	movs	r3, #128	@ 0x80
 8002136:	029b      	lsls	r3, r3, #10
 8002138:	4013      	ands	r3, r2
 800213a:	d100      	bne.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800213c:	e0a3      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800213e:	2011      	movs	r0, #17
 8002140:	183b      	adds	r3, r7, r0
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002146:	4bc3      	ldr	r3, [pc, #780]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002148:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800214a:	2380      	movs	r3, #128	@ 0x80
 800214c:	055b      	lsls	r3, r3, #21
 800214e:	4013      	ands	r3, r2
 8002150:	d110      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002152:	4bc0      	ldr	r3, [pc, #768]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002154:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002156:	4bbf      	ldr	r3, [pc, #764]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002158:	2180      	movs	r1, #128	@ 0x80
 800215a:	0549      	lsls	r1, r1, #21
 800215c:	430a      	orrs	r2, r1
 800215e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002160:	4bbc      	ldr	r3, [pc, #752]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002162:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002164:	2380      	movs	r3, #128	@ 0x80
 8002166:	055b      	lsls	r3, r3, #21
 8002168:	4013      	ands	r3, r2
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800216e:	183b      	adds	r3, r7, r0
 8002170:	2201      	movs	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002174:	4bb8      	ldr	r3, [pc, #736]	@ (8002458 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4bb7      	ldr	r3, [pc, #732]	@ (8002458 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800217a:	2180      	movs	r1, #128	@ 0x80
 800217c:	0049      	lsls	r1, r1, #1
 800217e:	430a      	orrs	r2, r1
 8002180:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002182:	f7ff f819 	bl	80011b8 <HAL_GetTick>
 8002186:	0003      	movs	r3, r0
 8002188:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800218a:	e00b      	b.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218c:	f7ff f814 	bl	80011b8 <HAL_GetTick>
 8002190:	0002      	movs	r2, r0
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d904      	bls.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800219a:	2313      	movs	r3, #19
 800219c:	18fb      	adds	r3, r7, r3
 800219e:	2203      	movs	r2, #3
 80021a0:	701a      	strb	r2, [r3, #0]
        break;
 80021a2:	e005      	b.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021a4:	4bac      	ldr	r3, [pc, #688]	@ (8002458 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	2380      	movs	r3, #128	@ 0x80
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4013      	ands	r3, r2
 80021ae:	d0ed      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80021b0:	2313      	movs	r3, #19
 80021b2:	18fb      	adds	r3, r7, r3
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d154      	bne.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021ba:	4ba6      	ldr	r3, [pc, #664]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021be:	23c0      	movs	r3, #192	@ 0xc0
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4013      	ands	r3, r2
 80021c4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d019      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d014      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021d6:	4b9f      	ldr	r3, [pc, #636]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021da:	4aa0      	ldr	r2, [pc, #640]	@ (800245c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80021dc:	4013      	ands	r3, r2
 80021de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021e0:	4b9c      	ldr	r3, [pc, #624]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021e4:	4b9b      	ldr	r3, [pc, #620]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021e6:	2180      	movs	r1, #128	@ 0x80
 80021e8:	0249      	lsls	r1, r1, #9
 80021ea:	430a      	orrs	r2, r1
 80021ec:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021ee:	4b99      	ldr	r3, [pc, #612]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021f2:	4b98      	ldr	r3, [pc, #608]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021f4:	499a      	ldr	r1, [pc, #616]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80021f6:	400a      	ands	r2, r1
 80021f8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021fa:	4b96      	ldr	r3, [pc, #600]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	2201      	movs	r2, #1
 8002204:	4013      	ands	r3, r2
 8002206:	d016      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002208:	f7fe ffd6 	bl	80011b8 <HAL_GetTick>
 800220c:	0003      	movs	r3, r0
 800220e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002210:	e00c      	b.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002212:	f7fe ffd1 	bl	80011b8 <HAL_GetTick>
 8002216:	0002      	movs	r2, r0
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	4a91      	ldr	r2, [pc, #580]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d904      	bls.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002222:	2313      	movs	r3, #19
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	2203      	movs	r2, #3
 8002228:	701a      	strb	r2, [r3, #0]
            break;
 800222a:	e004      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800222c:	4b89      	ldr	r3, [pc, #548]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800222e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002230:	2202      	movs	r2, #2
 8002232:	4013      	ands	r3, r2
 8002234:	d0ed      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002236:	2313      	movs	r3, #19
 8002238:	18fb      	adds	r3, r7, r3
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10a      	bne.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002240:	4b84      	ldr	r3, [pc, #528]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002244:	4a85      	ldr	r2, [pc, #532]	@ (800245c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002246:	4013      	ands	r3, r2
 8002248:	0019      	movs	r1, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800224e:	4b81      	ldr	r3, [pc, #516]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002250:	430a      	orrs	r2, r1
 8002252:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002254:	e00c      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002256:	2312      	movs	r3, #18
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	2213      	movs	r2, #19
 800225c:	18ba      	adds	r2, r7, r2
 800225e:	7812      	ldrb	r2, [r2, #0]
 8002260:	701a      	strb	r2, [r3, #0]
 8002262:	e005      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002264:	2312      	movs	r3, #18
 8002266:	18fb      	adds	r3, r7, r3
 8002268:	2213      	movs	r2, #19
 800226a:	18ba      	adds	r2, r7, r2
 800226c:	7812      	ldrb	r2, [r2, #0]
 800226e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002270:	2311      	movs	r3, #17
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d105      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800227a:	4b76      	ldr	r3, [pc, #472]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800227c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800227e:	4b75      	ldr	r3, [pc, #468]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002280:	4979      	ldr	r1, [pc, #484]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002282:	400a      	ands	r2, r1
 8002284:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2201      	movs	r2, #1
 800228c:	4013      	ands	r3, r2
 800228e:	d009      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002290:	4b70      	ldr	r3, [pc, #448]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002294:	2203      	movs	r2, #3
 8002296:	4393      	bics	r3, r2
 8002298:	0019      	movs	r1, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	4b6d      	ldr	r3, [pc, #436]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022a0:	430a      	orrs	r2, r1
 80022a2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2202      	movs	r2, #2
 80022aa:	4013      	ands	r3, r2
 80022ac:	d009      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022ae:	4b69      	ldr	r3, [pc, #420]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b2:	220c      	movs	r2, #12
 80022b4:	4393      	bics	r3, r2
 80022b6:	0019      	movs	r1, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	4b65      	ldr	r3, [pc, #404]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022be:	430a      	orrs	r2, r1
 80022c0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2210      	movs	r2, #16
 80022c8:	4013      	ands	r3, r2
 80022ca:	d009      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022cc:	4b61      	ldr	r3, [pc, #388]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d0:	4a66      	ldr	r2, [pc, #408]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80022d2:	4013      	ands	r3, r2
 80022d4:	0019      	movs	r1, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	4b5e      	ldr	r3, [pc, #376]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022dc:	430a      	orrs	r2, r1
 80022de:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	2380      	movs	r3, #128	@ 0x80
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4013      	ands	r3, r2
 80022ea:	d009      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022ec:	4b59      	ldr	r3, [pc, #356]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f0:	4a5f      	ldr	r2, [pc, #380]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	0019      	movs	r1, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699a      	ldr	r2, [r3, #24]
 80022fa:	4b56      	ldr	r3, [pc, #344]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022fc:	430a      	orrs	r2, r1
 80022fe:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	2380      	movs	r3, #128	@ 0x80
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4013      	ands	r3, r2
 800230a:	d009      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800230c:	4b51      	ldr	r3, [pc, #324]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800230e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002310:	4a58      	ldr	r2, [pc, #352]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002312:	4013      	ands	r3, r2
 8002314:	0019      	movs	r1, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69da      	ldr	r2, [r3, #28]
 800231a:	4b4e      	ldr	r3, [pc, #312]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800231c:	430a      	orrs	r2, r1
 800231e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2220      	movs	r2, #32
 8002326:	4013      	ands	r3, r2
 8002328:	d009      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800232a:	4b4a      	ldr	r3, [pc, #296]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800232c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800232e:	4a52      	ldr	r2, [pc, #328]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002330:	4013      	ands	r3, r2
 8002332:	0019      	movs	r1, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	4b46      	ldr	r3, [pc, #280]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800233a:	430a      	orrs	r2, r1
 800233c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	2380      	movs	r3, #128	@ 0x80
 8002344:	01db      	lsls	r3, r3, #7
 8002346:	4013      	ands	r3, r2
 8002348:	d015      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800234a:	4b42      	ldr	r3, [pc, #264]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800234c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	0899      	lsrs	r1, r3, #2
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1a      	ldr	r2, [r3, #32]
 8002356:	4b3f      	ldr	r3, [pc, #252]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002358:	430a      	orrs	r2, r1
 800235a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a1a      	ldr	r2, [r3, #32]
 8002360:	2380      	movs	r3, #128	@ 0x80
 8002362:	05db      	lsls	r3, r3, #23
 8002364:	429a      	cmp	r2, r3
 8002366:	d106      	bne.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002368:	4b3a      	ldr	r3, [pc, #232]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	4b39      	ldr	r3, [pc, #228]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800236e:	2180      	movs	r1, #128	@ 0x80
 8002370:	0249      	lsls	r1, r1, #9
 8002372:	430a      	orrs	r2, r1
 8002374:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	2380      	movs	r3, #128	@ 0x80
 800237c:	031b      	lsls	r3, r3, #12
 800237e:	4013      	ands	r3, r2
 8002380:	d009      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002382:	4b34      	ldr	r3, [pc, #208]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002386:	2240      	movs	r2, #64	@ 0x40
 8002388:	4393      	bics	r3, r2
 800238a:	0019      	movs	r1, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002390:	4b30      	ldr	r3, [pc, #192]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002392:	430a      	orrs	r2, r1
 8002394:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	2380      	movs	r3, #128	@ 0x80
 800239c:	039b      	lsls	r3, r3, #14
 800239e:	4013      	ands	r3, r2
 80023a0:	d016      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80023a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a6:	4a35      	ldr	r2, [pc, #212]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	0019      	movs	r1, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023b0:	4b28      	ldr	r3, [pc, #160]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023b2:	430a      	orrs	r2, r1
 80023b4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023ba:	2380      	movs	r3, #128	@ 0x80
 80023bc:	03db      	lsls	r3, r3, #15
 80023be:	429a      	cmp	r2, r3
 80023c0:	d106      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80023c2:	4b24      	ldr	r3, [pc, #144]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	4b23      	ldr	r3, [pc, #140]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023c8:	2180      	movs	r1, #128	@ 0x80
 80023ca:	0449      	lsls	r1, r1, #17
 80023cc:	430a      	orrs	r2, r1
 80023ce:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	2380      	movs	r3, #128	@ 0x80
 80023d6:	03db      	lsls	r3, r3, #15
 80023d8:	4013      	ands	r3, r2
 80023da:	d016      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80023dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e0:	4a27      	ldr	r2, [pc, #156]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	0019      	movs	r1, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ec:	430a      	orrs	r2, r1
 80023ee:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023f4:	2380      	movs	r3, #128	@ 0x80
 80023f6:	045b      	lsls	r3, r3, #17
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d106      	bne.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80023fc:	4b15      	ldr	r3, [pc, #84]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	4b14      	ldr	r3, [pc, #80]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002402:	2180      	movs	r1, #128	@ 0x80
 8002404:	0449      	lsls	r1, r1, #17
 8002406:	430a      	orrs	r2, r1
 8002408:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	2380      	movs	r3, #128	@ 0x80
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	4013      	ands	r3, r2
 8002414:	d016      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002416:	4b0f      	ldr	r3, [pc, #60]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800241a:	4a1a      	ldr	r2, [pc, #104]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800241c:	4013      	ands	r3, r2
 800241e:	0019      	movs	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	4b0b      	ldr	r3, [pc, #44]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002426:	430a      	orrs	r2, r1
 8002428:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695a      	ldr	r2, [r3, #20]
 800242e:	2380      	movs	r3, #128	@ 0x80
 8002430:	01db      	lsls	r3, r3, #7
 8002432:	429a      	cmp	r2, r3
 8002434:	d106      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002436:	4b07      	ldr	r3, [pc, #28]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800243c:	2180      	movs	r1, #128	@ 0x80
 800243e:	0249      	lsls	r1, r1, #9
 8002440:	430a      	orrs	r2, r1
 8002442:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002444:	2312      	movs	r3, #18
 8002446:	18fb      	adds	r3, r7, r3
 8002448:	781b      	ldrb	r3, [r3, #0]
}
 800244a:	0018      	movs	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	b006      	add	sp, #24
 8002450:	bd80      	pop	{r7, pc}
 8002452:	46c0      	nop			@ (mov r8, r8)
 8002454:	40021000 	.word	0x40021000
 8002458:	40007000 	.word	0x40007000
 800245c:	fffffcff 	.word	0xfffffcff
 8002460:	fffeffff 	.word	0xfffeffff
 8002464:	00001388 	.word	0x00001388
 8002468:	efffffff 	.word	0xefffffff
 800246c:	fffff3ff 	.word	0xfffff3ff
 8002470:	fff3ffff 	.word	0xfff3ffff
 8002474:	ffcfffff 	.word	0xffcfffff
 8002478:	ffffcfff 	.word	0xffffcfff
 800247c:	ffbfffff 	.word	0xffbfffff
 8002480:	feffffff 	.word	0xfeffffff
 8002484:	ffff3fff 	.word	0xffff3fff

08002488 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002488:	b5b0      	push	{r4, r5, r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002490:	230f      	movs	r3, #15
 8002492:	18fb      	adds	r3, r7, r3
 8002494:	2201      	movs	r2, #1
 8002496:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d100      	bne.n	80024a0 <HAL_RTC_Init+0x18>
 800249e:	e08c      	b.n	80025ba <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2229      	movs	r2, #41	@ 0x29
 80024a4:	5c9b      	ldrb	r3, [r3, r2]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10b      	bne.n	80024c4 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2228      	movs	r2, #40	@ 0x28
 80024b0:	2100      	movs	r1, #0
 80024b2:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2288      	movs	r2, #136	@ 0x88
 80024b8:	0212      	lsls	r2, r2, #8
 80024ba:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	0018      	movs	r0, r3
 80024c0:	f7fe f872 	bl	80005a8 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2229      	movs	r2, #41	@ 0x29
 80024c8:	2102      	movs	r1, #2
 80024ca:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2210      	movs	r2, #16
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b10      	cmp	r3, #16
 80024d8:	d062      	beq.n	80025a0 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	22ca      	movs	r2, #202	@ 0xca
 80024e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2253      	movs	r2, #83	@ 0x53
 80024e8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80024ea:	250f      	movs	r5, #15
 80024ec:	197c      	adds	r4, r7, r5
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	0018      	movs	r0, r3
 80024f2:	f000 f891 	bl	8002618 <RTC_EnterInitMode>
 80024f6:	0003      	movs	r3, r0
 80024f8:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80024fa:	0028      	movs	r0, r5
 80024fc:	183b      	adds	r3, r7, r0
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d12c      	bne.n	800255e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699a      	ldr	r2, [r3, #24]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	492e      	ldr	r1, [pc, #184]	@ (80025c8 <HAL_RTC_Init+0x140>)
 8002510:	400a      	ands	r2, r1
 8002512:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6999      	ldr	r1, [r3, #24]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	431a      	orrs	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6912      	ldr	r2, [r2, #16]
 800253a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6919      	ldr	r1, [r3, #16]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	041a      	lsls	r2, r3, #16
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002550:	183c      	adds	r4, r7, r0
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	0018      	movs	r0, r3
 8002556:	f000 f8a1 	bl	800269c <RTC_ExitInitMode>
 800255a:	0003      	movs	r3, r0
 800255c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800255e:	230f      	movs	r3, #15
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d116      	bne.n	8002596 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	699a      	ldr	r2, [r3, #24]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	00d2      	lsls	r2, r2, #3
 8002574:	08d2      	lsrs	r2, r2, #3
 8002576:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6999      	ldr	r1, [r3, #24]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	431a      	orrs	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	22ff      	movs	r2, #255	@ 0xff
 800259c:	625a      	str	r2, [r3, #36]	@ 0x24
 800259e:	e003      	b.n	80025a8 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80025a0:	230f      	movs	r3, #15
 80025a2:	18fb      	adds	r3, r7, r3
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80025a8:	230f      	movs	r3, #15
 80025aa:	18fb      	adds	r3, r7, r3
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d103      	bne.n	80025ba <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2229      	movs	r2, #41	@ 0x29
 80025b6:	2101      	movs	r1, #1
 80025b8:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80025ba:	230f      	movs	r3, #15
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	781b      	ldrb	r3, [r3, #0]
}
 80025c0:	0018      	movs	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b004      	add	sp, #16
 80025c6:	bdb0      	pop	{r4, r5, r7, pc}
 80025c8:	fb8fffbf 	.word	0xfb8fffbf

080025cc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a0e      	ldr	r2, [pc, #56]	@ (8002614 <HAL_RTC_WaitForSynchro+0x48>)
 80025da:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80025dc:	f7fe fdec 	bl	80011b8 <HAL_GetTick>
 80025e0:	0003      	movs	r3, r0
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80025e4:	e00a      	b.n	80025fc <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80025e6:	f7fe fde7 	bl	80011b8 <HAL_GetTick>
 80025ea:	0002      	movs	r2, r0
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1ad2      	subs	r2, r2, r3
 80025f0:	23fa      	movs	r3, #250	@ 0xfa
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d901      	bls.n	80025fc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e006      	b.n	800260a <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	2220      	movs	r2, #32
 8002604:	4013      	ands	r3, r2
 8002606:	d0ee      	beq.n	80025e6 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	0018      	movs	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	b004      	add	sp, #16
 8002610:	bd80      	pop	{r7, pc}
 8002612:	46c0      	nop			@ (mov r8, r8)
 8002614:	0001005f 	.word	0x0001005f

08002618 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002620:	230f      	movs	r3, #15
 8002622:	18fb      	adds	r3, r7, r3
 8002624:	2200      	movs	r2, #0
 8002626:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	2240      	movs	r2, #64	@ 0x40
 8002630:	4013      	ands	r3, r2
 8002632:	d12c      	bne.n	800268e <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2180      	movs	r1, #128	@ 0x80
 8002640:	430a      	orrs	r2, r1
 8002642:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002644:	f7fe fdb8 	bl	80011b8 <HAL_GetTick>
 8002648:	0003      	movs	r3, r0
 800264a:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800264c:	e014      	b.n	8002678 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800264e:	f7fe fdb3 	bl	80011b8 <HAL_GetTick>
 8002652:	0002      	movs	r2, r0
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	1ad2      	subs	r2, r2, r3
 8002658:	200f      	movs	r0, #15
 800265a:	183b      	adds	r3, r7, r0
 800265c:	1839      	adds	r1, r7, r0
 800265e:	7809      	ldrb	r1, [r1, #0]
 8002660:	7019      	strb	r1, [r3, #0]
 8002662:	23fa      	movs	r3, #250	@ 0xfa
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	429a      	cmp	r2, r3
 8002668:	d906      	bls.n	8002678 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800266a:	183b      	adds	r3, r7, r0
 800266c:	2203      	movs	r2, #3
 800266e:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2229      	movs	r2, #41	@ 0x29
 8002674:	2103      	movs	r1, #3
 8002676:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	2240      	movs	r2, #64	@ 0x40
 8002680:	4013      	ands	r3, r2
 8002682:	d104      	bne.n	800268e <RTC_EnterInitMode+0x76>
 8002684:	230f      	movs	r3, #15
 8002686:	18fb      	adds	r3, r7, r3
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b03      	cmp	r3, #3
 800268c:	d1df      	bne.n	800264e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800268e:	230f      	movs	r3, #15
 8002690:	18fb      	adds	r3, r7, r3
 8002692:	781b      	ldrb	r3, [r3, #0]
}
 8002694:	0018      	movs	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	b004      	add	sp, #16
 800269a:	bd80      	pop	{r7, pc}

0800269c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800269c:	b590      	push	{r4, r7, lr}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026a4:	240f      	movs	r4, #15
 80026a6:	193b      	adds	r3, r7, r4
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80026ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002720 <RTC_ExitInitMode+0x84>)
 80026ae:	68da      	ldr	r2, [r3, #12]
 80026b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002720 <RTC_ExitInitMode+0x84>)
 80026b2:	2180      	movs	r1, #128	@ 0x80
 80026b4:	438a      	bics	r2, r1
 80026b6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80026b8:	4b19      	ldr	r3, [pc, #100]	@ (8002720 <RTC_ExitInitMode+0x84>)
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	2220      	movs	r2, #32
 80026be:	4013      	ands	r3, r2
 80026c0:	d10d      	bne.n	80026de <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	0018      	movs	r0, r3
 80026c6:	f7ff ff81 	bl	80025cc <HAL_RTC_WaitForSynchro>
 80026ca:	1e03      	subs	r3, r0, #0
 80026cc:	d021      	beq.n	8002712 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2229      	movs	r2, #41	@ 0x29
 80026d2:	2103      	movs	r1, #3
 80026d4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80026d6:	193b      	adds	r3, r7, r4
 80026d8:	2203      	movs	r2, #3
 80026da:	701a      	strb	r2, [r3, #0]
 80026dc:	e019      	b.n	8002712 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80026de:	4b10      	ldr	r3, [pc, #64]	@ (8002720 <RTC_ExitInitMode+0x84>)
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002720 <RTC_ExitInitMode+0x84>)
 80026e4:	2120      	movs	r1, #32
 80026e6:	438a      	bics	r2, r1
 80026e8:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	0018      	movs	r0, r3
 80026ee:	f7ff ff6d 	bl	80025cc <HAL_RTC_WaitForSynchro>
 80026f2:	1e03      	subs	r3, r0, #0
 80026f4:	d007      	beq.n	8002706 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2229      	movs	r2, #41	@ 0x29
 80026fa:	2103      	movs	r1, #3
 80026fc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80026fe:	230f      	movs	r3, #15
 8002700:	18fb      	adds	r3, r7, r3
 8002702:	2203      	movs	r2, #3
 8002704:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002706:	4b06      	ldr	r3, [pc, #24]	@ (8002720 <RTC_ExitInitMode+0x84>)
 8002708:	699a      	ldr	r2, [r3, #24]
 800270a:	4b05      	ldr	r3, [pc, #20]	@ (8002720 <RTC_ExitInitMode+0x84>)
 800270c:	2120      	movs	r1, #32
 800270e:	430a      	orrs	r2, r1
 8002710:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002712:	230f      	movs	r3, #15
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	781b      	ldrb	r3, [r3, #0]
}
 8002718:	0018      	movs	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	b005      	add	sp, #20
 800271e:	bd90      	pop	{r4, r7, pc}
 8002720:	40002800 	.word	0x40002800

08002724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e04a      	b.n	80027cc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	223d      	movs	r2, #61	@ 0x3d
 800273a:	5c9b      	ldrb	r3, [r3, r2]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d107      	bne.n	8002752 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	223c      	movs	r2, #60	@ 0x3c
 8002746:	2100      	movs	r1, #0
 8002748:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	0018      	movs	r0, r3
 800274e:	f7fe fac5 	bl	8000cdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	223d      	movs	r2, #61	@ 0x3d
 8002756:	2102      	movs	r1, #2
 8002758:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3304      	adds	r3, #4
 8002762:	0019      	movs	r1, r3
 8002764:	0010      	movs	r0, r2
 8002766:	f000 fd19 	bl	800319c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2248      	movs	r2, #72	@ 0x48
 800276e:	2101      	movs	r1, #1
 8002770:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	223e      	movs	r2, #62	@ 0x3e
 8002776:	2101      	movs	r1, #1
 8002778:	5499      	strb	r1, [r3, r2]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	223f      	movs	r2, #63	@ 0x3f
 800277e:	2101      	movs	r1, #1
 8002780:	5499      	strb	r1, [r3, r2]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2240      	movs	r2, #64	@ 0x40
 8002786:	2101      	movs	r1, #1
 8002788:	5499      	strb	r1, [r3, r2]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2241      	movs	r2, #65	@ 0x41
 800278e:	2101      	movs	r1, #1
 8002790:	5499      	strb	r1, [r3, r2]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2242      	movs	r2, #66	@ 0x42
 8002796:	2101      	movs	r1, #1
 8002798:	5499      	strb	r1, [r3, r2]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2243      	movs	r2, #67	@ 0x43
 800279e:	2101      	movs	r1, #1
 80027a0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2244      	movs	r2, #68	@ 0x44
 80027a6:	2101      	movs	r1, #1
 80027a8:	5499      	strb	r1, [r3, r2]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2245      	movs	r2, #69	@ 0x45
 80027ae:	2101      	movs	r1, #1
 80027b0:	5499      	strb	r1, [r3, r2]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2246      	movs	r2, #70	@ 0x46
 80027b6:	2101      	movs	r1, #1
 80027b8:	5499      	strb	r1, [r3, r2]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2247      	movs	r2, #71	@ 0x47
 80027be:	2101      	movs	r1, #1
 80027c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	223d      	movs	r2, #61	@ 0x3d
 80027c6:	2101      	movs	r1, #1
 80027c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	0018      	movs	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b002      	add	sp, #8
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e04a      	b.n	800287c <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	223d      	movs	r2, #61	@ 0x3d
 80027ea:	5c9b      	ldrb	r3, [r3, r2]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d107      	bne.n	8002802 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	223c      	movs	r2, #60	@ 0x3c
 80027f6:	2100      	movs	r1, #0
 80027f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	0018      	movs	r0, r3
 80027fe:	f000 f841 	bl	8002884 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	223d      	movs	r2, #61	@ 0x3d
 8002806:	2102      	movs	r1, #2
 8002808:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3304      	adds	r3, #4
 8002812:	0019      	movs	r1, r3
 8002814:	0010      	movs	r0, r2
 8002816:	f000 fcc1 	bl	800319c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2248      	movs	r2, #72	@ 0x48
 800281e:	2101      	movs	r1, #1
 8002820:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	223e      	movs	r2, #62	@ 0x3e
 8002826:	2101      	movs	r1, #1
 8002828:	5499      	strb	r1, [r3, r2]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	223f      	movs	r2, #63	@ 0x3f
 800282e:	2101      	movs	r1, #1
 8002830:	5499      	strb	r1, [r3, r2]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2240      	movs	r2, #64	@ 0x40
 8002836:	2101      	movs	r1, #1
 8002838:	5499      	strb	r1, [r3, r2]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2241      	movs	r2, #65	@ 0x41
 800283e:	2101      	movs	r1, #1
 8002840:	5499      	strb	r1, [r3, r2]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2242      	movs	r2, #66	@ 0x42
 8002846:	2101      	movs	r1, #1
 8002848:	5499      	strb	r1, [r3, r2]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2243      	movs	r2, #67	@ 0x43
 800284e:	2101      	movs	r1, #1
 8002850:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2244      	movs	r2, #68	@ 0x44
 8002856:	2101      	movs	r1, #1
 8002858:	5499      	strb	r1, [r3, r2]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2245      	movs	r2, #69	@ 0x45
 800285e:	2101      	movs	r1, #1
 8002860:	5499      	strb	r1, [r3, r2]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2246      	movs	r2, #70	@ 0x46
 8002866:	2101      	movs	r1, #1
 8002868:	5499      	strb	r1, [r3, r2]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2247      	movs	r2, #71	@ 0x47
 800286e:	2101      	movs	r1, #1
 8002870:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	223d      	movs	r2, #61	@ 0x3d
 8002876:	2101      	movs	r1, #1
 8002878:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	0018      	movs	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	b002      	add	sp, #8
 8002882:	bd80      	pop	{r7, pc}

08002884 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800288c:	46c0      	nop			@ (mov r8, r8)
 800288e:	46bd      	mov	sp, r7
 8002890:	b002      	add	sp, #8
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e04a      	b.n	800293c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	223d      	movs	r2, #61	@ 0x3d
 80028aa:	5c9b      	ldrb	r3, [r3, r2]
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d107      	bne.n	80028c2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	223c      	movs	r2, #60	@ 0x3c
 80028b6:	2100      	movs	r1, #0
 80028b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	0018      	movs	r0, r3
 80028be:	f000 f841 	bl	8002944 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	223d      	movs	r2, #61	@ 0x3d
 80028c6:	2102      	movs	r1, #2
 80028c8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3304      	adds	r3, #4
 80028d2:	0019      	movs	r1, r3
 80028d4:	0010      	movs	r0, r2
 80028d6:	f000 fc61 	bl	800319c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2248      	movs	r2, #72	@ 0x48
 80028de:	2101      	movs	r1, #1
 80028e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	223e      	movs	r2, #62	@ 0x3e
 80028e6:	2101      	movs	r1, #1
 80028e8:	5499      	strb	r1, [r3, r2]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	223f      	movs	r2, #63	@ 0x3f
 80028ee:	2101      	movs	r1, #1
 80028f0:	5499      	strb	r1, [r3, r2]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2240      	movs	r2, #64	@ 0x40
 80028f6:	2101      	movs	r1, #1
 80028f8:	5499      	strb	r1, [r3, r2]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2241      	movs	r2, #65	@ 0x41
 80028fe:	2101      	movs	r1, #1
 8002900:	5499      	strb	r1, [r3, r2]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2242      	movs	r2, #66	@ 0x42
 8002906:	2101      	movs	r1, #1
 8002908:	5499      	strb	r1, [r3, r2]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2243      	movs	r2, #67	@ 0x43
 800290e:	2101      	movs	r1, #1
 8002910:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2244      	movs	r2, #68	@ 0x44
 8002916:	2101      	movs	r1, #1
 8002918:	5499      	strb	r1, [r3, r2]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2245      	movs	r2, #69	@ 0x45
 800291e:	2101      	movs	r1, #1
 8002920:	5499      	strb	r1, [r3, r2]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2246      	movs	r2, #70	@ 0x46
 8002926:	2101      	movs	r1, #1
 8002928:	5499      	strb	r1, [r3, r2]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2247      	movs	r2, #71	@ 0x47
 800292e:	2101      	movs	r1, #1
 8002930:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	223d      	movs	r2, #61	@ 0x3d
 8002936:	2101      	movs	r1, #1
 8002938:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	0018      	movs	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	b002      	add	sp, #8
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800294c:	46c0      	nop			@ (mov r8, r8)
 800294e:	46bd      	mov	sp, r7
 8002950:	b002      	add	sp, #8
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d108      	bne.n	8002976 <HAL_TIM_PWM_Start+0x22>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	223e      	movs	r2, #62	@ 0x3e
 8002968:	5c9b      	ldrb	r3, [r3, r2]
 800296a:	b2db      	uxtb	r3, r3
 800296c:	3b01      	subs	r3, #1
 800296e:	1e5a      	subs	r2, r3, #1
 8002970:	4193      	sbcs	r3, r2
 8002972:	b2db      	uxtb	r3, r3
 8002974:	e037      	b.n	80029e6 <HAL_TIM_PWM_Start+0x92>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b04      	cmp	r3, #4
 800297a:	d108      	bne.n	800298e <HAL_TIM_PWM_Start+0x3a>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	223f      	movs	r2, #63	@ 0x3f
 8002980:	5c9b      	ldrb	r3, [r3, r2]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	3b01      	subs	r3, #1
 8002986:	1e5a      	subs	r2, r3, #1
 8002988:	4193      	sbcs	r3, r2
 800298a:	b2db      	uxtb	r3, r3
 800298c:	e02b      	b.n	80029e6 <HAL_TIM_PWM_Start+0x92>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b08      	cmp	r3, #8
 8002992:	d108      	bne.n	80029a6 <HAL_TIM_PWM_Start+0x52>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2240      	movs	r2, #64	@ 0x40
 8002998:	5c9b      	ldrb	r3, [r3, r2]
 800299a:	b2db      	uxtb	r3, r3
 800299c:	3b01      	subs	r3, #1
 800299e:	1e5a      	subs	r2, r3, #1
 80029a0:	4193      	sbcs	r3, r2
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	e01f      	b.n	80029e6 <HAL_TIM_PWM_Start+0x92>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b0c      	cmp	r3, #12
 80029aa:	d108      	bne.n	80029be <HAL_TIM_PWM_Start+0x6a>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2241      	movs	r2, #65	@ 0x41
 80029b0:	5c9b      	ldrb	r3, [r3, r2]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	1e5a      	subs	r2, r3, #1
 80029b8:	4193      	sbcs	r3, r2
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	e013      	b.n	80029e6 <HAL_TIM_PWM_Start+0x92>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	2b10      	cmp	r3, #16
 80029c2:	d108      	bne.n	80029d6 <HAL_TIM_PWM_Start+0x82>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2242      	movs	r2, #66	@ 0x42
 80029c8:	5c9b      	ldrb	r3, [r3, r2]
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	3b01      	subs	r3, #1
 80029ce:	1e5a      	subs	r2, r3, #1
 80029d0:	4193      	sbcs	r3, r2
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	e007      	b.n	80029e6 <HAL_TIM_PWM_Start+0x92>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2243      	movs	r2, #67	@ 0x43
 80029da:	5c9b      	ldrb	r3, [r3, r2]
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	3b01      	subs	r3, #1
 80029e0:	1e5a      	subs	r2, r3, #1
 80029e2:	4193      	sbcs	r3, r2
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e08b      	b.n	8002b06 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d104      	bne.n	80029fe <HAL_TIM_PWM_Start+0xaa>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	223e      	movs	r2, #62	@ 0x3e
 80029f8:	2102      	movs	r1, #2
 80029fa:	5499      	strb	r1, [r3, r2]
 80029fc:	e023      	b.n	8002a46 <HAL_TIM_PWM_Start+0xf2>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d104      	bne.n	8002a0e <HAL_TIM_PWM_Start+0xba>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	223f      	movs	r2, #63	@ 0x3f
 8002a08:	2102      	movs	r1, #2
 8002a0a:	5499      	strb	r1, [r3, r2]
 8002a0c:	e01b      	b.n	8002a46 <HAL_TIM_PWM_Start+0xf2>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d104      	bne.n	8002a1e <HAL_TIM_PWM_Start+0xca>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2240      	movs	r2, #64	@ 0x40
 8002a18:	2102      	movs	r1, #2
 8002a1a:	5499      	strb	r1, [r3, r2]
 8002a1c:	e013      	b.n	8002a46 <HAL_TIM_PWM_Start+0xf2>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b0c      	cmp	r3, #12
 8002a22:	d104      	bne.n	8002a2e <HAL_TIM_PWM_Start+0xda>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2241      	movs	r2, #65	@ 0x41
 8002a28:	2102      	movs	r1, #2
 8002a2a:	5499      	strb	r1, [r3, r2]
 8002a2c:	e00b      	b.n	8002a46 <HAL_TIM_PWM_Start+0xf2>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b10      	cmp	r3, #16
 8002a32:	d104      	bne.n	8002a3e <HAL_TIM_PWM_Start+0xea>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2242      	movs	r2, #66	@ 0x42
 8002a38:	2102      	movs	r1, #2
 8002a3a:	5499      	strb	r1, [r3, r2]
 8002a3c:	e003      	b.n	8002a46 <HAL_TIM_PWM_Start+0xf2>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2243      	movs	r2, #67	@ 0x43
 8002a42:	2102      	movs	r1, #2
 8002a44:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6839      	ldr	r1, [r7, #0]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f001 f8b6 	bl	8003bc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a2d      	ldr	r2, [pc, #180]	@ (8002b10 <HAL_TIM_PWM_Start+0x1bc>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00e      	beq.n	8002a7c <HAL_TIM_PWM_Start+0x128>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a2c      	ldr	r2, [pc, #176]	@ (8002b14 <HAL_TIM_PWM_Start+0x1c0>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d009      	beq.n	8002a7c <HAL_TIM_PWM_Start+0x128>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a2a      	ldr	r2, [pc, #168]	@ (8002b18 <HAL_TIM_PWM_Start+0x1c4>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d004      	beq.n	8002a7c <HAL_TIM_PWM_Start+0x128>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a29      	ldr	r2, [pc, #164]	@ (8002b1c <HAL_TIM_PWM_Start+0x1c8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d101      	bne.n	8002a80 <HAL_TIM_PWM_Start+0x12c>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <HAL_TIM_PWM_Start+0x12e>
 8002a80:	2300      	movs	r3, #0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d008      	beq.n	8002a98 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2180      	movs	r1, #128	@ 0x80
 8002a92:	0209      	lsls	r1, r1, #8
 8002a94:	430a      	orrs	r2, r1
 8002a96:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a1c      	ldr	r2, [pc, #112]	@ (8002b10 <HAL_TIM_PWM_Start+0x1bc>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d00f      	beq.n	8002ac2 <HAL_TIM_PWM_Start+0x16e>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	2380      	movs	r3, #128	@ 0x80
 8002aa8:	05db      	lsls	r3, r3, #23
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d009      	beq.n	8002ac2 <HAL_TIM_PWM_Start+0x16e>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a1b      	ldr	r2, [pc, #108]	@ (8002b20 <HAL_TIM_PWM_Start+0x1cc>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d004      	beq.n	8002ac2 <HAL_TIM_PWM_Start+0x16e>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a15      	ldr	r2, [pc, #84]	@ (8002b14 <HAL_TIM_PWM_Start+0x1c0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d116      	bne.n	8002af0 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	4a16      	ldr	r2, [pc, #88]	@ (8002b24 <HAL_TIM_PWM_Start+0x1d0>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2b06      	cmp	r3, #6
 8002ad2:	d016      	beq.n	8002b02 <HAL_TIM_PWM_Start+0x1ae>
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	2380      	movs	r3, #128	@ 0x80
 8002ad8:	025b      	lsls	r3, r3, #9
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d011      	beq.n	8002b02 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2101      	movs	r1, #1
 8002aea:	430a      	orrs	r2, r1
 8002aec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aee:	e008      	b.n	8002b02 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2101      	movs	r1, #1
 8002afc:	430a      	orrs	r2, r1
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	e000      	b.n	8002b04 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b02:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	0018      	movs	r0, r3
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	b004      	add	sp, #16
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	46c0      	nop			@ (mov r8, r8)
 8002b10:	40012c00 	.word	0x40012c00
 8002b14:	40014000 	.word	0x40014000
 8002b18:	40014400 	.word	0x40014400
 8002b1c:	40014800 	.word	0x40014800
 8002b20:	40000400 	.word	0x40000400
 8002b24:	00010007 	.word	0x00010007

08002b28 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e04a      	b.n	8002bd0 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	223d      	movs	r2, #61	@ 0x3d
 8002b3e:	5c9b      	ldrb	r3, [r3, r2]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d107      	bne.n	8002b56 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	223c      	movs	r2, #60	@ 0x3c
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	0018      	movs	r0, r3
 8002b52:	f000 f841 	bl	8002bd8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	223d      	movs	r2, #61	@ 0x3d
 8002b5a:	2102      	movs	r1, #2
 8002b5c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3304      	adds	r3, #4
 8002b66:	0019      	movs	r1, r3
 8002b68:	0010      	movs	r0, r2
 8002b6a:	f000 fb17 	bl	800319c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2248      	movs	r2, #72	@ 0x48
 8002b72:	2101      	movs	r1, #1
 8002b74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	223e      	movs	r2, #62	@ 0x3e
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	5499      	strb	r1, [r3, r2]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	223f      	movs	r2, #63	@ 0x3f
 8002b82:	2101      	movs	r1, #1
 8002b84:	5499      	strb	r1, [r3, r2]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2240      	movs	r2, #64	@ 0x40
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	5499      	strb	r1, [r3, r2]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2241      	movs	r2, #65	@ 0x41
 8002b92:	2101      	movs	r1, #1
 8002b94:	5499      	strb	r1, [r3, r2]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2242      	movs	r2, #66	@ 0x42
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	5499      	strb	r1, [r3, r2]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2243      	movs	r2, #67	@ 0x43
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2244      	movs	r2, #68	@ 0x44
 8002baa:	2101      	movs	r1, #1
 8002bac:	5499      	strb	r1, [r3, r2]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2245      	movs	r2, #69	@ 0x45
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	5499      	strb	r1, [r3, r2]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2246      	movs	r2, #70	@ 0x46
 8002bba:	2101      	movs	r1, #1
 8002bbc:	5499      	strb	r1, [r3, r2]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2247      	movs	r2, #71	@ 0x47
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	223d      	movs	r2, #61	@ 0x3d
 8002bca:	2101      	movs	r1, #1
 8002bcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b002      	add	sp, #8
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002be0:	46c0      	nop			@ (mov r8, r8)
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b002      	add	sp, #8
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf4:	2317      	movs	r3, #23
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	223c      	movs	r2, #60	@ 0x3c
 8002c00:	5c9b      	ldrb	r3, [r3, r2]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_TIM_OC_ConfigChannel+0x22>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e048      	b.n	8002c9c <HAL_TIM_OC_ConfigChannel+0xb4>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	223c      	movs	r2, #60	@ 0x3c
 8002c0e:	2101      	movs	r1, #1
 8002c10:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b14      	cmp	r3, #20
 8002c16:	d835      	bhi.n	8002c84 <HAL_TIM_OC_ConfigChannel+0x9c>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	009a      	lsls	r2, r3, #2
 8002c1c:	4b21      	ldr	r3, [pc, #132]	@ (8002ca4 <HAL_TIM_OC_ConfigChannel+0xbc>)
 8002c1e:	18d3      	adds	r3, r2, r3
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	0011      	movs	r1, r2
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f000 fb43 	bl	80032b8 <TIM_OC1_SetConfig>
      break;
 8002c32:	e02c      	b.n	8002c8e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	0011      	movs	r1, r2
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f000 fbc5 	bl	80033cc <TIM_OC2_SetConfig>
      break;
 8002c42:	e024      	b.n	8002c8e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	0011      	movs	r1, r2
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f000 fc41 	bl	80034d4 <TIM_OC3_SetConfig>
      break;
 8002c52:	e01c      	b.n	8002c8e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	0011      	movs	r1, r2
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f000 fcc1 	bl	80035e4 <TIM_OC4_SetConfig>
      break;
 8002c62:	e014      	b.n	8002c8e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	0011      	movs	r1, r2
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f000 fd23 	bl	80036b8 <TIM_OC5_SetConfig>
      break;
 8002c72:	e00c      	b.n	8002c8e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68ba      	ldr	r2, [r7, #8]
 8002c7a:	0011      	movs	r1, r2
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f000 fd7b 	bl	8003778 <TIM_OC6_SetConfig>
      break;
 8002c82:	e004      	b.n	8002c8e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002c84:	2317      	movs	r3, #23
 8002c86:	18fb      	adds	r3, r7, r3
 8002c88:	2201      	movs	r2, #1
 8002c8a:	701a      	strb	r2, [r3, #0]
      break;
 8002c8c:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	223c      	movs	r2, #60	@ 0x3c
 8002c92:	2100      	movs	r1, #0
 8002c94:	5499      	strb	r1, [r3, r2]

  return status;
 8002c96:	2317      	movs	r3, #23
 8002c98:	18fb      	adds	r3, r7, r3
 8002c9a:	781b      	ldrb	r3, [r3, #0]
}
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	b006      	add	sp, #24
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	08003ecc 	.word	0x08003ecc

08002ca8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb4:	2317      	movs	r3, #23
 8002cb6:	18fb      	adds	r3, r7, r3
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	223c      	movs	r2, #60	@ 0x3c
 8002cc0:	5c9b      	ldrb	r3, [r3, r2]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_TIM_IC_ConfigChannel+0x22>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e08c      	b.n	8002de4 <HAL_TIM_IC_ConfigChannel+0x13c>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	223c      	movs	r2, #60	@ 0x3c
 8002cce:	2101      	movs	r1, #1
 8002cd0:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d11b      	bne.n	8002d10 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002ce8:	f000 fdaa 	bl	8003840 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	699a      	ldr	r2, [r3, #24]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	210c      	movs	r1, #12
 8002cf8:	438a      	bics	r2, r1
 8002cfa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6999      	ldr	r1, [r3, #24]
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	619a      	str	r2, [r3, #24]
 8002d0e:	e062      	b.n	8002dd6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d11c      	bne.n	8002d50 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002d26:	f000 fe15 	bl	8003954 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	699a      	ldr	r2, [r3, #24]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	492d      	ldr	r1, [pc, #180]	@ (8002dec <HAL_TIM_IC_ConfigChannel+0x144>)
 8002d36:	400a      	ands	r2, r1
 8002d38:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6999      	ldr	r1, [r3, #24]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	021a      	lsls	r2, r3, #8
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	619a      	str	r2, [r3, #24]
 8002d4e:	e042      	b.n	8002dd6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d11b      	bne.n	8002d8e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002d66:	f000 fe69 	bl	8003a3c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	69da      	ldr	r2, [r3, #28]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	210c      	movs	r1, #12
 8002d76:	438a      	bics	r2, r1
 8002d78:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	69d9      	ldr	r1, [r3, #28]
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	61da      	str	r2, [r3, #28]
 8002d8c:	e023      	b.n	8002dd6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b0c      	cmp	r3, #12
 8002d92:	d11c      	bne.n	8002dce <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002da4:	f000 fe8a 	bl	8003abc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	69da      	ldr	r2, [r3, #28]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	490e      	ldr	r1, [pc, #56]	@ (8002dec <HAL_TIM_IC_ConfigChannel+0x144>)
 8002db4:	400a      	ands	r2, r1
 8002db6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	69d9      	ldr	r1, [r3, #28]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	021a      	lsls	r2, r3, #8
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	61da      	str	r2, [r3, #28]
 8002dcc:	e003      	b.n	8002dd6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8002dce:	2317      	movs	r3, #23
 8002dd0:	18fb      	adds	r3, r7, r3
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	223c      	movs	r2, #60	@ 0x3c
 8002dda:	2100      	movs	r1, #0
 8002ddc:	5499      	strb	r1, [r3, r2]

  return status;
 8002dde:	2317      	movs	r3, #23
 8002de0:	18fb      	adds	r3, r7, r3
 8002de2:	781b      	ldrb	r3, [r3, #0]
}
 8002de4:	0018      	movs	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b006      	add	sp, #24
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	fffff3ff 	.word	0xfffff3ff

08002df0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dfc:	2317      	movs	r3, #23
 8002dfe:	18fb      	adds	r3, r7, r3
 8002e00:	2200      	movs	r2, #0
 8002e02:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	223c      	movs	r2, #60	@ 0x3c
 8002e08:	5c9b      	ldrb	r3, [r3, r2]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e0e5      	b.n	8002fde <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	223c      	movs	r2, #60	@ 0x3c
 8002e16:	2101      	movs	r1, #1
 8002e18:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b14      	cmp	r3, #20
 8002e1e:	d900      	bls.n	8002e22 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002e20:	e0d1      	b.n	8002fc6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	009a      	lsls	r2, r3, #2
 8002e26:	4b70      	ldr	r3, [pc, #448]	@ (8002fe8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002e28:	18d3      	adds	r3, r2, r3
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	0011      	movs	r1, r2
 8002e36:	0018      	movs	r0, r3
 8002e38:	f000 fa3e 	bl	80032b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699a      	ldr	r2, [r3, #24]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2108      	movs	r1, #8
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699a      	ldr	r2, [r3, #24]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2104      	movs	r1, #4
 8002e58:	438a      	bics	r2, r1
 8002e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6999      	ldr	r1, [r3, #24]
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	691a      	ldr	r2, [r3, #16]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	619a      	str	r2, [r3, #24]
      break;
 8002e6e:	e0af      	b.n	8002fd0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	0011      	movs	r1, r2
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f000 faa7 	bl	80033cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	699a      	ldr	r2, [r3, #24]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2180      	movs	r1, #128	@ 0x80
 8002e8a:	0109      	lsls	r1, r1, #4
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4954      	ldr	r1, [pc, #336]	@ (8002fec <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002e9c:	400a      	ands	r2, r1
 8002e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6999      	ldr	r1, [r3, #24]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	021a      	lsls	r2, r3, #8
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	619a      	str	r2, [r3, #24]
      break;
 8002eb4:	e08c      	b.n	8002fd0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	0011      	movs	r1, r2
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f000 fb08 	bl	80034d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	69da      	ldr	r2, [r3, #28]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2108      	movs	r1, #8
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	69da      	ldr	r2, [r3, #28]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2104      	movs	r1, #4
 8002ee0:	438a      	bics	r2, r1
 8002ee2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	69d9      	ldr	r1, [r3, #28]
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	691a      	ldr	r2, [r3, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	61da      	str	r2, [r3, #28]
      break;
 8002ef6:	e06b      	b.n	8002fd0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	0011      	movs	r1, r2
 8002f00:	0018      	movs	r0, r3
 8002f02:	f000 fb6f 	bl	80035e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	69da      	ldr	r2, [r3, #28]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2180      	movs	r1, #128	@ 0x80
 8002f12:	0109      	lsls	r1, r1, #4
 8002f14:	430a      	orrs	r2, r1
 8002f16:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	69da      	ldr	r2, [r3, #28]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4932      	ldr	r1, [pc, #200]	@ (8002fec <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002f24:	400a      	ands	r2, r1
 8002f26:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	69d9      	ldr	r1, [r3, #28]
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	021a      	lsls	r2, r3, #8
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	61da      	str	r2, [r3, #28]
      break;
 8002f3c:	e048      	b.n	8002fd0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	0011      	movs	r1, r2
 8002f46:	0018      	movs	r0, r3
 8002f48:	f000 fbb6 	bl	80036b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2108      	movs	r1, #8
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2104      	movs	r1, #4
 8002f68:	438a      	bics	r2, r1
 8002f6a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002f7e:	e027      	b.n	8002fd0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	0011      	movs	r1, r2
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f000 fbf5 	bl	8003778 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2180      	movs	r1, #128	@ 0x80
 8002f9a:	0109      	lsls	r1, r1, #4
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4910      	ldr	r1, [pc, #64]	@ (8002fec <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002fac:	400a      	ands	r2, r1
 8002fae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	021a      	lsls	r2, r3, #8
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002fc4:	e004      	b.n	8002fd0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002fc6:	2317      	movs	r3, #23
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	2201      	movs	r2, #1
 8002fcc:	701a      	strb	r2, [r3, #0]
      break;
 8002fce:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	223c      	movs	r2, #60	@ 0x3c
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	5499      	strb	r1, [r3, r2]

  return status;
 8002fd8:	2317      	movs	r3, #23
 8002fda:	18fb      	adds	r3, r7, r3
 8002fdc:	781b      	ldrb	r3, [r3, #0]
}
 8002fde:	0018      	movs	r0, r3
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	b006      	add	sp, #24
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	46c0      	nop			@ (mov r8, r8)
 8002fe8:	08003f20 	.word	0x08003f20
 8002fec:	fffffbff 	.word	0xfffffbff

08002ff0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ffa:	230f      	movs	r3, #15
 8002ffc:	18fb      	adds	r3, r7, r3
 8002ffe:	2200      	movs	r2, #0
 8003000:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	223c      	movs	r2, #60	@ 0x3c
 8003006:	5c9b      	ldrb	r3, [r3, r2]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_TIM_ConfigClockSource+0x20>
 800300c:	2302      	movs	r3, #2
 800300e:	e0bc      	b.n	800318a <HAL_TIM_ConfigClockSource+0x19a>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	223c      	movs	r2, #60	@ 0x3c
 8003014:	2101      	movs	r1, #1
 8003016:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	223d      	movs	r2, #61	@ 0x3d
 800301c:	2102      	movs	r1, #2
 800301e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4a5a      	ldr	r2, [pc, #360]	@ (8003194 <HAL_TIM_ConfigClockSource+0x1a4>)
 800302c:	4013      	ands	r3, r2
 800302e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4a59      	ldr	r2, [pc, #356]	@ (8003198 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003034:	4013      	ands	r3, r2
 8003036:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2280      	movs	r2, #128	@ 0x80
 8003046:	0192      	lsls	r2, r2, #6
 8003048:	4293      	cmp	r3, r2
 800304a:	d040      	beq.n	80030ce <HAL_TIM_ConfigClockSource+0xde>
 800304c:	2280      	movs	r2, #128	@ 0x80
 800304e:	0192      	lsls	r2, r2, #6
 8003050:	4293      	cmp	r3, r2
 8003052:	d900      	bls.n	8003056 <HAL_TIM_ConfigClockSource+0x66>
 8003054:	e088      	b.n	8003168 <HAL_TIM_ConfigClockSource+0x178>
 8003056:	2280      	movs	r2, #128	@ 0x80
 8003058:	0152      	lsls	r2, r2, #5
 800305a:	4293      	cmp	r3, r2
 800305c:	d100      	bne.n	8003060 <HAL_TIM_ConfigClockSource+0x70>
 800305e:	e088      	b.n	8003172 <HAL_TIM_ConfigClockSource+0x182>
 8003060:	2280      	movs	r2, #128	@ 0x80
 8003062:	0152      	lsls	r2, r2, #5
 8003064:	4293      	cmp	r3, r2
 8003066:	d900      	bls.n	800306a <HAL_TIM_ConfigClockSource+0x7a>
 8003068:	e07e      	b.n	8003168 <HAL_TIM_ConfigClockSource+0x178>
 800306a:	2b70      	cmp	r3, #112	@ 0x70
 800306c:	d018      	beq.n	80030a0 <HAL_TIM_ConfigClockSource+0xb0>
 800306e:	d900      	bls.n	8003072 <HAL_TIM_ConfigClockSource+0x82>
 8003070:	e07a      	b.n	8003168 <HAL_TIM_ConfigClockSource+0x178>
 8003072:	2b60      	cmp	r3, #96	@ 0x60
 8003074:	d04f      	beq.n	8003116 <HAL_TIM_ConfigClockSource+0x126>
 8003076:	d900      	bls.n	800307a <HAL_TIM_ConfigClockSource+0x8a>
 8003078:	e076      	b.n	8003168 <HAL_TIM_ConfigClockSource+0x178>
 800307a:	2b50      	cmp	r3, #80	@ 0x50
 800307c:	d03b      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0x106>
 800307e:	d900      	bls.n	8003082 <HAL_TIM_ConfigClockSource+0x92>
 8003080:	e072      	b.n	8003168 <HAL_TIM_ConfigClockSource+0x178>
 8003082:	2b40      	cmp	r3, #64	@ 0x40
 8003084:	d057      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0x146>
 8003086:	d900      	bls.n	800308a <HAL_TIM_ConfigClockSource+0x9a>
 8003088:	e06e      	b.n	8003168 <HAL_TIM_ConfigClockSource+0x178>
 800308a:	2b30      	cmp	r3, #48	@ 0x30
 800308c:	d063      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x166>
 800308e:	d86b      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x178>
 8003090:	2b20      	cmp	r3, #32
 8003092:	d060      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x166>
 8003094:	d868      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x178>
 8003096:	2b00      	cmp	r3, #0
 8003098:	d05d      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x166>
 800309a:	2b10      	cmp	r3, #16
 800309c:	d05b      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x166>
 800309e:	e063      	b.n	8003168 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030b0:	f000 fd66 	bl	8003b80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2277      	movs	r2, #119	@ 0x77
 80030c0:	4313      	orrs	r3, r2
 80030c2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	609a      	str	r2, [r3, #8]
      break;
 80030cc:	e052      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030de:	f000 fd4f 	bl	8003b80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2180      	movs	r1, #128	@ 0x80
 80030ee:	01c9      	lsls	r1, r1, #7
 80030f0:	430a      	orrs	r2, r1
 80030f2:	609a      	str	r2, [r3, #8]
      break;
 80030f4:	e03e      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003102:	001a      	movs	r2, r3
 8003104:	f000 fbf8 	bl	80038f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2150      	movs	r1, #80	@ 0x50
 800310e:	0018      	movs	r0, r3
 8003110:	f000 fd1a 	bl	8003b48 <TIM_ITRx_SetConfig>
      break;
 8003114:	e02e      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003122:	001a      	movs	r2, r3
 8003124:	f000 fc58 	bl	80039d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2160      	movs	r1, #96	@ 0x60
 800312e:	0018      	movs	r0, r3
 8003130:	f000 fd0a 	bl	8003b48 <TIM_ITRx_SetConfig>
      break;
 8003134:	e01e      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003142:	001a      	movs	r2, r3
 8003144:	f000 fbd8 	bl	80038f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2140      	movs	r1, #64	@ 0x40
 800314e:	0018      	movs	r0, r3
 8003150:	f000 fcfa 	bl	8003b48 <TIM_ITRx_SetConfig>
      break;
 8003154:	e00e      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	0019      	movs	r1, r3
 8003160:	0010      	movs	r0, r2
 8003162:	f000 fcf1 	bl	8003b48 <TIM_ITRx_SetConfig>
      break;
 8003166:	e005      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003168:	230f      	movs	r3, #15
 800316a:	18fb      	adds	r3, r7, r3
 800316c:	2201      	movs	r2, #1
 800316e:	701a      	strb	r2, [r3, #0]
      break;
 8003170:	e000      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003172:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	223d      	movs	r2, #61	@ 0x3d
 8003178:	2101      	movs	r1, #1
 800317a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	223c      	movs	r2, #60	@ 0x3c
 8003180:	2100      	movs	r1, #0
 8003182:	5499      	strb	r1, [r3, r2]

  return status;
 8003184:	230f      	movs	r3, #15
 8003186:	18fb      	adds	r3, r7, r3
 8003188:	781b      	ldrb	r3, [r3, #0]
}
 800318a:	0018      	movs	r0, r3
 800318c:	46bd      	mov	sp, r7
 800318e:	b004      	add	sp, #16
 8003190:	bd80      	pop	{r7, pc}
 8003192:	46c0      	nop			@ (mov r8, r8)
 8003194:	ffceff88 	.word	0xffceff88
 8003198:	ffff00ff 	.word	0xffff00ff

0800319c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a3b      	ldr	r2, [pc, #236]	@ (800329c <TIM_Base_SetConfig+0x100>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d008      	beq.n	80031c6 <TIM_Base_SetConfig+0x2a>
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	2380      	movs	r3, #128	@ 0x80
 80031b8:	05db      	lsls	r3, r3, #23
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d003      	beq.n	80031c6 <TIM_Base_SetConfig+0x2a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a37      	ldr	r2, [pc, #220]	@ (80032a0 <TIM_Base_SetConfig+0x104>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d108      	bne.n	80031d8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2270      	movs	r2, #112	@ 0x70
 80031ca:	4393      	bics	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a30      	ldr	r2, [pc, #192]	@ (800329c <TIM_Base_SetConfig+0x100>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d018      	beq.n	8003212 <TIM_Base_SetConfig+0x76>
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	2380      	movs	r3, #128	@ 0x80
 80031e4:	05db      	lsls	r3, r3, #23
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d013      	beq.n	8003212 <TIM_Base_SetConfig+0x76>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a2c      	ldr	r2, [pc, #176]	@ (80032a0 <TIM_Base_SetConfig+0x104>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d00f      	beq.n	8003212 <TIM_Base_SetConfig+0x76>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a2b      	ldr	r2, [pc, #172]	@ (80032a4 <TIM_Base_SetConfig+0x108>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d00b      	beq.n	8003212 <TIM_Base_SetConfig+0x76>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a2a      	ldr	r2, [pc, #168]	@ (80032a8 <TIM_Base_SetConfig+0x10c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d007      	beq.n	8003212 <TIM_Base_SetConfig+0x76>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a29      	ldr	r2, [pc, #164]	@ (80032ac <TIM_Base_SetConfig+0x110>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d003      	beq.n	8003212 <TIM_Base_SetConfig+0x76>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a28      	ldr	r2, [pc, #160]	@ (80032b0 <TIM_Base_SetConfig+0x114>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d108      	bne.n	8003224 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4a27      	ldr	r2, [pc, #156]	@ (80032b4 <TIM_Base_SetConfig+0x118>)
 8003216:	4013      	ands	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4313      	orrs	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2280      	movs	r2, #128	@ 0x80
 8003228:	4393      	bics	r3, r2
 800322a:	001a      	movs	r2, r3
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	4313      	orrs	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a13      	ldr	r2, [pc, #76]	@ (800329c <TIM_Base_SetConfig+0x100>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d00b      	beq.n	800326a <TIM_Base_SetConfig+0xce>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a14      	ldr	r2, [pc, #80]	@ (80032a8 <TIM_Base_SetConfig+0x10c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d007      	beq.n	800326a <TIM_Base_SetConfig+0xce>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a13      	ldr	r2, [pc, #76]	@ (80032ac <TIM_Base_SetConfig+0x110>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d003      	beq.n	800326a <TIM_Base_SetConfig+0xce>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a12      	ldr	r2, [pc, #72]	@ (80032b0 <TIM_Base_SetConfig+0x114>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d103      	bne.n	8003272 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	691a      	ldr	r2, [r3, #16]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	2201      	movs	r2, #1
 800327e:	4013      	ands	r3, r2
 8003280:	2b01      	cmp	r3, #1
 8003282:	d106      	bne.n	8003292 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	2201      	movs	r2, #1
 800328a:	4393      	bics	r3, r2
 800328c:	001a      	movs	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	611a      	str	r2, [r3, #16]
  }
}
 8003292:	46c0      	nop			@ (mov r8, r8)
 8003294:	46bd      	mov	sp, r7
 8003296:	b004      	add	sp, #16
 8003298:	bd80      	pop	{r7, pc}
 800329a:	46c0      	nop			@ (mov r8, r8)
 800329c:	40012c00 	.word	0x40012c00
 80032a0:	40000400 	.word	0x40000400
 80032a4:	40002000 	.word	0x40002000
 80032a8:	40014000 	.word	0x40014000
 80032ac:	40014400 	.word	0x40014400
 80032b0:	40014800 	.word	0x40014800
 80032b4:	fffffcff 	.word	0xfffffcff

080032b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	2201      	movs	r2, #1
 80032ce:	4393      	bics	r3, r2
 80032d0:	001a      	movs	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4a32      	ldr	r2, [pc, #200]	@ (80033b0 <TIM_OC1_SetConfig+0xf8>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2203      	movs	r2, #3
 80032ee:	4393      	bics	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	2202      	movs	r2, #2
 8003300:	4393      	bics	r3, r2
 8003302:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	4313      	orrs	r3, r2
 800330c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a28      	ldr	r2, [pc, #160]	@ (80033b4 <TIM_OC1_SetConfig+0xfc>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00b      	beq.n	800332e <TIM_OC1_SetConfig+0x76>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a27      	ldr	r2, [pc, #156]	@ (80033b8 <TIM_OC1_SetConfig+0x100>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d007      	beq.n	800332e <TIM_OC1_SetConfig+0x76>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a26      	ldr	r2, [pc, #152]	@ (80033bc <TIM_OC1_SetConfig+0x104>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d003      	beq.n	800332e <TIM_OC1_SetConfig+0x76>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a25      	ldr	r2, [pc, #148]	@ (80033c0 <TIM_OC1_SetConfig+0x108>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d10c      	bne.n	8003348 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	2208      	movs	r2, #8
 8003332:	4393      	bics	r3, r2
 8003334:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	4313      	orrs	r3, r2
 800333e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	2204      	movs	r2, #4
 8003344:	4393      	bics	r3, r2
 8003346:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a1a      	ldr	r2, [pc, #104]	@ (80033b4 <TIM_OC1_SetConfig+0xfc>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d00b      	beq.n	8003368 <TIM_OC1_SetConfig+0xb0>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a19      	ldr	r2, [pc, #100]	@ (80033b8 <TIM_OC1_SetConfig+0x100>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d007      	beq.n	8003368 <TIM_OC1_SetConfig+0xb0>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a18      	ldr	r2, [pc, #96]	@ (80033bc <TIM_OC1_SetConfig+0x104>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d003      	beq.n	8003368 <TIM_OC1_SetConfig+0xb0>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a17      	ldr	r2, [pc, #92]	@ (80033c0 <TIM_OC1_SetConfig+0x108>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d111      	bne.n	800338c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4a16      	ldr	r2, [pc, #88]	@ (80033c4 <TIM_OC1_SetConfig+0x10c>)
 800336c:	4013      	ands	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	4a15      	ldr	r2, [pc, #84]	@ (80033c8 <TIM_OC1_SetConfig+0x110>)
 8003374:	4013      	ands	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	621a      	str	r2, [r3, #32]
}
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b006      	add	sp, #24
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	46c0      	nop			@ (mov r8, r8)
 80033b0:	fffeff8f 	.word	0xfffeff8f
 80033b4:	40012c00 	.word	0x40012c00
 80033b8:	40014000 	.word	0x40014000
 80033bc:	40014400 	.word	0x40014400
 80033c0:	40014800 	.word	0x40014800
 80033c4:	fffffeff 	.word	0xfffffeff
 80033c8:	fffffdff 	.word	0xfffffdff

080033cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	2210      	movs	r2, #16
 80033e2:	4393      	bics	r3, r2
 80033e4:	001a      	movs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4a2e      	ldr	r2, [pc, #184]	@ (80034b4 <TIM_OC2_SetConfig+0xe8>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4a2d      	ldr	r2, [pc, #180]	@ (80034b8 <TIM_OC2_SetConfig+0xec>)
 8003402:	4013      	ands	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	021b      	lsls	r3, r3, #8
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2220      	movs	r2, #32
 8003416:	4393      	bics	r3, r2
 8003418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	4313      	orrs	r3, r2
 8003424:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a24      	ldr	r2, [pc, #144]	@ (80034bc <TIM_OC2_SetConfig+0xf0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d10d      	bne.n	800344a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2280      	movs	r2, #128	@ 0x80
 8003432:	4393      	bics	r3, r2
 8003434:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	4313      	orrs	r3, r2
 8003440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2240      	movs	r2, #64	@ 0x40
 8003446:	4393      	bics	r3, r2
 8003448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a1b      	ldr	r2, [pc, #108]	@ (80034bc <TIM_OC2_SetConfig+0xf0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00b      	beq.n	800346a <TIM_OC2_SetConfig+0x9e>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a1a      	ldr	r2, [pc, #104]	@ (80034c0 <TIM_OC2_SetConfig+0xf4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d007      	beq.n	800346a <TIM_OC2_SetConfig+0x9e>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a19      	ldr	r2, [pc, #100]	@ (80034c4 <TIM_OC2_SetConfig+0xf8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d003      	beq.n	800346a <TIM_OC2_SetConfig+0x9e>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a18      	ldr	r2, [pc, #96]	@ (80034c8 <TIM_OC2_SetConfig+0xfc>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d113      	bne.n	8003492 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	4a17      	ldr	r2, [pc, #92]	@ (80034cc <TIM_OC2_SetConfig+0x100>)
 800346e:	4013      	ands	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	4a16      	ldr	r2, [pc, #88]	@ (80034d0 <TIM_OC2_SetConfig+0x104>)
 8003476:	4013      	ands	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	621a      	str	r2, [r3, #32]
}
 80034ac:	46c0      	nop			@ (mov r8, r8)
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b006      	add	sp, #24
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	feff8fff 	.word	0xfeff8fff
 80034b8:	fffffcff 	.word	0xfffffcff
 80034bc:	40012c00 	.word	0x40012c00
 80034c0:	40014000 	.word	0x40014000
 80034c4:	40014400 	.word	0x40014400
 80034c8:	40014800 	.word	0x40014800
 80034cc:	fffffbff 	.word	0xfffffbff
 80034d0:	fffff7ff 	.word	0xfffff7ff

080034d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	4a33      	ldr	r2, [pc, #204]	@ (80035b8 <TIM_OC3_SetConfig+0xe4>)
 80034ea:	401a      	ands	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4a2f      	ldr	r2, [pc, #188]	@ (80035bc <TIM_OC3_SetConfig+0xe8>)
 8003500:	4013      	ands	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2203      	movs	r2, #3
 8003508:	4393      	bics	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	4313      	orrs	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	4a29      	ldr	r2, [pc, #164]	@ (80035c0 <TIM_OC3_SetConfig+0xec>)
 800351a:	4013      	ands	r3, r2
 800351c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	021b      	lsls	r3, r3, #8
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	4313      	orrs	r3, r2
 8003528:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a25      	ldr	r2, [pc, #148]	@ (80035c4 <TIM_OC3_SetConfig+0xf0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d10d      	bne.n	800354e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	4a24      	ldr	r2, [pc, #144]	@ (80035c8 <TIM_OC3_SetConfig+0xf4>)
 8003536:	4013      	ands	r3, r2
 8003538:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	4a20      	ldr	r2, [pc, #128]	@ (80035cc <TIM_OC3_SetConfig+0xf8>)
 800354a:	4013      	ands	r3, r2
 800354c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a1c      	ldr	r2, [pc, #112]	@ (80035c4 <TIM_OC3_SetConfig+0xf0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00b      	beq.n	800356e <TIM_OC3_SetConfig+0x9a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a1d      	ldr	r2, [pc, #116]	@ (80035d0 <TIM_OC3_SetConfig+0xfc>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d007      	beq.n	800356e <TIM_OC3_SetConfig+0x9a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a1c      	ldr	r2, [pc, #112]	@ (80035d4 <TIM_OC3_SetConfig+0x100>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d003      	beq.n	800356e <TIM_OC3_SetConfig+0x9a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a1b      	ldr	r2, [pc, #108]	@ (80035d8 <TIM_OC3_SetConfig+0x104>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d113      	bne.n	8003596 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	4a1a      	ldr	r2, [pc, #104]	@ (80035dc <TIM_OC3_SetConfig+0x108>)
 8003572:	4013      	ands	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4a19      	ldr	r2, [pc, #100]	@ (80035e0 <TIM_OC3_SetConfig+0x10c>)
 800357a:	4013      	ands	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	621a      	str	r2, [r3, #32]
}
 80035b0:	46c0      	nop			@ (mov r8, r8)
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b006      	add	sp, #24
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	fffffeff 	.word	0xfffffeff
 80035bc:	fffeff8f 	.word	0xfffeff8f
 80035c0:	fffffdff 	.word	0xfffffdff
 80035c4:	40012c00 	.word	0x40012c00
 80035c8:	fffff7ff 	.word	0xfffff7ff
 80035cc:	fffffbff 	.word	0xfffffbff
 80035d0:	40014000 	.word	0x40014000
 80035d4:	40014400 	.word	0x40014400
 80035d8:	40014800 	.word	0x40014800
 80035dc:	ffffefff 	.word	0xffffefff
 80035e0:	ffffdfff 	.word	0xffffdfff

080035e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	4a26      	ldr	r2, [pc, #152]	@ (8003694 <TIM_OC4_SetConfig+0xb0>)
 80035fa:	401a      	ands	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4a22      	ldr	r2, [pc, #136]	@ (8003698 <TIM_OC4_SetConfig+0xb4>)
 8003610:	4013      	ands	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4a21      	ldr	r2, [pc, #132]	@ (800369c <TIM_OC4_SetConfig+0xb8>)
 8003618:	4013      	ands	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	021b      	lsls	r3, r3, #8
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	4313      	orrs	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4a1d      	ldr	r2, [pc, #116]	@ (80036a0 <TIM_OC4_SetConfig+0xbc>)
 800362c:	4013      	ands	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	031b      	lsls	r3, r3, #12
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a19      	ldr	r2, [pc, #100]	@ (80036a4 <TIM_OC4_SetConfig+0xc0>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d00b      	beq.n	800365c <TIM_OC4_SetConfig+0x78>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a18      	ldr	r2, [pc, #96]	@ (80036a8 <TIM_OC4_SetConfig+0xc4>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d007      	beq.n	800365c <TIM_OC4_SetConfig+0x78>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a17      	ldr	r2, [pc, #92]	@ (80036ac <TIM_OC4_SetConfig+0xc8>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d003      	beq.n	800365c <TIM_OC4_SetConfig+0x78>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a16      	ldr	r2, [pc, #88]	@ (80036b0 <TIM_OC4_SetConfig+0xcc>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d109      	bne.n	8003670 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	4a15      	ldr	r2, [pc, #84]	@ (80036b4 <TIM_OC4_SetConfig+0xd0>)
 8003660:	4013      	ands	r3, r2
 8003662:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	019b      	lsls	r3, r3, #6
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	4313      	orrs	r3, r2
 800366e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	621a      	str	r2, [r3, #32]
}
 800368a:	46c0      	nop			@ (mov r8, r8)
 800368c:	46bd      	mov	sp, r7
 800368e:	b006      	add	sp, #24
 8003690:	bd80      	pop	{r7, pc}
 8003692:	46c0      	nop			@ (mov r8, r8)
 8003694:	ffffefff 	.word	0xffffefff
 8003698:	feff8fff 	.word	0xfeff8fff
 800369c:	fffffcff 	.word	0xfffffcff
 80036a0:	ffffdfff 	.word	0xffffdfff
 80036a4:	40012c00 	.word	0x40012c00
 80036a8:	40014000 	.word	0x40014000
 80036ac:	40014400 	.word	0x40014400
 80036b0:	40014800 	.word	0x40014800
 80036b4:	ffffbfff 	.word	0xffffbfff

080036b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	4a23      	ldr	r2, [pc, #140]	@ (800375c <TIM_OC5_SetConfig+0xa4>)
 80036ce:	401a      	ands	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003760 <TIM_OC5_SetConfig+0xa8>)
 80036e4:	4013      	ands	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003764 <TIM_OC5_SetConfig+0xac>)
 80036f6:	4013      	ands	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	041b      	lsls	r3, r3, #16
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	4313      	orrs	r3, r2
 8003704:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a17      	ldr	r2, [pc, #92]	@ (8003768 <TIM_OC5_SetConfig+0xb0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00b      	beq.n	8003726 <TIM_OC5_SetConfig+0x6e>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a16      	ldr	r2, [pc, #88]	@ (800376c <TIM_OC5_SetConfig+0xb4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d007      	beq.n	8003726 <TIM_OC5_SetConfig+0x6e>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a15      	ldr	r2, [pc, #84]	@ (8003770 <TIM_OC5_SetConfig+0xb8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d003      	beq.n	8003726 <TIM_OC5_SetConfig+0x6e>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a14      	ldr	r2, [pc, #80]	@ (8003774 <TIM_OC5_SetConfig+0xbc>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d109      	bne.n	800373a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	4a0c      	ldr	r2, [pc, #48]	@ (800375c <TIM_OC5_SetConfig+0xa4>)
 800372a:	4013      	ands	r3, r2
 800372c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	021b      	lsls	r3, r3, #8
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	621a      	str	r2, [r3, #32]
}
 8003754:	46c0      	nop			@ (mov r8, r8)
 8003756:	46bd      	mov	sp, r7
 8003758:	b006      	add	sp, #24
 800375a:	bd80      	pop	{r7, pc}
 800375c:	fffeffff 	.word	0xfffeffff
 8003760:	fffeff8f 	.word	0xfffeff8f
 8003764:	fffdffff 	.word	0xfffdffff
 8003768:	40012c00 	.word	0x40012c00
 800376c:	40014000 	.word	0x40014000
 8003770:	40014400 	.word	0x40014400
 8003774:	40014800 	.word	0x40014800

08003778 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	4a24      	ldr	r2, [pc, #144]	@ (8003820 <TIM_OC6_SetConfig+0xa8>)
 800378e:	401a      	ands	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800379e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4a20      	ldr	r2, [pc, #128]	@ (8003824 <TIM_OC6_SetConfig+0xac>)
 80037a4:	4013      	ands	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	021b      	lsls	r3, r3, #8
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003828 <TIM_OC6_SetConfig+0xb0>)
 80037b8:	4013      	ands	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	051b      	lsls	r3, r3, #20
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a18      	ldr	r2, [pc, #96]	@ (800382c <TIM_OC6_SetConfig+0xb4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d00b      	beq.n	80037e8 <TIM_OC6_SetConfig+0x70>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a17      	ldr	r2, [pc, #92]	@ (8003830 <TIM_OC6_SetConfig+0xb8>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d007      	beq.n	80037e8 <TIM_OC6_SetConfig+0x70>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a16      	ldr	r2, [pc, #88]	@ (8003834 <TIM_OC6_SetConfig+0xbc>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d003      	beq.n	80037e8 <TIM_OC6_SetConfig+0x70>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a15      	ldr	r2, [pc, #84]	@ (8003838 <TIM_OC6_SetConfig+0xc0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d109      	bne.n	80037fc <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	4a14      	ldr	r2, [pc, #80]	@ (800383c <TIM_OC6_SetConfig+0xc4>)
 80037ec:	4013      	ands	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	029b      	lsls	r3, r3, #10
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	621a      	str	r2, [r3, #32]
}
 8003816:	46c0      	nop			@ (mov r8, r8)
 8003818:	46bd      	mov	sp, r7
 800381a:	b006      	add	sp, #24
 800381c:	bd80      	pop	{r7, pc}
 800381e:	46c0      	nop			@ (mov r8, r8)
 8003820:	ffefffff 	.word	0xffefffff
 8003824:	feff8fff 	.word	0xfeff8fff
 8003828:	ffdfffff 	.word	0xffdfffff
 800382c:	40012c00 	.word	0x40012c00
 8003830:	40014000 	.word	0x40014000
 8003834:	40014400 	.word	0x40014400
 8003838:	40014800 	.word	0x40014800
 800383c:	fffbffff 	.word	0xfffbffff

08003840 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
 800384c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	2201      	movs	r2, #1
 800385a:	4393      	bics	r3, r2
 800385c:	001a      	movs	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4a20      	ldr	r2, [pc, #128]	@ (80038ec <TIM_TI1_SetConfig+0xac>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d00c      	beq.n	800388a <TIM_TI1_SetConfig+0x4a>
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	2380      	movs	r3, #128	@ 0x80
 8003874:	05db      	lsls	r3, r3, #23
 8003876:	429a      	cmp	r2, r3
 8003878:	d007      	beq.n	800388a <TIM_TI1_SetConfig+0x4a>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4a1c      	ldr	r2, [pc, #112]	@ (80038f0 <TIM_TI1_SetConfig+0xb0>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d003      	beq.n	800388a <TIM_TI1_SetConfig+0x4a>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4a1b      	ldr	r2, [pc, #108]	@ (80038f4 <TIM_TI1_SetConfig+0xb4>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d101      	bne.n	800388e <TIM_TI1_SetConfig+0x4e>
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <TIM_TI1_SetConfig+0x50>
 800388e:	2300      	movs	r3, #0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	2203      	movs	r2, #3
 8003898:	4393      	bics	r3, r2
 800389a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	e003      	b.n	80038ae <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2201      	movs	r2, #1
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	22f0      	movs	r2, #240	@ 0xf0
 80038b2:	4393      	bics	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	011b      	lsls	r3, r3, #4
 80038ba:	22ff      	movs	r2, #255	@ 0xff
 80038bc:	4013      	ands	r3, r2
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	220a      	movs	r2, #10
 80038c8:	4393      	bics	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	220a      	movs	r2, #10
 80038d0:	4013      	ands	r3, r2
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	621a      	str	r2, [r3, #32]
}
 80038e4:	46c0      	nop			@ (mov r8, r8)
 80038e6:	46bd      	mov	sp, r7
 80038e8:	b006      	add	sp, #24
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40012c00 	.word	0x40012c00
 80038f0:	40000400 	.word	0x40000400
 80038f4:	40014000 	.word	0x40014000

080038f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	2201      	movs	r2, #1
 8003910:	4393      	bics	r3, r2
 8003912:	001a      	movs	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	22f0      	movs	r2, #240	@ 0xf0
 8003922:	4393      	bics	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4313      	orrs	r3, r2
 800392e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	220a      	movs	r2, #10
 8003934:	4393      	bics	r3, r2
 8003936:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	4313      	orrs	r3, r2
 800393e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	621a      	str	r2, [r3, #32]
}
 800394c:	46c0      	nop			@ (mov r8, r8)
 800394e:	46bd      	mov	sp, r7
 8003950:	b006      	add	sp, #24
 8003952:	bd80      	pop	{r7, pc}

08003954 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
 8003960:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	2210      	movs	r2, #16
 800396e:	4393      	bics	r3, r2
 8003970:	001a      	movs	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	4a14      	ldr	r2, [pc, #80]	@ (80039d0 <TIM_TI2_SetConfig+0x7c>)
 8003980:	4013      	ands	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	021b      	lsls	r3, r3, #8
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	4a10      	ldr	r2, [pc, #64]	@ (80039d4 <TIM_TI2_SetConfig+0x80>)
 8003992:	4013      	ands	r3, r2
 8003994:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	031b      	lsls	r3, r3, #12
 800399a:	041b      	lsls	r3, r3, #16
 800399c:	0c1b      	lsrs	r3, r3, #16
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	22a0      	movs	r2, #160	@ 0xa0
 80039a8:	4393      	bics	r3, r2
 80039aa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	22a0      	movs	r2, #160	@ 0xa0
 80039b2:	4013      	ands	r3, r2
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	621a      	str	r2, [r3, #32]
}
 80039c6:	46c0      	nop			@ (mov r8, r8)
 80039c8:	46bd      	mov	sp, r7
 80039ca:	b006      	add	sp, #24
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	46c0      	nop			@ (mov r8, r8)
 80039d0:	fffffcff 	.word	0xfffffcff
 80039d4:	ffff0fff 	.word	0xffff0fff

080039d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	2210      	movs	r2, #16
 80039f0:	4393      	bics	r3, r2
 80039f2:	001a      	movs	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4a0d      	ldr	r2, [pc, #52]	@ (8003a38 <TIM_TI2_ConfigInputStage+0x60>)
 8003a02:	4013      	ands	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	031b      	lsls	r3, r3, #12
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	22a0      	movs	r2, #160	@ 0xa0
 8003a14:	4393      	bics	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	011b      	lsls	r3, r3, #4
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	621a      	str	r2, [r3, #32]
}
 8003a2e:	46c0      	nop			@ (mov r8, r8)
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b006      	add	sp, #24
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	46c0      	nop			@ (mov r8, r8)
 8003a38:	ffff0fff 	.word	0xffff0fff

08003a3c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	4a17      	ldr	r2, [pc, #92]	@ (8003ab4 <TIM_TI3_SetConfig+0x78>)
 8003a56:	401a      	ands	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	2203      	movs	r2, #3
 8003a66:	4393      	bics	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	22f0      	movs	r2, #240	@ 0xf0
 8003a76:	4393      	bics	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	22ff      	movs	r2, #255	@ 0xff
 8003a80:	4013      	ands	r3, r2
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	4a0b      	ldr	r2, [pc, #44]	@ (8003ab8 <TIM_TI3_SetConfig+0x7c>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	021a      	lsls	r2, r3, #8
 8003a94:	23a0      	movs	r3, #160	@ 0xa0
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	4013      	ands	r3, r2
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	621a      	str	r2, [r3, #32]
}
 8003aac:	46c0      	nop			@ (mov r8, r8)
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	b006      	add	sp, #24
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	fffffeff 	.word	0xfffffeff
 8003ab8:	fffff5ff 	.word	0xfffff5ff

08003abc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	4a18      	ldr	r2, [pc, #96]	@ (8003b38 <TIM_TI4_SetConfig+0x7c>)
 8003ad6:	401a      	ands	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	4a15      	ldr	r2, [pc, #84]	@ (8003b3c <TIM_TI4_SetConfig+0x80>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	021b      	lsls	r3, r3, #8
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	4a12      	ldr	r2, [pc, #72]	@ (8003b40 <TIM_TI4_SetConfig+0x84>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	031b      	lsls	r3, r3, #12
 8003b00:	041b      	lsls	r3, r3, #16
 8003b02:	0c1b      	lsrs	r3, r3, #16
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8003b44 <TIM_TI4_SetConfig+0x88>)
 8003b0e:	4013      	ands	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	031a      	lsls	r2, r3, #12
 8003b16:	23a0      	movs	r3, #160	@ 0xa0
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	621a      	str	r2, [r3, #32]
}
 8003b2e:	46c0      	nop			@ (mov r8, r8)
 8003b30:	46bd      	mov	sp, r7
 8003b32:	b006      	add	sp, #24
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	46c0      	nop			@ (mov r8, r8)
 8003b38:	ffffefff 	.word	0xffffefff
 8003b3c:	fffffcff 	.word	0xfffffcff
 8003b40:	ffff0fff 	.word	0xffff0fff
 8003b44:	ffff5fff 	.word	0xffff5fff

08003b48 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4a08      	ldr	r2, [pc, #32]	@ (8003b7c <TIM_ITRx_SetConfig+0x34>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	2207      	movs	r2, #7
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	609a      	str	r2, [r3, #8]
}
 8003b72:	46c0      	nop			@ (mov r8, r8)
 8003b74:	46bd      	mov	sp, r7
 8003b76:	b004      	add	sp, #16
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	46c0      	nop			@ (mov r8, r8)
 8003b7c:	ffcfff8f 	.word	0xffcfff8f

08003b80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	4a09      	ldr	r2, [pc, #36]	@ (8003bbc <TIM_ETR_SetConfig+0x3c>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	021a      	lsls	r2, r3, #8
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	609a      	str	r2, [r3, #8]
}
 8003bb4:	46c0      	nop			@ (mov r8, r8)
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	b006      	add	sp, #24
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	ffff00ff 	.word	0xffff00ff

08003bc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	221f      	movs	r2, #31
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	409a      	lsls	r2, r3
 8003bd6:	0013      	movs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	43d2      	mvns	r2, r2
 8003be2:	401a      	ands	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a1a      	ldr	r2, [r3, #32]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	211f      	movs	r1, #31
 8003bf0:	400b      	ands	r3, r1
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	4099      	lsls	r1, r3
 8003bf6:	000b      	movs	r3, r1
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	621a      	str	r2, [r3, #32]
}
 8003bfe:	46c0      	nop			@ (mov r8, r8)
 8003c00:	46bd      	mov	sp, r7
 8003c02:	b006      	add	sp, #24
 8003c04:	bd80      	pop	{r7, pc}
	...

08003c08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	223c      	movs	r2, #60	@ 0x3c
 8003c16:	5c9b      	ldrb	r3, [r3, r2]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e055      	b.n	8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	223c      	movs	r2, #60	@ 0x3c
 8003c24:	2101      	movs	r1, #1
 8003c26:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	223d      	movs	r2, #61	@ 0x3d
 8003c2c:	2102      	movs	r1, #2
 8003c2e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a23      	ldr	r2, [pc, #140]	@ (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d108      	bne.n	8003c5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4a22      	ldr	r2, [pc, #136]	@ (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c4e:	4013      	ands	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2270      	movs	r2, #112	@ 0x70
 8003c60:	4393      	bics	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a16      	ldr	r2, [pc, #88]	@ (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d00f      	beq.n	8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	2380      	movs	r3, #128	@ 0x80
 8003c86:	05db      	lsls	r3, r3, #23
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d009      	beq.n	8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a12      	ldr	r2, [pc, #72]	@ (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d004      	beq.n	8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a11      	ldr	r2, [pc, #68]	@ (8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d10c      	bne.n	8003cba <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2280      	movs	r2, #128	@ 0x80
 8003ca4:	4393      	bics	r3, r2
 8003ca6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	223d      	movs	r2, #61	@ 0x3d
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	223c      	movs	r2, #60	@ 0x3c
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	0018      	movs	r0, r3
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	b004      	add	sp, #16
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40012c00 	.word	0x40012c00
 8003cd8:	ff0fffff 	.word	0xff0fffff
 8003cdc:	40000400 	.word	0x40000400
 8003ce0:	40014000 	.word	0x40014000

08003ce4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	223c      	movs	r2, #60	@ 0x3c
 8003cf6:	5c9b      	ldrb	r3, [r3, r2]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e06f      	b.n	8003de0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	223c      	movs	r2, #60	@ 0x3c
 8003d04:	2101      	movs	r1, #1
 8003d06:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	22ff      	movs	r2, #255	@ 0xff
 8003d0c:	4393      	bics	r3, r2
 8003d0e:	001a      	movs	r2, r3
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4a33      	ldr	r2, [pc, #204]	@ (8003de8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003d1c:	401a      	ands	r2, r3
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	4a30      	ldr	r2, [pc, #192]	@ (8003dec <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003d2a:	401a      	ands	r2, r3
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4a2e      	ldr	r2, [pc, #184]	@ (8003df0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003d38:	401a      	ands	r2, r3
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4a2b      	ldr	r2, [pc, #172]	@ (8003df4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003d46:	401a      	ands	r2, r3
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4a29      	ldr	r2, [pc, #164]	@ (8003df8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003d54:	401a      	ands	r2, r3
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4a26      	ldr	r2, [pc, #152]	@ (8003dfc <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003d62:	401a      	ands	r2, r3
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4a24      	ldr	r2, [pc, #144]	@ (8003e00 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003d70:	401a      	ands	r2, r3
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	041b      	lsls	r3, r3, #16
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4a21      	ldr	r2, [pc, #132]	@ (8003e04 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003d80:	401a      	ands	r2, r3
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8003e08 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d11c      	bne.n	8003dce <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4a1d      	ldr	r2, [pc, #116]	@ (8003e0c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003d98:	401a      	ands	r2, r3
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9e:	051b      	lsls	r3, r3, #20
 8003da0:	4313      	orrs	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4a1a      	ldr	r2, [pc, #104]	@ (8003e10 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003da8:	401a      	ands	r2, r3
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4a17      	ldr	r2, [pc, #92]	@ (8003e14 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003db6:	401a      	ands	r2, r3
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4a15      	ldr	r2, [pc, #84]	@ (8003e18 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003dc4:	401a      	ands	r2, r3
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	223c      	movs	r2, #60	@ 0x3c
 8003dda:	2100      	movs	r1, #0
 8003ddc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	0018      	movs	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b004      	add	sp, #16
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	fffffcff 	.word	0xfffffcff
 8003dec:	fffffbff 	.word	0xfffffbff
 8003df0:	fffff7ff 	.word	0xfffff7ff
 8003df4:	ffffefff 	.word	0xffffefff
 8003df8:	ffffdfff 	.word	0xffffdfff
 8003dfc:	ffffbfff 	.word	0xffffbfff
 8003e00:	fff0ffff 	.word	0xfff0ffff
 8003e04:	efffffff 	.word	0xefffffff
 8003e08:	40012c00 	.word	0x40012c00
 8003e0c:	ff0fffff 	.word	0xff0fffff
 8003e10:	feffffff 	.word	0xfeffffff
 8003e14:	fdffffff 	.word	0xfdffffff
 8003e18:	dfffffff 	.word	0xdfffffff

08003e1c <memset>:
 8003e1c:	0003      	movs	r3, r0
 8003e1e:	1882      	adds	r2, r0, r2
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d100      	bne.n	8003e26 <memset+0xa>
 8003e24:	4770      	bx	lr
 8003e26:	7019      	strb	r1, [r3, #0]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	e7f9      	b.n	8003e20 <memset+0x4>

08003e2c <__libc_init_array>:
 8003e2c:	b570      	push	{r4, r5, r6, lr}
 8003e2e:	2600      	movs	r6, #0
 8003e30:	4c0c      	ldr	r4, [pc, #48]	@ (8003e64 <__libc_init_array+0x38>)
 8003e32:	4d0d      	ldr	r5, [pc, #52]	@ (8003e68 <__libc_init_array+0x3c>)
 8003e34:	1b64      	subs	r4, r4, r5
 8003e36:	10a4      	asrs	r4, r4, #2
 8003e38:	42a6      	cmp	r6, r4
 8003e3a:	d109      	bne.n	8003e50 <__libc_init_array+0x24>
 8003e3c:	2600      	movs	r6, #0
 8003e3e:	f000 f819 	bl	8003e74 <_init>
 8003e42:	4c0a      	ldr	r4, [pc, #40]	@ (8003e6c <__libc_init_array+0x40>)
 8003e44:	4d0a      	ldr	r5, [pc, #40]	@ (8003e70 <__libc_init_array+0x44>)
 8003e46:	1b64      	subs	r4, r4, r5
 8003e48:	10a4      	asrs	r4, r4, #2
 8003e4a:	42a6      	cmp	r6, r4
 8003e4c:	d105      	bne.n	8003e5a <__libc_init_array+0x2e>
 8003e4e:	bd70      	pop	{r4, r5, r6, pc}
 8003e50:	00b3      	lsls	r3, r6, #2
 8003e52:	58eb      	ldr	r3, [r5, r3]
 8003e54:	4798      	blx	r3
 8003e56:	3601      	adds	r6, #1
 8003e58:	e7ee      	b.n	8003e38 <__libc_init_array+0xc>
 8003e5a:	00b3      	lsls	r3, r6, #2
 8003e5c:	58eb      	ldr	r3, [r5, r3]
 8003e5e:	4798      	blx	r3
 8003e60:	3601      	adds	r6, #1
 8003e62:	e7f2      	b.n	8003e4a <__libc_init_array+0x1e>
 8003e64:	08003f74 	.word	0x08003f74
 8003e68:	08003f74 	.word	0x08003f74
 8003e6c:	08003f78 	.word	0x08003f78
 8003e70:	08003f74 	.word	0x08003f74

08003e74 <_init>:
 8003e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e76:	46c0      	nop			@ (mov r8, r8)
 8003e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e7a:	bc08      	pop	{r3}
 8003e7c:	469e      	mov	lr, r3
 8003e7e:	4770      	bx	lr

08003e80 <_fini>:
 8003e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e82:	46c0      	nop			@ (mov r8, r8)
 8003e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e86:	bc08      	pop	{r3}
 8003e88:	469e      	mov	lr, r3
 8003e8a:	4770      	bx	lr
