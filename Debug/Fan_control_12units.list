
Fan_control_12units.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004930  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080049ec  080049ec  000059ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ac8  08004ac8  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ac8  08004ac8  00005ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ad0  08004ad0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ad0  08004ad0  00005ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ad4  08004ad4  00005ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004ad8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  2000000c  08004ae4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08004ae4  00006270  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001565a  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003020  00000000  00000000  0001b68e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  0001e6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f8b  00000000  00000000  0001fa70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2bf  00000000  00000000  000209fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a8d9  00000000  00000000  0003acba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a77db  00000000  00000000  00055593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fcd6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004784  00000000  00000000  000fcdb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00101538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080049d4 	.word	0x080049d4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080049d4 	.word	0x080049d4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b08b      	sub	sp, #44	@ 0x2c
 8000620:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	2414      	movs	r4, #20
 8000624:	193b      	adds	r3, r7, r4
 8000626:	0018      	movs	r0, r3
 8000628:	2314      	movs	r3, #20
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f004 f9a5 	bl	800497c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000632:	4b74      	ldr	r3, [pc, #464]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 8000634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000636:	4b73      	ldr	r3, [pc, #460]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 8000638:	2104      	movs	r1, #4
 800063a:	430a      	orrs	r2, r1
 800063c:	635a      	str	r2, [r3, #52]	@ 0x34
 800063e:	4b71      	ldr	r3, [pc, #452]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 8000640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000642:	2204      	movs	r2, #4
 8000644:	4013      	ands	r3, r2
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800064a:	4b6e      	ldr	r3, [pc, #440]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 800064c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800064e:	4b6d      	ldr	r3, [pc, #436]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 8000650:	2120      	movs	r1, #32
 8000652:	430a      	orrs	r2, r1
 8000654:	635a      	str	r2, [r3, #52]	@ 0x34
 8000656:	4b6b      	ldr	r3, [pc, #428]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 8000658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800065a:	2220      	movs	r2, #32
 800065c:	4013      	ands	r3, r2
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b68      	ldr	r3, [pc, #416]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 8000664:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000666:	4b67      	ldr	r3, [pc, #412]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 8000668:	2101      	movs	r1, #1
 800066a:	430a      	orrs	r2, r1
 800066c:	635a      	str	r2, [r3, #52]	@ 0x34
 800066e:	4b65      	ldr	r3, [pc, #404]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 8000670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000672:	2201      	movs	r2, #1
 8000674:	4013      	ands	r3, r2
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b62      	ldr	r3, [pc, #392]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 800067c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800067e:	4b61      	ldr	r3, [pc, #388]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 8000680:	2102      	movs	r1, #2
 8000682:	430a      	orrs	r2, r1
 8000684:	635a      	str	r2, [r3, #52]	@ 0x34
 8000686:	4b5f      	ldr	r3, [pc, #380]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 8000688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800068a:	2202      	movs	r2, #2
 800068c:	4013      	ands	r3, r2
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000692:	4b5c      	ldr	r3, [pc, #368]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 8000694:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000696:	4b5b      	ldr	r3, [pc, #364]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 8000698:	2108      	movs	r1, #8
 800069a:	430a      	orrs	r2, r1
 800069c:	635a      	str	r2, [r3, #52]	@ 0x34
 800069e:	4b59      	ldr	r3, [pc, #356]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 80006a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006a2:	2208      	movs	r2, #8
 80006a4:	4013      	ands	r3, r2
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MC_LED_GPIO_Port, MC_LED_Pin, GPIO_PIN_SET);
 80006aa:	23a0      	movs	r3, #160	@ 0xa0
 80006ac:	05db      	lsls	r3, r3, #23
 80006ae:	2201      	movs	r2, #1
 80006b0:	2120      	movs	r1, #32
 80006b2:	0018      	movs	r0, r3
 80006b4:	f001 f98c 	bl	80019d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MC_Tach_OUT_0_Pin|MC_Tach_OUT_1_Pin|MC_Tach_OUT_2_Pin|MC_Tach_OUT_3_Pin
 80006b8:	23fc      	movs	r3, #252	@ 0xfc
 80006ba:	021b      	lsls	r3, r3, #8
 80006bc:	4852      	ldr	r0, [pc, #328]	@ (8000808 <MX_GPIO_Init+0x1ec>)
 80006be:	2200      	movs	r2, #0
 80006c0:	0019      	movs	r1, r3
 80006c2:	f001 f985 	bl	80019d0 <HAL_GPIO_WritePin>
                          |MC_Tach_OUT_4_Pin|MC_Tach_OUT_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FAN_Tach_IN_11_Pin|FAN_Tach_IN_0_Pin|FAN_Tach_IN_1_Pin|FAN_Tach_IN_2_Pin
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	4a50      	ldr	r2, [pc, #320]	@ (800080c <MX_GPIO_Init+0x1f0>)
 80006ca:	601a      	str	r2, [r3, #0]
                          |FAN_Tach_IN_3_Pin|FAN_Tach_IN_4_Pin|FAN_Tach_IN_5_Pin|FAN_Tach_IN_6_Pin
                          |FAN_Tach_IN_7_Pin|FAN_Tach_IN_8_Pin|FAN_Tach_IN_9_Pin|FAN_Tach_IN_10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	2288      	movs	r2, #136	@ 0x88
 80006d0:	0352      	lsls	r2, r2, #13
 80006d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	2201      	movs	r2, #1
 80006d8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	4a4c      	ldr	r2, [pc, #304]	@ (8000810 <MX_GPIO_Init+0x1f4>)
 80006de:	0019      	movs	r1, r3
 80006e0:	0010      	movs	r0, r2
 80006e2:	f001 f811 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80006e6:	0021      	movs	r1, r4
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	22d0      	movs	r2, #208	@ 0xd0
 80006ec:	0212      	lsls	r2, r2, #8
 80006ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f0:	000c      	movs	r4, r1
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	2203      	movs	r2, #3
 80006f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	4a43      	ldr	r2, [pc, #268]	@ (8000810 <MX_GPIO_Init+0x1f4>)
 8000702:	0019      	movs	r1, r3
 8000704:	0010      	movs	r0, r2
 8000706:	f000 ffff 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800070a:	193b      	adds	r3, r7, r4
 800070c:	2207      	movs	r2, #7
 800070e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2203      	movs	r2, #3
 8000714:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	193b      	adds	r3, r7, r4
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800071c:	193b      	adds	r3, r7, r4
 800071e:	4a3d      	ldr	r2, [pc, #244]	@ (8000814 <MX_GPIO_Init+0x1f8>)
 8000720:	0019      	movs	r1, r3
 8000722:	0010      	movs	r0, r2
 8000724:	f000 fff0 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA6 PA7 PA8
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000728:	193b      	adds	r3, r7, r4
 800072a:	4a3b      	ldr	r2, [pc, #236]	@ (8000818 <MX_GPIO_Init+0x1fc>)
 800072c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800072e:	193b      	adds	r3, r7, r4
 8000730:	2203      	movs	r2, #3
 8000732:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073a:	193a      	adds	r2, r7, r4
 800073c:	23a0      	movs	r3, #160	@ 0xa0
 800073e:	05db      	lsls	r3, r3, #23
 8000740:	0011      	movs	r1, r2
 8000742:	0018      	movs	r0, r3
 8000744:	f000 ffe0 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MC_LED_Pin;
 8000748:	193b      	adds	r3, r7, r4
 800074a:	2220      	movs	r2, #32
 800074c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074e:	193b      	adds	r3, r7, r4
 8000750:	2201      	movs	r2, #1
 8000752:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	193b      	adds	r3, r7, r4
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	193b      	adds	r3, r7, r4
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MC_LED_GPIO_Port, &GPIO_InitStruct);
 8000760:	193a      	adds	r2, r7, r4
 8000762:	23a0      	movs	r3, #160	@ 0xa0
 8000764:	05db      	lsls	r3, r3, #23
 8000766:	0011      	movs	r1, r2
 8000768:	0018      	movs	r0, r3
 800076a:	f000 ffcd 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_9;
 800076e:	193b      	adds	r3, r7, r4
 8000770:	4a2a      	ldr	r2, [pc, #168]	@ (800081c <MX_GPIO_Init+0x200>)
 8000772:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000774:	193b      	adds	r3, r7, r4
 8000776:	2203      	movs	r2, #3
 8000778:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	193b      	adds	r3, r7, r4
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000780:	193b      	adds	r3, r7, r4
 8000782:	4a21      	ldr	r2, [pc, #132]	@ (8000808 <MX_GPIO_Init+0x1ec>)
 8000784:	0019      	movs	r1, r3
 8000786:	0010      	movs	r0, r2
 8000788:	f000 ffbe 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = MC_Tach_OUT_0_Pin|MC_Tach_OUT_1_Pin|MC_Tach_OUT_2_Pin|MC_Tach_OUT_3_Pin
 800078c:	0021      	movs	r1, r4
 800078e:	187b      	adds	r3, r7, r1
 8000790:	22fc      	movs	r2, #252	@ 0xfc
 8000792:	0212      	lsls	r2, r2, #8
 8000794:	601a      	str	r2, [r3, #0]
                          |MC_Tach_OUT_4_Pin|MC_Tach_OUT_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	000c      	movs	r4, r1
 8000798:	193b      	adds	r3, r7, r4
 800079a:	2201      	movs	r2, #1
 800079c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	4a16      	ldr	r2, [pc, #88]	@ (8000808 <MX_GPIO_Init+0x1ec>)
 80007ae:	0019      	movs	r1, r3
 80007b0:	0010      	movs	r0, r2
 80007b2:	f000 ffa9 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6;
 80007b6:	0021      	movs	r1, r4
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	22d0      	movs	r2, #208	@ 0xd0
 80007bc:	0092      	lsls	r2, r2, #2
 80007be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c0:	000c      	movs	r4, r1
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	2203      	movs	r2, #3
 80007c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	4a13      	ldr	r2, [pc, #76]	@ (8000820 <MX_GPIO_Init+0x204>)
 80007d2:	0019      	movs	r1, r3
 80007d4:	0010      	movs	r0, r2
 80007d6:	f000 ff97 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = Buf_PWM_IN_0_Pin|Buf_PWM_IN_1_Pin|Buf_PWM_IN_2_Pin|Buf_PWM_IN_3_Pin
 80007da:	0021      	movs	r1, r4
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	223f      	movs	r2, #63	@ 0x3f
 80007e0:	601a      	str	r2, [r3, #0]
                          |Buf_PWM_IN_4_Pin|Buf_PWM_IN_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2200      	movs	r2, #0
 80007e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000820 <MX_GPIO_Init+0x204>)
 80007f2:	0019      	movs	r1, r3
 80007f4:	0010      	movs	r0, r2
 80007f6:	f000 ff87 	bl	8001708 <HAL_GPIO_Init>

}
 80007fa:	46c0      	nop			@ (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b00b      	add	sp, #44	@ 0x2c
 8000800:	bd90      	pop	{r4, r7, pc}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	40021000 	.word	0x40021000
 8000808:	50000400 	.word	0x50000400
 800080c:	00000fff 	.word	0x00000fff
 8000810:	50000800 	.word	0x50000800
 8000814:	50001400 	.word	0x50001400
 8000818:	000081df 	.word	0x000081df
 800081c:	00000207 	.word	0x00000207
 8000820:	50000c00 	.word	0x50000c00

08000824 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000828:	4b1b      	ldr	r3, [pc, #108]	@ (8000898 <MX_I2C2_Init+0x74>)
 800082a:	4a1c      	ldr	r2, [pc, #112]	@ (800089c <MX_I2C2_Init+0x78>)
 800082c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800082e:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <MX_I2C2_Init+0x74>)
 8000830:	4a1b      	ldr	r2, [pc, #108]	@ (80008a0 <MX_I2C2_Init+0x7c>)
 8000832:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000834:	4b18      	ldr	r3, [pc, #96]	@ (8000898 <MX_I2C2_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800083a:	4b17      	ldr	r3, [pc, #92]	@ (8000898 <MX_I2C2_Init+0x74>)
 800083c:	2201      	movs	r2, #1
 800083e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000840:	4b15      	ldr	r3, [pc, #84]	@ (8000898 <MX_I2C2_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000846:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <MX_I2C2_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800084c:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <MX_I2C2_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000852:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_I2C2_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000858:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <MX_I2C2_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_I2C2_Init+0x74>)
 8000860:	0018      	movs	r0, r3
 8000862:	f001 f8d3 	bl	8001a0c <HAL_I2C_Init>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d001      	beq.n	800086e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800086a:	f000 f8cb 	bl	8000a04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800086e:	4b0a      	ldr	r3, [pc, #40]	@ (8000898 <MX_I2C2_Init+0x74>)
 8000870:	2100      	movs	r1, #0
 8000872:	0018      	movs	r0, r3
 8000874:	f001 f970 	bl	8001b58 <HAL_I2CEx_ConfigAnalogFilter>
 8000878:	1e03      	subs	r3, r0, #0
 800087a:	d001      	beq.n	8000880 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800087c:	f000 f8c2 	bl	8000a04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000880:	4b05      	ldr	r3, [pc, #20]	@ (8000898 <MX_I2C2_Init+0x74>)
 8000882:	2100      	movs	r1, #0
 8000884:	0018      	movs	r0, r3
 8000886:	f001 f9b3 	bl	8001bf0 <HAL_I2CEx_ConfigDigitalFilter>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800088e:	f000 f8b9 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000028 	.word	0x20000028
 800089c:	40005800 	.word	0x40005800
 80008a0:	00503d58 	.word	0x00503d58

080008a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b08b      	sub	sp, #44	@ 0x2c
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	2414      	movs	r4, #20
 80008ae:	193b      	adds	r3, r7, r4
 80008b0:	0018      	movs	r0, r3
 80008b2:	2314      	movs	r3, #20
 80008b4:	001a      	movs	r2, r3
 80008b6:	2100      	movs	r1, #0
 80008b8:	f004 f860 	bl	800497c <memset>
  if(i2cHandle->Instance==I2C2)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a1c      	ldr	r2, [pc, #112]	@ (8000934 <HAL_I2C_MspInit+0x90>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d131      	bne.n	800092a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <HAL_I2C_MspInit+0x94>)
 80008c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <HAL_I2C_MspInit+0x94>)
 80008cc:	2101      	movs	r1, #1
 80008ce:	430a      	orrs	r2, r1
 80008d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80008d2:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <HAL_I2C_MspInit+0x94>)
 80008d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008d6:	2201      	movs	r2, #1
 80008d8:	4013      	ands	r3, r2
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = MC_I2C_SCL_Pin|MC_I2C_SDA_Pin;
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	22c0      	movs	r2, #192	@ 0xc0
 80008e2:	0152      	lsls	r2, r2, #5
 80008e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e6:	0021      	movs	r1, r4
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2212      	movs	r2, #18
 80008ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2206      	movs	r2, #6
 80008fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	187a      	adds	r2, r7, r1
 8000902:	23a0      	movs	r3, #160	@ 0xa0
 8000904:	05db      	lsls	r3, r3, #23
 8000906:	0011      	movs	r1, r2
 8000908:	0018      	movs	r0, r3
 800090a:	f000 fefd 	bl	8001708 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800090e:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <HAL_I2C_MspInit+0x94>)
 8000910:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <HAL_I2C_MspInit+0x94>)
 8000914:	2180      	movs	r1, #128	@ 0x80
 8000916:	03c9      	lsls	r1, r1, #15
 8000918:	430a      	orrs	r2, r1
 800091a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800091c:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <HAL_I2C_MspInit+0x94>)
 800091e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000920:	2380      	movs	r3, #128	@ 0x80
 8000922:	03db      	lsls	r3, r3, #15
 8000924:	4013      	ands	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800092a:	46c0      	nop			@ (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	b00b      	add	sp, #44	@ 0x2c
 8000930:	bd90      	pop	{r4, r7, pc}
 8000932:	46c0      	nop			@ (mov r8, r8)
 8000934:	40005800 	.word	0x40005800
 8000938:	40021000 	.word	0x40021000

0800093c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000940:	f000 fda8 	bl	8001494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000944:	f000 f812 	bl	800096c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000948:	f7ff fe68 	bl	800061c <MX_GPIO_Init>
  MX_TIM3_Init();
 800094c:	f000 f9f0 	bl	8000d30 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000950:	f000 f916 	bl	8000b80 <MX_TIM1_Init>
  MX_TIM16_Init();
 8000954:	f000 fa78 	bl	8000e48 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000958:	f000 fb00 	bl	8000f5c <MX_TIM17_Init>
  MX_I2C2_Init();
 800095c:	f7ff ff62 	bl	8000824 <MX_I2C2_Init>
  MX_RTC_Init();
 8000960:	f000 f856 	bl	8000a10 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000964:	f000 fcb6 	bl	80012d4 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000968:	46c0      	nop			@ (mov r8, r8)
 800096a:	e7fd      	b.n	8000968 <main+0x2c>

0800096c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b093      	sub	sp, #76	@ 0x4c
 8000970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000972:	2410      	movs	r4, #16
 8000974:	193b      	adds	r3, r7, r4
 8000976:	0018      	movs	r0, r3
 8000978:	2338      	movs	r3, #56	@ 0x38
 800097a:	001a      	movs	r2, r3
 800097c:	2100      	movs	r1, #0
 800097e:	f003 fffd 	bl	800497c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000982:	003b      	movs	r3, r7
 8000984:	0018      	movs	r0, r3
 8000986:	2310      	movs	r3, #16
 8000988:	001a      	movs	r2, r3
 800098a:	2100      	movs	r1, #0
 800098c:	f003 fff6 	bl	800497c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000990:	2380      	movs	r3, #128	@ 0x80
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	0018      	movs	r0, r3
 8000996:	f001 f977 	bl	8001c88 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800099a:	193b      	adds	r3, r7, r4
 800099c:	220a      	movs	r2, #10
 800099e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a0:	193b      	adds	r3, r7, r4
 80009a2:	2280      	movs	r2, #128	@ 0x80
 80009a4:	0052      	lsls	r2, r2, #1
 80009a6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80009a8:	0021      	movs	r1, r4
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2240      	movs	r2, #64	@ 0x40
 80009b4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2201      	movs	r2, #1
 80009ba:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	0018      	movs	r0, r3
 80009c6:	f001 f9ab 	bl	8001d20 <HAL_RCC_OscConfig>
 80009ca:	1e03      	subs	r3, r0, #0
 80009cc:	d001      	beq.n	80009d2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80009ce:	f000 f819 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d2:	003b      	movs	r3, r7
 80009d4:	2207      	movs	r2, #7
 80009d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009d8:	003b      	movs	r3, r7
 80009da:	2200      	movs	r2, #0
 80009dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009de:	003b      	movs	r3, r7
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e4:	003b      	movs	r3, r7
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009ea:	003b      	movs	r3, r7
 80009ec:	2100      	movs	r1, #0
 80009ee:	0018      	movs	r0, r3
 80009f0:	f001 fcb0 	bl	8002354 <HAL_RCC_ClockConfig>
 80009f4:	1e03      	subs	r3, r0, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80009f8:	f000 f804 	bl	8000a04 <Error_Handler>
  }
}
 80009fc:	46c0      	nop			@ (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b013      	add	sp, #76	@ 0x4c
 8000a02:	bd90      	pop	{r4, r7, pc}

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	46c0      	nop			@ (mov r8, r8)
 8000a0e:	e7fd      	b.n	8000a0c <Error_Handler+0x8>

08000a10 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a14:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <MX_RTC_Init+0x68>)
 8000a16:	4a19      	ldr	r2, [pc, #100]	@ (8000a7c <MX_RTC_Init+0x6c>)
 8000a18:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a1a:	4b17      	ldr	r3, [pc, #92]	@ (8000a78 <MX_RTC_Init+0x68>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000a20:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <MX_RTC_Init+0x68>)
 8000a22:	227f      	movs	r2, #127	@ 0x7f
 8000a24:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000a26:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <MX_RTC_Init+0x68>)
 8000a28:	22ff      	movs	r2, #255	@ 0xff
 8000a2a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_WAKEUP;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <MX_RTC_Init+0x68>)
 8000a2e:	22c0      	movs	r2, #192	@ 0xc0
 8000a30:	03d2      	lsls	r2, r2, #15
 8000a32:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a34:	4b10      	ldr	r3, [pc, #64]	@ (8000a78 <MX_RTC_Init+0x68>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <MX_RTC_Init+0x68>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a40:	4b0d      	ldr	r3, [pc, #52]	@ (8000a78 <MX_RTC_Init+0x68>)
 8000a42:	2280      	movs	r2, #128	@ 0x80
 8000a44:	05d2      	lsls	r2, r2, #23
 8000a46:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000a48:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <MX_RTC_Init+0x68>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <MX_RTC_Init+0x68>)
 8000a50:	0018      	movs	r0, r3
 8000a52:	f001 ffe1 	bl	8002a18 <HAL_RTC_Init>
 8000a56:	1e03      	subs	r3, r0, #0
 8000a58:	d001      	beq.n	8000a5e <MX_RTC_Init+0x4e>
  {
    Error_Handler();
 8000a5a:	f7ff ffd3 	bl	8000a04 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000a5e:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <MX_RTC_Init+0x68>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	2100      	movs	r1, #0
 8000a64:	0018      	movs	r0, r3
 8000a66:	f002 f925 	bl	8002cb4 <HAL_RTCEx_SetWakeUpTimer>
 8000a6a:	1e03      	subs	r3, r0, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000a6e:	f7ff ffc9 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	2000007c 	.word	0x2000007c
 8000a7c:	40002800 	.word	0x40002800

08000a80 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b091      	sub	sp, #68	@ 0x44
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a88:	240c      	movs	r4, #12
 8000a8a:	193b      	adds	r3, r7, r4
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	2334      	movs	r3, #52	@ 0x34
 8000a90:	001a      	movs	r2, r3
 8000a92:	2100      	movs	r1, #0
 8000a94:	f003 ff72 	bl	800497c <memset>
  if(rtcHandle->Instance==RTC)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a15      	ldr	r2, [pc, #84]	@ (8000af4 <HAL_RTC_MspInit+0x74>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d124      	bne.n	8000aec <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000aa2:	193b      	adds	r3, r7, r4
 8000aa4:	2280      	movs	r2, #128	@ 0x80
 8000aa6:	0292      	lsls	r2, r2, #10
 8000aa8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	2280      	movs	r2, #128	@ 0x80
 8000aae:	0092      	lsls	r2, r2, #2
 8000ab0:	631a      	str	r2, [r3, #48]	@ 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f001 fdf7 	bl	80026a8 <HAL_RCCEx_PeriphCLKConfig>
 8000aba:	1e03      	subs	r3, r0, #0
 8000abc:	d001      	beq.n	8000ac2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000abe:	f7ff ffa1 	bl	8000a04 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8000af8 <HAL_RTC_MspInit+0x78>)
 8000ac4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <HAL_RTC_MspInit+0x78>)
 8000ac8:	2180      	movs	r1, #128	@ 0x80
 8000aca:	0209      	lsls	r1, r1, #8
 8000acc:	430a      	orrs	r2, r1
 8000ace:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000ad0:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <HAL_RTC_MspInit+0x78>)
 8000ad2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ad4:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <HAL_RTC_MspInit+0x78>)
 8000ad6:	2180      	movs	r1, #128	@ 0x80
 8000ad8:	00c9      	lsls	r1, r1, #3
 8000ada:	430a      	orrs	r2, r1
 8000adc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ade:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <HAL_RTC_MspInit+0x78>)
 8000ae0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ae2:	2380      	movs	r3, #128	@ 0x80
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000aec:	46c0      	nop			@ (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b011      	add	sp, #68	@ 0x44
 8000af2:	bd90      	pop	{r4, r7, pc}
 8000af4:	40002800 	.word	0x40002800
 8000af8:	40021000 	.word	0x40021000

08000afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	4b0f      	ldr	r3, [pc, #60]	@ (8000b40 <HAL_MspInit+0x44>)
 8000b04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b06:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <HAL_MspInit+0x44>)
 8000b08:	2101      	movs	r1, #1
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <HAL_MspInit+0x44>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	2201      	movs	r2, #1
 8000b14:	4013      	ands	r3, r2
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <HAL_MspInit+0x44>)
 8000b1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b1e:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <HAL_MspInit+0x44>)
 8000b20:	2180      	movs	r1, #128	@ 0x80
 8000b22:	0549      	lsls	r1, r1, #21
 8000b24:	430a      	orrs	r2, r1
 8000b26:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b28:	4b05      	ldr	r3, [pc, #20]	@ (8000b40 <HAL_MspInit+0x44>)
 8000b2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b2c:	2380      	movs	r3, #128	@ 0x80
 8000b2e:	055b      	lsls	r3, r3, #21
 8000b30:	4013      	ands	r3, r2
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b002      	add	sp, #8
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			@ (mov r8, r8)
 8000b40:	40021000 	.word	0x40021000

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b48:	46c0      	nop			@ (mov r8, r8)
 8000b4a:	e7fd      	b.n	8000b48 <NMI_Handler+0x4>

08000b4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b50:	46c0      	nop			@ (mov r8, r8)
 8000b52:	e7fd      	b.n	8000b50 <HardFault_Handler+0x4>

08000b54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b58:	46c0      	nop			@ (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6c:	f000 fcfc 	bl	8001568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b70:	46c0      	nop			@ (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b7a:	46c0      	nop			@ (mov r8, r8)
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b09c      	sub	sp, #112	@ 0x70
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b86:	2360      	movs	r3, #96	@ 0x60
 8000b88:	18fb      	adds	r3, r7, r3
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	001a      	movs	r2, r3
 8000b90:	2100      	movs	r1, #0
 8000b92:	f003 fef3 	bl	800497c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b96:	2354      	movs	r3, #84	@ 0x54
 8000b98:	18fb      	adds	r3, r7, r3
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	230c      	movs	r3, #12
 8000b9e:	001a      	movs	r2, r3
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	f003 feeb 	bl	800497c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ba6:	2338      	movs	r3, #56	@ 0x38
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	0018      	movs	r0, r3
 8000bac:	231c      	movs	r3, #28
 8000bae:	001a      	movs	r2, r3
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	f003 fee3 	bl	800497c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	0018      	movs	r0, r3
 8000bba:	2334      	movs	r3, #52	@ 0x34
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	f003 fedc 	bl	800497c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bc4:	4b56      	ldr	r3, [pc, #344]	@ (8000d20 <MX_TIM1_Init+0x1a0>)
 8000bc6:	4a57      	ldr	r2, [pc, #348]	@ (8000d24 <MX_TIM1_Init+0x1a4>)
 8000bc8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 665;
 8000bca:	4b55      	ldr	r3, [pc, #340]	@ (8000d20 <MX_TIM1_Init+0x1a0>)
 8000bcc:	4a56      	ldr	r2, [pc, #344]	@ (8000d28 <MX_TIM1_Init+0x1a8>)
 8000bce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd0:	4b53      	ldr	r3, [pc, #332]	@ (8000d20 <MX_TIM1_Init+0x1a0>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000bd6:	4b52      	ldr	r3, [pc, #328]	@ (8000d20 <MX_TIM1_Init+0x1a0>)
 8000bd8:	4a54      	ldr	r2, [pc, #336]	@ (8000d2c <MX_TIM1_Init+0x1ac>)
 8000bda:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bdc:	4b50      	ldr	r3, [pc, #320]	@ (8000d20 <MX_TIM1_Init+0x1a0>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000be2:	4b4f      	ldr	r3, [pc, #316]	@ (8000d20 <MX_TIM1_Init+0x1a0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be8:	4b4d      	ldr	r3, [pc, #308]	@ (8000d20 <MX_TIM1_Init+0x1a0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bee:	4b4c      	ldr	r3, [pc, #304]	@ (8000d20 <MX_TIM1_Init+0x1a0>)
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f002 f8db 	bl	8002dac <HAL_TIM_Base_Init>
 8000bf6:	1e03      	subs	r3, r0, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000bfa:	f7ff ff03 	bl	8000a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfe:	2160      	movs	r1, #96	@ 0x60
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2280      	movs	r2, #128	@ 0x80
 8000c04:	0152      	lsls	r2, r2, #5
 8000c06:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c08:	187a      	adds	r2, r7, r1
 8000c0a:	4b45      	ldr	r3, [pc, #276]	@ (8000d20 <MX_TIM1_Init+0x1a0>)
 8000c0c:	0011      	movs	r1, r2
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f002 fa84 	bl	800311c <HAL_TIM_ConfigClockSource>
 8000c14:	1e03      	subs	r3, r0, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000c18:	f7ff fef4 	bl	8000a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c1c:	4b40      	ldr	r3, [pc, #256]	@ (8000d20 <MX_TIM1_Init+0x1a0>)
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f002 f91c 	bl	8002e5c <HAL_TIM_PWM_Init>
 8000c24:	1e03      	subs	r3, r0, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000c28:	f7ff feec 	bl	8000a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2c:	2154      	movs	r1, #84	@ 0x54
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	2200      	movs	r2, #0
 8000c38:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c40:	187a      	adds	r2, r7, r1
 8000c42:	4b37      	ldr	r3, [pc, #220]	@ (8000d20 <MX_TIM1_Init+0x1a0>)
 8000c44:	0011      	movs	r1, r2
 8000c46:	0018      	movs	r0, r3
 8000c48:	f002 ff2c 	bl	8003aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c4c:	1e03      	subs	r3, r0, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000c50:	f7ff fed8 	bl	8000a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c54:	2138      	movs	r1, #56	@ 0x38
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2260      	movs	r2, #96	@ 0x60
 8000c5a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2200      	movs	r2, #0
 8000c60:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	2200      	movs	r2, #0
 8000c78:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c7a:	187b      	adds	r3, r7, r1
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c80:	1879      	adds	r1, r7, r1
 8000c82:	4b27      	ldr	r3, [pc, #156]	@ (8000d20 <MX_TIM1_Init+0x1a0>)
 8000c84:	2204      	movs	r2, #4
 8000c86:	0018      	movs	r0, r3
 8000c88:	f002 f948 	bl	8002f1c <HAL_TIM_PWM_ConfigChannel>
 8000c8c:	1e03      	subs	r3, r0, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000c90:	f7ff feb8 	bl	8000a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c94:	2338      	movs	r3, #56	@ 0x38
 8000c96:	18f9      	adds	r1, r7, r3
 8000c98:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <MX_TIM1_Init+0x1a0>)
 8000c9a:	2208      	movs	r2, #8
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f002 f93d 	bl	8002f1c <HAL_TIM_PWM_ConfigChannel>
 8000ca2:	1e03      	subs	r3, r0, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000ca6:	f7ff fead 	bl	8000a04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2280      	movs	r2, #128	@ 0x80
 8000ccc:	0192      	lsls	r2, r2, #6
 8000cce:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	2200      	movs	r2, #0
 8000cda:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	2200      	movs	r2, #0
 8000ce0:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2280      	movs	r2, #128	@ 0x80
 8000ce6:	0492      	lsls	r2, r2, #18
 8000ce8:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	2200      	movs	r2, #0
 8000cee:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cfc:	1d3a      	adds	r2, r7, #4
 8000cfe:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <MX_TIM1_Init+0x1a0>)
 8000d00:	0011      	movs	r1, r2
 8000d02:	0018      	movs	r0, r3
 8000d04:	f002 ff3c 	bl	8003b80 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d08:	1e03      	subs	r3, r0, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8000d0c:	f7ff fe7a 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d10:	4b03      	ldr	r3, [pc, #12]	@ (8000d20 <MX_TIM1_Init+0x1a0>)
 8000d12:	0018      	movs	r0, r3
 8000d14:	f000 fa22 	bl	800115c <HAL_TIM_MspPostInit>

}
 8000d18:	46c0      	nop			@ (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b01c      	add	sp, #112	@ 0x70
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200000a8 	.word	0x200000a8
 8000d24:	40012c00 	.word	0x40012c00
 8000d28:	00000299 	.word	0x00000299
 8000d2c:	0000ffff 	.word	0x0000ffff

08000d30 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08e      	sub	sp, #56	@ 0x38
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d36:	2328      	movs	r3, #40	@ 0x28
 8000d38:	18fb      	adds	r3, r7, r3
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	2310      	movs	r3, #16
 8000d3e:	001a      	movs	r2, r3
 8000d40:	2100      	movs	r1, #0
 8000d42:	f003 fe1b 	bl	800497c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d46:	231c      	movs	r3, #28
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	230c      	movs	r3, #12
 8000d4e:	001a      	movs	r2, r3
 8000d50:	2100      	movs	r1, #0
 8000d52:	f003 fe13 	bl	800497c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d56:	003b      	movs	r3, r7
 8000d58:	0018      	movs	r0, r3
 8000d5a:	231c      	movs	r3, #28
 8000d5c:	001a      	movs	r2, r3
 8000d5e:	2100      	movs	r1, #0
 8000d60:	f003 fe0c 	bl	800497c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d64:	4b34      	ldr	r3, [pc, #208]	@ (8000e38 <MX_TIM3_Init+0x108>)
 8000d66:	4a35      	ldr	r2, [pc, #212]	@ (8000e3c <MX_TIM3_Init+0x10c>)
 8000d68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 665;
 8000d6a:	4b33      	ldr	r3, [pc, #204]	@ (8000e38 <MX_TIM3_Init+0x108>)
 8000d6c:	4a34      	ldr	r2, [pc, #208]	@ (8000e40 <MX_TIM3_Init+0x110>)
 8000d6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d70:	4b31      	ldr	r3, [pc, #196]	@ (8000e38 <MX_TIM3_Init+0x108>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d76:	4b30      	ldr	r3, [pc, #192]	@ (8000e38 <MX_TIM3_Init+0x108>)
 8000d78:	4a32      	ldr	r2, [pc, #200]	@ (8000e44 <MX_TIM3_Init+0x114>)
 8000d7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7c:	4b2e      	ldr	r3, [pc, #184]	@ (8000e38 <MX_TIM3_Init+0x108>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d82:	4b2d      	ldr	r3, [pc, #180]	@ (8000e38 <MX_TIM3_Init+0x108>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d88:	4b2b      	ldr	r3, [pc, #172]	@ (8000e38 <MX_TIM3_Init+0x108>)
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f002 f80e 	bl	8002dac <HAL_TIM_Base_Init>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000d94:	f7ff fe36 	bl	8000a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d98:	2128      	movs	r1, #40	@ 0x28
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2280      	movs	r2, #128	@ 0x80
 8000d9e:	0152      	lsls	r2, r2, #5
 8000da0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000da2:	187a      	adds	r2, r7, r1
 8000da4:	4b24      	ldr	r3, [pc, #144]	@ (8000e38 <MX_TIM3_Init+0x108>)
 8000da6:	0011      	movs	r1, r2
 8000da8:	0018      	movs	r0, r3
 8000daa:	f002 f9b7 	bl	800311c <HAL_TIM_ConfigClockSource>
 8000dae:	1e03      	subs	r3, r0, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000db2:	f7ff fe27 	bl	8000a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000db6:	4b20      	ldr	r3, [pc, #128]	@ (8000e38 <MX_TIM3_Init+0x108>)
 8000db8:	0018      	movs	r0, r3
 8000dba:	f002 f84f 	bl	8002e5c <HAL_TIM_PWM_Init>
 8000dbe:	1e03      	subs	r3, r0, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000dc2:	f7ff fe1f 	bl	8000a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc6:	211c      	movs	r1, #28
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dd4:	187a      	adds	r2, r7, r1
 8000dd6:	4b18      	ldr	r3, [pc, #96]	@ (8000e38 <MX_TIM3_Init+0x108>)
 8000dd8:	0011      	movs	r1, r2
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f002 fe62 	bl	8003aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8000de0:	1e03      	subs	r3, r0, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000de4:	f7ff fe0e 	bl	8000a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000de8:	003b      	movs	r3, r7
 8000dea:	2260      	movs	r2, #96	@ 0x60
 8000dec:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000dee:	003b      	movs	r3, r7
 8000df0:	2200      	movs	r2, #0
 8000df2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000df4:	003b      	movs	r3, r7
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dfa:	003b      	movs	r3, r7
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e00:	0039      	movs	r1, r7
 8000e02:	4b0d      	ldr	r3, [pc, #52]	@ (8000e38 <MX_TIM3_Init+0x108>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	0018      	movs	r0, r3
 8000e08:	f002 f888 	bl	8002f1c <HAL_TIM_PWM_ConfigChannel>
 8000e0c:	1e03      	subs	r3, r0, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000e10:	f7ff fdf8 	bl	8000a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e14:	0039      	movs	r1, r7
 8000e16:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <MX_TIM3_Init+0x108>)
 8000e18:	2204      	movs	r2, #4
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f002 f87e 	bl	8002f1c <HAL_TIM_PWM_ConfigChannel>
 8000e20:	1e03      	subs	r3, r0, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8000e24:	f7ff fdee 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e28:	4b03      	ldr	r3, [pc, #12]	@ (8000e38 <MX_TIM3_Init+0x108>)
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f000 f996 	bl	800115c <HAL_TIM_MspPostInit>

}
 8000e30:	46c0      	nop			@ (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b00e      	add	sp, #56	@ 0x38
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	200000f4 	.word	0x200000f4
 8000e3c:	40000400 	.word	0x40000400
 8000e40:	00000299 	.word	0x00000299
 8000e44:	0000ffff 	.word	0x0000ffff

08000e48 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b094      	sub	sp, #80	@ 0x50
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e4e:	2334      	movs	r3, #52	@ 0x34
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	0018      	movs	r0, r3
 8000e54:	231c      	movs	r3, #28
 8000e56:	001a      	movs	r2, r3
 8000e58:	2100      	movs	r1, #0
 8000e5a:	f003 fd8f 	bl	800497c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e5e:	003b      	movs	r3, r7
 8000e60:	0018      	movs	r0, r3
 8000e62:	2334      	movs	r3, #52	@ 0x34
 8000e64:	001a      	movs	r2, r3
 8000e66:	2100      	movs	r1, #0
 8000e68:	f003 fd88 	bl	800497c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000e6c:	4b37      	ldr	r3, [pc, #220]	@ (8000f4c <MX_TIM16_Init+0x104>)
 8000e6e:	4a38      	ldr	r2, [pc, #224]	@ (8000f50 <MX_TIM16_Init+0x108>)
 8000e70:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 665;
 8000e72:	4b36      	ldr	r3, [pc, #216]	@ (8000f4c <MX_TIM16_Init+0x104>)
 8000e74:	4a37      	ldr	r2, [pc, #220]	@ (8000f54 <MX_TIM16_Init+0x10c>)
 8000e76:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e78:	4b34      	ldr	r3, [pc, #208]	@ (8000f4c <MX_TIM16_Init+0x104>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000e7e:	4b33      	ldr	r3, [pc, #204]	@ (8000f4c <MX_TIM16_Init+0x104>)
 8000e80:	4a35      	ldr	r2, [pc, #212]	@ (8000f58 <MX_TIM16_Init+0x110>)
 8000e82:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e84:	4b31      	ldr	r3, [pc, #196]	@ (8000f4c <MX_TIM16_Init+0x104>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000e8a:	4b30      	ldr	r3, [pc, #192]	@ (8000f4c <MX_TIM16_Init+0x104>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e90:	4b2e      	ldr	r3, [pc, #184]	@ (8000f4c <MX_TIM16_Init+0x104>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000e96:	4b2d      	ldr	r3, [pc, #180]	@ (8000f4c <MX_TIM16_Init+0x104>)
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f001 ff87 	bl	8002dac <HAL_TIM_Base_Init>
 8000e9e:	1e03      	subs	r3, r0, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8000ea2:	f7ff fdaf 	bl	8000a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000ea6:	4b29      	ldr	r3, [pc, #164]	@ (8000f4c <MX_TIM16_Init+0x104>)
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f001 ffd7 	bl	8002e5c <HAL_TIM_PWM_Init>
 8000eae:	1e03      	subs	r3, r0, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8000eb2:	f7ff fda7 	bl	8000a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eb6:	2134      	movs	r1, #52	@ 0x34
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	2260      	movs	r2, #96	@ 0x60
 8000ebc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ed6:	187b      	adds	r3, r7, r1
 8000ed8:	2200      	movs	r2, #0
 8000eda:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	2200      	movs	r2, #0
 8000ee0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	4b19      	ldr	r3, [pc, #100]	@ (8000f4c <MX_TIM16_Init+0x104>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f002 f817 	bl	8002f1c <HAL_TIM_PWM_ConfigChannel>
 8000eee:	1e03      	subs	r3, r0, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8000ef2:	f7ff fd87 	bl	8000a04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ef6:	003b      	movs	r3, r7
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000efc:	003b      	movs	r3, r7
 8000efe:	2200      	movs	r2, #0
 8000f00:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f02:	003b      	movs	r3, r7
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f08:	003b      	movs	r3, r7
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f0e:	003b      	movs	r3, r7
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f14:	003b      	movs	r3, r7
 8000f16:	2280      	movs	r2, #128	@ 0x80
 8000f18:	0192      	lsls	r2, r2, #6
 8000f1a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f1c:	003b      	movs	r3, r7
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f22:	003b      	movs	r3, r7
 8000f24:	2200      	movs	r2, #0
 8000f26:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000f28:	003a      	movs	r2, r7
 8000f2a:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <MX_TIM16_Init+0x104>)
 8000f2c:	0011      	movs	r1, r2
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f002 fe26 	bl	8003b80 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f34:	1e03      	subs	r3, r0, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8000f38:	f7ff fd64 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000f3c:	4b03      	ldr	r3, [pc, #12]	@ (8000f4c <MX_TIM16_Init+0x104>)
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f000 f90c 	bl	800115c <HAL_TIM_MspPostInit>

}
 8000f44:	46c0      	nop			@ (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b014      	add	sp, #80	@ 0x50
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000140 	.word	0x20000140
 8000f50:	40014400 	.word	0x40014400
 8000f54:	00000299 	.word	0x00000299
 8000f58:	0000ffff 	.word	0x0000ffff

08000f5c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b094      	sub	sp, #80	@ 0x50
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f62:	2334      	movs	r3, #52	@ 0x34
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	0018      	movs	r0, r3
 8000f68:	231c      	movs	r3, #28
 8000f6a:	001a      	movs	r2, r3
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	f003 fd05 	bl	800497c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f72:	003b      	movs	r3, r7
 8000f74:	0018      	movs	r0, r3
 8000f76:	2334      	movs	r3, #52	@ 0x34
 8000f78:	001a      	movs	r2, r3
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	f003 fcfe 	bl	800497c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000f80:	4b37      	ldr	r3, [pc, #220]	@ (8001060 <MX_TIM17_Init+0x104>)
 8000f82:	4a38      	ldr	r2, [pc, #224]	@ (8001064 <MX_TIM17_Init+0x108>)
 8000f84:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 665;
 8000f86:	4b36      	ldr	r3, [pc, #216]	@ (8001060 <MX_TIM17_Init+0x104>)
 8000f88:	4a37      	ldr	r2, [pc, #220]	@ (8001068 <MX_TIM17_Init+0x10c>)
 8000f8a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8c:	4b34      	ldr	r3, [pc, #208]	@ (8001060 <MX_TIM17_Init+0x104>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000f92:	4b33      	ldr	r3, [pc, #204]	@ (8001060 <MX_TIM17_Init+0x104>)
 8000f94:	4a35      	ldr	r2, [pc, #212]	@ (800106c <MX_TIM17_Init+0x110>)
 8000f96:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f98:	4b31      	ldr	r3, [pc, #196]	@ (8001060 <MX_TIM17_Init+0x104>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000f9e:	4b30      	ldr	r3, [pc, #192]	@ (8001060 <MX_TIM17_Init+0x104>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa4:	4b2e      	ldr	r3, [pc, #184]	@ (8001060 <MX_TIM17_Init+0x104>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000faa:	4b2d      	ldr	r3, [pc, #180]	@ (8001060 <MX_TIM17_Init+0x104>)
 8000fac:	0018      	movs	r0, r3
 8000fae:	f001 fefd 	bl	8002dac <HAL_TIM_Base_Init>
 8000fb2:	1e03      	subs	r3, r0, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8000fb6:	f7ff fd25 	bl	8000a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000fba:	4b29      	ldr	r3, [pc, #164]	@ (8001060 <MX_TIM17_Init+0x104>)
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f001 ff4d 	bl	8002e5c <HAL_TIM_PWM_Init>
 8000fc2:	1e03      	subs	r3, r0, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8000fc6:	f7ff fd1d 	bl	8000a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fca:	2134      	movs	r1, #52	@ 0x34
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	2260      	movs	r2, #96	@ 0x60
 8000fd0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000fd2:	187b      	adds	r3, r7, r1
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	2208      	movs	r2, #8
 8000fe2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe4:	187b      	adds	r3, r7, r1
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	2200      	movs	r2, #0
 8000fee:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ff0:	187b      	adds	r3, r7, r1
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff6:	1879      	adds	r1, r7, r1
 8000ff8:	4b19      	ldr	r3, [pc, #100]	@ (8001060 <MX_TIM17_Init+0x104>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f001 ff8d 	bl	8002f1c <HAL_TIM_PWM_ConfigChannel>
 8001002:	1e03      	subs	r3, r0, #0
 8001004:	d001      	beq.n	800100a <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8001006:	f7ff fcfd 	bl	8000a04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800100a:	003b      	movs	r3, r7
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001010:	003b      	movs	r3, r7
 8001012:	2200      	movs	r2, #0
 8001014:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001016:	003b      	movs	r3, r7
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800101c:	003b      	movs	r3, r7
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001022:	003b      	movs	r3, r7
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001028:	003b      	movs	r3, r7
 800102a:	2280      	movs	r2, #128	@ 0x80
 800102c:	0192      	lsls	r2, r2, #6
 800102e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001030:	003b      	movs	r3, r7
 8001032:	2200      	movs	r2, #0
 8001034:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001036:	003b      	movs	r3, r7
 8001038:	2200      	movs	r2, #0
 800103a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800103c:	003a      	movs	r2, r7
 800103e:	4b08      	ldr	r3, [pc, #32]	@ (8001060 <MX_TIM17_Init+0x104>)
 8001040:	0011      	movs	r1, r2
 8001042:	0018      	movs	r0, r3
 8001044:	f002 fd9c 	bl	8003b80 <HAL_TIMEx_ConfigBreakDeadTime>
 8001048:	1e03      	subs	r3, r0, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 800104c:	f7ff fcda 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001050:	4b03      	ldr	r3, [pc, #12]	@ (8001060 <MX_TIM17_Init+0x104>)
 8001052:	0018      	movs	r0, r3
 8001054:	f000 f882 	bl	800115c <HAL_TIM_MspPostInit>

}
 8001058:	46c0      	nop			@ (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	b014      	add	sp, #80	@ 0x50
 800105e:	bd80      	pop	{r7, pc}
 8001060:	2000018c 	.word	0x2000018c
 8001064:	40014800 	.word	0x40014800
 8001068:	00000299 	.word	0x00000299
 800106c:	0000ffff 	.word	0x0000ffff

08001070 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b095      	sub	sp, #84	@ 0x54
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001078:	241c      	movs	r4, #28
 800107a:	193b      	adds	r3, r7, r4
 800107c:	0018      	movs	r0, r3
 800107e:	2334      	movs	r3, #52	@ 0x34
 8001080:	001a      	movs	r2, r3
 8001082:	2100      	movs	r1, #0
 8001084:	f003 fc7a 	bl	800497c <memset>
  if(tim_baseHandle->Instance==TIM1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a2e      	ldr	r2, [pc, #184]	@ (8001148 <HAL_TIM_Base_MspInit+0xd8>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d11d      	bne.n	80010ce <HAL_TIM_Base_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001092:	193b      	adds	r3, r7, r4
 8001094:	2280      	movs	r2, #128	@ 0x80
 8001096:	0392      	lsls	r2, r2, #14
 8001098:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800109a:	193b      	adds	r3, r7, r4
 800109c:	2200      	movs	r2, #0
 800109e:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a0:	193b      	adds	r3, r7, r4
 80010a2:	0018      	movs	r0, r3
 80010a4:	f001 fb00 	bl	80026a8 <HAL_RCCEx_PeriphCLKConfig>
 80010a8:	1e03      	subs	r3, r0, #0
 80010aa:	d001      	beq.n	80010b0 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 80010ac:	f7ff fcaa 	bl	8000a04 <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010b0:	4b26      	ldr	r3, [pc, #152]	@ (800114c <HAL_TIM_Base_MspInit+0xdc>)
 80010b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010b4:	4b25      	ldr	r3, [pc, #148]	@ (800114c <HAL_TIM_Base_MspInit+0xdc>)
 80010b6:	2180      	movs	r1, #128	@ 0x80
 80010b8:	0109      	lsls	r1, r1, #4
 80010ba:	430a      	orrs	r2, r1
 80010bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80010be:	4b23      	ldr	r3, [pc, #140]	@ (800114c <HAL_TIM_Base_MspInit+0xdc>)
 80010c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010c2:	2380      	movs	r3, #128	@ 0x80
 80010c4:	011b      	lsls	r3, r3, #4
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
 80010ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80010cc:	e038      	b.n	8001140 <HAL_TIM_Base_MspInit+0xd0>
  else if(tim_baseHandle->Instance==TIM3)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001150 <HAL_TIM_Base_MspInit+0xe0>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d10c      	bne.n	80010f2 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010d8:	4b1c      	ldr	r3, [pc, #112]	@ (800114c <HAL_TIM_Base_MspInit+0xdc>)
 80010da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010dc:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <HAL_TIM_Base_MspInit+0xdc>)
 80010de:	2102      	movs	r1, #2
 80010e0:	430a      	orrs	r2, r1
 80010e2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010e4:	4b19      	ldr	r3, [pc, #100]	@ (800114c <HAL_TIM_Base_MspInit+0xdc>)
 80010e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010e8:	2202      	movs	r2, #2
 80010ea:	4013      	ands	r3, r2
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	697b      	ldr	r3, [r7, #20]
}
 80010f0:	e026      	b.n	8001140 <HAL_TIM_Base_MspInit+0xd0>
  else if(tim_baseHandle->Instance==TIM16)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a17      	ldr	r2, [pc, #92]	@ (8001154 <HAL_TIM_Base_MspInit+0xe4>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d10e      	bne.n	800111a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80010fc:	4b13      	ldr	r3, [pc, #76]	@ (800114c <HAL_TIM_Base_MspInit+0xdc>)
 80010fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001100:	4b12      	ldr	r3, [pc, #72]	@ (800114c <HAL_TIM_Base_MspInit+0xdc>)
 8001102:	2180      	movs	r1, #128	@ 0x80
 8001104:	0289      	lsls	r1, r1, #10
 8001106:	430a      	orrs	r2, r1
 8001108:	641a      	str	r2, [r3, #64]	@ 0x40
 800110a:	4b10      	ldr	r3, [pc, #64]	@ (800114c <HAL_TIM_Base_MspInit+0xdc>)
 800110c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800110e:	2380      	movs	r3, #128	@ 0x80
 8001110:	029b      	lsls	r3, r3, #10
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	693b      	ldr	r3, [r7, #16]
}
 8001118:	e012      	b.n	8001140 <HAL_TIM_Base_MspInit+0xd0>
  else if(tim_baseHandle->Instance==TIM17)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a0e      	ldr	r2, [pc, #56]	@ (8001158 <HAL_TIM_Base_MspInit+0xe8>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d10d      	bne.n	8001140 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001124:	4b09      	ldr	r3, [pc, #36]	@ (800114c <HAL_TIM_Base_MspInit+0xdc>)
 8001126:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001128:	4b08      	ldr	r3, [pc, #32]	@ (800114c <HAL_TIM_Base_MspInit+0xdc>)
 800112a:	2180      	movs	r1, #128	@ 0x80
 800112c:	02c9      	lsls	r1, r1, #11
 800112e:	430a      	orrs	r2, r1
 8001130:	641a      	str	r2, [r3, #64]	@ 0x40
 8001132:	4b06      	ldr	r3, [pc, #24]	@ (800114c <HAL_TIM_Base_MspInit+0xdc>)
 8001134:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001136:	2380      	movs	r3, #128	@ 0x80
 8001138:	02db      	lsls	r3, r3, #11
 800113a:	4013      	ands	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]
}
 8001140:	46c0      	nop			@ (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	b015      	add	sp, #84	@ 0x54
 8001146:	bd90      	pop	{r4, r7, pc}
 8001148:	40012c00 	.word	0x40012c00
 800114c:	40021000 	.word	0x40021000
 8001150:	40000400 	.word	0x40000400
 8001154:	40014400 	.word	0x40014400
 8001158:	40014800 	.word	0x40014800

0800115c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b08d      	sub	sp, #52	@ 0x34
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	241c      	movs	r4, #28
 8001166:	193b      	adds	r3, r7, r4
 8001168:	0018      	movs	r0, r3
 800116a:	2314      	movs	r3, #20
 800116c:	001a      	movs	r2, r3
 800116e:	2100      	movs	r1, #0
 8001170:	f003 fc04 	bl	800497c <memset>
  if(timHandle->Instance==TIM1)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a50      	ldr	r2, [pc, #320]	@ (80012bc <HAL_TIM_MspPostInit+0x160>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d122      	bne.n	80011c4 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117e:	4b50      	ldr	r3, [pc, #320]	@ (80012c0 <HAL_TIM_MspPostInit+0x164>)
 8001180:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001182:	4b4f      	ldr	r3, [pc, #316]	@ (80012c0 <HAL_TIM_MspPostInit+0x164>)
 8001184:	2102      	movs	r1, #2
 8001186:	430a      	orrs	r2, r1
 8001188:	635a      	str	r2, [r3, #52]	@ 0x34
 800118a:	4b4d      	ldr	r3, [pc, #308]	@ (80012c0 <HAL_TIM_MspPostInit+0x164>)
 800118c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800118e:	2202      	movs	r2, #2
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
 8001194:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PB3     ------> TIM1_CH2
    PB6     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = MC_PWM_OUT_0_Pin|MC_PWM_OUT_3_Pin;
 8001196:	0021      	movs	r1, r4
 8001198:	187b      	adds	r3, r7, r1
 800119a:	2248      	movs	r2, #72	@ 0x48
 800119c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	187b      	adds	r3, r7, r1
 80011a0:	2202      	movs	r2, #2
 80011a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	187b      	adds	r3, r7, r1
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	187b      	adds	r3, r7, r1
 80011ac:	2200      	movs	r2, #0
 80011ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	2201      	movs	r2, #1
 80011b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	4a42      	ldr	r2, [pc, #264]	@ (80012c4 <HAL_TIM_MspPostInit+0x168>)
 80011ba:	0019      	movs	r1, r3
 80011bc:	0010      	movs	r0, r2
 80011be:	f000 faa3 	bl	8001708 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80011c2:	e077      	b.n	80012b4 <HAL_TIM_MspPostInit+0x158>
  else if(timHandle->Instance==TIM3)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a3f      	ldr	r2, [pc, #252]	@ (80012c8 <HAL_TIM_MspPostInit+0x16c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d122      	bne.n	8001214 <HAL_TIM_MspPostInit+0xb8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	4b3c      	ldr	r3, [pc, #240]	@ (80012c0 <HAL_TIM_MspPostInit+0x164>)
 80011d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011d2:	4b3b      	ldr	r3, [pc, #236]	@ (80012c0 <HAL_TIM_MspPostInit+0x164>)
 80011d4:	2102      	movs	r1, #2
 80011d6:	430a      	orrs	r2, r1
 80011d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80011da:	4b39      	ldr	r3, [pc, #228]	@ (80012c0 <HAL_TIM_MspPostInit+0x164>)
 80011dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011de:	2202      	movs	r2, #2
 80011e0:	4013      	ands	r3, r2
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MC_PWM_OUT_1_Pin|MC_PWM_OUT_2_Pin;
 80011e6:	211c      	movs	r1, #28
 80011e8:	187b      	adds	r3, r7, r1
 80011ea:	2230      	movs	r2, #48	@ 0x30
 80011ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	187b      	adds	r3, r7, r1
 80011f0:	2202      	movs	r2, #2
 80011f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	187b      	adds	r3, r7, r1
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	2200      	movs	r2, #0
 80011fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001200:	187b      	adds	r3, r7, r1
 8001202:	2201      	movs	r2, #1
 8001204:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001206:	187b      	adds	r3, r7, r1
 8001208:	4a2e      	ldr	r2, [pc, #184]	@ (80012c4 <HAL_TIM_MspPostInit+0x168>)
 800120a:	0019      	movs	r1, r3
 800120c:	0010      	movs	r0, r2
 800120e:	f000 fa7b 	bl	8001708 <HAL_GPIO_Init>
}
 8001212:	e04f      	b.n	80012b4 <HAL_TIM_MspPostInit+0x158>
  else if(timHandle->Instance==TIM16)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a2c      	ldr	r2, [pc, #176]	@ (80012cc <HAL_TIM_MspPostInit+0x170>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d123      	bne.n	8001266 <HAL_TIM_MspPostInit+0x10a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	4b28      	ldr	r3, [pc, #160]	@ (80012c0 <HAL_TIM_MspPostInit+0x164>)
 8001220:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001222:	4b27      	ldr	r3, [pc, #156]	@ (80012c0 <HAL_TIM_MspPostInit+0x164>)
 8001224:	2102      	movs	r1, #2
 8001226:	430a      	orrs	r2, r1
 8001228:	635a      	str	r2, [r3, #52]	@ 0x34
 800122a:	4b25      	ldr	r3, [pc, #148]	@ (80012c0 <HAL_TIM_MspPostInit+0x164>)
 800122c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800122e:	2202      	movs	r2, #2
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MC_PWM_OUT_5_Pin;
 8001236:	211c      	movs	r1, #28
 8001238:	187b      	adds	r3, r7, r1
 800123a:	2280      	movs	r2, #128	@ 0x80
 800123c:	0052      	lsls	r2, r2, #1
 800123e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	187b      	adds	r3, r7, r1
 8001242:	2202      	movs	r2, #2
 8001244:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	187b      	adds	r3, r7, r1
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	187b      	adds	r3, r7, r1
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8001252:	187b      	adds	r3, r7, r1
 8001254:	2202      	movs	r2, #2
 8001256:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MC_PWM_OUT_5_GPIO_Port, &GPIO_InitStruct);
 8001258:	187b      	adds	r3, r7, r1
 800125a:	4a1a      	ldr	r2, [pc, #104]	@ (80012c4 <HAL_TIM_MspPostInit+0x168>)
 800125c:	0019      	movs	r1, r3
 800125e:	0010      	movs	r0, r2
 8001260:	f000 fa52 	bl	8001708 <HAL_GPIO_Init>
}
 8001264:	e026      	b.n	80012b4 <HAL_TIM_MspPostInit+0x158>
  else if(timHandle->Instance==TIM17)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a19      	ldr	r2, [pc, #100]	@ (80012d0 <HAL_TIM_MspPostInit+0x174>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d121      	bne.n	80012b4 <HAL_TIM_MspPostInit+0x158>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001270:	4b13      	ldr	r3, [pc, #76]	@ (80012c0 <HAL_TIM_MspPostInit+0x164>)
 8001272:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001274:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <HAL_TIM_MspPostInit+0x164>)
 8001276:	2102      	movs	r1, #2
 8001278:	430a      	orrs	r2, r1
 800127a:	635a      	str	r2, [r3, #52]	@ 0x34
 800127c:	4b10      	ldr	r3, [pc, #64]	@ (80012c0 <HAL_TIM_MspPostInit+0x164>)
 800127e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001280:	2202      	movs	r2, #2
 8001282:	4013      	ands	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MC_PWM_OUT_4_Pin;
 8001288:	211c      	movs	r1, #28
 800128a:	187b      	adds	r3, r7, r1
 800128c:	2280      	movs	r2, #128	@ 0x80
 800128e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	187b      	adds	r3, r7, r1
 8001292:	2202      	movs	r2, #2
 8001294:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	187b      	adds	r3, r7, r1
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	187b      	adds	r3, r7, r1
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 80012a2:	187b      	adds	r3, r7, r1
 80012a4:	2202      	movs	r2, #2
 80012a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MC_PWM_OUT_4_GPIO_Port, &GPIO_InitStruct);
 80012a8:	187b      	adds	r3, r7, r1
 80012aa:	4a06      	ldr	r2, [pc, #24]	@ (80012c4 <HAL_TIM_MspPostInit+0x168>)
 80012ac:	0019      	movs	r1, r3
 80012ae:	0010      	movs	r0, r2
 80012b0:	f000 fa2a 	bl	8001708 <HAL_GPIO_Init>
}
 80012b4:	46c0      	nop			@ (mov r8, r8)
 80012b6:	46bd      	mov	sp, r7
 80012b8:	b00d      	add	sp, #52	@ 0x34
 80012ba:	bd90      	pop	{r4, r7, pc}
 80012bc:	40012c00 	.word	0x40012c00
 80012c0:	40021000 	.word	0x40021000
 80012c4:	50000400 	.word	0x50000400
 80012c8:	40000400 	.word	0x40000400
 80012cc:	40014400 	.word	0x40014400
 80012d0:	40014800 	.word	0x40014800

080012d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012d8:	4b26      	ldr	r3, [pc, #152]	@ (8001374 <MX_USART1_UART_Init+0xa0>)
 80012da:	4a27      	ldr	r2, [pc, #156]	@ (8001378 <MX_USART1_UART_Init+0xa4>)
 80012dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012de:	4b25      	ldr	r3, [pc, #148]	@ (8001374 <MX_USART1_UART_Init+0xa0>)
 80012e0:	22e1      	movs	r2, #225	@ 0xe1
 80012e2:	0252      	lsls	r2, r2, #9
 80012e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012e6:	4b23      	ldr	r3, [pc, #140]	@ (8001374 <MX_USART1_UART_Init+0xa0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012ec:	4b21      	ldr	r3, [pc, #132]	@ (8001374 <MX_USART1_UART_Init+0xa0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012f2:	4b20      	ldr	r3, [pc, #128]	@ (8001374 <MX_USART1_UART_Init+0xa0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001374 <MX_USART1_UART_Init+0xa0>)
 80012fa:	220c      	movs	r2, #12
 80012fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001374 <MX_USART1_UART_Init+0xa0>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001304:	4b1b      	ldr	r3, [pc, #108]	@ (8001374 <MX_USART1_UART_Init+0xa0>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800130a:	4b1a      	ldr	r3, [pc, #104]	@ (8001374 <MX_USART1_UART_Init+0xa0>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001310:	4b18      	ldr	r3, [pc, #96]	@ (8001374 <MX_USART1_UART_Init+0xa0>)
 8001312:	2200      	movs	r2, #0
 8001314:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 8001316:	4b17      	ldr	r3, [pc, #92]	@ (8001374 <MX_USART1_UART_Init+0xa0>)
 8001318:	2240      	movs	r2, #64	@ 0x40
 800131a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 800131c:	4b15      	ldr	r3, [pc, #84]	@ (8001374 <MX_USART1_UART_Init+0xa0>)
 800131e:	2280      	movs	r2, #128	@ 0x80
 8001320:	0352      	lsls	r2, r2, #13
 8001322:	645a      	str	r2, [r3, #68]	@ 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 8001324:	4b13      	ldr	r3, [pc, #76]	@ (8001374 <MX_USART1_UART_Init+0xa0>)
 8001326:	2200      	movs	r2, #0
 8001328:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800132a:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <MX_USART1_UART_Init+0xa0>)
 800132c:	0018      	movs	r0, r3
 800132e:	f002 fcc3 	bl	8003cb8 <HAL_UART_Init>
 8001332:	1e03      	subs	r3, r0, #0
 8001334:	d001      	beq.n	800133a <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 8001336:	f7ff fb65 	bl	8000a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800133a:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <MX_USART1_UART_Init+0xa0>)
 800133c:	2100      	movs	r1, #0
 800133e:	0018      	movs	r0, r3
 8001340:	f003 fa3c 	bl	80047bc <HAL_UARTEx_SetTxFifoThreshold>
 8001344:	1e03      	subs	r3, r0, #0
 8001346:	d001      	beq.n	800134c <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 8001348:	f7ff fb5c 	bl	8000a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800134c:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <MX_USART1_UART_Init+0xa0>)
 800134e:	2100      	movs	r1, #0
 8001350:	0018      	movs	r0, r3
 8001352:	f003 fa73 	bl	800483c <HAL_UARTEx_SetRxFifoThreshold>
 8001356:	1e03      	subs	r3, r0, #0
 8001358:	d001      	beq.n	800135e <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 800135a:	f7ff fb53 	bl	8000a04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800135e:	4b05      	ldr	r3, [pc, #20]	@ (8001374 <MX_USART1_UART_Init+0xa0>)
 8001360:	0018      	movs	r0, r3
 8001362:	f003 f9f1 	bl	8004748 <HAL_UARTEx_DisableFifoMode>
 8001366:	1e03      	subs	r3, r0, #0
 8001368:	d001      	beq.n	800136e <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 800136a:	f7ff fb4b 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800136e:	46c0      	nop			@ (mov r8, r8)
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200001d8 	.word	0x200001d8
 8001378:	40013800 	.word	0x40013800

0800137c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b097      	sub	sp, #92	@ 0x5c
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	2344      	movs	r3, #68	@ 0x44
 8001386:	18fb      	adds	r3, r7, r3
 8001388:	0018      	movs	r0, r3
 800138a:	2314      	movs	r3, #20
 800138c:	001a      	movs	r2, r3
 800138e:	2100      	movs	r1, #0
 8001390:	f003 faf4 	bl	800497c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001394:	2410      	movs	r4, #16
 8001396:	193b      	adds	r3, r7, r4
 8001398:	0018      	movs	r0, r3
 800139a:	2334      	movs	r3, #52	@ 0x34
 800139c:	001a      	movs	r2, r3
 800139e:	2100      	movs	r1, #0
 80013a0:	f003 faec 	bl	800497c <memset>
  if(uartHandle->Instance==USART1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a23      	ldr	r2, [pc, #140]	@ (8001438 <HAL_UART_MspInit+0xbc>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d13f      	bne.n	800142e <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013ae:	193b      	adds	r3, r7, r4
 80013b0:	2201      	movs	r2, #1
 80013b2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80013b4:	193b      	adds	r3, r7, r4
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ba:	193b      	adds	r3, r7, r4
 80013bc:	0018      	movs	r0, r3
 80013be:	f001 f973 	bl	80026a8 <HAL_RCCEx_PeriphCLKConfig>
 80013c2:	1e03      	subs	r3, r0, #0
 80013c4:	d001      	beq.n	80013ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013c6:	f7ff fb1d 	bl	8000a04 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ca:	4b1c      	ldr	r3, [pc, #112]	@ (800143c <HAL_UART_MspInit+0xc0>)
 80013cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013ce:	4b1b      	ldr	r3, [pc, #108]	@ (800143c <HAL_UART_MspInit+0xc0>)
 80013d0:	2180      	movs	r1, #128	@ 0x80
 80013d2:	01c9      	lsls	r1, r1, #7
 80013d4:	430a      	orrs	r2, r1
 80013d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80013d8:	4b18      	ldr	r3, [pc, #96]	@ (800143c <HAL_UART_MspInit+0xc0>)
 80013da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013dc:	2380      	movs	r3, #128	@ 0x80
 80013de:	01db      	lsls	r3, r3, #7
 80013e0:	4013      	ands	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	4b15      	ldr	r3, [pc, #84]	@ (800143c <HAL_UART_MspInit+0xc0>)
 80013e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013ea:	4b14      	ldr	r3, [pc, #80]	@ (800143c <HAL_UART_MspInit+0xc0>)
 80013ec:	2101      	movs	r1, #1
 80013ee:	430a      	orrs	r2, r1
 80013f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80013f2:	4b12      	ldr	r3, [pc, #72]	@ (800143c <HAL_UART_MspInit+0xc0>)
 80013f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013f6:	2201      	movs	r2, #1
 80013f8:	4013      	ands	r3, r2
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MC_UART_TX_Pin|MC_UART_RX_Pin;
 80013fe:	2144      	movs	r1, #68	@ 0x44
 8001400:	187b      	adds	r3, r7, r1
 8001402:	22c0      	movs	r2, #192	@ 0xc0
 8001404:	00d2      	lsls	r2, r2, #3
 8001406:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	187b      	adds	r3, r7, r1
 800140a:	2202      	movs	r2, #2
 800140c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	187b      	adds	r3, r7, r1
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	187b      	adds	r3, r7, r1
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800141a:	187b      	adds	r3, r7, r1
 800141c:	2201      	movs	r2, #1
 800141e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	187a      	adds	r2, r7, r1
 8001422:	23a0      	movs	r3, #160	@ 0xa0
 8001424:	05db      	lsls	r3, r3, #23
 8001426:	0011      	movs	r1, r2
 8001428:	0018      	movs	r0, r3
 800142a:	f000 f96d 	bl	8001708 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800142e:	46c0      	nop			@ (mov r8, r8)
 8001430:	46bd      	mov	sp, r7
 8001432:	b017      	add	sp, #92	@ 0x5c
 8001434:	bd90      	pop	{r4, r7, pc}
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	40013800 	.word	0x40013800
 800143c:	40021000 	.word	0x40021000

08001440 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001440:	480d      	ldr	r0, [pc, #52]	@ (8001478 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001442:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001444:	f7ff fb97 	bl	8000b76 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001448:	480c      	ldr	r0, [pc, #48]	@ (800147c <LoopForever+0x6>)
  ldr r1, =_edata
 800144a:	490d      	ldr	r1, [pc, #52]	@ (8001480 <LoopForever+0xa>)
  ldr r2, =_sidata
 800144c:	4a0d      	ldr	r2, [pc, #52]	@ (8001484 <LoopForever+0xe>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001450:	e002      	b.n	8001458 <LoopCopyDataInit>

08001452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001456:	3304      	adds	r3, #4

08001458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800145c:	d3f9      	bcc.n	8001452 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145e:	4a0a      	ldr	r2, [pc, #40]	@ (8001488 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001460:	4c0a      	ldr	r4, [pc, #40]	@ (800148c <LoopForever+0x16>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001464:	e001      	b.n	800146a <LoopFillZerobss>

08001466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001468:	3204      	adds	r2, #4

0800146a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800146c:	d3fb      	bcc.n	8001466 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800146e:	f003 fa8d 	bl	800498c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001472:	f7ff fa63 	bl	800093c <main>

08001476 <LoopForever>:

LoopForever:
  b LoopForever
 8001476:	e7fe      	b.n	8001476 <LoopForever>
  ldr   r0, =_estack
 8001478:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800147c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001480:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001484:	08004ad8 	.word	0x08004ad8
  ldr r2, =_sbss
 8001488:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800148c:	20000270 	.word	0x20000270

08001490 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001490:	e7fe      	b.n	8001490 <ADC1_COMP_IRQHandler>
	...

08001494 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800149a:	1dfb      	adds	r3, r7, #7
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a0:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <HAL_Init+0x3c>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4b0a      	ldr	r3, [pc, #40]	@ (80014d0 <HAL_Init+0x3c>)
 80014a6:	2180      	movs	r1, #128	@ 0x80
 80014a8:	0049      	lsls	r1, r1, #1
 80014aa:	430a      	orrs	r2, r1
 80014ac:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ae:	2003      	movs	r0, #3
 80014b0:	f000 f810 	bl	80014d4 <HAL_InitTick>
 80014b4:	1e03      	subs	r3, r0, #0
 80014b6:	d003      	beq.n	80014c0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80014b8:	1dfb      	adds	r3, r7, #7
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
 80014be:	e001      	b.n	80014c4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80014c0:	f7ff fb1c 	bl	8000afc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014c4:	1dfb      	adds	r3, r7, #7
 80014c6:	781b      	ldrb	r3, [r3, #0]
}
 80014c8:	0018      	movs	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b002      	add	sp, #8
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40022000 	.word	0x40022000

080014d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014dc:	230f      	movs	r3, #15
 80014de:	18fb      	adds	r3, r7, r3
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80014e4:	4b1d      	ldr	r3, [pc, #116]	@ (800155c <HAL_InitTick+0x88>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d02b      	beq.n	8001544 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80014ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001560 <HAL_InitTick+0x8c>)
 80014ee:	681c      	ldr	r4, [r3, #0]
 80014f0:	4b1a      	ldr	r3, [pc, #104]	@ (800155c <HAL_InitTick+0x88>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	0019      	movs	r1, r3
 80014f6:	23fa      	movs	r3, #250	@ 0xfa
 80014f8:	0098      	lsls	r0, r3, #2
 80014fa:	f7fe fe03 	bl	8000104 <__udivsi3>
 80014fe:	0003      	movs	r3, r0
 8001500:	0019      	movs	r1, r3
 8001502:	0020      	movs	r0, r4
 8001504:	f7fe fdfe 	bl	8000104 <__udivsi3>
 8001508:	0003      	movs	r3, r0
 800150a:	0018      	movs	r0, r3
 800150c:	f000 f8ef 	bl	80016ee <HAL_SYSTICK_Config>
 8001510:	1e03      	subs	r3, r0, #0
 8001512:	d112      	bne.n	800153a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b03      	cmp	r3, #3
 8001518:	d80a      	bhi.n	8001530 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	2301      	movs	r3, #1
 800151e:	425b      	negs	r3, r3
 8001520:	2200      	movs	r2, #0
 8001522:	0018      	movs	r0, r3
 8001524:	f000 f8ce 	bl	80016c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001528:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <HAL_InitTick+0x90>)
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	e00d      	b.n	800154c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001530:	230f      	movs	r3, #15
 8001532:	18fb      	adds	r3, r7, r3
 8001534:	2201      	movs	r2, #1
 8001536:	701a      	strb	r2, [r3, #0]
 8001538:	e008      	b.n	800154c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800153a:	230f      	movs	r3, #15
 800153c:	18fb      	adds	r3, r7, r3
 800153e:	2201      	movs	r2, #1
 8001540:	701a      	strb	r2, [r3, #0]
 8001542:	e003      	b.n	800154c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001544:	230f      	movs	r3, #15
 8001546:	18fb      	adds	r3, r7, r3
 8001548:	2201      	movs	r2, #1
 800154a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800154c:	230f      	movs	r3, #15
 800154e:	18fb      	adds	r3, r7, r3
 8001550:	781b      	ldrb	r3, [r3, #0]
}
 8001552:	0018      	movs	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	b005      	add	sp, #20
 8001558:	bd90      	pop	{r4, r7, pc}
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	20000008 	.word	0x20000008
 8001560:	20000000 	.word	0x20000000
 8001564:	20000004 	.word	0x20000004

08001568 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800156c:	4b05      	ldr	r3, [pc, #20]	@ (8001584 <HAL_IncTick+0x1c>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	001a      	movs	r2, r3
 8001572:	4b05      	ldr	r3, [pc, #20]	@ (8001588 <HAL_IncTick+0x20>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	18d2      	adds	r2, r2, r3
 8001578:	4b03      	ldr	r3, [pc, #12]	@ (8001588 <HAL_IncTick+0x20>)
 800157a:	601a      	str	r2, [r3, #0]
}
 800157c:	46c0      	nop			@ (mov r8, r8)
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	46c0      	nop			@ (mov r8, r8)
 8001584:	20000008 	.word	0x20000008
 8001588:	2000026c 	.word	0x2000026c

0800158c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  return uwTick;
 8001590:	4b02      	ldr	r3, [pc, #8]	@ (800159c <HAL_GetTick+0x10>)
 8001592:	681b      	ldr	r3, [r3, #0]
}
 8001594:	0018      	movs	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	46c0      	nop			@ (mov r8, r8)
 800159c:	2000026c 	.word	0x2000026c

080015a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	0002      	movs	r2, r0
 80015a8:	6039      	str	r1, [r7, #0]
 80015aa:	1dfb      	adds	r3, r7, #7
 80015ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015ae:	1dfb      	adds	r3, r7, #7
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80015b4:	d828      	bhi.n	8001608 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001674 <__NVIC_SetPriority+0xd4>)
 80015b8:	1dfb      	adds	r3, r7, #7
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	b25b      	sxtb	r3, r3
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	33c0      	adds	r3, #192	@ 0xc0
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	589b      	ldr	r3, [r3, r2]
 80015c6:	1dfa      	adds	r2, r7, #7
 80015c8:	7812      	ldrb	r2, [r2, #0]
 80015ca:	0011      	movs	r1, r2
 80015cc:	2203      	movs	r2, #3
 80015ce:	400a      	ands	r2, r1
 80015d0:	00d2      	lsls	r2, r2, #3
 80015d2:	21ff      	movs	r1, #255	@ 0xff
 80015d4:	4091      	lsls	r1, r2
 80015d6:	000a      	movs	r2, r1
 80015d8:	43d2      	mvns	r2, r2
 80015da:	401a      	ands	r2, r3
 80015dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	019b      	lsls	r3, r3, #6
 80015e2:	22ff      	movs	r2, #255	@ 0xff
 80015e4:	401a      	ands	r2, r3
 80015e6:	1dfb      	adds	r3, r7, #7
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	0018      	movs	r0, r3
 80015ec:	2303      	movs	r3, #3
 80015ee:	4003      	ands	r3, r0
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015f4:	481f      	ldr	r0, [pc, #124]	@ (8001674 <__NVIC_SetPriority+0xd4>)
 80015f6:	1dfb      	adds	r3, r7, #7
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	b25b      	sxtb	r3, r3
 80015fc:	089b      	lsrs	r3, r3, #2
 80015fe:	430a      	orrs	r2, r1
 8001600:	33c0      	adds	r3, #192	@ 0xc0
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001606:	e031      	b.n	800166c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001608:	4a1b      	ldr	r2, [pc, #108]	@ (8001678 <__NVIC_SetPriority+0xd8>)
 800160a:	1dfb      	adds	r3, r7, #7
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	0019      	movs	r1, r3
 8001610:	230f      	movs	r3, #15
 8001612:	400b      	ands	r3, r1
 8001614:	3b08      	subs	r3, #8
 8001616:	089b      	lsrs	r3, r3, #2
 8001618:	3306      	adds	r3, #6
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	18d3      	adds	r3, r2, r3
 800161e:	3304      	adds	r3, #4
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	1dfa      	adds	r2, r7, #7
 8001624:	7812      	ldrb	r2, [r2, #0]
 8001626:	0011      	movs	r1, r2
 8001628:	2203      	movs	r2, #3
 800162a:	400a      	ands	r2, r1
 800162c:	00d2      	lsls	r2, r2, #3
 800162e:	21ff      	movs	r1, #255	@ 0xff
 8001630:	4091      	lsls	r1, r2
 8001632:	000a      	movs	r2, r1
 8001634:	43d2      	mvns	r2, r2
 8001636:	401a      	ands	r2, r3
 8001638:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	019b      	lsls	r3, r3, #6
 800163e:	22ff      	movs	r2, #255	@ 0xff
 8001640:	401a      	ands	r2, r3
 8001642:	1dfb      	adds	r3, r7, #7
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	0018      	movs	r0, r3
 8001648:	2303      	movs	r3, #3
 800164a:	4003      	ands	r3, r0
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001650:	4809      	ldr	r0, [pc, #36]	@ (8001678 <__NVIC_SetPriority+0xd8>)
 8001652:	1dfb      	adds	r3, r7, #7
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	001c      	movs	r4, r3
 8001658:	230f      	movs	r3, #15
 800165a:	4023      	ands	r3, r4
 800165c:	3b08      	subs	r3, #8
 800165e:	089b      	lsrs	r3, r3, #2
 8001660:	430a      	orrs	r2, r1
 8001662:	3306      	adds	r3, #6
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	18c3      	adds	r3, r0, r3
 8001668:	3304      	adds	r3, #4
 800166a:	601a      	str	r2, [r3, #0]
}
 800166c:	46c0      	nop			@ (mov r8, r8)
 800166e:	46bd      	mov	sp, r7
 8001670:	b003      	add	sp, #12
 8001672:	bd90      	pop	{r4, r7, pc}
 8001674:	e000e100 	.word	0xe000e100
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	1e5a      	subs	r2, r3, #1
 8001688:	2380      	movs	r3, #128	@ 0x80
 800168a:	045b      	lsls	r3, r3, #17
 800168c:	429a      	cmp	r2, r3
 800168e:	d301      	bcc.n	8001694 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001690:	2301      	movs	r3, #1
 8001692:	e010      	b.n	80016b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001694:	4b0a      	ldr	r3, [pc, #40]	@ (80016c0 <SysTick_Config+0x44>)
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	3a01      	subs	r2, #1
 800169a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169c:	2301      	movs	r3, #1
 800169e:	425b      	negs	r3, r3
 80016a0:	2103      	movs	r1, #3
 80016a2:	0018      	movs	r0, r3
 80016a4:	f7ff ff7c 	bl	80015a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a8:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <SysTick_Config+0x44>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ae:	4b04      	ldr	r3, [pc, #16]	@ (80016c0 <SysTick_Config+0x44>)
 80016b0:	2207      	movs	r2, #7
 80016b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	0018      	movs	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	b002      	add	sp, #8
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	46c0      	nop			@ (mov r8, r8)
 80016c0:	e000e010 	.word	0xe000e010

080016c4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	210f      	movs	r1, #15
 80016d0:	187b      	adds	r3, r7, r1
 80016d2:	1c02      	adds	r2, r0, #0
 80016d4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	187b      	adds	r3, r7, r1
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	b25b      	sxtb	r3, r3
 80016de:	0011      	movs	r1, r2
 80016e0:	0018      	movs	r0, r3
 80016e2:	f7ff ff5d 	bl	80015a0 <__NVIC_SetPriority>
}
 80016e6:	46c0      	nop			@ (mov r8, r8)
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b004      	add	sp, #16
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	0018      	movs	r0, r3
 80016fa:	f7ff ffbf 	bl	800167c <SysTick_Config>
 80016fe:	0003      	movs	r3, r0
}
 8001700:	0018      	movs	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	b002      	add	sp, #8
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001716:	e147      	b.n	80019a8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2101      	movs	r1, #1
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	4091      	lsls	r1, r2
 8001722:	000a      	movs	r2, r1
 8001724:	4013      	ands	r3, r2
 8001726:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d100      	bne.n	8001730 <HAL_GPIO_Init+0x28>
 800172e:	e138      	b.n	80019a2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2203      	movs	r2, #3
 8001736:	4013      	ands	r3, r2
 8001738:	2b01      	cmp	r3, #1
 800173a:	d005      	beq.n	8001748 <HAL_GPIO_Init+0x40>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2203      	movs	r2, #3
 8001742:	4013      	ands	r3, r2
 8001744:	2b02      	cmp	r3, #2
 8001746:	d130      	bne.n	80017aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	2203      	movs	r2, #3
 8001754:	409a      	lsls	r2, r3
 8001756:	0013      	movs	r3, r2
 8001758:	43da      	mvns	r2, r3
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4013      	ands	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	68da      	ldr	r2, [r3, #12]
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	409a      	lsls	r2, r3
 800176a:	0013      	movs	r3, r2
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800177e:	2201      	movs	r2, #1
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	409a      	lsls	r2, r3
 8001784:	0013      	movs	r3, r2
 8001786:	43da      	mvns	r2, r3
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4013      	ands	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	091b      	lsrs	r3, r3, #4
 8001794:	2201      	movs	r2, #1
 8001796:	401a      	ands	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	409a      	lsls	r2, r3
 800179c:	0013      	movs	r3, r2
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2203      	movs	r2, #3
 80017b0:	4013      	ands	r3, r2
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	d017      	beq.n	80017e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	2203      	movs	r2, #3
 80017c2:	409a      	lsls	r2, r3
 80017c4:	0013      	movs	r3, r2
 80017c6:	43da      	mvns	r2, r3
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	4013      	ands	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	409a      	lsls	r2, r3
 80017d8:	0013      	movs	r3, r2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2203      	movs	r2, #3
 80017ec:	4013      	ands	r3, r2
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d123      	bne.n	800183a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	08da      	lsrs	r2, r3, #3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	3208      	adds	r2, #8
 80017fa:	0092      	lsls	r2, r2, #2
 80017fc:	58d3      	ldr	r3, [r2, r3]
 80017fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	2207      	movs	r2, #7
 8001804:	4013      	ands	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	220f      	movs	r2, #15
 800180a:	409a      	lsls	r2, r3
 800180c:	0013      	movs	r3, r2
 800180e:	43da      	mvns	r2, r3
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	691a      	ldr	r2, [r3, #16]
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	2107      	movs	r1, #7
 800181e:	400b      	ands	r3, r1
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	409a      	lsls	r2, r3
 8001824:	0013      	movs	r3, r2
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	08da      	lsrs	r2, r3, #3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3208      	adds	r2, #8
 8001834:	0092      	lsls	r2, r2, #2
 8001836:	6939      	ldr	r1, [r7, #16]
 8001838:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	2203      	movs	r2, #3
 8001846:	409a      	lsls	r2, r3
 8001848:	0013      	movs	r3, r2
 800184a:	43da      	mvns	r2, r3
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4013      	ands	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2203      	movs	r2, #3
 8001858:	401a      	ands	r2, r3
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	409a      	lsls	r2, r3
 8001860:	0013      	movs	r3, r2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	23c0      	movs	r3, #192	@ 0xc0
 8001874:	029b      	lsls	r3, r3, #10
 8001876:	4013      	ands	r3, r2
 8001878:	d100      	bne.n	800187c <HAL_GPIO_Init+0x174>
 800187a:	e092      	b.n	80019a2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800187c:	4a50      	ldr	r2, [pc, #320]	@ (80019c0 <HAL_GPIO_Init+0x2b8>)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	089b      	lsrs	r3, r3, #2
 8001882:	3318      	adds	r3, #24
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	589b      	ldr	r3, [r3, r2]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2203      	movs	r2, #3
 800188e:	4013      	ands	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	220f      	movs	r2, #15
 8001894:	409a      	lsls	r2, r3
 8001896:	0013      	movs	r3, r2
 8001898:	43da      	mvns	r2, r3
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	23a0      	movs	r3, #160	@ 0xa0
 80018a4:	05db      	lsls	r3, r3, #23
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d013      	beq.n	80018d2 <HAL_GPIO_Init+0x1ca>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a45      	ldr	r2, [pc, #276]	@ (80019c4 <HAL_GPIO_Init+0x2bc>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d00d      	beq.n	80018ce <HAL_GPIO_Init+0x1c6>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a44      	ldr	r2, [pc, #272]	@ (80019c8 <HAL_GPIO_Init+0x2c0>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d007      	beq.n	80018ca <HAL_GPIO_Init+0x1c2>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a43      	ldr	r2, [pc, #268]	@ (80019cc <HAL_GPIO_Init+0x2c4>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d101      	bne.n	80018c6 <HAL_GPIO_Init+0x1be>
 80018c2:	2303      	movs	r3, #3
 80018c4:	e006      	b.n	80018d4 <HAL_GPIO_Init+0x1cc>
 80018c6:	2305      	movs	r3, #5
 80018c8:	e004      	b.n	80018d4 <HAL_GPIO_Init+0x1cc>
 80018ca:	2302      	movs	r3, #2
 80018cc:	e002      	b.n	80018d4 <HAL_GPIO_Init+0x1cc>
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <HAL_GPIO_Init+0x1cc>
 80018d2:	2300      	movs	r3, #0
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	2103      	movs	r1, #3
 80018d8:	400a      	ands	r2, r1
 80018da:	00d2      	lsls	r2, r2, #3
 80018dc:	4093      	lsls	r3, r2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80018e4:	4936      	ldr	r1, [pc, #216]	@ (80019c0 <HAL_GPIO_Init+0x2b8>)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	089b      	lsrs	r3, r3, #2
 80018ea:	3318      	adds	r3, #24
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018f2:	4b33      	ldr	r3, [pc, #204]	@ (80019c0 <HAL_GPIO_Init+0x2b8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	43da      	mvns	r2, r3
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	4013      	ands	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	2380      	movs	r3, #128	@ 0x80
 8001908:	035b      	lsls	r3, r3, #13
 800190a:	4013      	ands	r3, r2
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4313      	orrs	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001916:	4b2a      	ldr	r3, [pc, #168]	@ (80019c0 <HAL_GPIO_Init+0x2b8>)
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800191c:	4b28      	ldr	r3, [pc, #160]	@ (80019c0 <HAL_GPIO_Init+0x2b8>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	43da      	mvns	r2, r3
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	4013      	ands	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	2380      	movs	r3, #128	@ 0x80
 8001932:	039b      	lsls	r3, r3, #14
 8001934:	4013      	ands	r3, r2
 8001936:	d003      	beq.n	8001940 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001940:	4b1f      	ldr	r3, [pc, #124]	@ (80019c0 <HAL_GPIO_Init+0x2b8>)
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001946:	4a1e      	ldr	r2, [pc, #120]	@ (80019c0 <HAL_GPIO_Init+0x2b8>)
 8001948:	2384      	movs	r3, #132	@ 0x84
 800194a:	58d3      	ldr	r3, [r2, r3]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	43da      	mvns	r2, r3
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	2380      	movs	r3, #128	@ 0x80
 800195e:	029b      	lsls	r3, r3, #10
 8001960:	4013      	ands	r3, r2
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800196c:	4914      	ldr	r1, [pc, #80]	@ (80019c0 <HAL_GPIO_Init+0x2b8>)
 800196e:	2284      	movs	r2, #132	@ 0x84
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001974:	4a12      	ldr	r2, [pc, #72]	@ (80019c0 <HAL_GPIO_Init+0x2b8>)
 8001976:	2380      	movs	r3, #128	@ 0x80
 8001978:	58d3      	ldr	r3, [r2, r3]
 800197a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	43da      	mvns	r2, r3
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	4013      	ands	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	2380      	movs	r3, #128	@ 0x80
 800198c:	025b      	lsls	r3, r3, #9
 800198e:	4013      	ands	r3, r2
 8001990:	d003      	beq.n	800199a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4313      	orrs	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800199a:	4909      	ldr	r1, [pc, #36]	@ (80019c0 <HAL_GPIO_Init+0x2b8>)
 800199c:	2280      	movs	r2, #128	@ 0x80
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	3301      	adds	r3, #1
 80019a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	40da      	lsrs	r2, r3
 80019b0:	1e13      	subs	r3, r2, #0
 80019b2:	d000      	beq.n	80019b6 <HAL_GPIO_Init+0x2ae>
 80019b4:	e6b0      	b.n	8001718 <HAL_GPIO_Init+0x10>
  }
}
 80019b6:	46c0      	nop			@ (mov r8, r8)
 80019b8:	46c0      	nop			@ (mov r8, r8)
 80019ba:	46bd      	mov	sp, r7
 80019bc:	b006      	add	sp, #24
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40021800 	.word	0x40021800
 80019c4:	50000400 	.word	0x50000400
 80019c8:	50000800 	.word	0x50000800
 80019cc:	50000c00 	.word	0x50000c00

080019d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	0008      	movs	r0, r1
 80019da:	0011      	movs	r1, r2
 80019dc:	1cbb      	adds	r3, r7, #2
 80019de:	1c02      	adds	r2, r0, #0
 80019e0:	801a      	strh	r2, [r3, #0]
 80019e2:	1c7b      	adds	r3, r7, #1
 80019e4:	1c0a      	adds	r2, r1, #0
 80019e6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019e8:	1c7b      	adds	r3, r7, #1
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d004      	beq.n	80019fa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019f0:	1cbb      	adds	r3, r7, #2
 80019f2:	881a      	ldrh	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019f8:	e003      	b.n	8001a02 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019fa:	1cbb      	adds	r3, r7, #2
 80019fc:	881a      	ldrh	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a02:	46c0      	nop			@ (mov r8, r8)
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b002      	add	sp, #8
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e08f      	b.n	8001b3e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2241      	movs	r2, #65	@ 0x41
 8001a22:	5c9b      	ldrb	r3, [r3, r2]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d107      	bne.n	8001a3a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2240      	movs	r2, #64	@ 0x40
 8001a2e:	2100      	movs	r1, #0
 8001a30:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	0018      	movs	r0, r3
 8001a36:	f7fe ff35 	bl	80008a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2241      	movs	r2, #65	@ 0x41
 8001a3e:	2124      	movs	r1, #36	@ 0x24
 8001a40:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	438a      	bics	r2, r1
 8001a50:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	493b      	ldr	r1, [pc, #236]	@ (8001b48 <HAL_I2C_Init+0x13c>)
 8001a5c:	400a      	ands	r2, r1
 8001a5e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4938      	ldr	r1, [pc, #224]	@ (8001b4c <HAL_I2C_Init+0x140>)
 8001a6c:	400a      	ands	r2, r1
 8001a6e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d108      	bne.n	8001a8a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2180      	movs	r1, #128	@ 0x80
 8001a82:	0209      	lsls	r1, r1, #8
 8001a84:	430a      	orrs	r2, r1
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	e007      	b.n	8001a9a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2184      	movs	r1, #132	@ 0x84
 8001a94:	0209      	lsls	r1, r1, #8
 8001a96:	430a      	orrs	r2, r1
 8001a98:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d109      	bne.n	8001ab6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2180      	movs	r1, #128	@ 0x80
 8001aae:	0109      	lsls	r1, r1, #4
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	e007      	b.n	8001ac6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4923      	ldr	r1, [pc, #140]	@ (8001b50 <HAL_I2C_Init+0x144>)
 8001ac2:	400a      	ands	r2, r1
 8001ac4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4920      	ldr	r1, [pc, #128]	@ (8001b54 <HAL_I2C_Init+0x148>)
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	491a      	ldr	r1, [pc, #104]	@ (8001b4c <HAL_I2C_Init+0x140>)
 8001ae2:	400a      	ands	r2, r1
 8001ae4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691a      	ldr	r2, [r3, #16]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	431a      	orrs	r2, r3
 8001af0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69d9      	ldr	r1, [r3, #28]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a1a      	ldr	r2, [r3, #32]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2241      	movs	r2, #65	@ 0x41
 8001b2a:	2120      	movs	r1, #32
 8001b2c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2242      	movs	r2, #66	@ 0x42
 8001b38:	2100      	movs	r1, #0
 8001b3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	0018      	movs	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b002      	add	sp, #8
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	46c0      	nop			@ (mov r8, r8)
 8001b48:	f0ffffff 	.word	0xf0ffffff
 8001b4c:	ffff7fff 	.word	0xffff7fff
 8001b50:	fffff7ff 	.word	0xfffff7ff
 8001b54:	02008000 	.word	0x02008000

08001b58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2241      	movs	r2, #65	@ 0x41
 8001b66:	5c9b      	ldrb	r3, [r3, r2]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b20      	cmp	r3, #32
 8001b6c:	d138      	bne.n	8001be0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2240      	movs	r2, #64	@ 0x40
 8001b72:	5c9b      	ldrb	r3, [r3, r2]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d101      	bne.n	8001b7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e032      	b.n	8001be2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2240      	movs	r2, #64	@ 0x40
 8001b80:	2101      	movs	r1, #1
 8001b82:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2241      	movs	r2, #65	@ 0x41
 8001b88:	2124      	movs	r1, #36	@ 0x24
 8001b8a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2101      	movs	r1, #1
 8001b98:	438a      	bics	r2, r1
 8001b9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4911      	ldr	r1, [pc, #68]	@ (8001bec <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001ba8:	400a      	ands	r2, r1
 8001baa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6819      	ldr	r1, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2241      	movs	r2, #65	@ 0x41
 8001bd0:	2120      	movs	r1, #32
 8001bd2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2240      	movs	r2, #64	@ 0x40
 8001bd8:	2100      	movs	r1, #0
 8001bda:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	e000      	b.n	8001be2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001be0:	2302      	movs	r3, #2
  }
}
 8001be2:	0018      	movs	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	b002      	add	sp, #8
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	46c0      	nop			@ (mov r8, r8)
 8001bec:	ffffefff 	.word	0xffffefff

08001bf0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2241      	movs	r2, #65	@ 0x41
 8001bfe:	5c9b      	ldrb	r3, [r3, r2]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b20      	cmp	r3, #32
 8001c04:	d139      	bne.n	8001c7a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2240      	movs	r2, #64	@ 0x40
 8001c0a:	5c9b      	ldrb	r3, [r3, r2]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c10:	2302      	movs	r3, #2
 8001c12:	e033      	b.n	8001c7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2240      	movs	r2, #64	@ 0x40
 8001c18:	2101      	movs	r1, #1
 8001c1a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2241      	movs	r2, #65	@ 0x41
 8001c20:	2124      	movs	r1, #36	@ 0x24
 8001c22:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2101      	movs	r1, #1
 8001c30:	438a      	bics	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4a11      	ldr	r2, [pc, #68]	@ (8001c84 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	021b      	lsls	r3, r3, #8
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2101      	movs	r1, #1
 8001c62:	430a      	orrs	r2, r1
 8001c64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2241      	movs	r2, #65	@ 0x41
 8001c6a:	2120      	movs	r1, #32
 8001c6c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2240      	movs	r2, #64	@ 0x40
 8001c72:	2100      	movs	r1, #0
 8001c74:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	e000      	b.n	8001c7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c7a:	2302      	movs	r3, #2
  }
}
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	b004      	add	sp, #16
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	fffff0ff 	.word	0xfffff0ff

08001c88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001c90:	4b19      	ldr	r3, [pc, #100]	@ (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a19      	ldr	r2, [pc, #100]	@ (8001cfc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	0019      	movs	r1, r3
 8001c9a:	4b17      	ldr	r3, [pc, #92]	@ (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	2380      	movs	r3, #128	@ 0x80
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d11f      	bne.n	8001cec <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001cac:	4b14      	ldr	r3, [pc, #80]	@ (8001d00 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	0013      	movs	r3, r2
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	189b      	adds	r3, r3, r2
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4912      	ldr	r1, [pc, #72]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f7fe fa22 	bl	8000104 <__udivsi3>
 8001cc0:	0003      	movs	r3, r0
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cc6:	e008      	b.n	8001cda <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	e001      	b.n	8001cda <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e009      	b.n	8001cee <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cda:	4b07      	ldr	r3, [pc, #28]	@ (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001cdc:	695a      	ldr	r2, [r3, #20]
 8001cde:	2380      	movs	r3, #128	@ 0x80
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	2380      	movs	r3, #128	@ 0x80
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d0ed      	beq.n	8001cc8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	0018      	movs	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	b004      	add	sp, #16
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	46c0      	nop			@ (mov r8, r8)
 8001cf8:	40007000 	.word	0x40007000
 8001cfc:	fffff9ff 	.word	0xfffff9ff
 8001d00:	20000000 	.word	0x20000000
 8001d04:	000f4240 	.word	0x000f4240

08001d08 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001d0c:	4b03      	ldr	r3, [pc, #12]	@ (8001d1c <LL_RCC_GetAPB1Prescaler+0x14>)
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	23e0      	movs	r3, #224	@ 0xe0
 8001d12:	01db      	lsls	r3, r3, #7
 8001d14:	4013      	ands	r3, r2
}
 8001d16:	0018      	movs	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40021000 	.word	0x40021000

08001d20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e2fe      	b.n	8002330 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2201      	movs	r2, #1
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d100      	bne.n	8001d3e <HAL_RCC_OscConfig+0x1e>
 8001d3c:	e07c      	b.n	8001e38 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d3e:	4bc3      	ldr	r3, [pc, #780]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	2238      	movs	r2, #56	@ 0x38
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d48:	4bc0      	ldr	r3, [pc, #768]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	4013      	ands	r3, r2
 8001d50:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	2b10      	cmp	r3, #16
 8001d56:	d102      	bne.n	8001d5e <HAL_RCC_OscConfig+0x3e>
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	d002      	beq.n	8001d64 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d10b      	bne.n	8001d7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d64:	4bb9      	ldr	r3, [pc, #740]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	2380      	movs	r3, #128	@ 0x80
 8001d6a:	029b      	lsls	r3, r3, #10
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d062      	beq.n	8001e36 <HAL_RCC_OscConfig+0x116>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d15e      	bne.n	8001e36 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e2d9      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	2380      	movs	r3, #128	@ 0x80
 8001d82:	025b      	lsls	r3, r3, #9
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d107      	bne.n	8001d98 <HAL_RCC_OscConfig+0x78>
 8001d88:	4bb0      	ldr	r3, [pc, #704]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4baf      	ldr	r3, [pc, #700]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001d8e:	2180      	movs	r1, #128	@ 0x80
 8001d90:	0249      	lsls	r1, r1, #9
 8001d92:	430a      	orrs	r2, r1
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	e020      	b.n	8001dda <HAL_RCC_OscConfig+0xba>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	23a0      	movs	r3, #160	@ 0xa0
 8001d9e:	02db      	lsls	r3, r3, #11
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d10e      	bne.n	8001dc2 <HAL_RCC_OscConfig+0xa2>
 8001da4:	4ba9      	ldr	r3, [pc, #676]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4ba8      	ldr	r3, [pc, #672]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001daa:	2180      	movs	r1, #128	@ 0x80
 8001dac:	02c9      	lsls	r1, r1, #11
 8001dae:	430a      	orrs	r2, r1
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	4ba6      	ldr	r3, [pc, #664]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	4ba5      	ldr	r3, [pc, #660]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001db8:	2180      	movs	r1, #128	@ 0x80
 8001dba:	0249      	lsls	r1, r1, #9
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	e00b      	b.n	8001dda <HAL_RCC_OscConfig+0xba>
 8001dc2:	4ba2      	ldr	r3, [pc, #648]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	4ba1      	ldr	r3, [pc, #644]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001dc8:	49a1      	ldr	r1, [pc, #644]	@ (8002050 <HAL_RCC_OscConfig+0x330>)
 8001dca:	400a      	ands	r2, r1
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	4b9f      	ldr	r3, [pc, #636]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	4b9e      	ldr	r3, [pc, #632]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001dd4:	499f      	ldr	r1, [pc, #636]	@ (8002054 <HAL_RCC_OscConfig+0x334>)
 8001dd6:	400a      	ands	r2, r1
 8001dd8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d014      	beq.n	8001e0c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de2:	f7ff fbd3 	bl	800158c <HAL_GetTick>
 8001de6:	0003      	movs	r3, r0
 8001de8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dec:	f7ff fbce 	bl	800158c <HAL_GetTick>
 8001df0:	0002      	movs	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	@ 0x64
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e298      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dfe:	4b93      	ldr	r3, [pc, #588]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	2380      	movs	r3, #128	@ 0x80
 8001e04:	029b      	lsls	r3, r3, #10
 8001e06:	4013      	ands	r3, r2
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0xcc>
 8001e0a:	e015      	b.n	8001e38 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7ff fbbe 	bl	800158c <HAL_GetTick>
 8001e10:	0003      	movs	r3, r0
 8001e12:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e16:	f7ff fbb9 	bl	800158c <HAL_GetTick>
 8001e1a:	0002      	movs	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b64      	cmp	r3, #100	@ 0x64
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e283      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e28:	4b88      	ldr	r3, [pc, #544]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	2380      	movs	r3, #128	@ 0x80
 8001e2e:	029b      	lsls	r3, r3, #10
 8001e30:	4013      	ands	r3, r2
 8001e32:	d1f0      	bne.n	8001e16 <HAL_RCC_OscConfig+0xf6>
 8001e34:	e000      	b.n	8001e38 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e36:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d100      	bne.n	8001e44 <HAL_RCC_OscConfig+0x124>
 8001e42:	e099      	b.n	8001f78 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e44:	4b81      	ldr	r3, [pc, #516]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	2238      	movs	r2, #56	@ 0x38
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e4e:	4b7f      	ldr	r3, [pc, #508]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2203      	movs	r2, #3
 8001e54:	4013      	ands	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2b10      	cmp	r3, #16
 8001e5c:	d102      	bne.n	8001e64 <HAL_RCC_OscConfig+0x144>
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d002      	beq.n	8001e6a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d135      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e6a:	4b78      	ldr	r3, [pc, #480]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	2380      	movs	r3, #128	@ 0x80
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	4013      	ands	r3, r2
 8001e74:	d005      	beq.n	8001e82 <HAL_RCC_OscConfig+0x162>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e256      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e82:	4b72      	ldr	r3, [pc, #456]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	4a74      	ldr	r2, [pc, #464]	@ (8002058 <HAL_RCC_OscConfig+0x338>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	0019      	movs	r1, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	021a      	lsls	r2, r3, #8
 8001e92:	4b6e      	ldr	r3, [pc, #440]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001e94:	430a      	orrs	r2, r1
 8001e96:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d112      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e9e:	4b6b      	ldr	r3, [pc, #428]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a6e      	ldr	r2, [pc, #440]	@ (800205c <HAL_RCC_OscConfig+0x33c>)
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	0019      	movs	r1, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	4b67      	ldr	r3, [pc, #412]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001eb2:	4b66      	ldr	r3, [pc, #408]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	0adb      	lsrs	r3, r3, #11
 8001eb8:	2207      	movs	r2, #7
 8001eba:	4013      	ands	r3, r2
 8001ebc:	4a68      	ldr	r2, [pc, #416]	@ (8002060 <HAL_RCC_OscConfig+0x340>)
 8001ebe:	40da      	lsrs	r2, r3
 8001ec0:	4b68      	ldr	r3, [pc, #416]	@ (8002064 <HAL_RCC_OscConfig+0x344>)
 8001ec2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ec4:	4b68      	ldr	r3, [pc, #416]	@ (8002068 <HAL_RCC_OscConfig+0x348>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f7ff fb03 	bl	80014d4 <HAL_InitTick>
 8001ece:	1e03      	subs	r3, r0, #0
 8001ed0:	d051      	beq.n	8001f76 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e22c      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d030      	beq.n	8001f40 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ede:	4b5b      	ldr	r3, [pc, #364]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a5e      	ldr	r2, [pc, #376]	@ (800205c <HAL_RCC_OscConfig+0x33c>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	0019      	movs	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	4b57      	ldr	r3, [pc, #348]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001ef2:	4b56      	ldr	r3, [pc, #344]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	4b55      	ldr	r3, [pc, #340]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001ef8:	2180      	movs	r1, #128	@ 0x80
 8001efa:	0049      	lsls	r1, r1, #1
 8001efc:	430a      	orrs	r2, r1
 8001efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f00:	f7ff fb44 	bl	800158c <HAL_GetTick>
 8001f04:	0003      	movs	r3, r0
 8001f06:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f0a:	f7ff fb3f 	bl	800158c <HAL_GetTick>
 8001f0e:	0002      	movs	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e209      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	2380      	movs	r3, #128	@ 0x80
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4013      	ands	r3, r2
 8001f26:	d0f0      	beq.n	8001f0a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f28:	4b48      	ldr	r3, [pc, #288]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	4a4a      	ldr	r2, [pc, #296]	@ (8002058 <HAL_RCC_OscConfig+0x338>)
 8001f2e:	4013      	ands	r3, r2
 8001f30:	0019      	movs	r1, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	021a      	lsls	r2, r3, #8
 8001f38:	4b44      	ldr	r3, [pc, #272]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	e01b      	b.n	8001f78 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001f40:	4b42      	ldr	r3, [pc, #264]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b41      	ldr	r3, [pc, #260]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001f46:	4949      	ldr	r1, [pc, #292]	@ (800206c <HAL_RCC_OscConfig+0x34c>)
 8001f48:	400a      	ands	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7ff fb1e 	bl	800158c <HAL_GetTick>
 8001f50:	0003      	movs	r3, r0
 8001f52:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f56:	f7ff fb19 	bl	800158c <HAL_GetTick>
 8001f5a:	0002      	movs	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e1e3      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f68:	4b38      	ldr	r3, [pc, #224]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	2380      	movs	r3, #128	@ 0x80
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4013      	ands	r3, r2
 8001f72:	d1f0      	bne.n	8001f56 <HAL_RCC_OscConfig+0x236>
 8001f74:	e000      	b.n	8001f78 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f76:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2208      	movs	r2, #8
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d047      	beq.n	8002012 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f82:	4b32      	ldr	r3, [pc, #200]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2238      	movs	r2, #56	@ 0x38
 8001f88:	4013      	ands	r3, r2
 8001f8a:	2b18      	cmp	r3, #24
 8001f8c:	d10a      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001f8e:	4b2f      	ldr	r3, [pc, #188]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f92:	2202      	movs	r2, #2
 8001f94:	4013      	ands	r3, r2
 8001f96:	d03c      	beq.n	8002012 <HAL_RCC_OscConfig+0x2f2>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d138      	bne.n	8002012 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e1c5      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d019      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001fac:	4b27      	ldr	r3, [pc, #156]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001fae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001fb0:	4b26      	ldr	r3, [pc, #152]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fae8 	bl	800158c <HAL_GetTick>
 8001fbc:	0003      	movs	r3, r0
 8001fbe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc2:	f7ff fae3 	bl	800158c <HAL_GetTick>
 8001fc6:	0002      	movs	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e1ad      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001fd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fd8:	2202      	movs	r2, #2
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d0f1      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x2a2>
 8001fde:	e018      	b.n	8002012 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001fe2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001fe4:	4b19      	ldr	r3, [pc, #100]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	438a      	bics	r2, r1
 8001fea:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fec:	f7ff face 	bl	800158c <HAL_GetTick>
 8001ff0:	0003      	movs	r3, r0
 8001ff2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff6:	f7ff fac9 	bl	800158c <HAL_GetTick>
 8001ffa:	0002      	movs	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e193      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002008:	4b10      	ldr	r3, [pc, #64]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 800200a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800200c:	2202      	movs	r2, #2
 800200e:	4013      	ands	r3, r2
 8002010:	d1f1      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2204      	movs	r2, #4
 8002018:	4013      	ands	r3, r2
 800201a:	d100      	bne.n	800201e <HAL_RCC_OscConfig+0x2fe>
 800201c:	e0c6      	b.n	80021ac <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800201e:	231f      	movs	r3, #31
 8002020:	18fb      	adds	r3, r7, r3
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002026:	4b09      	ldr	r3, [pc, #36]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2238      	movs	r2, #56	@ 0x38
 800202c:	4013      	ands	r3, r2
 800202e:	2b20      	cmp	r3, #32
 8002030:	d11e      	bne.n	8002070 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002032:	4b06      	ldr	r3, [pc, #24]	@ (800204c <HAL_RCC_OscConfig+0x32c>)
 8002034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002036:	2202      	movs	r2, #2
 8002038:	4013      	ands	r3, r2
 800203a:	d100      	bne.n	800203e <HAL_RCC_OscConfig+0x31e>
 800203c:	e0b6      	b.n	80021ac <HAL_RCC_OscConfig+0x48c>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d000      	beq.n	8002048 <HAL_RCC_OscConfig+0x328>
 8002046:	e0b1      	b.n	80021ac <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e171      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
 800204c:	40021000 	.word	0x40021000
 8002050:	fffeffff 	.word	0xfffeffff
 8002054:	fffbffff 	.word	0xfffbffff
 8002058:	ffff80ff 	.word	0xffff80ff
 800205c:	ffffc7ff 	.word	0xffffc7ff
 8002060:	00f42400 	.word	0x00f42400
 8002064:	20000000 	.word	0x20000000
 8002068:	20000004 	.word	0x20000004
 800206c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002070:	4bb1      	ldr	r3, [pc, #708]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 8002072:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002074:	2380      	movs	r3, #128	@ 0x80
 8002076:	055b      	lsls	r3, r3, #21
 8002078:	4013      	ands	r3, r2
 800207a:	d101      	bne.n	8002080 <HAL_RCC_OscConfig+0x360>
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <HAL_RCC_OscConfig+0x362>
 8002080:	2300      	movs	r3, #0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d011      	beq.n	80020aa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002086:	4bac      	ldr	r3, [pc, #688]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 8002088:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800208a:	4bab      	ldr	r3, [pc, #684]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 800208c:	2180      	movs	r1, #128	@ 0x80
 800208e:	0549      	lsls	r1, r1, #21
 8002090:	430a      	orrs	r2, r1
 8002092:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002094:	4ba8      	ldr	r3, [pc, #672]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 8002096:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002098:	2380      	movs	r3, #128	@ 0x80
 800209a:	055b      	lsls	r3, r3, #21
 800209c:	4013      	ands	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80020a2:	231f      	movs	r3, #31
 80020a4:	18fb      	adds	r3, r7, r3
 80020a6:	2201      	movs	r2, #1
 80020a8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020aa:	4ba4      	ldr	r3, [pc, #656]	@ (800233c <HAL_RCC_OscConfig+0x61c>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	2380      	movs	r3, #128	@ 0x80
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	4013      	ands	r3, r2
 80020b4:	d11a      	bne.n	80020ec <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020b6:	4ba1      	ldr	r3, [pc, #644]	@ (800233c <HAL_RCC_OscConfig+0x61c>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	4ba0      	ldr	r3, [pc, #640]	@ (800233c <HAL_RCC_OscConfig+0x61c>)
 80020bc:	2180      	movs	r1, #128	@ 0x80
 80020be:	0049      	lsls	r1, r1, #1
 80020c0:	430a      	orrs	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80020c4:	f7ff fa62 	bl	800158c <HAL_GetTick>
 80020c8:	0003      	movs	r3, r0
 80020ca:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ce:	f7ff fa5d 	bl	800158c <HAL_GetTick>
 80020d2:	0002      	movs	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e127      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e0:	4b96      	ldr	r3, [pc, #600]	@ (800233c <HAL_RCC_OscConfig+0x61c>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	2380      	movs	r3, #128	@ 0x80
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	4013      	ands	r3, r2
 80020ea:	d0f0      	beq.n	80020ce <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d106      	bne.n	8002102 <HAL_RCC_OscConfig+0x3e2>
 80020f4:	4b90      	ldr	r3, [pc, #576]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 80020f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020f8:	4b8f      	ldr	r3, [pc, #572]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 80020fa:	2101      	movs	r1, #1
 80020fc:	430a      	orrs	r2, r1
 80020fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002100:	e01c      	b.n	800213c <HAL_RCC_OscConfig+0x41c>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2b05      	cmp	r3, #5
 8002108:	d10c      	bne.n	8002124 <HAL_RCC_OscConfig+0x404>
 800210a:	4b8b      	ldr	r3, [pc, #556]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 800210c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800210e:	4b8a      	ldr	r3, [pc, #552]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 8002110:	2104      	movs	r1, #4
 8002112:	430a      	orrs	r2, r1
 8002114:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002116:	4b88      	ldr	r3, [pc, #544]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 8002118:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800211a:	4b87      	ldr	r3, [pc, #540]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 800211c:	2101      	movs	r1, #1
 800211e:	430a      	orrs	r2, r1
 8002120:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002122:	e00b      	b.n	800213c <HAL_RCC_OscConfig+0x41c>
 8002124:	4b84      	ldr	r3, [pc, #528]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 8002126:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002128:	4b83      	ldr	r3, [pc, #524]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 800212a:	2101      	movs	r1, #1
 800212c:	438a      	bics	r2, r1
 800212e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002130:	4b81      	ldr	r3, [pc, #516]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 8002132:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002134:	4b80      	ldr	r3, [pc, #512]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 8002136:	2104      	movs	r1, #4
 8002138:	438a      	bics	r2, r1
 800213a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d014      	beq.n	800216e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002144:	f7ff fa22 	bl	800158c <HAL_GetTick>
 8002148:	0003      	movs	r3, r0
 800214a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800214c:	e009      	b.n	8002162 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214e:	f7ff fa1d 	bl	800158c <HAL_GetTick>
 8002152:	0002      	movs	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	4a79      	ldr	r2, [pc, #484]	@ (8002340 <HAL_RCC_OscConfig+0x620>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e0e6      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002162:	4b75      	ldr	r3, [pc, #468]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 8002164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002166:	2202      	movs	r2, #2
 8002168:	4013      	ands	r3, r2
 800216a:	d0f0      	beq.n	800214e <HAL_RCC_OscConfig+0x42e>
 800216c:	e013      	b.n	8002196 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216e:	f7ff fa0d 	bl	800158c <HAL_GetTick>
 8002172:	0003      	movs	r3, r0
 8002174:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002176:	e009      	b.n	800218c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002178:	f7ff fa08 	bl	800158c <HAL_GetTick>
 800217c:	0002      	movs	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	4a6f      	ldr	r2, [pc, #444]	@ (8002340 <HAL_RCC_OscConfig+0x620>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e0d1      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800218c:	4b6a      	ldr	r3, [pc, #424]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 800218e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002190:	2202      	movs	r2, #2
 8002192:	4013      	ands	r3, r2
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002196:	231f      	movs	r3, #31
 8002198:	18fb      	adds	r3, r7, r3
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d105      	bne.n	80021ac <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80021a0:	4b65      	ldr	r3, [pc, #404]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 80021a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021a4:	4b64      	ldr	r3, [pc, #400]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 80021a6:	4967      	ldr	r1, [pc, #412]	@ (8002344 <HAL_RCC_OscConfig+0x624>)
 80021a8:	400a      	ands	r2, r1
 80021aa:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d100      	bne.n	80021b6 <HAL_RCC_OscConfig+0x496>
 80021b4:	e0bb      	b.n	800232e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021b6:	4b60      	ldr	r3, [pc, #384]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2238      	movs	r2, #56	@ 0x38
 80021bc:	4013      	ands	r3, r2
 80021be:	2b10      	cmp	r3, #16
 80021c0:	d100      	bne.n	80021c4 <HAL_RCC_OscConfig+0x4a4>
 80021c2:	e07b      	b.n	80022bc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d156      	bne.n	800227a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021cc:	4b5a      	ldr	r3, [pc, #360]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4b59      	ldr	r3, [pc, #356]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 80021d2:	495d      	ldr	r1, [pc, #372]	@ (8002348 <HAL_RCC_OscConfig+0x628>)
 80021d4:	400a      	ands	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7ff f9d8 	bl	800158c <HAL_GetTick>
 80021dc:	0003      	movs	r3, r0
 80021de:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e2:	f7ff f9d3 	bl	800158c <HAL_GetTick>
 80021e6:	0002      	movs	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e09d      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021f4:	4b50      	ldr	r3, [pc, #320]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	2380      	movs	r3, #128	@ 0x80
 80021fa:	049b      	lsls	r3, r3, #18
 80021fc:	4013      	ands	r3, r2
 80021fe:	d1f0      	bne.n	80021e2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002200:	4b4d      	ldr	r3, [pc, #308]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4a51      	ldr	r2, [pc, #324]	@ (800234c <HAL_RCC_OscConfig+0x62c>)
 8002206:	4013      	ands	r3, r2
 8002208:	0019      	movs	r1, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1a      	ldr	r2, [r3, #32]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002218:	021b      	lsls	r3, r3, #8
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800222c:	431a      	orrs	r2, r3
 800222e:	4b42      	ldr	r3, [pc, #264]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 8002230:	430a      	orrs	r2, r1
 8002232:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002234:	4b40      	ldr	r3, [pc, #256]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b3f      	ldr	r3, [pc, #252]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 800223a:	2180      	movs	r1, #128	@ 0x80
 800223c:	0449      	lsls	r1, r1, #17
 800223e:	430a      	orrs	r2, r1
 8002240:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002242:	4b3d      	ldr	r3, [pc, #244]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	4b3c      	ldr	r3, [pc, #240]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 8002248:	2180      	movs	r1, #128	@ 0x80
 800224a:	0549      	lsls	r1, r1, #21
 800224c:	430a      	orrs	r2, r1
 800224e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002250:	f7ff f99c 	bl	800158c <HAL_GetTick>
 8002254:	0003      	movs	r3, r0
 8002256:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225a:	f7ff f997 	bl	800158c <HAL_GetTick>
 800225e:	0002      	movs	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e061      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800226c:	4b32      	ldr	r3, [pc, #200]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	2380      	movs	r3, #128	@ 0x80
 8002272:	049b      	lsls	r3, r3, #18
 8002274:	4013      	ands	r3, r2
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x53a>
 8002278:	e059      	b.n	800232e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227a:	4b2f      	ldr	r3, [pc, #188]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	4b2e      	ldr	r3, [pc, #184]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 8002280:	4931      	ldr	r1, [pc, #196]	@ (8002348 <HAL_RCC_OscConfig+0x628>)
 8002282:	400a      	ands	r2, r1
 8002284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002286:	f7ff f981 	bl	800158c <HAL_GetTick>
 800228a:	0003      	movs	r3, r0
 800228c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002290:	f7ff f97c 	bl	800158c <HAL_GetTick>
 8002294:	0002      	movs	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e046      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a2:	4b25      	ldr	r3, [pc, #148]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	2380      	movs	r3, #128	@ 0x80
 80022a8:	049b      	lsls	r3, r3, #18
 80022aa:	4013      	ands	r3, r2
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80022ae:	4b22      	ldr	r3, [pc, #136]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	4b21      	ldr	r3, [pc, #132]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 80022b4:	4926      	ldr	r1, [pc, #152]	@ (8002350 <HAL_RCC_OscConfig+0x630>)
 80022b6:	400a      	ands	r2, r1
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	e038      	b.n	800232e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e033      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80022c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002338 <HAL_RCC_OscConfig+0x618>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	2203      	movs	r2, #3
 80022d2:	401a      	ands	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d126      	bne.n	800232a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	2270      	movs	r2, #112	@ 0x70
 80022e0:	401a      	ands	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d11f      	bne.n	800232a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	23fe      	movs	r3, #254	@ 0xfe
 80022ee:	01db      	lsls	r3, r3, #7
 80022f0:	401a      	ands	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d116      	bne.n	800232a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	23f8      	movs	r3, #248	@ 0xf8
 8002300:	039b      	lsls	r3, r3, #14
 8002302:	401a      	ands	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002308:	429a      	cmp	r2, r3
 800230a:	d10e      	bne.n	800232a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	23e0      	movs	r3, #224	@ 0xe0
 8002310:	051b      	lsls	r3, r3, #20
 8002312:	401a      	ands	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002318:	429a      	cmp	r2, r3
 800231a:	d106      	bne.n	800232a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	0f5b      	lsrs	r3, r3, #29
 8002320:	075a      	lsls	r2, r3, #29
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002326:	429a      	cmp	r2, r3
 8002328:	d001      	beq.n	800232e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	0018      	movs	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	b008      	add	sp, #32
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000
 800233c:	40007000 	.word	0x40007000
 8002340:	00001388 	.word	0x00001388
 8002344:	efffffff 	.word	0xefffffff
 8002348:	feffffff 	.word	0xfeffffff
 800234c:	11c1808c 	.word	0x11c1808c
 8002350:	eefefffc 	.word	0xeefefffc

08002354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0e9      	b.n	800253c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002368:	4b76      	ldr	r3, [pc, #472]	@ (8002544 <HAL_RCC_ClockConfig+0x1f0>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2207      	movs	r2, #7
 800236e:	4013      	ands	r3, r2
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d91e      	bls.n	80023b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002376:	4b73      	ldr	r3, [pc, #460]	@ (8002544 <HAL_RCC_ClockConfig+0x1f0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2207      	movs	r2, #7
 800237c:	4393      	bics	r3, r2
 800237e:	0019      	movs	r1, r3
 8002380:	4b70      	ldr	r3, [pc, #448]	@ (8002544 <HAL_RCC_ClockConfig+0x1f0>)
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002388:	f7ff f900 	bl	800158c <HAL_GetTick>
 800238c:	0003      	movs	r3, r0
 800238e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002390:	e009      	b.n	80023a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002392:	f7ff f8fb 	bl	800158c <HAL_GetTick>
 8002396:	0002      	movs	r2, r0
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	4a6a      	ldr	r2, [pc, #424]	@ (8002548 <HAL_RCC_ClockConfig+0x1f4>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e0ca      	b.n	800253c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023a6:	4b67      	ldr	r3, [pc, #412]	@ (8002544 <HAL_RCC_ClockConfig+0x1f0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2207      	movs	r2, #7
 80023ac:	4013      	ands	r3, r2
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d1ee      	bne.n	8002392 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2202      	movs	r2, #2
 80023ba:	4013      	ands	r3, r2
 80023bc:	d015      	beq.n	80023ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2204      	movs	r2, #4
 80023c4:	4013      	ands	r3, r2
 80023c6:	d006      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80023c8:	4b60      	ldr	r3, [pc, #384]	@ (800254c <HAL_RCC_ClockConfig+0x1f8>)
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	4b5f      	ldr	r3, [pc, #380]	@ (800254c <HAL_RCC_ClockConfig+0x1f8>)
 80023ce:	21e0      	movs	r1, #224	@ 0xe0
 80023d0:	01c9      	lsls	r1, r1, #7
 80023d2:	430a      	orrs	r2, r1
 80023d4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d6:	4b5d      	ldr	r3, [pc, #372]	@ (800254c <HAL_RCC_ClockConfig+0x1f8>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	4a5d      	ldr	r2, [pc, #372]	@ (8002550 <HAL_RCC_ClockConfig+0x1fc>)
 80023dc:	4013      	ands	r3, r2
 80023de:	0019      	movs	r1, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	4b59      	ldr	r3, [pc, #356]	@ (800254c <HAL_RCC_ClockConfig+0x1f8>)
 80023e6:	430a      	orrs	r2, r1
 80023e8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2201      	movs	r2, #1
 80023f0:	4013      	ands	r3, r2
 80023f2:	d057      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d107      	bne.n	800240c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023fc:	4b53      	ldr	r3, [pc, #332]	@ (800254c <HAL_RCC_ClockConfig+0x1f8>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	2380      	movs	r3, #128	@ 0x80
 8002402:	029b      	lsls	r3, r3, #10
 8002404:	4013      	ands	r3, r2
 8002406:	d12b      	bne.n	8002460 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e097      	b.n	800253c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d107      	bne.n	8002424 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002414:	4b4d      	ldr	r3, [pc, #308]	@ (800254c <HAL_RCC_ClockConfig+0x1f8>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	2380      	movs	r3, #128	@ 0x80
 800241a:	049b      	lsls	r3, r3, #18
 800241c:	4013      	ands	r3, r2
 800241e:	d11f      	bne.n	8002460 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e08b      	b.n	800253c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d107      	bne.n	800243c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800242c:	4b47      	ldr	r3, [pc, #284]	@ (800254c <HAL_RCC_ClockConfig+0x1f8>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	2380      	movs	r3, #128	@ 0x80
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	4013      	ands	r3, r2
 8002436:	d113      	bne.n	8002460 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e07f      	b.n	800253c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b03      	cmp	r3, #3
 8002442:	d106      	bne.n	8002452 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002444:	4b41      	ldr	r3, [pc, #260]	@ (800254c <HAL_RCC_ClockConfig+0x1f8>)
 8002446:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002448:	2202      	movs	r2, #2
 800244a:	4013      	ands	r3, r2
 800244c:	d108      	bne.n	8002460 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e074      	b.n	800253c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002452:	4b3e      	ldr	r3, [pc, #248]	@ (800254c <HAL_RCC_ClockConfig+0x1f8>)
 8002454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002456:	2202      	movs	r2, #2
 8002458:	4013      	ands	r3, r2
 800245a:	d101      	bne.n	8002460 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e06d      	b.n	800253c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002460:	4b3a      	ldr	r3, [pc, #232]	@ (800254c <HAL_RCC_ClockConfig+0x1f8>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2207      	movs	r2, #7
 8002466:	4393      	bics	r3, r2
 8002468:	0019      	movs	r1, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	4b37      	ldr	r3, [pc, #220]	@ (800254c <HAL_RCC_ClockConfig+0x1f8>)
 8002470:	430a      	orrs	r2, r1
 8002472:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002474:	f7ff f88a 	bl	800158c <HAL_GetTick>
 8002478:	0003      	movs	r3, r0
 800247a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247c:	e009      	b.n	8002492 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800247e:	f7ff f885 	bl	800158c <HAL_GetTick>
 8002482:	0002      	movs	r2, r0
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	4a2f      	ldr	r2, [pc, #188]	@ (8002548 <HAL_RCC_ClockConfig+0x1f4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e054      	b.n	800253c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002492:	4b2e      	ldr	r3, [pc, #184]	@ (800254c <HAL_RCC_ClockConfig+0x1f8>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2238      	movs	r2, #56	@ 0x38
 8002498:	401a      	ands	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d1ec      	bne.n	800247e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024a4:	4b27      	ldr	r3, [pc, #156]	@ (8002544 <HAL_RCC_ClockConfig+0x1f0>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2207      	movs	r2, #7
 80024aa:	4013      	ands	r3, r2
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d21e      	bcs.n	80024f0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b2:	4b24      	ldr	r3, [pc, #144]	@ (8002544 <HAL_RCC_ClockConfig+0x1f0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2207      	movs	r2, #7
 80024b8:	4393      	bics	r3, r2
 80024ba:	0019      	movs	r1, r3
 80024bc:	4b21      	ldr	r3, [pc, #132]	@ (8002544 <HAL_RCC_ClockConfig+0x1f0>)
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024c4:	f7ff f862 	bl	800158c <HAL_GetTick>
 80024c8:	0003      	movs	r3, r0
 80024ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024cc:	e009      	b.n	80024e2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ce:	f7ff f85d 	bl	800158c <HAL_GetTick>
 80024d2:	0002      	movs	r2, r0
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002548 <HAL_RCC_ClockConfig+0x1f4>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e02c      	b.n	800253c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024e2:	4b18      	ldr	r3, [pc, #96]	@ (8002544 <HAL_RCC_ClockConfig+0x1f0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2207      	movs	r2, #7
 80024e8:	4013      	ands	r3, r2
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d1ee      	bne.n	80024ce <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2204      	movs	r2, #4
 80024f6:	4013      	ands	r3, r2
 80024f8:	d009      	beq.n	800250e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024fa:	4b14      	ldr	r3, [pc, #80]	@ (800254c <HAL_RCC_ClockConfig+0x1f8>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	4a15      	ldr	r2, [pc, #84]	@ (8002554 <HAL_RCC_ClockConfig+0x200>)
 8002500:	4013      	ands	r3, r2
 8002502:	0019      	movs	r1, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	4b10      	ldr	r3, [pc, #64]	@ (800254c <HAL_RCC_ClockConfig+0x1f8>)
 800250a:	430a      	orrs	r2, r1
 800250c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800250e:	f000 f829 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 8002512:	0001      	movs	r1, r0
 8002514:	4b0d      	ldr	r3, [pc, #52]	@ (800254c <HAL_RCC_ClockConfig+0x1f8>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	0a1b      	lsrs	r3, r3, #8
 800251a:	220f      	movs	r2, #15
 800251c:	401a      	ands	r2, r3
 800251e:	4b0e      	ldr	r3, [pc, #56]	@ (8002558 <HAL_RCC_ClockConfig+0x204>)
 8002520:	0092      	lsls	r2, r2, #2
 8002522:	58d3      	ldr	r3, [r2, r3]
 8002524:	221f      	movs	r2, #31
 8002526:	4013      	ands	r3, r2
 8002528:	000a      	movs	r2, r1
 800252a:	40da      	lsrs	r2, r3
 800252c:	4b0b      	ldr	r3, [pc, #44]	@ (800255c <HAL_RCC_ClockConfig+0x208>)
 800252e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002530:	4b0b      	ldr	r3, [pc, #44]	@ (8002560 <HAL_RCC_ClockConfig+0x20c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	0018      	movs	r0, r3
 8002536:	f7fe ffcd 	bl	80014d4 <HAL_InitTick>
 800253a:	0003      	movs	r3, r0
}
 800253c:	0018      	movs	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	b004      	add	sp, #16
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40022000 	.word	0x40022000
 8002548:	00001388 	.word	0x00001388
 800254c:	40021000 	.word	0x40021000
 8002550:	fffff0ff 	.word	0xfffff0ff
 8002554:	ffff8fff 	.word	0xffff8fff
 8002558:	080049ec 	.word	0x080049ec
 800255c:	20000000 	.word	0x20000000
 8002560:	20000004 	.word	0x20000004

08002564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800256a:	4b3c      	ldr	r3, [pc, #240]	@ (800265c <HAL_RCC_GetSysClockFreq+0xf8>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2238      	movs	r2, #56	@ 0x38
 8002570:	4013      	ands	r3, r2
 8002572:	d10f      	bne.n	8002594 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002574:	4b39      	ldr	r3, [pc, #228]	@ (800265c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	0adb      	lsrs	r3, r3, #11
 800257a:	2207      	movs	r2, #7
 800257c:	4013      	ands	r3, r2
 800257e:	2201      	movs	r2, #1
 8002580:	409a      	lsls	r2, r3
 8002582:	0013      	movs	r3, r2
 8002584:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002586:	6839      	ldr	r1, [r7, #0]
 8002588:	4835      	ldr	r0, [pc, #212]	@ (8002660 <HAL_RCC_GetSysClockFreq+0xfc>)
 800258a:	f7fd fdbb 	bl	8000104 <__udivsi3>
 800258e:	0003      	movs	r3, r0
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	e05d      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002594:	4b31      	ldr	r3, [pc, #196]	@ (800265c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2238      	movs	r2, #56	@ 0x38
 800259a:	4013      	ands	r3, r2
 800259c:	2b08      	cmp	r3, #8
 800259e:	d102      	bne.n	80025a6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025a0:	4b30      	ldr	r3, [pc, #192]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x100>)
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	e054      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025a6:	4b2d      	ldr	r3, [pc, #180]	@ (800265c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2238      	movs	r2, #56	@ 0x38
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b10      	cmp	r3, #16
 80025b0:	d138      	bne.n	8002624 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80025b2:	4b2a      	ldr	r3, [pc, #168]	@ (800265c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	2203      	movs	r2, #3
 80025b8:	4013      	ands	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025bc:	4b27      	ldr	r3, [pc, #156]	@ (800265c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	2207      	movs	r2, #7
 80025c4:	4013      	ands	r3, r2
 80025c6:	3301      	adds	r3, #1
 80025c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d10d      	bne.n	80025ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025d0:	68b9      	ldr	r1, [r7, #8]
 80025d2:	4824      	ldr	r0, [pc, #144]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x100>)
 80025d4:	f7fd fd96 	bl	8000104 <__udivsi3>
 80025d8:	0003      	movs	r3, r0
 80025da:	0019      	movs	r1, r3
 80025dc:	4b1f      	ldr	r3, [pc, #124]	@ (800265c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	0a1b      	lsrs	r3, r3, #8
 80025e2:	227f      	movs	r2, #127	@ 0x7f
 80025e4:	4013      	ands	r3, r2
 80025e6:	434b      	muls	r3, r1
 80025e8:	617b      	str	r3, [r7, #20]
        break;
 80025ea:	e00d      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80025ec:	68b9      	ldr	r1, [r7, #8]
 80025ee:	481c      	ldr	r0, [pc, #112]	@ (8002660 <HAL_RCC_GetSysClockFreq+0xfc>)
 80025f0:	f7fd fd88 	bl	8000104 <__udivsi3>
 80025f4:	0003      	movs	r3, r0
 80025f6:	0019      	movs	r1, r3
 80025f8:	4b18      	ldr	r3, [pc, #96]	@ (800265c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	0a1b      	lsrs	r3, r3, #8
 80025fe:	227f      	movs	r2, #127	@ 0x7f
 8002600:	4013      	ands	r3, r2
 8002602:	434b      	muls	r3, r1
 8002604:	617b      	str	r3, [r7, #20]
        break;
 8002606:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002608:	4b14      	ldr	r3, [pc, #80]	@ (800265c <HAL_RCC_GetSysClockFreq+0xf8>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	0f5b      	lsrs	r3, r3, #29
 800260e:	2207      	movs	r2, #7
 8002610:	4013      	ands	r3, r2
 8002612:	3301      	adds	r3, #1
 8002614:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	6978      	ldr	r0, [r7, #20]
 800261a:	f7fd fd73 	bl	8000104 <__udivsi3>
 800261e:	0003      	movs	r3, r0
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	e015      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002624:	4b0d      	ldr	r3, [pc, #52]	@ (800265c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	2238      	movs	r2, #56	@ 0x38
 800262a:	4013      	ands	r3, r2
 800262c:	2b20      	cmp	r3, #32
 800262e:	d103      	bne.n	8002638 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002630:	2380      	movs	r3, #128	@ 0x80
 8002632:	021b      	lsls	r3, r3, #8
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	e00b      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002638:	4b08      	ldr	r3, [pc, #32]	@ (800265c <HAL_RCC_GetSysClockFreq+0xf8>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2238      	movs	r2, #56	@ 0x38
 800263e:	4013      	ands	r3, r2
 8002640:	2b18      	cmp	r3, #24
 8002642:	d103      	bne.n	800264c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002644:	23fa      	movs	r3, #250	@ 0xfa
 8002646:	01db      	lsls	r3, r3, #7
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	e001      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002650:	693b      	ldr	r3, [r7, #16]
}
 8002652:	0018      	movs	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	b006      	add	sp, #24
 8002658:	bd80      	pop	{r7, pc}
 800265a:	46c0      	nop			@ (mov r8, r8)
 800265c:	40021000 	.word	0x40021000
 8002660:	00f42400 	.word	0x00f42400
 8002664:	007a1200 	.word	0x007a1200

08002668 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800266c:	4b02      	ldr	r3, [pc, #8]	@ (8002678 <HAL_RCC_GetHCLKFreq+0x10>)
 800266e:	681b      	ldr	r3, [r3, #0]
}
 8002670:	0018      	movs	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	46c0      	nop			@ (mov r8, r8)
 8002678:	20000000 	.word	0x20000000

0800267c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800267c:	b5b0      	push	{r4, r5, r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002680:	f7ff fff2 	bl	8002668 <HAL_RCC_GetHCLKFreq>
 8002684:	0004      	movs	r4, r0
 8002686:	f7ff fb3f 	bl	8001d08 <LL_RCC_GetAPB1Prescaler>
 800268a:	0003      	movs	r3, r0
 800268c:	0b1a      	lsrs	r2, r3, #12
 800268e:	4b05      	ldr	r3, [pc, #20]	@ (80026a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002690:	0092      	lsls	r2, r2, #2
 8002692:	58d3      	ldr	r3, [r2, r3]
 8002694:	221f      	movs	r2, #31
 8002696:	4013      	ands	r3, r2
 8002698:	40dc      	lsrs	r4, r3
 800269a:	0023      	movs	r3, r4
}
 800269c:	0018      	movs	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	bdb0      	pop	{r4, r5, r7, pc}
 80026a2:	46c0      	nop			@ (mov r8, r8)
 80026a4:	08004a2c 	.word	0x08004a2c

080026a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80026b0:	2313      	movs	r3, #19
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026b8:	2312      	movs	r3, #18
 80026ba:	18fb      	adds	r3, r7, r3
 80026bc:	2200      	movs	r2, #0
 80026be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	2380      	movs	r3, #128	@ 0x80
 80026c6:	029b      	lsls	r3, r3, #10
 80026c8:	4013      	ands	r3, r2
 80026ca:	d100      	bne.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x26>
 80026cc:	e0a3      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ce:	2011      	movs	r0, #17
 80026d0:	183b      	adds	r3, r7, r0
 80026d2:	2200      	movs	r2, #0
 80026d4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d6:	4bc3      	ldr	r3, [pc, #780]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026da:	2380      	movs	r3, #128	@ 0x80
 80026dc:	055b      	lsls	r3, r3, #21
 80026de:	4013      	ands	r3, r2
 80026e0:	d110      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e2:	4bc0      	ldr	r3, [pc, #768]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026e6:	4bbf      	ldr	r3, [pc, #764]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026e8:	2180      	movs	r1, #128	@ 0x80
 80026ea:	0549      	lsls	r1, r1, #21
 80026ec:	430a      	orrs	r2, r1
 80026ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80026f0:	4bbc      	ldr	r3, [pc, #752]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026f4:	2380      	movs	r3, #128	@ 0x80
 80026f6:	055b      	lsls	r3, r3, #21
 80026f8:	4013      	ands	r3, r2
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026fe:	183b      	adds	r3, r7, r0
 8002700:	2201      	movs	r2, #1
 8002702:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002704:	4bb8      	ldr	r3, [pc, #736]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4bb7      	ldr	r3, [pc, #732]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800270a:	2180      	movs	r1, #128	@ 0x80
 800270c:	0049      	lsls	r1, r1, #1
 800270e:	430a      	orrs	r2, r1
 8002710:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002712:	f7fe ff3b 	bl	800158c <HAL_GetTick>
 8002716:	0003      	movs	r3, r0
 8002718:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800271a:	e00b      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271c:	f7fe ff36 	bl	800158c <HAL_GetTick>
 8002720:	0002      	movs	r2, r0
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d904      	bls.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800272a:	2313      	movs	r3, #19
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	2203      	movs	r2, #3
 8002730:	701a      	strb	r2, [r3, #0]
        break;
 8002732:	e005      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002734:	4bac      	ldr	r3, [pc, #688]	@ (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	2380      	movs	r3, #128	@ 0x80
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	4013      	ands	r3, r2
 800273e:	d0ed      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002740:	2313      	movs	r3, #19
 8002742:	18fb      	adds	r3, r7, r3
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d154      	bne.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800274a:	4ba6      	ldr	r3, [pc, #664]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800274c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800274e:	23c0      	movs	r3, #192	@ 0xc0
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4013      	ands	r3, r2
 8002754:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d019      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	429a      	cmp	r2, r3
 8002764:	d014      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002766:	4b9f      	ldr	r3, [pc, #636]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800276a:	4aa0      	ldr	r2, [pc, #640]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800276c:	4013      	ands	r3, r2
 800276e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002770:	4b9c      	ldr	r3, [pc, #624]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002772:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002774:	4b9b      	ldr	r3, [pc, #620]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002776:	2180      	movs	r1, #128	@ 0x80
 8002778:	0249      	lsls	r1, r1, #9
 800277a:	430a      	orrs	r2, r1
 800277c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800277e:	4b99      	ldr	r3, [pc, #612]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002780:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002782:	4b98      	ldr	r3, [pc, #608]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002784:	499a      	ldr	r1, [pc, #616]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002786:	400a      	ands	r2, r1
 8002788:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800278a:	4b96      	ldr	r3, [pc, #600]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	2201      	movs	r2, #1
 8002794:	4013      	ands	r3, r2
 8002796:	d016      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002798:	f7fe fef8 	bl	800158c <HAL_GetTick>
 800279c:	0003      	movs	r3, r0
 800279e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027a0:	e00c      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a2:	f7fe fef3 	bl	800158c <HAL_GetTick>
 80027a6:	0002      	movs	r2, r0
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	4a91      	ldr	r2, [pc, #580]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d904      	bls.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80027b2:	2313      	movs	r3, #19
 80027b4:	18fb      	adds	r3, r7, r3
 80027b6:	2203      	movs	r2, #3
 80027b8:	701a      	strb	r2, [r3, #0]
            break;
 80027ba:	e004      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027bc:	4b89      	ldr	r3, [pc, #548]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c0:	2202      	movs	r2, #2
 80027c2:	4013      	ands	r3, r2
 80027c4:	d0ed      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80027c6:	2313      	movs	r3, #19
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10a      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027d0:	4b84      	ldr	r3, [pc, #528]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d4:	4a85      	ldr	r2, [pc, #532]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	0019      	movs	r1, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027de:	4b81      	ldr	r3, [pc, #516]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027e0:	430a      	orrs	r2, r1
 80027e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80027e4:	e00c      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027e6:	2312      	movs	r3, #18
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	2213      	movs	r2, #19
 80027ec:	18ba      	adds	r2, r7, r2
 80027ee:	7812      	ldrb	r2, [r2, #0]
 80027f0:	701a      	strb	r2, [r3, #0]
 80027f2:	e005      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027f4:	2312      	movs	r3, #18
 80027f6:	18fb      	adds	r3, r7, r3
 80027f8:	2213      	movs	r2, #19
 80027fa:	18ba      	adds	r2, r7, r2
 80027fc:	7812      	ldrb	r2, [r2, #0]
 80027fe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002800:	2311      	movs	r3, #17
 8002802:	18fb      	adds	r3, r7, r3
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d105      	bne.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800280a:	4b76      	ldr	r3, [pc, #472]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800280c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800280e:	4b75      	ldr	r3, [pc, #468]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002810:	4979      	ldr	r1, [pc, #484]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002812:	400a      	ands	r2, r1
 8002814:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2201      	movs	r2, #1
 800281c:	4013      	ands	r3, r2
 800281e:	d009      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002820:	4b70      	ldr	r3, [pc, #448]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002824:	2203      	movs	r2, #3
 8002826:	4393      	bics	r3, r2
 8002828:	0019      	movs	r1, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	4b6d      	ldr	r3, [pc, #436]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002830:	430a      	orrs	r2, r1
 8002832:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2202      	movs	r2, #2
 800283a:	4013      	ands	r3, r2
 800283c:	d009      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800283e:	4b69      	ldr	r3, [pc, #420]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002842:	220c      	movs	r2, #12
 8002844:	4393      	bics	r3, r2
 8002846:	0019      	movs	r1, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	4b65      	ldr	r3, [pc, #404]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800284e:	430a      	orrs	r2, r1
 8002850:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2210      	movs	r2, #16
 8002858:	4013      	ands	r3, r2
 800285a:	d009      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800285c:	4b61      	ldr	r3, [pc, #388]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800285e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002860:	4a66      	ldr	r2, [pc, #408]	@ (80029fc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002862:	4013      	ands	r3, r2
 8002864:	0019      	movs	r1, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	4b5e      	ldr	r3, [pc, #376]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800286c:	430a      	orrs	r2, r1
 800286e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	2380      	movs	r3, #128	@ 0x80
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4013      	ands	r3, r2
 800287a:	d009      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800287c:	4b59      	ldr	r3, [pc, #356]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800287e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002880:	4a5f      	ldr	r2, [pc, #380]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002882:	4013      	ands	r3, r2
 8002884:	0019      	movs	r1, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	699a      	ldr	r2, [r3, #24]
 800288a:	4b56      	ldr	r3, [pc, #344]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800288c:	430a      	orrs	r2, r1
 800288e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	2380      	movs	r3, #128	@ 0x80
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	4013      	ands	r3, r2
 800289a:	d009      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800289c:	4b51      	ldr	r3, [pc, #324]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800289e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a0:	4a58      	ldr	r2, [pc, #352]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	0019      	movs	r1, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69da      	ldr	r2, [r3, #28]
 80028aa:	4b4e      	ldr	r3, [pc, #312]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028ac:	430a      	orrs	r2, r1
 80028ae:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2220      	movs	r2, #32
 80028b6:	4013      	ands	r3, r2
 80028b8:	d009      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028ba:	4b4a      	ldr	r3, [pc, #296]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028be:	4a52      	ldr	r2, [pc, #328]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	0019      	movs	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	4b46      	ldr	r3, [pc, #280]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028ca:	430a      	orrs	r2, r1
 80028cc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	2380      	movs	r3, #128	@ 0x80
 80028d4:	01db      	lsls	r3, r3, #7
 80028d6:	4013      	ands	r3, r2
 80028d8:	d015      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028da:	4b42      	ldr	r3, [pc, #264]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	0899      	lsrs	r1, r3, #2
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1a      	ldr	r2, [r3, #32]
 80028e6:	4b3f      	ldr	r3, [pc, #252]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028e8:	430a      	orrs	r2, r1
 80028ea:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a1a      	ldr	r2, [r3, #32]
 80028f0:	2380      	movs	r3, #128	@ 0x80
 80028f2:	05db      	lsls	r3, r3, #23
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d106      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80028f8:	4b3a      	ldr	r3, [pc, #232]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	4b39      	ldr	r3, [pc, #228]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028fe:	2180      	movs	r1, #128	@ 0x80
 8002900:	0249      	lsls	r1, r1, #9
 8002902:	430a      	orrs	r2, r1
 8002904:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	2380      	movs	r3, #128	@ 0x80
 800290c:	031b      	lsls	r3, r3, #12
 800290e:	4013      	ands	r3, r2
 8002910:	d009      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002912:	4b34      	ldr	r3, [pc, #208]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002916:	2240      	movs	r2, #64	@ 0x40
 8002918:	4393      	bics	r3, r2
 800291a:	0019      	movs	r1, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002920:	4b30      	ldr	r3, [pc, #192]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002922:	430a      	orrs	r2, r1
 8002924:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	2380      	movs	r3, #128	@ 0x80
 800292c:	039b      	lsls	r3, r3, #14
 800292e:	4013      	ands	r3, r2
 8002930:	d016      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002932:	4b2c      	ldr	r3, [pc, #176]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002936:	4a35      	ldr	r2, [pc, #212]	@ (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002938:	4013      	ands	r3, r2
 800293a:	0019      	movs	r1, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002940:	4b28      	ldr	r3, [pc, #160]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002942:	430a      	orrs	r2, r1
 8002944:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800294a:	2380      	movs	r3, #128	@ 0x80
 800294c:	03db      	lsls	r3, r3, #15
 800294e:	429a      	cmp	r2, r3
 8002950:	d106      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002952:	4b24      	ldr	r3, [pc, #144]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	4b23      	ldr	r3, [pc, #140]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002958:	2180      	movs	r1, #128	@ 0x80
 800295a:	0449      	lsls	r1, r1, #17
 800295c:	430a      	orrs	r2, r1
 800295e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	2380      	movs	r3, #128	@ 0x80
 8002966:	03db      	lsls	r3, r3, #15
 8002968:	4013      	ands	r3, r2
 800296a:	d016      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800296c:	4b1d      	ldr	r3, [pc, #116]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800296e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002970:	4a27      	ldr	r2, [pc, #156]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002972:	4013      	ands	r3, r2
 8002974:	0019      	movs	r1, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800297a:	4b1a      	ldr	r3, [pc, #104]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800297c:	430a      	orrs	r2, r1
 800297e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002984:	2380      	movs	r3, #128	@ 0x80
 8002986:	045b      	lsls	r3, r3, #17
 8002988:	429a      	cmp	r2, r3
 800298a:	d106      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800298c:	4b15      	ldr	r3, [pc, #84]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	4b14      	ldr	r3, [pc, #80]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002992:	2180      	movs	r1, #128	@ 0x80
 8002994:	0449      	lsls	r1, r1, #17
 8002996:	430a      	orrs	r2, r1
 8002998:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	2380      	movs	r3, #128	@ 0x80
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	4013      	ands	r3, r2
 80029a4:	d016      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80029a6:	4b0f      	ldr	r3, [pc, #60]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029aa:	4a1a      	ldr	r2, [pc, #104]	@ (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	0019      	movs	r1, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	695a      	ldr	r2, [r3, #20]
 80029b4:	4b0b      	ldr	r3, [pc, #44]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029b6:	430a      	orrs	r2, r1
 80029b8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695a      	ldr	r2, [r3, #20]
 80029be:	2380      	movs	r3, #128	@ 0x80
 80029c0:	01db      	lsls	r3, r3, #7
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d106      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80029c6:	4b07      	ldr	r3, [pc, #28]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	4b06      	ldr	r3, [pc, #24]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029cc:	2180      	movs	r1, #128	@ 0x80
 80029ce:	0249      	lsls	r1, r1, #9
 80029d0:	430a      	orrs	r2, r1
 80029d2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80029d4:	2312      	movs	r3, #18
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	781b      	ldrb	r3, [r3, #0]
}
 80029da:	0018      	movs	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	b006      	add	sp, #24
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	46c0      	nop			@ (mov r8, r8)
 80029e4:	40021000 	.word	0x40021000
 80029e8:	40007000 	.word	0x40007000
 80029ec:	fffffcff 	.word	0xfffffcff
 80029f0:	fffeffff 	.word	0xfffeffff
 80029f4:	00001388 	.word	0x00001388
 80029f8:	efffffff 	.word	0xefffffff
 80029fc:	fffff3ff 	.word	0xfffff3ff
 8002a00:	fff3ffff 	.word	0xfff3ffff
 8002a04:	ffcfffff 	.word	0xffcfffff
 8002a08:	ffffcfff 	.word	0xffffcfff
 8002a0c:	ffbfffff 	.word	0xffbfffff
 8002a10:	feffffff 	.word	0xfeffffff
 8002a14:	ffff3fff 	.word	0xffff3fff

08002a18 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002a18:	b5b0      	push	{r4, r5, r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a20:	230f      	movs	r3, #15
 8002a22:	18fb      	adds	r3, r7, r3
 8002a24:	2201      	movs	r2, #1
 8002a26:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d100      	bne.n	8002a30 <HAL_RTC_Init+0x18>
 8002a2e:	e08c      	b.n	8002b4a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2229      	movs	r2, #41	@ 0x29
 8002a34:	5c9b      	ldrb	r3, [r3, r2]
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10b      	bne.n	8002a54 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2228      	movs	r2, #40	@ 0x28
 8002a40:	2100      	movs	r1, #0
 8002a42:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2288      	movs	r2, #136	@ 0x88
 8002a48:	0212      	lsls	r2, r2, #8
 8002a4a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f7fe f816 	bl	8000a80 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2229      	movs	r2, #41	@ 0x29
 8002a58:	2102      	movs	r1, #2
 8002a5a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	2210      	movs	r2, #16
 8002a64:	4013      	ands	r3, r2
 8002a66:	2b10      	cmp	r3, #16
 8002a68:	d062      	beq.n	8002b30 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	22ca      	movs	r2, #202	@ 0xca
 8002a70:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2253      	movs	r2, #83	@ 0x53
 8002a78:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002a7a:	250f      	movs	r5, #15
 8002a7c:	197c      	adds	r4, r7, r5
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	0018      	movs	r0, r3
 8002a82:	f000 f891 	bl	8002ba8 <RTC_EnterInitMode>
 8002a86:	0003      	movs	r3, r0
 8002a88:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002a8a:	0028      	movs	r0, r5
 8002a8c:	183b      	adds	r3, r7, r0
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d12c      	bne.n	8002aee <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699a      	ldr	r2, [r3, #24]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	492e      	ldr	r1, [pc, #184]	@ (8002b58 <HAL_RTC_Init+0x140>)
 8002aa0:	400a      	ands	r2, r1
 8002aa2:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6999      	ldr	r1, [r3, #24]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6912      	ldr	r2, [r2, #16]
 8002aca:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6919      	ldr	r1, [r3, #16]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	041a      	lsls	r2, r3, #16
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002ae0:	183c      	adds	r4, r7, r0
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f000 f8a1 	bl	8002c2c <RTC_ExitInitMode>
 8002aea:	0003      	movs	r3, r0
 8002aec:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002aee:	230f      	movs	r3, #15
 8002af0:	18fb      	adds	r3, r7, r3
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d116      	bne.n	8002b26 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699a      	ldr	r2, [r3, #24]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	00d2      	lsls	r2, r2, #3
 8002b04:	08d2      	lsrs	r2, r2, #3
 8002b06:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6999      	ldr	r1, [r3, #24]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	22ff      	movs	r2, #255	@ 0xff
 8002b2c:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b2e:	e003      	b.n	8002b38 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002b30:	230f      	movs	r3, #15
 8002b32:	18fb      	adds	r3, r7, r3
 8002b34:	2200      	movs	r2, #0
 8002b36:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002b38:	230f      	movs	r3, #15
 8002b3a:	18fb      	adds	r3, r7, r3
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d103      	bne.n	8002b4a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2229      	movs	r2, #41	@ 0x29
 8002b46:	2101      	movs	r1, #1
 8002b48:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002b4a:	230f      	movs	r3, #15
 8002b4c:	18fb      	adds	r3, r7, r3
 8002b4e:	781b      	ldrb	r3, [r3, #0]
}
 8002b50:	0018      	movs	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	b004      	add	sp, #16
 8002b56:	bdb0      	pop	{r4, r5, r7, pc}
 8002b58:	fb8fffbf 	.word	0xfb8fffbf

08002b5c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a0e      	ldr	r2, [pc, #56]	@ (8002ba4 <HAL_RTC_WaitForSynchro+0x48>)
 8002b6a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002b6c:	f7fe fd0e 	bl	800158c <HAL_GetTick>
 8002b70:	0003      	movs	r3, r0
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002b74:	e00a      	b.n	8002b8c <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002b76:	f7fe fd09 	bl	800158c <HAL_GetTick>
 8002b7a:	0002      	movs	r2, r0
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	1ad2      	subs	r2, r2, r3
 8002b80:	23fa      	movs	r3, #250	@ 0xfa
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d901      	bls.n	8002b8c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e006      	b.n	8002b9a <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	2220      	movs	r2, #32
 8002b94:	4013      	ands	r3, r2
 8002b96:	d0ee      	beq.n	8002b76 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	b004      	add	sp, #16
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	46c0      	nop			@ (mov r8, r8)
 8002ba4:	0001005f 	.word	0x0001005f

08002ba8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002bb0:	230f      	movs	r3, #15
 8002bb2:	18fb      	adds	r3, r7, r3
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	2240      	movs	r2, #64	@ 0x40
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d12c      	bne.n	8002c1e <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2180      	movs	r1, #128	@ 0x80
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002bd4:	f7fe fcda 	bl	800158c <HAL_GetTick>
 8002bd8:	0003      	movs	r3, r0
 8002bda:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002bdc:	e014      	b.n	8002c08 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002bde:	f7fe fcd5 	bl	800158c <HAL_GetTick>
 8002be2:	0002      	movs	r2, r0
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	1ad2      	subs	r2, r2, r3
 8002be8:	200f      	movs	r0, #15
 8002bea:	183b      	adds	r3, r7, r0
 8002bec:	1839      	adds	r1, r7, r0
 8002bee:	7809      	ldrb	r1, [r1, #0]
 8002bf0:	7019      	strb	r1, [r3, #0]
 8002bf2:	23fa      	movs	r3, #250	@ 0xfa
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d906      	bls.n	8002c08 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8002bfa:	183b      	adds	r3, r7, r0
 8002bfc:	2203      	movs	r2, #3
 8002bfe:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2229      	movs	r2, #41	@ 0x29
 8002c04:	2103      	movs	r1, #3
 8002c06:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2240      	movs	r2, #64	@ 0x40
 8002c10:	4013      	ands	r3, r2
 8002c12:	d104      	bne.n	8002c1e <RTC_EnterInitMode+0x76>
 8002c14:	230f      	movs	r3, #15
 8002c16:	18fb      	adds	r3, r7, r3
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d1df      	bne.n	8002bde <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002c1e:	230f      	movs	r3, #15
 8002c20:	18fb      	adds	r3, r7, r3
 8002c22:	781b      	ldrb	r3, [r3, #0]
}
 8002c24:	0018      	movs	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b004      	add	sp, #16
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c2c:	b590      	push	{r4, r7, lr}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c34:	240f      	movs	r4, #15
 8002c36:	193b      	adds	r3, r7, r4
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8002cb0 <RTC_ExitInitMode+0x84>)
 8002c3e:	68da      	ldr	r2, [r3, #12]
 8002c40:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb0 <RTC_ExitInitMode+0x84>)
 8002c42:	2180      	movs	r1, #128	@ 0x80
 8002c44:	438a      	bics	r2, r1
 8002c46:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002c48:	4b19      	ldr	r3, [pc, #100]	@ (8002cb0 <RTC_ExitInitMode+0x84>)
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d10d      	bne.n	8002c6e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	0018      	movs	r0, r3
 8002c56:	f7ff ff81 	bl	8002b5c <HAL_RTC_WaitForSynchro>
 8002c5a:	1e03      	subs	r3, r0, #0
 8002c5c:	d021      	beq.n	8002ca2 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2229      	movs	r2, #41	@ 0x29
 8002c62:	2103      	movs	r1, #3
 8002c64:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002c66:	193b      	adds	r3, r7, r4
 8002c68:	2203      	movs	r2, #3
 8002c6a:	701a      	strb	r2, [r3, #0]
 8002c6c:	e019      	b.n	8002ca2 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002c6e:	4b10      	ldr	r3, [pc, #64]	@ (8002cb0 <RTC_ExitInitMode+0x84>)
 8002c70:	699a      	ldr	r2, [r3, #24]
 8002c72:	4b0f      	ldr	r3, [pc, #60]	@ (8002cb0 <RTC_ExitInitMode+0x84>)
 8002c74:	2120      	movs	r1, #32
 8002c76:	438a      	bics	r2, r1
 8002c78:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f7ff ff6d 	bl	8002b5c <HAL_RTC_WaitForSynchro>
 8002c82:	1e03      	subs	r3, r0, #0
 8002c84:	d007      	beq.n	8002c96 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2229      	movs	r2, #41	@ 0x29
 8002c8a:	2103      	movs	r1, #3
 8002c8c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002c8e:	230f      	movs	r3, #15
 8002c90:	18fb      	adds	r3, r7, r3
 8002c92:	2203      	movs	r2, #3
 8002c94:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002c96:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <RTC_ExitInitMode+0x84>)
 8002c98:	699a      	ldr	r2, [r3, #24]
 8002c9a:	4b05      	ldr	r3, [pc, #20]	@ (8002cb0 <RTC_ExitInitMode+0x84>)
 8002c9c:	2120      	movs	r1, #32
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002ca2:	230f      	movs	r3, #15
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	781b      	ldrb	r3, [r3, #0]
}
 8002ca8:	0018      	movs	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b005      	add	sp, #20
 8002cae:	bd90      	pop	{r4, r7, pc}
 8002cb0:	40002800 	.word	0x40002800

08002cb4 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2228      	movs	r2, #40	@ 0x28
 8002cc4:	5c9b      	ldrb	r3, [r3, r2]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d101      	bne.n	8002cce <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e066      	b.n	8002d9c <HAL_RTCEx_SetWakeUpTimer+0xe8>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2228      	movs	r2, #40	@ 0x28
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2229      	movs	r2, #41	@ 0x29
 8002cda:	2102      	movs	r1, #2
 8002cdc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	22ca      	movs	r2, #202	@ 0xca
 8002ce4:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2253      	movs	r2, #83	@ 0x53
 8002cec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8002cee:	4b2d      	ldr	r3, [pc, #180]	@ (8002da4 <HAL_RTCEx_SetWakeUpTimer+0xf0>)
 8002cf0:	699a      	ldr	r2, [r3, #24]
 8002cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8002da4 <HAL_RTCEx_SetWakeUpTimer+0xf0>)
 8002cf4:	492c      	ldr	r1, [pc, #176]	@ (8002da8 <HAL_RTCEx_SetWakeUpTimer+0xf4>)
 8002cf6:	400a      	ands	r2, r1
 8002cf8:	619a      	str	r2, [r3, #24]

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002cfa:	4b2a      	ldr	r3, [pc, #168]	@ (8002da4 <HAL_RTCEx_SetWakeUpTimer+0xf0>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	2240      	movs	r2, #64	@ 0x40
 8002d00:	4013      	ands	r3, r2
 8002d02:	d121      	bne.n	8002d48 <HAL_RTCEx_SetWakeUpTimer+0x94>
  {
    tickstart = HAL_GetTick();
 8002d04:	f7fe fc42 	bl	800158c <HAL_GetTick>
 8002d08:	0003      	movs	r3, r0
 8002d0a:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002d0c:	e016      	b.n	8002d3c <HAL_RTCEx_SetWakeUpTimer+0x88>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002d0e:	f7fe fc3d 	bl	800158c <HAL_GetTick>
 8002d12:	0002      	movs	r2, r0
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	1ad2      	subs	r2, r2, r3
 8002d18:	23fa      	movs	r3, #250	@ 0xfa
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d90d      	bls.n	8002d3c <HAL_RTCEx_SetWakeUpTimer+0x88>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	22ff      	movs	r2, #255	@ 0xff
 8002d26:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2229      	movs	r2, #41	@ 0x29
 8002d2c:	2103      	movs	r1, #3
 8002d2e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2228      	movs	r2, #40	@ 0x28
 8002d34:	2100      	movs	r1, #0
 8002d36:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e02f      	b.n	8002d9c <HAL_RTCEx_SetWakeUpTimer+0xe8>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	2204      	movs	r2, #4
 8002d44:	4013      	ands	r3, r2
 8002d46:	d0e2      	beq.n	8002d0e <HAL_RTCEx_SetWakeUpTimer+0x5a>
      }
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699a      	ldr	r2, [r3, #24]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2107      	movs	r1, #7
 8002d54:	438a      	bics	r2, r1
 8002d56:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6999      	ldr	r1, [r3, #24]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	619a      	str	r2, [r3, #24]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	615a      	str	r2, [r3, #20]

   /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2180      	movs	r1, #128	@ 0x80
 8002d7c:	00c9      	lsls	r1, r1, #3
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	22ff      	movs	r2, #255	@ 0xff
 8002d88:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2229      	movs	r2, #41	@ 0x29
 8002d8e:	2101      	movs	r1, #1
 8002d90:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2228      	movs	r2, #40	@ 0x28
 8002d96:	2100      	movs	r1, #0
 8002d98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b006      	add	sp, #24
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40002800 	.word	0x40002800
 8002da8:	fffffbff 	.word	0xfffffbff

08002dac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e04a      	b.n	8002e54 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	223d      	movs	r2, #61	@ 0x3d
 8002dc2:	5c9b      	ldrb	r3, [r3, r2]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d107      	bne.n	8002dda <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	223c      	movs	r2, #60	@ 0x3c
 8002dce:	2100      	movs	r1, #0
 8002dd0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f7fe f94b 	bl	8001070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	223d      	movs	r2, #61	@ 0x3d
 8002dde:	2102      	movs	r1, #2
 8002de0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3304      	adds	r3, #4
 8002dea:	0019      	movs	r1, r3
 8002dec:	0010      	movs	r0, r2
 8002dee:	f000 fa6b 	bl	80032c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2248      	movs	r2, #72	@ 0x48
 8002df6:	2101      	movs	r1, #1
 8002df8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	223e      	movs	r2, #62	@ 0x3e
 8002dfe:	2101      	movs	r1, #1
 8002e00:	5499      	strb	r1, [r3, r2]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	223f      	movs	r2, #63	@ 0x3f
 8002e06:	2101      	movs	r1, #1
 8002e08:	5499      	strb	r1, [r3, r2]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2240      	movs	r2, #64	@ 0x40
 8002e0e:	2101      	movs	r1, #1
 8002e10:	5499      	strb	r1, [r3, r2]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2241      	movs	r2, #65	@ 0x41
 8002e16:	2101      	movs	r1, #1
 8002e18:	5499      	strb	r1, [r3, r2]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2242      	movs	r2, #66	@ 0x42
 8002e1e:	2101      	movs	r1, #1
 8002e20:	5499      	strb	r1, [r3, r2]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2243      	movs	r2, #67	@ 0x43
 8002e26:	2101      	movs	r1, #1
 8002e28:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2244      	movs	r2, #68	@ 0x44
 8002e2e:	2101      	movs	r1, #1
 8002e30:	5499      	strb	r1, [r3, r2]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2245      	movs	r2, #69	@ 0x45
 8002e36:	2101      	movs	r1, #1
 8002e38:	5499      	strb	r1, [r3, r2]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2246      	movs	r2, #70	@ 0x46
 8002e3e:	2101      	movs	r1, #1
 8002e40:	5499      	strb	r1, [r3, r2]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2247      	movs	r2, #71	@ 0x47
 8002e46:	2101      	movs	r1, #1
 8002e48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	223d      	movs	r2, #61	@ 0x3d
 8002e4e:	2101      	movs	r1, #1
 8002e50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	0018      	movs	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b002      	add	sp, #8
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e04a      	b.n	8002f04 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	223d      	movs	r2, #61	@ 0x3d
 8002e72:	5c9b      	ldrb	r3, [r3, r2]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d107      	bne.n	8002e8a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	223c      	movs	r2, #60	@ 0x3c
 8002e7e:	2100      	movs	r1, #0
 8002e80:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	0018      	movs	r0, r3
 8002e86:	f000 f841 	bl	8002f0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	223d      	movs	r2, #61	@ 0x3d
 8002e8e:	2102      	movs	r1, #2
 8002e90:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	3304      	adds	r3, #4
 8002e9a:	0019      	movs	r1, r3
 8002e9c:	0010      	movs	r0, r2
 8002e9e:	f000 fa13 	bl	80032c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2248      	movs	r2, #72	@ 0x48
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	223e      	movs	r2, #62	@ 0x3e
 8002eae:	2101      	movs	r1, #1
 8002eb0:	5499      	strb	r1, [r3, r2]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	223f      	movs	r2, #63	@ 0x3f
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	5499      	strb	r1, [r3, r2]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2240      	movs	r2, #64	@ 0x40
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	5499      	strb	r1, [r3, r2]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2241      	movs	r2, #65	@ 0x41
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	5499      	strb	r1, [r3, r2]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2242      	movs	r2, #66	@ 0x42
 8002ece:	2101      	movs	r1, #1
 8002ed0:	5499      	strb	r1, [r3, r2]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2243      	movs	r2, #67	@ 0x43
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2244      	movs	r2, #68	@ 0x44
 8002ede:	2101      	movs	r1, #1
 8002ee0:	5499      	strb	r1, [r3, r2]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2245      	movs	r2, #69	@ 0x45
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	5499      	strb	r1, [r3, r2]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2246      	movs	r2, #70	@ 0x46
 8002eee:	2101      	movs	r1, #1
 8002ef0:	5499      	strb	r1, [r3, r2]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2247      	movs	r2, #71	@ 0x47
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	223d      	movs	r2, #61	@ 0x3d
 8002efe:	2101      	movs	r1, #1
 8002f00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	0018      	movs	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b002      	add	sp, #8
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f14:	46c0      	nop			@ (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b002      	add	sp, #8
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f28:	2317      	movs	r3, #23
 8002f2a:	18fb      	adds	r3, r7, r3
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	223c      	movs	r2, #60	@ 0x3c
 8002f34:	5c9b      	ldrb	r3, [r3, r2]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_TIM_PWM_ConfigChannel+0x22>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e0e5      	b.n	800310a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	223c      	movs	r2, #60	@ 0x3c
 8002f42:	2101      	movs	r1, #1
 8002f44:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b14      	cmp	r3, #20
 8002f4a:	d900      	bls.n	8002f4e <HAL_TIM_PWM_ConfigChannel+0x32>
 8002f4c:	e0d1      	b.n	80030f2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	009a      	lsls	r2, r3, #2
 8002f52:	4b70      	ldr	r3, [pc, #448]	@ (8003114 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002f54:	18d3      	adds	r3, r2, r3
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	0011      	movs	r1, r2
 8002f62:	0018      	movs	r0, r3
 8002f64:	f000 fa3e 	bl	80033e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2108      	movs	r1, #8
 8002f74:	430a      	orrs	r2, r1
 8002f76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699a      	ldr	r2, [r3, #24]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2104      	movs	r1, #4
 8002f84:	438a      	bics	r2, r1
 8002f86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6999      	ldr	r1, [r3, #24]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	691a      	ldr	r2, [r3, #16]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	619a      	str	r2, [r3, #24]
      break;
 8002f9a:	e0af      	b.n	80030fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	0011      	movs	r1, r2
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f000 faa7 	bl	80034f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	699a      	ldr	r2, [r3, #24]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2180      	movs	r1, #128	@ 0x80
 8002fb6:	0109      	lsls	r1, r1, #4
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699a      	ldr	r2, [r3, #24]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4954      	ldr	r1, [pc, #336]	@ (8003118 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002fc8:	400a      	ands	r2, r1
 8002fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6999      	ldr	r1, [r3, #24]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	021a      	lsls	r2, r3, #8
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	619a      	str	r2, [r3, #24]
      break;
 8002fe0:	e08c      	b.n	80030fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	0011      	movs	r1, r2
 8002fea:	0018      	movs	r0, r3
 8002fec:	f000 fb08 	bl	8003600 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	69da      	ldr	r2, [r3, #28]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2108      	movs	r1, #8
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	69da      	ldr	r2, [r3, #28]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2104      	movs	r1, #4
 800300c:	438a      	bics	r2, r1
 800300e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	69d9      	ldr	r1, [r3, #28]
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	691a      	ldr	r2, [r3, #16]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	61da      	str	r2, [r3, #28]
      break;
 8003022:	e06b      	b.n	80030fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	0011      	movs	r1, r2
 800302c:	0018      	movs	r0, r3
 800302e:	f000 fb6f 	bl	8003710 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2180      	movs	r1, #128	@ 0x80
 800303e:	0109      	lsls	r1, r1, #4
 8003040:	430a      	orrs	r2, r1
 8003042:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	69da      	ldr	r2, [r3, #28]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4932      	ldr	r1, [pc, #200]	@ (8003118 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003050:	400a      	ands	r2, r1
 8003052:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	69d9      	ldr	r1, [r3, #28]
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	021a      	lsls	r2, r3, #8
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	61da      	str	r2, [r3, #28]
      break;
 8003068:	e048      	b.n	80030fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	0011      	movs	r1, r2
 8003072:	0018      	movs	r0, r3
 8003074:	f000 fbb6 	bl	80037e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2108      	movs	r1, #8
 8003084:	430a      	orrs	r2, r1
 8003086:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2104      	movs	r1, #4
 8003094:	438a      	bics	r2, r1
 8003096:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	691a      	ldr	r2, [r3, #16]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80030aa:	e027      	b.n	80030fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	0011      	movs	r1, r2
 80030b4:	0018      	movs	r0, r3
 80030b6:	f000 fbf5 	bl	80038a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2180      	movs	r1, #128	@ 0x80
 80030c6:	0109      	lsls	r1, r1, #4
 80030c8:	430a      	orrs	r2, r1
 80030ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4910      	ldr	r1, [pc, #64]	@ (8003118 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80030d8:	400a      	ands	r2, r1
 80030da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	021a      	lsls	r2, r3, #8
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80030f0:	e004      	b.n	80030fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80030f2:	2317      	movs	r3, #23
 80030f4:	18fb      	adds	r3, r7, r3
 80030f6:	2201      	movs	r2, #1
 80030f8:	701a      	strb	r2, [r3, #0]
      break;
 80030fa:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	223c      	movs	r2, #60	@ 0x3c
 8003100:	2100      	movs	r1, #0
 8003102:	5499      	strb	r1, [r3, r2]

  return status;
 8003104:	2317      	movs	r3, #23
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	781b      	ldrb	r3, [r3, #0]
}
 800310a:	0018      	movs	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	b006      	add	sp, #24
 8003110:	bd80      	pop	{r7, pc}
 8003112:	46c0      	nop			@ (mov r8, r8)
 8003114:	08004a4c 	.word	0x08004a4c
 8003118:	fffffbff 	.word	0xfffffbff

0800311c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003126:	230f      	movs	r3, #15
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	2200      	movs	r2, #0
 800312c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	223c      	movs	r2, #60	@ 0x3c
 8003132:	5c9b      	ldrb	r3, [r3, r2]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_TIM_ConfigClockSource+0x20>
 8003138:	2302      	movs	r3, #2
 800313a:	e0bc      	b.n	80032b6 <HAL_TIM_ConfigClockSource+0x19a>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	223c      	movs	r2, #60	@ 0x3c
 8003140:	2101      	movs	r1, #1
 8003142:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	223d      	movs	r2, #61	@ 0x3d
 8003148:	2102      	movs	r1, #2
 800314a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4a5a      	ldr	r2, [pc, #360]	@ (80032c0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003158:	4013      	ands	r3, r2
 800315a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	4a59      	ldr	r2, [pc, #356]	@ (80032c4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003160:	4013      	ands	r3, r2
 8003162:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2280      	movs	r2, #128	@ 0x80
 8003172:	0192      	lsls	r2, r2, #6
 8003174:	4293      	cmp	r3, r2
 8003176:	d040      	beq.n	80031fa <HAL_TIM_ConfigClockSource+0xde>
 8003178:	2280      	movs	r2, #128	@ 0x80
 800317a:	0192      	lsls	r2, r2, #6
 800317c:	4293      	cmp	r3, r2
 800317e:	d900      	bls.n	8003182 <HAL_TIM_ConfigClockSource+0x66>
 8003180:	e088      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x178>
 8003182:	2280      	movs	r2, #128	@ 0x80
 8003184:	0152      	lsls	r2, r2, #5
 8003186:	4293      	cmp	r3, r2
 8003188:	d100      	bne.n	800318c <HAL_TIM_ConfigClockSource+0x70>
 800318a:	e088      	b.n	800329e <HAL_TIM_ConfigClockSource+0x182>
 800318c:	2280      	movs	r2, #128	@ 0x80
 800318e:	0152      	lsls	r2, r2, #5
 8003190:	4293      	cmp	r3, r2
 8003192:	d900      	bls.n	8003196 <HAL_TIM_ConfigClockSource+0x7a>
 8003194:	e07e      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x178>
 8003196:	2b70      	cmp	r3, #112	@ 0x70
 8003198:	d018      	beq.n	80031cc <HAL_TIM_ConfigClockSource+0xb0>
 800319a:	d900      	bls.n	800319e <HAL_TIM_ConfigClockSource+0x82>
 800319c:	e07a      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x178>
 800319e:	2b60      	cmp	r3, #96	@ 0x60
 80031a0:	d04f      	beq.n	8003242 <HAL_TIM_ConfigClockSource+0x126>
 80031a2:	d900      	bls.n	80031a6 <HAL_TIM_ConfigClockSource+0x8a>
 80031a4:	e076      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x178>
 80031a6:	2b50      	cmp	r3, #80	@ 0x50
 80031a8:	d03b      	beq.n	8003222 <HAL_TIM_ConfigClockSource+0x106>
 80031aa:	d900      	bls.n	80031ae <HAL_TIM_ConfigClockSource+0x92>
 80031ac:	e072      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x178>
 80031ae:	2b40      	cmp	r3, #64	@ 0x40
 80031b0:	d057      	beq.n	8003262 <HAL_TIM_ConfigClockSource+0x146>
 80031b2:	d900      	bls.n	80031b6 <HAL_TIM_ConfigClockSource+0x9a>
 80031b4:	e06e      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x178>
 80031b6:	2b30      	cmp	r3, #48	@ 0x30
 80031b8:	d063      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x166>
 80031ba:	d86b      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x178>
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d060      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x166>
 80031c0:	d868      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x178>
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d05d      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x166>
 80031c6:	2b10      	cmp	r3, #16
 80031c8:	d05b      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x166>
 80031ca:	e063      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031dc:	f000 fc42 	bl	8003a64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2277      	movs	r2, #119	@ 0x77
 80031ec:	4313      	orrs	r3, r2
 80031ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	609a      	str	r2, [r3, #8]
      break;
 80031f8:	e052      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800320a:	f000 fc2b 	bl	8003a64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2180      	movs	r1, #128	@ 0x80
 800321a:	01c9      	lsls	r1, r1, #7
 800321c:	430a      	orrs	r2, r1
 800321e:	609a      	str	r2, [r3, #8]
      break;
 8003220:	e03e      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800322e:	001a      	movs	r2, r3
 8003230:	f000 fb9c 	bl	800396c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2150      	movs	r1, #80	@ 0x50
 800323a:	0018      	movs	r0, r3
 800323c:	f000 fbf6 	bl	8003a2c <TIM_ITRx_SetConfig>
      break;
 8003240:	e02e      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800324e:	001a      	movs	r2, r3
 8003250:	f000 fbba 	bl	80039c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2160      	movs	r1, #96	@ 0x60
 800325a:	0018      	movs	r0, r3
 800325c:	f000 fbe6 	bl	8003a2c <TIM_ITRx_SetConfig>
      break;
 8003260:	e01e      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800326e:	001a      	movs	r2, r3
 8003270:	f000 fb7c 	bl	800396c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2140      	movs	r1, #64	@ 0x40
 800327a:	0018      	movs	r0, r3
 800327c:	f000 fbd6 	bl	8003a2c <TIM_ITRx_SetConfig>
      break;
 8003280:	e00e      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	0019      	movs	r1, r3
 800328c:	0010      	movs	r0, r2
 800328e:	f000 fbcd 	bl	8003a2c <TIM_ITRx_SetConfig>
      break;
 8003292:	e005      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003294:	230f      	movs	r3, #15
 8003296:	18fb      	adds	r3, r7, r3
 8003298:	2201      	movs	r2, #1
 800329a:	701a      	strb	r2, [r3, #0]
      break;
 800329c:	e000      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800329e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	223d      	movs	r2, #61	@ 0x3d
 80032a4:	2101      	movs	r1, #1
 80032a6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	223c      	movs	r2, #60	@ 0x3c
 80032ac:	2100      	movs	r1, #0
 80032ae:	5499      	strb	r1, [r3, r2]

  return status;
 80032b0:	230f      	movs	r3, #15
 80032b2:	18fb      	adds	r3, r7, r3
 80032b4:	781b      	ldrb	r3, [r3, #0]
}
 80032b6:	0018      	movs	r0, r3
 80032b8:	46bd      	mov	sp, r7
 80032ba:	b004      	add	sp, #16
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	46c0      	nop			@ (mov r8, r8)
 80032c0:	ffceff88 	.word	0xffceff88
 80032c4:	ffff00ff 	.word	0xffff00ff

080032c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a3b      	ldr	r2, [pc, #236]	@ (80033c8 <TIM_Base_SetConfig+0x100>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d008      	beq.n	80032f2 <TIM_Base_SetConfig+0x2a>
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	2380      	movs	r3, #128	@ 0x80
 80032e4:	05db      	lsls	r3, r3, #23
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d003      	beq.n	80032f2 <TIM_Base_SetConfig+0x2a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a37      	ldr	r2, [pc, #220]	@ (80033cc <TIM_Base_SetConfig+0x104>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d108      	bne.n	8003304 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2270      	movs	r2, #112	@ 0x70
 80032f6:	4393      	bics	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4313      	orrs	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a30      	ldr	r2, [pc, #192]	@ (80033c8 <TIM_Base_SetConfig+0x100>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d018      	beq.n	800333e <TIM_Base_SetConfig+0x76>
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	2380      	movs	r3, #128	@ 0x80
 8003310:	05db      	lsls	r3, r3, #23
 8003312:	429a      	cmp	r2, r3
 8003314:	d013      	beq.n	800333e <TIM_Base_SetConfig+0x76>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a2c      	ldr	r2, [pc, #176]	@ (80033cc <TIM_Base_SetConfig+0x104>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d00f      	beq.n	800333e <TIM_Base_SetConfig+0x76>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a2b      	ldr	r2, [pc, #172]	@ (80033d0 <TIM_Base_SetConfig+0x108>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d00b      	beq.n	800333e <TIM_Base_SetConfig+0x76>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a2a      	ldr	r2, [pc, #168]	@ (80033d4 <TIM_Base_SetConfig+0x10c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d007      	beq.n	800333e <TIM_Base_SetConfig+0x76>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a29      	ldr	r2, [pc, #164]	@ (80033d8 <TIM_Base_SetConfig+0x110>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d003      	beq.n	800333e <TIM_Base_SetConfig+0x76>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a28      	ldr	r2, [pc, #160]	@ (80033dc <TIM_Base_SetConfig+0x114>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d108      	bne.n	8003350 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4a27      	ldr	r2, [pc, #156]	@ (80033e0 <TIM_Base_SetConfig+0x118>)
 8003342:	4013      	ands	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	4313      	orrs	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2280      	movs	r2, #128	@ 0x80
 8003354:	4393      	bics	r3, r2
 8003356:	001a      	movs	r2, r3
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	4313      	orrs	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a13      	ldr	r2, [pc, #76]	@ (80033c8 <TIM_Base_SetConfig+0x100>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d00b      	beq.n	8003396 <TIM_Base_SetConfig+0xce>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a14      	ldr	r2, [pc, #80]	@ (80033d4 <TIM_Base_SetConfig+0x10c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d007      	beq.n	8003396 <TIM_Base_SetConfig+0xce>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a13      	ldr	r2, [pc, #76]	@ (80033d8 <TIM_Base_SetConfig+0x110>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d003      	beq.n	8003396 <TIM_Base_SetConfig+0xce>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a12      	ldr	r2, [pc, #72]	@ (80033dc <TIM_Base_SetConfig+0x114>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d103      	bne.n	800339e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	2201      	movs	r2, #1
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d106      	bne.n	80033be <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	2201      	movs	r2, #1
 80033b6:	4393      	bics	r3, r2
 80033b8:	001a      	movs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	611a      	str	r2, [r3, #16]
  }
}
 80033be:	46c0      	nop			@ (mov r8, r8)
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b004      	add	sp, #16
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	46c0      	nop			@ (mov r8, r8)
 80033c8:	40012c00 	.word	0x40012c00
 80033cc:	40000400 	.word	0x40000400
 80033d0:	40002000 	.word	0x40002000
 80033d4:	40014000 	.word	0x40014000
 80033d8:	40014400 	.word	0x40014400
 80033dc:	40014800 	.word	0x40014800
 80033e0:	fffffcff 	.word	0xfffffcff

080033e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	2201      	movs	r2, #1
 80033fa:	4393      	bics	r3, r2
 80033fc:	001a      	movs	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4a32      	ldr	r2, [pc, #200]	@ (80034dc <TIM_OC1_SetConfig+0xf8>)
 8003412:	4013      	ands	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2203      	movs	r2, #3
 800341a:	4393      	bics	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	4313      	orrs	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	2202      	movs	r2, #2
 800342c:	4393      	bics	r3, r2
 800342e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	4313      	orrs	r3, r2
 8003438:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a28      	ldr	r2, [pc, #160]	@ (80034e0 <TIM_OC1_SetConfig+0xfc>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00b      	beq.n	800345a <TIM_OC1_SetConfig+0x76>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a27      	ldr	r2, [pc, #156]	@ (80034e4 <TIM_OC1_SetConfig+0x100>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d007      	beq.n	800345a <TIM_OC1_SetConfig+0x76>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a26      	ldr	r2, [pc, #152]	@ (80034e8 <TIM_OC1_SetConfig+0x104>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d003      	beq.n	800345a <TIM_OC1_SetConfig+0x76>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a25      	ldr	r2, [pc, #148]	@ (80034ec <TIM_OC1_SetConfig+0x108>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d10c      	bne.n	8003474 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2208      	movs	r2, #8
 800345e:	4393      	bics	r3, r2
 8003460:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4313      	orrs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	2204      	movs	r2, #4
 8003470:	4393      	bics	r3, r2
 8003472:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a1a      	ldr	r2, [pc, #104]	@ (80034e0 <TIM_OC1_SetConfig+0xfc>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d00b      	beq.n	8003494 <TIM_OC1_SetConfig+0xb0>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a19      	ldr	r2, [pc, #100]	@ (80034e4 <TIM_OC1_SetConfig+0x100>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d007      	beq.n	8003494 <TIM_OC1_SetConfig+0xb0>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a18      	ldr	r2, [pc, #96]	@ (80034e8 <TIM_OC1_SetConfig+0x104>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d003      	beq.n	8003494 <TIM_OC1_SetConfig+0xb0>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a17      	ldr	r2, [pc, #92]	@ (80034ec <TIM_OC1_SetConfig+0x108>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d111      	bne.n	80034b8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	4a16      	ldr	r2, [pc, #88]	@ (80034f0 <TIM_OC1_SetConfig+0x10c>)
 8003498:	4013      	ands	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	4a15      	ldr	r2, [pc, #84]	@ (80034f4 <TIM_OC1_SetConfig+0x110>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	621a      	str	r2, [r3, #32]
}
 80034d2:	46c0      	nop			@ (mov r8, r8)
 80034d4:	46bd      	mov	sp, r7
 80034d6:	b006      	add	sp, #24
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	46c0      	nop			@ (mov r8, r8)
 80034dc:	fffeff8f 	.word	0xfffeff8f
 80034e0:	40012c00 	.word	0x40012c00
 80034e4:	40014000 	.word	0x40014000
 80034e8:	40014400 	.word	0x40014400
 80034ec:	40014800 	.word	0x40014800
 80034f0:	fffffeff 	.word	0xfffffeff
 80034f4:	fffffdff 	.word	0xfffffdff

080034f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	2210      	movs	r2, #16
 800350e:	4393      	bics	r3, r2
 8003510:	001a      	movs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4a2e      	ldr	r2, [pc, #184]	@ (80035e0 <TIM_OC2_SetConfig+0xe8>)
 8003526:	4013      	ands	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4a2d      	ldr	r2, [pc, #180]	@ (80035e4 <TIM_OC2_SetConfig+0xec>)
 800352e:	4013      	ands	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	021b      	lsls	r3, r3, #8
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4313      	orrs	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2220      	movs	r2, #32
 8003542:	4393      	bics	r3, r2
 8003544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	4313      	orrs	r3, r2
 8003550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a24      	ldr	r2, [pc, #144]	@ (80035e8 <TIM_OC2_SetConfig+0xf0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d10d      	bne.n	8003576 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2280      	movs	r2, #128	@ 0x80
 800355e:	4393      	bics	r3, r2
 8003560:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4313      	orrs	r3, r2
 800356c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2240      	movs	r2, #64	@ 0x40
 8003572:	4393      	bics	r3, r2
 8003574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a1b      	ldr	r2, [pc, #108]	@ (80035e8 <TIM_OC2_SetConfig+0xf0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00b      	beq.n	8003596 <TIM_OC2_SetConfig+0x9e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a1a      	ldr	r2, [pc, #104]	@ (80035ec <TIM_OC2_SetConfig+0xf4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d007      	beq.n	8003596 <TIM_OC2_SetConfig+0x9e>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a19      	ldr	r2, [pc, #100]	@ (80035f0 <TIM_OC2_SetConfig+0xf8>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d003      	beq.n	8003596 <TIM_OC2_SetConfig+0x9e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a18      	ldr	r2, [pc, #96]	@ (80035f4 <TIM_OC2_SetConfig+0xfc>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d113      	bne.n	80035be <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	4a17      	ldr	r2, [pc, #92]	@ (80035f8 <TIM_OC2_SetConfig+0x100>)
 800359a:	4013      	ands	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	4a16      	ldr	r2, [pc, #88]	@ (80035fc <TIM_OC2_SetConfig+0x104>)
 80035a2:	4013      	ands	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	621a      	str	r2, [r3, #32]
}
 80035d8:	46c0      	nop			@ (mov r8, r8)
 80035da:	46bd      	mov	sp, r7
 80035dc:	b006      	add	sp, #24
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	feff8fff 	.word	0xfeff8fff
 80035e4:	fffffcff 	.word	0xfffffcff
 80035e8:	40012c00 	.word	0x40012c00
 80035ec:	40014000 	.word	0x40014000
 80035f0:	40014400 	.word	0x40014400
 80035f4:	40014800 	.word	0x40014800
 80035f8:	fffffbff 	.word	0xfffffbff
 80035fc:	fffff7ff 	.word	0xfffff7ff

08003600 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	4a33      	ldr	r2, [pc, #204]	@ (80036e4 <TIM_OC3_SetConfig+0xe4>)
 8003616:	401a      	ands	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4a2f      	ldr	r2, [pc, #188]	@ (80036e8 <TIM_OC3_SetConfig+0xe8>)
 800362c:	4013      	ands	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2203      	movs	r2, #3
 8003634:	4393      	bics	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	4313      	orrs	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	4a29      	ldr	r2, [pc, #164]	@ (80036ec <TIM_OC3_SetConfig+0xec>)
 8003646:	4013      	ands	r3, r2
 8003648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	4313      	orrs	r3, r2
 8003654:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a25      	ldr	r2, [pc, #148]	@ (80036f0 <TIM_OC3_SetConfig+0xf0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d10d      	bne.n	800367a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	4a24      	ldr	r2, [pc, #144]	@ (80036f4 <TIM_OC3_SetConfig+0xf4>)
 8003662:	4013      	ands	r3, r2
 8003664:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	021b      	lsls	r3, r3, #8
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4313      	orrs	r3, r2
 8003670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	4a20      	ldr	r2, [pc, #128]	@ (80036f8 <TIM_OC3_SetConfig+0xf8>)
 8003676:	4013      	ands	r3, r2
 8003678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a1c      	ldr	r2, [pc, #112]	@ (80036f0 <TIM_OC3_SetConfig+0xf0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d00b      	beq.n	800369a <TIM_OC3_SetConfig+0x9a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a1d      	ldr	r2, [pc, #116]	@ (80036fc <TIM_OC3_SetConfig+0xfc>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d007      	beq.n	800369a <TIM_OC3_SetConfig+0x9a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a1c      	ldr	r2, [pc, #112]	@ (8003700 <TIM_OC3_SetConfig+0x100>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d003      	beq.n	800369a <TIM_OC3_SetConfig+0x9a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a1b      	ldr	r2, [pc, #108]	@ (8003704 <TIM_OC3_SetConfig+0x104>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d113      	bne.n	80036c2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4a1a      	ldr	r2, [pc, #104]	@ (8003708 <TIM_OC3_SetConfig+0x108>)
 800369e:	4013      	ands	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4a19      	ldr	r2, [pc, #100]	@ (800370c <TIM_OC3_SetConfig+0x10c>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4313      	orrs	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	621a      	str	r2, [r3, #32]
}
 80036dc:	46c0      	nop			@ (mov r8, r8)
 80036de:	46bd      	mov	sp, r7
 80036e0:	b006      	add	sp, #24
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	fffffeff 	.word	0xfffffeff
 80036e8:	fffeff8f 	.word	0xfffeff8f
 80036ec:	fffffdff 	.word	0xfffffdff
 80036f0:	40012c00 	.word	0x40012c00
 80036f4:	fffff7ff 	.word	0xfffff7ff
 80036f8:	fffffbff 	.word	0xfffffbff
 80036fc:	40014000 	.word	0x40014000
 8003700:	40014400 	.word	0x40014400
 8003704:	40014800 	.word	0x40014800
 8003708:	ffffefff 	.word	0xffffefff
 800370c:	ffffdfff 	.word	0xffffdfff

08003710 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	4a26      	ldr	r2, [pc, #152]	@ (80037c0 <TIM_OC4_SetConfig+0xb0>)
 8003726:	401a      	ands	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4a22      	ldr	r2, [pc, #136]	@ (80037c4 <TIM_OC4_SetConfig+0xb4>)
 800373c:	4013      	ands	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4a21      	ldr	r2, [pc, #132]	@ (80037c8 <TIM_OC4_SetConfig+0xb8>)
 8003744:	4013      	ands	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	021b      	lsls	r3, r3, #8
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	4313      	orrs	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	4a1d      	ldr	r2, [pc, #116]	@ (80037cc <TIM_OC4_SetConfig+0xbc>)
 8003758:	4013      	ands	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	031b      	lsls	r3, r3, #12
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	4313      	orrs	r3, r2
 8003766:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a19      	ldr	r2, [pc, #100]	@ (80037d0 <TIM_OC4_SetConfig+0xc0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d00b      	beq.n	8003788 <TIM_OC4_SetConfig+0x78>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a18      	ldr	r2, [pc, #96]	@ (80037d4 <TIM_OC4_SetConfig+0xc4>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d007      	beq.n	8003788 <TIM_OC4_SetConfig+0x78>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a17      	ldr	r2, [pc, #92]	@ (80037d8 <TIM_OC4_SetConfig+0xc8>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d003      	beq.n	8003788 <TIM_OC4_SetConfig+0x78>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a16      	ldr	r2, [pc, #88]	@ (80037dc <TIM_OC4_SetConfig+0xcc>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d109      	bne.n	800379c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	4a15      	ldr	r2, [pc, #84]	@ (80037e0 <TIM_OC4_SetConfig+0xd0>)
 800378c:	4013      	ands	r3, r2
 800378e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	019b      	lsls	r3, r3, #6
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	4313      	orrs	r3, r2
 800379a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	621a      	str	r2, [r3, #32]
}
 80037b6:	46c0      	nop			@ (mov r8, r8)
 80037b8:	46bd      	mov	sp, r7
 80037ba:	b006      	add	sp, #24
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	46c0      	nop			@ (mov r8, r8)
 80037c0:	ffffefff 	.word	0xffffefff
 80037c4:	feff8fff 	.word	0xfeff8fff
 80037c8:	fffffcff 	.word	0xfffffcff
 80037cc:	ffffdfff 	.word	0xffffdfff
 80037d0:	40012c00 	.word	0x40012c00
 80037d4:	40014000 	.word	0x40014000
 80037d8:	40014400 	.word	0x40014400
 80037dc:	40014800 	.word	0x40014800
 80037e0:	ffffbfff 	.word	0xffffbfff

080037e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	4a23      	ldr	r2, [pc, #140]	@ (8003888 <TIM_OC5_SetConfig+0xa4>)
 80037fa:	401a      	ands	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800380a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4a1f      	ldr	r2, [pc, #124]	@ (800388c <TIM_OC5_SetConfig+0xa8>)
 8003810:	4013      	ands	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	4313      	orrs	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	4a1b      	ldr	r2, [pc, #108]	@ (8003890 <TIM_OC5_SetConfig+0xac>)
 8003822:	4013      	ands	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	041b      	lsls	r3, r3, #16
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4313      	orrs	r3, r2
 8003830:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a17      	ldr	r2, [pc, #92]	@ (8003894 <TIM_OC5_SetConfig+0xb0>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d00b      	beq.n	8003852 <TIM_OC5_SetConfig+0x6e>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a16      	ldr	r2, [pc, #88]	@ (8003898 <TIM_OC5_SetConfig+0xb4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d007      	beq.n	8003852 <TIM_OC5_SetConfig+0x6e>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a15      	ldr	r2, [pc, #84]	@ (800389c <TIM_OC5_SetConfig+0xb8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d003      	beq.n	8003852 <TIM_OC5_SetConfig+0x6e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a14      	ldr	r2, [pc, #80]	@ (80038a0 <TIM_OC5_SetConfig+0xbc>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d109      	bne.n	8003866 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	4a0c      	ldr	r2, [pc, #48]	@ (8003888 <TIM_OC5_SetConfig+0xa4>)
 8003856:	4013      	ands	r3, r2
 8003858:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	021b      	lsls	r3, r3, #8
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	621a      	str	r2, [r3, #32]
}
 8003880:	46c0      	nop			@ (mov r8, r8)
 8003882:	46bd      	mov	sp, r7
 8003884:	b006      	add	sp, #24
 8003886:	bd80      	pop	{r7, pc}
 8003888:	fffeffff 	.word	0xfffeffff
 800388c:	fffeff8f 	.word	0xfffeff8f
 8003890:	fffdffff 	.word	0xfffdffff
 8003894:	40012c00 	.word	0x40012c00
 8003898:	40014000 	.word	0x40014000
 800389c:	40014400 	.word	0x40014400
 80038a0:	40014800 	.word	0x40014800

080038a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	4a24      	ldr	r2, [pc, #144]	@ (800394c <TIM_OC6_SetConfig+0xa8>)
 80038ba:	401a      	ands	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4a20      	ldr	r2, [pc, #128]	@ (8003950 <TIM_OC6_SetConfig+0xac>)
 80038d0:	4013      	ands	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	021b      	lsls	r3, r3, #8
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	4313      	orrs	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003954 <TIM_OC6_SetConfig+0xb0>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	051b      	lsls	r3, r3, #20
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a18      	ldr	r2, [pc, #96]	@ (8003958 <TIM_OC6_SetConfig+0xb4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00b      	beq.n	8003914 <TIM_OC6_SetConfig+0x70>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a17      	ldr	r2, [pc, #92]	@ (800395c <TIM_OC6_SetConfig+0xb8>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d007      	beq.n	8003914 <TIM_OC6_SetConfig+0x70>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a16      	ldr	r2, [pc, #88]	@ (8003960 <TIM_OC6_SetConfig+0xbc>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d003      	beq.n	8003914 <TIM_OC6_SetConfig+0x70>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a15      	ldr	r2, [pc, #84]	@ (8003964 <TIM_OC6_SetConfig+0xc0>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d109      	bne.n	8003928 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	4a14      	ldr	r2, [pc, #80]	@ (8003968 <TIM_OC6_SetConfig+0xc4>)
 8003918:	4013      	ands	r3, r2
 800391a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	029b      	lsls	r3, r3, #10
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	4313      	orrs	r3, r2
 8003926:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	621a      	str	r2, [r3, #32]
}
 8003942:	46c0      	nop			@ (mov r8, r8)
 8003944:	46bd      	mov	sp, r7
 8003946:	b006      	add	sp, #24
 8003948:	bd80      	pop	{r7, pc}
 800394a:	46c0      	nop			@ (mov r8, r8)
 800394c:	ffefffff 	.word	0xffefffff
 8003950:	feff8fff 	.word	0xfeff8fff
 8003954:	ffdfffff 	.word	0xffdfffff
 8003958:	40012c00 	.word	0x40012c00
 800395c:	40014000 	.word	0x40014000
 8003960:	40014400 	.word	0x40014400
 8003964:	40014800 	.word	0x40014800
 8003968:	fffbffff 	.word	0xfffbffff

0800396c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	2201      	movs	r2, #1
 8003984:	4393      	bics	r3, r2
 8003986:	001a      	movs	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	22f0      	movs	r2, #240	@ 0xf0
 8003996:	4393      	bics	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	220a      	movs	r2, #10
 80039a8:	4393      	bics	r3, r2
 80039aa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	621a      	str	r2, [r3, #32]
}
 80039c0:	46c0      	nop			@ (mov r8, r8)
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b006      	add	sp, #24
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	2210      	movs	r2, #16
 80039e0:	4393      	bics	r3, r2
 80039e2:	001a      	movs	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003a28 <TIM_TI2_ConfigInputStage+0x60>)
 80039f2:	4013      	ands	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	031b      	lsls	r3, r3, #12
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	22a0      	movs	r2, #160	@ 0xa0
 8003a04:	4393      	bics	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	621a      	str	r2, [r3, #32]
}
 8003a1e:	46c0      	nop			@ (mov r8, r8)
 8003a20:	46bd      	mov	sp, r7
 8003a22:	b006      	add	sp, #24
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	46c0      	nop			@ (mov r8, r8)
 8003a28:	ffff0fff 	.word	0xffff0fff

08003a2c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4a08      	ldr	r2, [pc, #32]	@ (8003a60 <TIM_ITRx_SetConfig+0x34>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	2207      	movs	r2, #7
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	609a      	str	r2, [r3, #8]
}
 8003a56:	46c0      	nop			@ (mov r8, r8)
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b004      	add	sp, #16
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	46c0      	nop			@ (mov r8, r8)
 8003a60:	ffcfff8f 	.word	0xffcfff8f

08003a64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	4a09      	ldr	r2, [pc, #36]	@ (8003aa0 <TIM_ETR_SetConfig+0x3c>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	021a      	lsls	r2, r3, #8
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	609a      	str	r2, [r3, #8]
}
 8003a98:	46c0      	nop			@ (mov r8, r8)
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	b006      	add	sp, #24
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	ffff00ff 	.word	0xffff00ff

08003aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	223c      	movs	r2, #60	@ 0x3c
 8003ab2:	5c9b      	ldrb	r3, [r3, r2]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e055      	b.n	8003b68 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	223c      	movs	r2, #60	@ 0x3c
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	223d      	movs	r2, #61	@ 0x3d
 8003ac8:	2102      	movs	r1, #2
 8003aca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a23      	ldr	r2, [pc, #140]	@ (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d108      	bne.n	8003af8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4a22      	ldr	r2, [pc, #136]	@ (8003b74 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2270      	movs	r2, #112	@ 0x70
 8003afc:	4393      	bics	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a16      	ldr	r2, [pc, #88]	@ (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d00f      	beq.n	8003b3c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	2380      	movs	r3, #128	@ 0x80
 8003b22:	05db      	lsls	r3, r3, #23
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d009      	beq.n	8003b3c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a12      	ldr	r2, [pc, #72]	@ (8003b78 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d004      	beq.n	8003b3c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a11      	ldr	r2, [pc, #68]	@ (8003b7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d10c      	bne.n	8003b56 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2280      	movs	r2, #128	@ 0x80
 8003b40:	4393      	bics	r3, r2
 8003b42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	223d      	movs	r2, #61	@ 0x3d
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	223c      	movs	r2, #60	@ 0x3c
 8003b62:	2100      	movs	r1, #0
 8003b64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	0018      	movs	r0, r3
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	b004      	add	sp, #16
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40012c00 	.word	0x40012c00
 8003b74:	ff0fffff 	.word	0xff0fffff
 8003b78:	40000400 	.word	0x40000400
 8003b7c:	40014000 	.word	0x40014000

08003b80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	223c      	movs	r2, #60	@ 0x3c
 8003b92:	5c9b      	ldrb	r3, [r3, r2]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e06f      	b.n	8003c7c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	223c      	movs	r2, #60	@ 0x3c
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	22ff      	movs	r2, #255	@ 0xff
 8003ba8:	4393      	bics	r3, r2
 8003baa:	001a      	movs	r2, r3
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4a33      	ldr	r2, [pc, #204]	@ (8003c84 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003bb8:	401a      	ands	r2, r3
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4a30      	ldr	r2, [pc, #192]	@ (8003c88 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003bc6:	401a      	ands	r2, r3
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4a2e      	ldr	r2, [pc, #184]	@ (8003c8c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003bd4:	401a      	ands	r2, r3
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4a2b      	ldr	r2, [pc, #172]	@ (8003c90 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003be2:	401a      	ands	r2, r3
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4a29      	ldr	r2, [pc, #164]	@ (8003c94 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003bf0:	401a      	ands	r2, r3
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4a26      	ldr	r2, [pc, #152]	@ (8003c98 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003bfe:	401a      	ands	r2, r3
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c04:	4313      	orrs	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4a24      	ldr	r2, [pc, #144]	@ (8003c9c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003c0c:	401a      	ands	r2, r3
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	041b      	lsls	r3, r3, #16
 8003c14:	4313      	orrs	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4a21      	ldr	r2, [pc, #132]	@ (8003ca0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003c1c:	401a      	ands	r2, r3
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ca4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d11c      	bne.n	8003c6a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4a1d      	ldr	r2, [pc, #116]	@ (8003ca8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003c34:	401a      	ands	r2, r3
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c3a:	051b      	lsls	r3, r3, #20
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4a1a      	ldr	r2, [pc, #104]	@ (8003cac <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003c44:	401a      	ands	r2, r3
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4a17      	ldr	r2, [pc, #92]	@ (8003cb0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003c52:	401a      	ands	r2, r3
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4a15      	ldr	r2, [pc, #84]	@ (8003cb4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003c60:	401a      	ands	r2, r3
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	223c      	movs	r2, #60	@ 0x3c
 8003c76:	2100      	movs	r1, #0
 8003c78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b004      	add	sp, #16
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	fffffcff 	.word	0xfffffcff
 8003c88:	fffffbff 	.word	0xfffffbff
 8003c8c:	fffff7ff 	.word	0xfffff7ff
 8003c90:	ffffefff 	.word	0xffffefff
 8003c94:	ffffdfff 	.word	0xffffdfff
 8003c98:	ffffbfff 	.word	0xffffbfff
 8003c9c:	fff0ffff 	.word	0xfff0ffff
 8003ca0:	efffffff 	.word	0xefffffff
 8003ca4:	40012c00 	.word	0x40012c00
 8003ca8:	ff0fffff 	.word	0xff0fffff
 8003cac:	feffffff 	.word	0xfeffffff
 8003cb0:	fdffffff 	.word	0xfdffffff
 8003cb4:	dfffffff 	.word	0xdfffffff

08003cb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e046      	b.n	8003d58 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2288      	movs	r2, #136	@ 0x88
 8003cce:	589b      	ldr	r3, [r3, r2]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d107      	bne.n	8003ce4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2284      	movs	r2, #132	@ 0x84
 8003cd8:	2100      	movs	r1, #0
 8003cda:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f7fd fb4c 	bl	800137c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2288      	movs	r2, #136	@ 0x88
 8003ce8:	2124      	movs	r1, #36	@ 0x24
 8003cea:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	438a      	bics	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	0018      	movs	r0, r3
 8003d08:	f000 faea 	bl	80042e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f000 f828 	bl	8003d64 <UART_SetConfig>
 8003d14:	0003      	movs	r3, r0
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d101      	bne.n	8003d1e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e01c      	b.n	8003d58 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	490d      	ldr	r1, [pc, #52]	@ (8003d60 <HAL_UART_Init+0xa8>)
 8003d2a:	400a      	ands	r2, r1
 8003d2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	212a      	movs	r1, #42	@ 0x2a
 8003d3a:	438a      	bics	r2, r1
 8003d3c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2101      	movs	r1, #1
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	0018      	movs	r0, r3
 8003d52:	f000 fb79 	bl	8004448 <UART_CheckIdleState>
 8003d56:	0003      	movs	r3, r0
}
 8003d58:	0018      	movs	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	b002      	add	sp, #8
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	ffffb7ff 	.word	0xffffb7ff

08003d64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d64:	b5b0      	push	{r4, r5, r7, lr}
 8003d66:	b090      	sub	sp, #64	@ 0x40
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d6c:	231a      	movs	r3, #26
 8003d6e:	2220      	movs	r2, #32
 8003d70:	189b      	adds	r3, r3, r2
 8003d72:	19db      	adds	r3, r3, r7
 8003d74:	2200      	movs	r2, #0
 8003d76:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	431a      	orrs	r2, r3
 8003d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4aaf      	ldr	r2, [pc, #700]	@ (8004054 <UART_SetConfig+0x2f0>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	0019      	movs	r1, r3
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003da2:	430b      	orrs	r3, r1
 8003da4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	4aaa      	ldr	r2, [pc, #680]	@ (8004058 <UART_SetConfig+0x2f4>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	0018      	movs	r0, r3
 8003db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db4:	68d9      	ldr	r1, [r3, #12]
 8003db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	0003      	movs	r3, r0
 8003dbc:	430b      	orrs	r3, r1
 8003dbe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4aa4      	ldr	r2, [pc, #656]	@ (800405c <UART_SetConfig+0x2f8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d004      	beq.n	8003dda <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	4a9f      	ldr	r2, [pc, #636]	@ (8004060 <UART_SetConfig+0x2fc>)
 8003de2:	4013      	ands	r3, r2
 8003de4:	0019      	movs	r1, r3
 8003de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dec:	430b      	orrs	r3, r1
 8003dee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df6:	220f      	movs	r2, #15
 8003df8:	4393      	bics	r3, r2
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	0003      	movs	r3, r0
 8003e06:	430b      	orrs	r3, r1
 8003e08:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a95      	ldr	r2, [pc, #596]	@ (8004064 <UART_SetConfig+0x300>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d131      	bne.n	8003e78 <UART_SetConfig+0x114>
 8003e14:	4b94      	ldr	r3, [pc, #592]	@ (8004068 <UART_SetConfig+0x304>)
 8003e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e18:	2203      	movs	r2, #3
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d01d      	beq.n	8003e5c <UART_SetConfig+0xf8>
 8003e20:	d823      	bhi.n	8003e6a <UART_SetConfig+0x106>
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d00c      	beq.n	8003e40 <UART_SetConfig+0xdc>
 8003e26:	d820      	bhi.n	8003e6a <UART_SetConfig+0x106>
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <UART_SetConfig+0xce>
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d00e      	beq.n	8003e4e <UART_SetConfig+0xea>
 8003e30:	e01b      	b.n	8003e6a <UART_SetConfig+0x106>
 8003e32:	231b      	movs	r3, #27
 8003e34:	2220      	movs	r2, #32
 8003e36:	189b      	adds	r3, r3, r2
 8003e38:	19db      	adds	r3, r3, r7
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	701a      	strb	r2, [r3, #0]
 8003e3e:	e0b4      	b.n	8003faa <UART_SetConfig+0x246>
 8003e40:	231b      	movs	r3, #27
 8003e42:	2220      	movs	r2, #32
 8003e44:	189b      	adds	r3, r3, r2
 8003e46:	19db      	adds	r3, r3, r7
 8003e48:	2202      	movs	r2, #2
 8003e4a:	701a      	strb	r2, [r3, #0]
 8003e4c:	e0ad      	b.n	8003faa <UART_SetConfig+0x246>
 8003e4e:	231b      	movs	r3, #27
 8003e50:	2220      	movs	r2, #32
 8003e52:	189b      	adds	r3, r3, r2
 8003e54:	19db      	adds	r3, r3, r7
 8003e56:	2204      	movs	r2, #4
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	e0a6      	b.n	8003faa <UART_SetConfig+0x246>
 8003e5c:	231b      	movs	r3, #27
 8003e5e:	2220      	movs	r2, #32
 8003e60:	189b      	adds	r3, r3, r2
 8003e62:	19db      	adds	r3, r3, r7
 8003e64:	2208      	movs	r2, #8
 8003e66:	701a      	strb	r2, [r3, #0]
 8003e68:	e09f      	b.n	8003faa <UART_SetConfig+0x246>
 8003e6a:	231b      	movs	r3, #27
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	189b      	adds	r3, r3, r2
 8003e70:	19db      	adds	r3, r3, r7
 8003e72:	2210      	movs	r2, #16
 8003e74:	701a      	strb	r2, [r3, #0]
 8003e76:	e098      	b.n	8003faa <UART_SetConfig+0x246>
 8003e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a7b      	ldr	r2, [pc, #492]	@ (800406c <UART_SetConfig+0x308>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d131      	bne.n	8003ee6 <UART_SetConfig+0x182>
 8003e82:	4b79      	ldr	r3, [pc, #484]	@ (8004068 <UART_SetConfig+0x304>)
 8003e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e86:	220c      	movs	r2, #12
 8003e88:	4013      	ands	r3, r2
 8003e8a:	2b0c      	cmp	r3, #12
 8003e8c:	d01d      	beq.n	8003eca <UART_SetConfig+0x166>
 8003e8e:	d823      	bhi.n	8003ed8 <UART_SetConfig+0x174>
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d00c      	beq.n	8003eae <UART_SetConfig+0x14a>
 8003e94:	d820      	bhi.n	8003ed8 <UART_SetConfig+0x174>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <UART_SetConfig+0x13c>
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d00e      	beq.n	8003ebc <UART_SetConfig+0x158>
 8003e9e:	e01b      	b.n	8003ed8 <UART_SetConfig+0x174>
 8003ea0:	231b      	movs	r3, #27
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	189b      	adds	r3, r3, r2
 8003ea6:	19db      	adds	r3, r3, r7
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	701a      	strb	r2, [r3, #0]
 8003eac:	e07d      	b.n	8003faa <UART_SetConfig+0x246>
 8003eae:	231b      	movs	r3, #27
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	189b      	adds	r3, r3, r2
 8003eb4:	19db      	adds	r3, r3, r7
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	701a      	strb	r2, [r3, #0]
 8003eba:	e076      	b.n	8003faa <UART_SetConfig+0x246>
 8003ebc:	231b      	movs	r3, #27
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	189b      	adds	r3, r3, r2
 8003ec2:	19db      	adds	r3, r3, r7
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	701a      	strb	r2, [r3, #0]
 8003ec8:	e06f      	b.n	8003faa <UART_SetConfig+0x246>
 8003eca:	231b      	movs	r3, #27
 8003ecc:	2220      	movs	r2, #32
 8003ece:	189b      	adds	r3, r3, r2
 8003ed0:	19db      	adds	r3, r3, r7
 8003ed2:	2208      	movs	r2, #8
 8003ed4:	701a      	strb	r2, [r3, #0]
 8003ed6:	e068      	b.n	8003faa <UART_SetConfig+0x246>
 8003ed8:	231b      	movs	r3, #27
 8003eda:	2220      	movs	r2, #32
 8003edc:	189b      	adds	r3, r3, r2
 8003ede:	19db      	adds	r3, r3, r7
 8003ee0:	2210      	movs	r2, #16
 8003ee2:	701a      	strb	r2, [r3, #0]
 8003ee4:	e061      	b.n	8003faa <UART_SetConfig+0x246>
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a61      	ldr	r2, [pc, #388]	@ (8004070 <UART_SetConfig+0x30c>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d106      	bne.n	8003efe <UART_SetConfig+0x19a>
 8003ef0:	231b      	movs	r3, #27
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	189b      	adds	r3, r3, r2
 8003ef6:	19db      	adds	r3, r3, r7
 8003ef8:	2200      	movs	r2, #0
 8003efa:	701a      	strb	r2, [r3, #0]
 8003efc:	e055      	b.n	8003faa <UART_SetConfig+0x246>
 8003efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a5c      	ldr	r2, [pc, #368]	@ (8004074 <UART_SetConfig+0x310>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d106      	bne.n	8003f16 <UART_SetConfig+0x1b2>
 8003f08:	231b      	movs	r3, #27
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	189b      	adds	r3, r3, r2
 8003f0e:	19db      	adds	r3, r3, r7
 8003f10:	2200      	movs	r2, #0
 8003f12:	701a      	strb	r2, [r3, #0]
 8003f14:	e049      	b.n	8003faa <UART_SetConfig+0x246>
 8003f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a50      	ldr	r2, [pc, #320]	@ (800405c <UART_SetConfig+0x2f8>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d13e      	bne.n	8003f9e <UART_SetConfig+0x23a>
 8003f20:	4b51      	ldr	r3, [pc, #324]	@ (8004068 <UART_SetConfig+0x304>)
 8003f22:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f24:	23c0      	movs	r3, #192	@ 0xc0
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	4013      	ands	r3, r2
 8003f2a:	22c0      	movs	r2, #192	@ 0xc0
 8003f2c:	0112      	lsls	r2, r2, #4
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d027      	beq.n	8003f82 <UART_SetConfig+0x21e>
 8003f32:	22c0      	movs	r2, #192	@ 0xc0
 8003f34:	0112      	lsls	r2, r2, #4
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d82a      	bhi.n	8003f90 <UART_SetConfig+0x22c>
 8003f3a:	2280      	movs	r2, #128	@ 0x80
 8003f3c:	0112      	lsls	r2, r2, #4
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d011      	beq.n	8003f66 <UART_SetConfig+0x202>
 8003f42:	2280      	movs	r2, #128	@ 0x80
 8003f44:	0112      	lsls	r2, r2, #4
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d822      	bhi.n	8003f90 <UART_SetConfig+0x22c>
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d004      	beq.n	8003f58 <UART_SetConfig+0x1f4>
 8003f4e:	2280      	movs	r2, #128	@ 0x80
 8003f50:	00d2      	lsls	r2, r2, #3
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00e      	beq.n	8003f74 <UART_SetConfig+0x210>
 8003f56:	e01b      	b.n	8003f90 <UART_SetConfig+0x22c>
 8003f58:	231b      	movs	r3, #27
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	189b      	adds	r3, r3, r2
 8003f5e:	19db      	adds	r3, r3, r7
 8003f60:	2200      	movs	r2, #0
 8003f62:	701a      	strb	r2, [r3, #0]
 8003f64:	e021      	b.n	8003faa <UART_SetConfig+0x246>
 8003f66:	231b      	movs	r3, #27
 8003f68:	2220      	movs	r2, #32
 8003f6a:	189b      	adds	r3, r3, r2
 8003f6c:	19db      	adds	r3, r3, r7
 8003f6e:	2202      	movs	r2, #2
 8003f70:	701a      	strb	r2, [r3, #0]
 8003f72:	e01a      	b.n	8003faa <UART_SetConfig+0x246>
 8003f74:	231b      	movs	r3, #27
 8003f76:	2220      	movs	r2, #32
 8003f78:	189b      	adds	r3, r3, r2
 8003f7a:	19db      	adds	r3, r3, r7
 8003f7c:	2204      	movs	r2, #4
 8003f7e:	701a      	strb	r2, [r3, #0]
 8003f80:	e013      	b.n	8003faa <UART_SetConfig+0x246>
 8003f82:	231b      	movs	r3, #27
 8003f84:	2220      	movs	r2, #32
 8003f86:	189b      	adds	r3, r3, r2
 8003f88:	19db      	adds	r3, r3, r7
 8003f8a:	2208      	movs	r2, #8
 8003f8c:	701a      	strb	r2, [r3, #0]
 8003f8e:	e00c      	b.n	8003faa <UART_SetConfig+0x246>
 8003f90:	231b      	movs	r3, #27
 8003f92:	2220      	movs	r2, #32
 8003f94:	189b      	adds	r3, r3, r2
 8003f96:	19db      	adds	r3, r3, r7
 8003f98:	2210      	movs	r2, #16
 8003f9a:	701a      	strb	r2, [r3, #0]
 8003f9c:	e005      	b.n	8003faa <UART_SetConfig+0x246>
 8003f9e:	231b      	movs	r3, #27
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	189b      	adds	r3, r3, r2
 8003fa4:	19db      	adds	r3, r3, r7
 8003fa6:	2210      	movs	r2, #16
 8003fa8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a2b      	ldr	r2, [pc, #172]	@ (800405c <UART_SetConfig+0x2f8>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d000      	beq.n	8003fb6 <UART_SetConfig+0x252>
 8003fb4:	e0a9      	b.n	800410a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fb6:	231b      	movs	r3, #27
 8003fb8:	2220      	movs	r2, #32
 8003fba:	189b      	adds	r3, r3, r2
 8003fbc:	19db      	adds	r3, r3, r7
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d015      	beq.n	8003ff0 <UART_SetConfig+0x28c>
 8003fc4:	dc18      	bgt.n	8003ff8 <UART_SetConfig+0x294>
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d00d      	beq.n	8003fe6 <UART_SetConfig+0x282>
 8003fca:	dc15      	bgt.n	8003ff8 <UART_SetConfig+0x294>
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <UART_SetConfig+0x272>
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d005      	beq.n	8003fe0 <UART_SetConfig+0x27c>
 8003fd4:	e010      	b.n	8003ff8 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fd6:	f7fe fb51 	bl	800267c <HAL_RCC_GetPCLK1Freq>
 8003fda:	0003      	movs	r3, r0
 8003fdc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003fde:	e014      	b.n	800400a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fe0:	4b25      	ldr	r3, [pc, #148]	@ (8004078 <UART_SetConfig+0x314>)
 8003fe2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003fe4:	e011      	b.n	800400a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fe6:	f7fe fabd 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 8003fea:	0003      	movs	r3, r0
 8003fec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003fee:	e00c      	b.n	800400a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ff0:	2380      	movs	r3, #128	@ 0x80
 8003ff2:	021b      	lsls	r3, r3, #8
 8003ff4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003ff6:	e008      	b.n	800400a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003ffc:	231a      	movs	r3, #26
 8003ffe:	2220      	movs	r2, #32
 8004000:	189b      	adds	r3, r3, r2
 8004002:	19db      	adds	r3, r3, r7
 8004004:	2201      	movs	r2, #1
 8004006:	701a      	strb	r2, [r3, #0]
        break;
 8004008:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800400a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800400c:	2b00      	cmp	r3, #0
 800400e:	d100      	bne.n	8004012 <UART_SetConfig+0x2ae>
 8004010:	e14b      	b.n	80042aa <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004014:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004016:	4b19      	ldr	r3, [pc, #100]	@ (800407c <UART_SetConfig+0x318>)
 8004018:	0052      	lsls	r2, r2, #1
 800401a:	5ad3      	ldrh	r3, [r2, r3]
 800401c:	0019      	movs	r1, r3
 800401e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004020:	f7fc f870 	bl	8000104 <__udivsi3>
 8004024:	0003      	movs	r3, r0
 8004026:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	0013      	movs	r3, r2
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	189b      	adds	r3, r3, r2
 8004032:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004034:	429a      	cmp	r2, r3
 8004036:	d305      	bcc.n	8004044 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800403e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004040:	429a      	cmp	r2, r3
 8004042:	d91d      	bls.n	8004080 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004044:	231a      	movs	r3, #26
 8004046:	2220      	movs	r2, #32
 8004048:	189b      	adds	r3, r3, r2
 800404a:	19db      	adds	r3, r3, r7
 800404c:	2201      	movs	r2, #1
 800404e:	701a      	strb	r2, [r3, #0]
 8004050:	e12b      	b.n	80042aa <UART_SetConfig+0x546>
 8004052:	46c0      	nop			@ (mov r8, r8)
 8004054:	cfff69f3 	.word	0xcfff69f3
 8004058:	ffffcfff 	.word	0xffffcfff
 800405c:	40008000 	.word	0x40008000
 8004060:	11fff4ff 	.word	0x11fff4ff
 8004064:	40013800 	.word	0x40013800
 8004068:	40021000 	.word	0x40021000
 800406c:	40004400 	.word	0x40004400
 8004070:	40004800 	.word	0x40004800
 8004074:	40004c00 	.word	0x40004c00
 8004078:	00f42400 	.word	0x00f42400
 800407c:	08004aa0 	.word	0x08004aa0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004082:	61bb      	str	r3, [r7, #24]
 8004084:	2300      	movs	r3, #0
 8004086:	61fb      	str	r3, [r7, #28]
 8004088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800408c:	4b92      	ldr	r3, [pc, #584]	@ (80042d8 <UART_SetConfig+0x574>)
 800408e:	0052      	lsls	r2, r2, #1
 8004090:	5ad3      	ldrh	r3, [r2, r3]
 8004092:	613b      	str	r3, [r7, #16]
 8004094:	2300      	movs	r3, #0
 8004096:	617b      	str	r3, [r7, #20]
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	69b8      	ldr	r0, [r7, #24]
 800409e:	69f9      	ldr	r1, [r7, #28]
 80040a0:	f7fc f9a6 	bl	80003f0 <__aeabi_uldivmod>
 80040a4:	0002      	movs	r2, r0
 80040a6:	000b      	movs	r3, r1
 80040a8:	0e11      	lsrs	r1, r2, #24
 80040aa:	021d      	lsls	r5, r3, #8
 80040ac:	430d      	orrs	r5, r1
 80040ae:	0214      	lsls	r4, r2, #8
 80040b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	085b      	lsrs	r3, r3, #1
 80040b6:	60bb      	str	r3, [r7, #8]
 80040b8:	2300      	movs	r3, #0
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	68b8      	ldr	r0, [r7, #8]
 80040be:	68f9      	ldr	r1, [r7, #12]
 80040c0:	1900      	adds	r0, r0, r4
 80040c2:	4169      	adcs	r1, r5
 80040c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	603b      	str	r3, [r7, #0]
 80040ca:	2300      	movs	r3, #0
 80040cc:	607b      	str	r3, [r7, #4]
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f7fc f98d 	bl	80003f0 <__aeabi_uldivmod>
 80040d6:	0002      	movs	r2, r0
 80040d8:	000b      	movs	r3, r1
 80040da:	0013      	movs	r3, r2
 80040dc:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040e0:	23c0      	movs	r3, #192	@ 0xc0
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d309      	bcc.n	80040fc <UART_SetConfig+0x398>
 80040e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040ea:	2380      	movs	r3, #128	@ 0x80
 80040ec:	035b      	lsls	r3, r3, #13
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d204      	bcs.n	80040fc <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80040f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040f8:	60da      	str	r2, [r3, #12]
 80040fa:	e0d6      	b.n	80042aa <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80040fc:	231a      	movs	r3, #26
 80040fe:	2220      	movs	r2, #32
 8004100:	189b      	adds	r3, r3, r2
 8004102:	19db      	adds	r3, r3, r7
 8004104:	2201      	movs	r2, #1
 8004106:	701a      	strb	r2, [r3, #0]
 8004108:	e0cf      	b.n	80042aa <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410c:	69da      	ldr	r2, [r3, #28]
 800410e:	2380      	movs	r3, #128	@ 0x80
 8004110:	021b      	lsls	r3, r3, #8
 8004112:	429a      	cmp	r2, r3
 8004114:	d000      	beq.n	8004118 <UART_SetConfig+0x3b4>
 8004116:	e070      	b.n	80041fa <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8004118:	231b      	movs	r3, #27
 800411a:	2220      	movs	r2, #32
 800411c:	189b      	adds	r3, r3, r2
 800411e:	19db      	adds	r3, r3, r7
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b08      	cmp	r3, #8
 8004124:	d015      	beq.n	8004152 <UART_SetConfig+0x3ee>
 8004126:	dc18      	bgt.n	800415a <UART_SetConfig+0x3f6>
 8004128:	2b04      	cmp	r3, #4
 800412a:	d00d      	beq.n	8004148 <UART_SetConfig+0x3e4>
 800412c:	dc15      	bgt.n	800415a <UART_SetConfig+0x3f6>
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <UART_SetConfig+0x3d4>
 8004132:	2b02      	cmp	r3, #2
 8004134:	d005      	beq.n	8004142 <UART_SetConfig+0x3de>
 8004136:	e010      	b.n	800415a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004138:	f7fe faa0 	bl	800267c <HAL_RCC_GetPCLK1Freq>
 800413c:	0003      	movs	r3, r0
 800413e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004140:	e014      	b.n	800416c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004142:	4b66      	ldr	r3, [pc, #408]	@ (80042dc <UART_SetConfig+0x578>)
 8004144:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004146:	e011      	b.n	800416c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004148:	f7fe fa0c 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 800414c:	0003      	movs	r3, r0
 800414e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004150:	e00c      	b.n	800416c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004152:	2380      	movs	r3, #128	@ 0x80
 8004154:	021b      	lsls	r3, r3, #8
 8004156:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004158:	e008      	b.n	800416c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800415e:	231a      	movs	r3, #26
 8004160:	2220      	movs	r2, #32
 8004162:	189b      	adds	r3, r3, r2
 8004164:	19db      	adds	r3, r3, r7
 8004166:	2201      	movs	r2, #1
 8004168:	701a      	strb	r2, [r3, #0]
        break;
 800416a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800416c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800416e:	2b00      	cmp	r3, #0
 8004170:	d100      	bne.n	8004174 <UART_SetConfig+0x410>
 8004172:	e09a      	b.n	80042aa <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004176:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004178:	4b57      	ldr	r3, [pc, #348]	@ (80042d8 <UART_SetConfig+0x574>)
 800417a:	0052      	lsls	r2, r2, #1
 800417c:	5ad3      	ldrh	r3, [r2, r3]
 800417e:	0019      	movs	r1, r3
 8004180:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004182:	f7fb ffbf 	bl	8000104 <__udivsi3>
 8004186:	0003      	movs	r3, r0
 8004188:	005a      	lsls	r2, r3, #1
 800418a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	085b      	lsrs	r3, r3, #1
 8004190:	18d2      	adds	r2, r2, r3
 8004192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	0019      	movs	r1, r3
 8004198:	0010      	movs	r0, r2
 800419a:	f7fb ffb3 	bl	8000104 <__udivsi3>
 800419e:	0003      	movs	r3, r0
 80041a0:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a4:	2b0f      	cmp	r3, #15
 80041a6:	d921      	bls.n	80041ec <UART_SetConfig+0x488>
 80041a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041aa:	2380      	movs	r3, #128	@ 0x80
 80041ac:	025b      	lsls	r3, r3, #9
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d21c      	bcs.n	80041ec <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	200e      	movs	r0, #14
 80041b8:	2420      	movs	r4, #32
 80041ba:	1903      	adds	r3, r0, r4
 80041bc:	19db      	adds	r3, r3, r7
 80041be:	210f      	movs	r1, #15
 80041c0:	438a      	bics	r2, r1
 80041c2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c6:	085b      	lsrs	r3, r3, #1
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2207      	movs	r2, #7
 80041cc:	4013      	ands	r3, r2
 80041ce:	b299      	uxth	r1, r3
 80041d0:	1903      	adds	r3, r0, r4
 80041d2:	19db      	adds	r3, r3, r7
 80041d4:	1902      	adds	r2, r0, r4
 80041d6:	19d2      	adds	r2, r2, r7
 80041d8:	8812      	ldrh	r2, [r2, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80041de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	1902      	adds	r2, r0, r4
 80041e4:	19d2      	adds	r2, r2, r7
 80041e6:	8812      	ldrh	r2, [r2, #0]
 80041e8:	60da      	str	r2, [r3, #12]
 80041ea:	e05e      	b.n	80042aa <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80041ec:	231a      	movs	r3, #26
 80041ee:	2220      	movs	r2, #32
 80041f0:	189b      	adds	r3, r3, r2
 80041f2:	19db      	adds	r3, r3, r7
 80041f4:	2201      	movs	r2, #1
 80041f6:	701a      	strb	r2, [r3, #0]
 80041f8:	e057      	b.n	80042aa <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041fa:	231b      	movs	r3, #27
 80041fc:	2220      	movs	r2, #32
 80041fe:	189b      	adds	r3, r3, r2
 8004200:	19db      	adds	r3, r3, r7
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	2b08      	cmp	r3, #8
 8004206:	d015      	beq.n	8004234 <UART_SetConfig+0x4d0>
 8004208:	dc18      	bgt.n	800423c <UART_SetConfig+0x4d8>
 800420a:	2b04      	cmp	r3, #4
 800420c:	d00d      	beq.n	800422a <UART_SetConfig+0x4c6>
 800420e:	dc15      	bgt.n	800423c <UART_SetConfig+0x4d8>
 8004210:	2b00      	cmp	r3, #0
 8004212:	d002      	beq.n	800421a <UART_SetConfig+0x4b6>
 8004214:	2b02      	cmp	r3, #2
 8004216:	d005      	beq.n	8004224 <UART_SetConfig+0x4c0>
 8004218:	e010      	b.n	800423c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800421a:	f7fe fa2f 	bl	800267c <HAL_RCC_GetPCLK1Freq>
 800421e:	0003      	movs	r3, r0
 8004220:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004222:	e014      	b.n	800424e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004224:	4b2d      	ldr	r3, [pc, #180]	@ (80042dc <UART_SetConfig+0x578>)
 8004226:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004228:	e011      	b.n	800424e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800422a:	f7fe f99b 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 800422e:	0003      	movs	r3, r0
 8004230:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004232:	e00c      	b.n	800424e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004234:	2380      	movs	r3, #128	@ 0x80
 8004236:	021b      	lsls	r3, r3, #8
 8004238:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800423a:	e008      	b.n	800424e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004240:	231a      	movs	r3, #26
 8004242:	2220      	movs	r2, #32
 8004244:	189b      	adds	r3, r3, r2
 8004246:	19db      	adds	r3, r3, r7
 8004248:	2201      	movs	r2, #1
 800424a:	701a      	strb	r2, [r3, #0]
        break;
 800424c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800424e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004250:	2b00      	cmp	r3, #0
 8004252:	d02a      	beq.n	80042aa <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004256:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004258:	4b1f      	ldr	r3, [pc, #124]	@ (80042d8 <UART_SetConfig+0x574>)
 800425a:	0052      	lsls	r2, r2, #1
 800425c:	5ad3      	ldrh	r3, [r2, r3]
 800425e:	0019      	movs	r1, r3
 8004260:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004262:	f7fb ff4f 	bl	8000104 <__udivsi3>
 8004266:	0003      	movs	r3, r0
 8004268:	001a      	movs	r2, r3
 800426a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	085b      	lsrs	r3, r3, #1
 8004270:	18d2      	adds	r2, r2, r3
 8004272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	0019      	movs	r1, r3
 8004278:	0010      	movs	r0, r2
 800427a:	f7fb ff43 	bl	8000104 <__udivsi3>
 800427e:	0003      	movs	r3, r0
 8004280:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004284:	2b0f      	cmp	r3, #15
 8004286:	d90a      	bls.n	800429e <UART_SetConfig+0x53a>
 8004288:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800428a:	2380      	movs	r3, #128	@ 0x80
 800428c:	025b      	lsls	r3, r3, #9
 800428e:	429a      	cmp	r2, r3
 8004290:	d205      	bcs.n	800429e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004294:	b29a      	uxth	r2, r3
 8004296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60da      	str	r2, [r3, #12]
 800429c:	e005      	b.n	80042aa <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800429e:	231a      	movs	r3, #26
 80042a0:	2220      	movs	r2, #32
 80042a2:	189b      	adds	r3, r3, r2
 80042a4:	19db      	adds	r3, r3, r7
 80042a6:	2201      	movs	r2, #1
 80042a8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80042aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ac:	226a      	movs	r2, #106	@ 0x6a
 80042ae:	2101      	movs	r1, #1
 80042b0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80042b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b4:	2268      	movs	r2, #104	@ 0x68
 80042b6:	2101      	movs	r1, #1
 80042b8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042bc:	2200      	movs	r2, #0
 80042be:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80042c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c2:	2200      	movs	r2, #0
 80042c4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80042c6:	231a      	movs	r3, #26
 80042c8:	2220      	movs	r2, #32
 80042ca:	189b      	adds	r3, r3, r2
 80042cc:	19db      	adds	r3, r3, r7
 80042ce:	781b      	ldrb	r3, [r3, #0]
}
 80042d0:	0018      	movs	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	b010      	add	sp, #64	@ 0x40
 80042d6:	bdb0      	pop	{r4, r5, r7, pc}
 80042d8:	08004aa0 	.word	0x08004aa0
 80042dc:	00f42400 	.word	0x00f42400

080042e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ec:	2208      	movs	r2, #8
 80042ee:	4013      	ands	r3, r2
 80042f0:	d00b      	beq.n	800430a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	4a4a      	ldr	r2, [pc, #296]	@ (8004424 <UART_AdvFeatureConfig+0x144>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	0019      	movs	r1, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430e:	2201      	movs	r2, #1
 8004310:	4013      	ands	r3, r2
 8004312:	d00b      	beq.n	800432c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	4a43      	ldr	r2, [pc, #268]	@ (8004428 <UART_AdvFeatureConfig+0x148>)
 800431c:	4013      	ands	r3, r2
 800431e:	0019      	movs	r1, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004330:	2202      	movs	r2, #2
 8004332:	4013      	ands	r3, r2
 8004334:	d00b      	beq.n	800434e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	4a3b      	ldr	r2, [pc, #236]	@ (800442c <UART_AdvFeatureConfig+0x14c>)
 800433e:	4013      	ands	r3, r2
 8004340:	0019      	movs	r1, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004352:	2204      	movs	r2, #4
 8004354:	4013      	ands	r3, r2
 8004356:	d00b      	beq.n	8004370 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	4a34      	ldr	r2, [pc, #208]	@ (8004430 <UART_AdvFeatureConfig+0x150>)
 8004360:	4013      	ands	r3, r2
 8004362:	0019      	movs	r1, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004374:	2210      	movs	r2, #16
 8004376:	4013      	ands	r3, r2
 8004378:	d00b      	beq.n	8004392 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	4a2c      	ldr	r2, [pc, #176]	@ (8004434 <UART_AdvFeatureConfig+0x154>)
 8004382:	4013      	ands	r3, r2
 8004384:	0019      	movs	r1, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004396:	2220      	movs	r2, #32
 8004398:	4013      	ands	r3, r2
 800439a:	d00b      	beq.n	80043b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	4a25      	ldr	r2, [pc, #148]	@ (8004438 <UART_AdvFeatureConfig+0x158>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	0019      	movs	r1, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b8:	2240      	movs	r2, #64	@ 0x40
 80043ba:	4013      	ands	r3, r2
 80043bc:	d01d      	beq.n	80043fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	4a1d      	ldr	r2, [pc, #116]	@ (800443c <UART_AdvFeatureConfig+0x15c>)
 80043c6:	4013      	ands	r3, r2
 80043c8:	0019      	movs	r1, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043da:	2380      	movs	r3, #128	@ 0x80
 80043dc:	035b      	lsls	r3, r3, #13
 80043de:	429a      	cmp	r2, r3
 80043e0:	d10b      	bne.n	80043fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	4a15      	ldr	r2, [pc, #84]	@ (8004440 <UART_AdvFeatureConfig+0x160>)
 80043ea:	4013      	ands	r3, r2
 80043ec:	0019      	movs	r1, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043fe:	2280      	movs	r2, #128	@ 0x80
 8004400:	4013      	ands	r3, r2
 8004402:	d00b      	beq.n	800441c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	4a0e      	ldr	r2, [pc, #56]	@ (8004444 <UART_AdvFeatureConfig+0x164>)
 800440c:	4013      	ands	r3, r2
 800440e:	0019      	movs	r1, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	605a      	str	r2, [r3, #4]
  }
}
 800441c:	46c0      	nop			@ (mov r8, r8)
 800441e:	46bd      	mov	sp, r7
 8004420:	b002      	add	sp, #8
 8004422:	bd80      	pop	{r7, pc}
 8004424:	ffff7fff 	.word	0xffff7fff
 8004428:	fffdffff 	.word	0xfffdffff
 800442c:	fffeffff 	.word	0xfffeffff
 8004430:	fffbffff 	.word	0xfffbffff
 8004434:	ffffefff 	.word	0xffffefff
 8004438:	ffffdfff 	.word	0xffffdfff
 800443c:	ffefffff 	.word	0xffefffff
 8004440:	ff9fffff 	.word	0xff9fffff
 8004444:	fff7ffff 	.word	0xfff7ffff

08004448 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b092      	sub	sp, #72	@ 0x48
 800444c:	af02      	add	r7, sp, #8
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2290      	movs	r2, #144	@ 0x90
 8004454:	2100      	movs	r1, #0
 8004456:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004458:	f7fd f898 	bl	800158c <HAL_GetTick>
 800445c:	0003      	movs	r3, r0
 800445e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2208      	movs	r2, #8
 8004468:	4013      	ands	r3, r2
 800446a:	2b08      	cmp	r3, #8
 800446c:	d12d      	bne.n	80044ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800446e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004470:	2280      	movs	r2, #128	@ 0x80
 8004472:	0391      	lsls	r1, r2, #14
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	4a47      	ldr	r2, [pc, #284]	@ (8004594 <UART_CheckIdleState+0x14c>)
 8004478:	9200      	str	r2, [sp, #0]
 800447a:	2200      	movs	r2, #0
 800447c:	f000 f88e 	bl	800459c <UART_WaitOnFlagUntilTimeout>
 8004480:	1e03      	subs	r3, r0, #0
 8004482:	d022      	beq.n	80044ca <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004484:	f3ef 8310 	mrs	r3, PRIMASK
 8004488:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800448c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800448e:	2301      	movs	r3, #1
 8004490:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004494:	f383 8810 	msr	PRIMASK, r3
}
 8004498:	46c0      	nop			@ (mov r8, r8)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2180      	movs	r1, #128	@ 0x80
 80044a6:	438a      	bics	r2, r1
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b0:	f383 8810 	msr	PRIMASK, r3
}
 80044b4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2288      	movs	r2, #136	@ 0x88
 80044ba:	2120      	movs	r1, #32
 80044bc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2284      	movs	r2, #132	@ 0x84
 80044c2:	2100      	movs	r1, #0
 80044c4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e060      	b.n	800458c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2204      	movs	r2, #4
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	d146      	bne.n	8004566 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044da:	2280      	movs	r2, #128	@ 0x80
 80044dc:	03d1      	lsls	r1, r2, #15
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	4a2c      	ldr	r2, [pc, #176]	@ (8004594 <UART_CheckIdleState+0x14c>)
 80044e2:	9200      	str	r2, [sp, #0]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f000 f859 	bl	800459c <UART_WaitOnFlagUntilTimeout>
 80044ea:	1e03      	subs	r3, r0, #0
 80044ec:	d03b      	beq.n	8004566 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ee:	f3ef 8310 	mrs	r3, PRIMASK
 80044f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80044f4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80044f8:	2301      	movs	r3, #1
 80044fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f383 8810 	msr	PRIMASK, r3
}
 8004502:	46c0      	nop			@ (mov r8, r8)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4922      	ldr	r1, [pc, #136]	@ (8004598 <UART_CheckIdleState+0x150>)
 8004510:	400a      	ands	r2, r1
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004516:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f383 8810 	msr	PRIMASK, r3
}
 800451e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004520:	f3ef 8310 	mrs	r3, PRIMASK
 8004524:	61bb      	str	r3, [r7, #24]
  return(result);
 8004526:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004528:	633b      	str	r3, [r7, #48]	@ 0x30
 800452a:	2301      	movs	r3, #1
 800452c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	f383 8810 	msr	PRIMASK, r3
}
 8004534:	46c0      	nop			@ (mov r8, r8)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2101      	movs	r1, #1
 8004542:	438a      	bics	r2, r1
 8004544:	609a      	str	r2, [r3, #8]
 8004546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004548:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	f383 8810 	msr	PRIMASK, r3
}
 8004550:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	228c      	movs	r2, #140	@ 0x8c
 8004556:	2120      	movs	r1, #32
 8004558:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2284      	movs	r2, #132	@ 0x84
 800455e:	2100      	movs	r1, #0
 8004560:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e012      	b.n	800458c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2288      	movs	r2, #136	@ 0x88
 800456a:	2120      	movs	r1, #32
 800456c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	228c      	movs	r2, #140	@ 0x8c
 8004572:	2120      	movs	r1, #32
 8004574:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2284      	movs	r2, #132	@ 0x84
 8004586:	2100      	movs	r1, #0
 8004588:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	0018      	movs	r0, r3
 800458e:	46bd      	mov	sp, r7
 8004590:	b010      	add	sp, #64	@ 0x40
 8004592:	bd80      	pop	{r7, pc}
 8004594:	01ffffff 	.word	0x01ffffff
 8004598:	fffffedf 	.word	0xfffffedf

0800459c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	1dfb      	adds	r3, r7, #7
 80045aa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ac:	e051      	b.n	8004652 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	3301      	adds	r3, #1
 80045b2:	d04e      	beq.n	8004652 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b4:	f7fc ffea 	bl	800158c <HAL_GetTick>
 80045b8:	0002      	movs	r2, r0
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d302      	bcc.n	80045ca <UART_WaitOnFlagUntilTimeout+0x2e>
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e051      	b.n	8004672 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2204      	movs	r2, #4
 80045d6:	4013      	ands	r3, r2
 80045d8:	d03b      	beq.n	8004652 <UART_WaitOnFlagUntilTimeout+0xb6>
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b80      	cmp	r3, #128	@ 0x80
 80045de:	d038      	beq.n	8004652 <UART_WaitOnFlagUntilTimeout+0xb6>
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b40      	cmp	r3, #64	@ 0x40
 80045e4:	d035      	beq.n	8004652 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	2208      	movs	r2, #8
 80045ee:	4013      	ands	r3, r2
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d111      	bne.n	8004618 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2208      	movs	r2, #8
 80045fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	0018      	movs	r0, r3
 8004600:	f000 f83c 	bl	800467c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2290      	movs	r2, #144	@ 0x90
 8004608:	2108      	movs	r1, #8
 800460a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2284      	movs	r2, #132	@ 0x84
 8004610:	2100      	movs	r1, #0
 8004612:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e02c      	b.n	8004672 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	69da      	ldr	r2, [r3, #28]
 800461e:	2380      	movs	r3, #128	@ 0x80
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	401a      	ands	r2, r3
 8004624:	2380      	movs	r3, #128	@ 0x80
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	429a      	cmp	r2, r3
 800462a:	d112      	bne.n	8004652 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2280      	movs	r2, #128	@ 0x80
 8004632:	0112      	lsls	r2, r2, #4
 8004634:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	0018      	movs	r0, r3
 800463a:	f000 f81f 	bl	800467c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2290      	movs	r2, #144	@ 0x90
 8004642:	2120      	movs	r1, #32
 8004644:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2284      	movs	r2, #132	@ 0x84
 800464a:	2100      	movs	r1, #0
 800464c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e00f      	b.n	8004672 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	4013      	ands	r3, r2
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	425a      	negs	r2, r3
 8004662:	4153      	adcs	r3, r2
 8004664:	b2db      	uxtb	r3, r3
 8004666:	001a      	movs	r2, r3
 8004668:	1dfb      	adds	r3, r7, #7
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d09e      	beq.n	80045ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	0018      	movs	r0, r3
 8004674:	46bd      	mov	sp, r7
 8004676:	b004      	add	sp, #16
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08e      	sub	sp, #56	@ 0x38
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004684:	f3ef 8310 	mrs	r3, PRIMASK
 8004688:	617b      	str	r3, [r7, #20]
  return(result);
 800468a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800468c:	637b      	str	r3, [r7, #52]	@ 0x34
 800468e:	2301      	movs	r3, #1
 8004690:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	f383 8810 	msr	PRIMASK, r3
}
 8004698:	46c0      	nop			@ (mov r8, r8)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4926      	ldr	r1, [pc, #152]	@ (8004740 <UART_EndRxTransfer+0xc4>)
 80046a6:	400a      	ands	r2, r1
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	f383 8810 	msr	PRIMASK, r3
}
 80046b4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046b6:	f3ef 8310 	mrs	r3, PRIMASK
 80046ba:	623b      	str	r3, [r7, #32]
  return(result);
 80046bc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80046be:	633b      	str	r3, [r7, #48]	@ 0x30
 80046c0:	2301      	movs	r3, #1
 80046c2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c6:	f383 8810 	msr	PRIMASK, r3
}
 80046ca:	46c0      	nop			@ (mov r8, r8)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	491b      	ldr	r1, [pc, #108]	@ (8004744 <UART_EndRxTransfer+0xc8>)
 80046d8:	400a      	ands	r2, r1
 80046da:	609a      	str	r2, [r3, #8]
 80046dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046de:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e2:	f383 8810 	msr	PRIMASK, r3
}
 80046e6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d118      	bne.n	8004722 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046f0:	f3ef 8310 	mrs	r3, PRIMASK
 80046f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80046f6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046fa:	2301      	movs	r3, #1
 80046fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f383 8810 	msr	PRIMASK, r3
}
 8004704:	46c0      	nop			@ (mov r8, r8)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2110      	movs	r1, #16
 8004712:	438a      	bics	r2, r1
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004718:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	f383 8810 	msr	PRIMASK, r3
}
 8004720:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	228c      	movs	r2, #140	@ 0x8c
 8004726:	2120      	movs	r1, #32
 8004728:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004736:	46c0      	nop			@ (mov r8, r8)
 8004738:	46bd      	mov	sp, r7
 800473a:	b00e      	add	sp, #56	@ 0x38
 800473c:	bd80      	pop	{r7, pc}
 800473e:	46c0      	nop			@ (mov r8, r8)
 8004740:	fffffedf 	.word	0xfffffedf
 8004744:	effffffe 	.word	0xeffffffe

08004748 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2284      	movs	r2, #132	@ 0x84
 8004754:	5c9b      	ldrb	r3, [r3, r2]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <HAL_UARTEx_DisableFifoMode+0x16>
 800475a:	2302      	movs	r3, #2
 800475c:	e027      	b.n	80047ae <HAL_UARTEx_DisableFifoMode+0x66>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2284      	movs	r2, #132	@ 0x84
 8004762:	2101      	movs	r1, #1
 8004764:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2288      	movs	r2, #136	@ 0x88
 800476a:	2124      	movs	r1, #36	@ 0x24
 800476c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2101      	movs	r1, #1
 8004782:	438a      	bics	r2, r1
 8004784:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4a0b      	ldr	r2, [pc, #44]	@ (80047b8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800478a:	4013      	ands	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2288      	movs	r2, #136	@ 0x88
 80047a0:	2120      	movs	r1, #32
 80047a2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2284      	movs	r2, #132	@ 0x84
 80047a8:	2100      	movs	r1, #0
 80047aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	0018      	movs	r0, r3
 80047b0:	46bd      	mov	sp, r7
 80047b2:	b004      	add	sp, #16
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	46c0      	nop			@ (mov r8, r8)
 80047b8:	dfffffff 	.word	0xdfffffff

080047bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2284      	movs	r2, #132	@ 0x84
 80047ca:	5c9b      	ldrb	r3, [r3, r2]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e02e      	b.n	8004832 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2284      	movs	r2, #132	@ 0x84
 80047d8:	2101      	movs	r1, #1
 80047da:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2288      	movs	r2, #136	@ 0x88
 80047e0:	2124      	movs	r1, #36	@ 0x24
 80047e2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2101      	movs	r1, #1
 80047f8:	438a      	bics	r2, r1
 80047fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	08d9      	lsrs	r1, r3, #3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	0018      	movs	r0, r3
 8004814:	f000 f854 	bl	80048c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2288      	movs	r2, #136	@ 0x88
 8004824:	2120      	movs	r1, #32
 8004826:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2284      	movs	r2, #132	@ 0x84
 800482c:	2100      	movs	r1, #0
 800482e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	0018      	movs	r0, r3
 8004834:	46bd      	mov	sp, r7
 8004836:	b004      	add	sp, #16
 8004838:	bd80      	pop	{r7, pc}
	...

0800483c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2284      	movs	r2, #132	@ 0x84
 800484a:	5c9b      	ldrb	r3, [r3, r2]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d101      	bne.n	8004854 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004850:	2302      	movs	r3, #2
 8004852:	e02f      	b.n	80048b4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2284      	movs	r2, #132	@ 0x84
 8004858:	2101      	movs	r1, #1
 800485a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2288      	movs	r2, #136	@ 0x88
 8004860:	2124      	movs	r1, #36	@ 0x24
 8004862:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2101      	movs	r1, #1
 8004878:	438a      	bics	r2, r1
 800487a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	4a0e      	ldr	r2, [pc, #56]	@ (80048bc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004884:	4013      	ands	r3, r2
 8004886:	0019      	movs	r1, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	0018      	movs	r0, r3
 8004896:	f000 f813 	bl	80048c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2288      	movs	r2, #136	@ 0x88
 80048a6:	2120      	movs	r1, #32
 80048a8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2284      	movs	r2, #132	@ 0x84
 80048ae:	2100      	movs	r1, #0
 80048b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	0018      	movs	r0, r3
 80048b6:	46bd      	mov	sp, r7
 80048b8:	b004      	add	sp, #16
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	f1ffffff 	.word	0xf1ffffff

080048c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80048c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d108      	bne.n	80048e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	226a      	movs	r2, #106	@ 0x6a
 80048d4:	2101      	movs	r1, #1
 80048d6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2268      	movs	r2, #104	@ 0x68
 80048dc:	2101      	movs	r1, #1
 80048de:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80048e0:	e043      	b.n	800496a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80048e2:	260f      	movs	r6, #15
 80048e4:	19bb      	adds	r3, r7, r6
 80048e6:	2208      	movs	r2, #8
 80048e8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80048ea:	200e      	movs	r0, #14
 80048ec:	183b      	adds	r3, r7, r0
 80048ee:	2208      	movs	r2, #8
 80048f0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	0e5b      	lsrs	r3, r3, #25
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	240d      	movs	r4, #13
 80048fe:	193b      	adds	r3, r7, r4
 8004900:	2107      	movs	r1, #7
 8004902:	400a      	ands	r2, r1
 8004904:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	0f5b      	lsrs	r3, r3, #29
 800490e:	b2da      	uxtb	r2, r3
 8004910:	250c      	movs	r5, #12
 8004912:	197b      	adds	r3, r7, r5
 8004914:	2107      	movs	r1, #7
 8004916:	400a      	ands	r2, r1
 8004918:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800491a:	183b      	adds	r3, r7, r0
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	197a      	adds	r2, r7, r5
 8004920:	7812      	ldrb	r2, [r2, #0]
 8004922:	4914      	ldr	r1, [pc, #80]	@ (8004974 <UARTEx_SetNbDataToProcess+0xb4>)
 8004924:	5c8a      	ldrb	r2, [r1, r2]
 8004926:	435a      	muls	r2, r3
 8004928:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800492a:	197b      	adds	r3, r7, r5
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	4a12      	ldr	r2, [pc, #72]	@ (8004978 <UARTEx_SetNbDataToProcess+0xb8>)
 8004930:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004932:	0019      	movs	r1, r3
 8004934:	f7fb fc70 	bl	8000218 <__divsi3>
 8004938:	0003      	movs	r3, r0
 800493a:	b299      	uxth	r1, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	226a      	movs	r2, #106	@ 0x6a
 8004940:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004942:	19bb      	adds	r3, r7, r6
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	193a      	adds	r2, r7, r4
 8004948:	7812      	ldrb	r2, [r2, #0]
 800494a:	490a      	ldr	r1, [pc, #40]	@ (8004974 <UARTEx_SetNbDataToProcess+0xb4>)
 800494c:	5c8a      	ldrb	r2, [r1, r2]
 800494e:	435a      	muls	r2, r3
 8004950:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004952:	193b      	adds	r3, r7, r4
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	4a08      	ldr	r2, [pc, #32]	@ (8004978 <UARTEx_SetNbDataToProcess+0xb8>)
 8004958:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800495a:	0019      	movs	r1, r3
 800495c:	f7fb fc5c 	bl	8000218 <__divsi3>
 8004960:	0003      	movs	r3, r0
 8004962:	b299      	uxth	r1, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2268      	movs	r2, #104	@ 0x68
 8004968:	5299      	strh	r1, [r3, r2]
}
 800496a:	46c0      	nop			@ (mov r8, r8)
 800496c:	46bd      	mov	sp, r7
 800496e:	b005      	add	sp, #20
 8004970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004972:	46c0      	nop			@ (mov r8, r8)
 8004974:	08004ab8 	.word	0x08004ab8
 8004978:	08004ac0 	.word	0x08004ac0

0800497c <memset>:
 800497c:	0003      	movs	r3, r0
 800497e:	1882      	adds	r2, r0, r2
 8004980:	4293      	cmp	r3, r2
 8004982:	d100      	bne.n	8004986 <memset+0xa>
 8004984:	4770      	bx	lr
 8004986:	7019      	strb	r1, [r3, #0]
 8004988:	3301      	adds	r3, #1
 800498a:	e7f9      	b.n	8004980 <memset+0x4>

0800498c <__libc_init_array>:
 800498c:	b570      	push	{r4, r5, r6, lr}
 800498e:	2600      	movs	r6, #0
 8004990:	4c0c      	ldr	r4, [pc, #48]	@ (80049c4 <__libc_init_array+0x38>)
 8004992:	4d0d      	ldr	r5, [pc, #52]	@ (80049c8 <__libc_init_array+0x3c>)
 8004994:	1b64      	subs	r4, r4, r5
 8004996:	10a4      	asrs	r4, r4, #2
 8004998:	42a6      	cmp	r6, r4
 800499a:	d109      	bne.n	80049b0 <__libc_init_array+0x24>
 800499c:	2600      	movs	r6, #0
 800499e:	f000 f819 	bl	80049d4 <_init>
 80049a2:	4c0a      	ldr	r4, [pc, #40]	@ (80049cc <__libc_init_array+0x40>)
 80049a4:	4d0a      	ldr	r5, [pc, #40]	@ (80049d0 <__libc_init_array+0x44>)
 80049a6:	1b64      	subs	r4, r4, r5
 80049a8:	10a4      	asrs	r4, r4, #2
 80049aa:	42a6      	cmp	r6, r4
 80049ac:	d105      	bne.n	80049ba <__libc_init_array+0x2e>
 80049ae:	bd70      	pop	{r4, r5, r6, pc}
 80049b0:	00b3      	lsls	r3, r6, #2
 80049b2:	58eb      	ldr	r3, [r5, r3]
 80049b4:	4798      	blx	r3
 80049b6:	3601      	adds	r6, #1
 80049b8:	e7ee      	b.n	8004998 <__libc_init_array+0xc>
 80049ba:	00b3      	lsls	r3, r6, #2
 80049bc:	58eb      	ldr	r3, [r5, r3]
 80049be:	4798      	blx	r3
 80049c0:	3601      	adds	r6, #1
 80049c2:	e7f2      	b.n	80049aa <__libc_init_array+0x1e>
 80049c4:	08004ad0 	.word	0x08004ad0
 80049c8:	08004ad0 	.word	0x08004ad0
 80049cc:	08004ad4 	.word	0x08004ad4
 80049d0:	08004ad0 	.word	0x08004ad0

080049d4 <_init>:
 80049d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d6:	46c0      	nop			@ (mov r8, r8)
 80049d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049da:	bc08      	pop	{r3}
 80049dc:	469e      	mov	lr, r3
 80049de:	4770      	bx	lr

080049e0 <_fini>:
 80049e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e2:	46c0      	nop			@ (mov r8, r8)
 80049e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049e6:	bc08      	pop	{r3}
 80049e8:	469e      	mov	lr, r3
 80049ea:	4770      	bx	lr
