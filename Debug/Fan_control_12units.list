
Fan_control_12units.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005210  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080052cc  080052cc  000062cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053a8  080053a8  00007024  2**0
                  CONTENTS
  4 .ARM          00000008  080053a8  080053a8  000063a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053b0  080053b0  00007024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053b0  080053b0  000063b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053b4  080053b4  000063b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  080053b8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000024  080053dc  00007024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  080053dc  000072d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166e6  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000321f  00000000  00000000  0001d732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  00020958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fb0  00000000  00000000  00021d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aceb  00000000  00000000  00022cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab26  00000000  00000000  0003d9e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab036  00000000  00000000  00058509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010353f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000482c  00000000  00000000  00103584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00107db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000024 	.word	0x20000024
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080052b4 	.word	0x080052b4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000028 	.word	0x20000028
 8000100:	080052b4 	.word	0x080052b4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b08b      	sub	sp, #44	@ 0x2c
 8000620:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	2414      	movs	r4, #20
 8000624:	193b      	adds	r3, r7, r4
 8000626:	0018      	movs	r0, r3
 8000628:	2314      	movs	r3, #20
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f004 fe15 	bl	800525c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000632:	4b74      	ldr	r3, [pc, #464]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 8000634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000636:	4b73      	ldr	r3, [pc, #460]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 8000638:	2104      	movs	r1, #4
 800063a:	430a      	orrs	r2, r1
 800063c:	635a      	str	r2, [r3, #52]	@ 0x34
 800063e:	4b71      	ldr	r3, [pc, #452]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 8000640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000642:	2204      	movs	r2, #4
 8000644:	4013      	ands	r3, r2
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800064a:	4b6e      	ldr	r3, [pc, #440]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 800064c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800064e:	4b6d      	ldr	r3, [pc, #436]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 8000650:	2120      	movs	r1, #32
 8000652:	430a      	orrs	r2, r1
 8000654:	635a      	str	r2, [r3, #52]	@ 0x34
 8000656:	4b6b      	ldr	r3, [pc, #428]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 8000658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800065a:	2220      	movs	r2, #32
 800065c:	4013      	ands	r3, r2
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b68      	ldr	r3, [pc, #416]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 8000664:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000666:	4b67      	ldr	r3, [pc, #412]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 8000668:	2101      	movs	r1, #1
 800066a:	430a      	orrs	r2, r1
 800066c:	635a      	str	r2, [r3, #52]	@ 0x34
 800066e:	4b65      	ldr	r3, [pc, #404]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 8000670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000672:	2201      	movs	r2, #1
 8000674:	4013      	ands	r3, r2
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b62      	ldr	r3, [pc, #392]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 800067c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800067e:	4b61      	ldr	r3, [pc, #388]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 8000680:	2102      	movs	r1, #2
 8000682:	430a      	orrs	r2, r1
 8000684:	635a      	str	r2, [r3, #52]	@ 0x34
 8000686:	4b5f      	ldr	r3, [pc, #380]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 8000688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800068a:	2202      	movs	r2, #2
 800068c:	4013      	ands	r3, r2
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000692:	4b5c      	ldr	r3, [pc, #368]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 8000694:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000696:	4b5b      	ldr	r3, [pc, #364]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 8000698:	2108      	movs	r1, #8
 800069a:	430a      	orrs	r2, r1
 800069c:	635a      	str	r2, [r3, #52]	@ 0x34
 800069e:	4b59      	ldr	r3, [pc, #356]	@ (8000804 <MX_GPIO_Init+0x1e8>)
 80006a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006a2:	2208      	movs	r2, #8
 80006a4:	4013      	ands	r3, r2
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MC_LED_GPIO_Port, MC_LED_Pin, GPIO_PIN_SET);
 80006aa:	23a0      	movs	r3, #160	@ 0xa0
 80006ac:	05db      	lsls	r3, r3, #23
 80006ae:	2201      	movs	r2, #1
 80006b0:	2120      	movs	r1, #32
 80006b2:	0018      	movs	r0, r3
 80006b4:	f001 fade 	bl	8001c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MC_Tach_OUT_0_Pin|MC_Tach_OUT_1_Pin|MC_Tach_OUT_2_Pin|MC_Tach_OUT_3_Pin
 80006b8:	23fc      	movs	r3, #252	@ 0xfc
 80006ba:	021b      	lsls	r3, r3, #8
 80006bc:	4852      	ldr	r0, [pc, #328]	@ (8000808 <MX_GPIO_Init+0x1ec>)
 80006be:	2200      	movs	r2, #0
 80006c0:	0019      	movs	r1, r3
 80006c2:	f001 fad7 	bl	8001c74 <HAL_GPIO_WritePin>
                          |MC_Tach_OUT_4_Pin|MC_Tach_OUT_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FAN_Tach_IN_11_Pin|FAN_Tach_IN_0_Pin|FAN_Tach_IN_1_Pin|FAN_Tach_IN_2_Pin
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	4a50      	ldr	r2, [pc, #320]	@ (800080c <MX_GPIO_Init+0x1f0>)
 80006ca:	601a      	str	r2, [r3, #0]
                          |FAN_Tach_IN_3_Pin|FAN_Tach_IN_4_Pin|FAN_Tach_IN_5_Pin|FAN_Tach_IN_6_Pin
                          |FAN_Tach_IN_7_Pin|FAN_Tach_IN_8_Pin|FAN_Tach_IN_9_Pin|FAN_Tach_IN_10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	2288      	movs	r2, #136	@ 0x88
 80006d0:	0352      	lsls	r2, r2, #13
 80006d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	2201      	movs	r2, #1
 80006d8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	4a4c      	ldr	r2, [pc, #304]	@ (8000810 <MX_GPIO_Init+0x1f4>)
 80006de:	0019      	movs	r1, r3
 80006e0:	0010      	movs	r0, r2
 80006e2:	f001 f963 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80006e6:	0021      	movs	r1, r4
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	22d0      	movs	r2, #208	@ 0xd0
 80006ec:	0212      	lsls	r2, r2, #8
 80006ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f0:	000c      	movs	r4, r1
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	2203      	movs	r2, #3
 80006f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	4a43      	ldr	r2, [pc, #268]	@ (8000810 <MX_GPIO_Init+0x1f4>)
 8000702:	0019      	movs	r1, r3
 8000704:	0010      	movs	r0, r2
 8000706:	f001 f951 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800070a:	193b      	adds	r3, r7, r4
 800070c:	2207      	movs	r2, #7
 800070e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000710:	193b      	adds	r3, r7, r4
 8000712:	2203      	movs	r2, #3
 8000714:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	193b      	adds	r3, r7, r4
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800071c:	193b      	adds	r3, r7, r4
 800071e:	4a3d      	ldr	r2, [pc, #244]	@ (8000814 <MX_GPIO_Init+0x1f8>)
 8000720:	0019      	movs	r1, r3
 8000722:	0010      	movs	r0, r2
 8000724:	f001 f942 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA6 PA7 PA8
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000728:	193b      	adds	r3, r7, r4
 800072a:	4a3b      	ldr	r2, [pc, #236]	@ (8000818 <MX_GPIO_Init+0x1fc>)
 800072c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800072e:	193b      	adds	r3, r7, r4
 8000730:	2203      	movs	r2, #3
 8000732:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073a:	193a      	adds	r2, r7, r4
 800073c:	23a0      	movs	r3, #160	@ 0xa0
 800073e:	05db      	lsls	r3, r3, #23
 8000740:	0011      	movs	r1, r2
 8000742:	0018      	movs	r0, r3
 8000744:	f001 f932 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MC_LED_Pin;
 8000748:	193b      	adds	r3, r7, r4
 800074a:	2220      	movs	r2, #32
 800074c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074e:	193b      	adds	r3, r7, r4
 8000750:	2201      	movs	r2, #1
 8000752:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	193b      	adds	r3, r7, r4
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	193b      	adds	r3, r7, r4
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MC_LED_GPIO_Port, &GPIO_InitStruct);
 8000760:	193a      	adds	r2, r7, r4
 8000762:	23a0      	movs	r3, #160	@ 0xa0
 8000764:	05db      	lsls	r3, r3, #23
 8000766:	0011      	movs	r1, r2
 8000768:	0018      	movs	r0, r3
 800076a:	f001 f91f 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_9;
 800076e:	193b      	adds	r3, r7, r4
 8000770:	4a2a      	ldr	r2, [pc, #168]	@ (800081c <MX_GPIO_Init+0x200>)
 8000772:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000774:	193b      	adds	r3, r7, r4
 8000776:	2203      	movs	r2, #3
 8000778:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	193b      	adds	r3, r7, r4
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000780:	193b      	adds	r3, r7, r4
 8000782:	4a21      	ldr	r2, [pc, #132]	@ (8000808 <MX_GPIO_Init+0x1ec>)
 8000784:	0019      	movs	r1, r3
 8000786:	0010      	movs	r0, r2
 8000788:	f001 f910 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = MC_Tach_OUT_0_Pin|MC_Tach_OUT_1_Pin|MC_Tach_OUT_2_Pin|MC_Tach_OUT_3_Pin
 800078c:	0021      	movs	r1, r4
 800078e:	187b      	adds	r3, r7, r1
 8000790:	22fc      	movs	r2, #252	@ 0xfc
 8000792:	0212      	lsls	r2, r2, #8
 8000794:	601a      	str	r2, [r3, #0]
                          |MC_Tach_OUT_4_Pin|MC_Tach_OUT_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	000c      	movs	r4, r1
 8000798:	193b      	adds	r3, r7, r4
 800079a:	2201      	movs	r2, #1
 800079c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	4a16      	ldr	r2, [pc, #88]	@ (8000808 <MX_GPIO_Init+0x1ec>)
 80007ae:	0019      	movs	r1, r3
 80007b0:	0010      	movs	r0, r2
 80007b2:	f001 f8fb 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6;
 80007b6:	0021      	movs	r1, r4
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	22d0      	movs	r2, #208	@ 0xd0
 80007bc:	0092      	lsls	r2, r2, #2
 80007be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c0:	000c      	movs	r4, r1
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	2203      	movs	r2, #3
 80007c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	4a13      	ldr	r2, [pc, #76]	@ (8000820 <MX_GPIO_Init+0x204>)
 80007d2:	0019      	movs	r1, r3
 80007d4:	0010      	movs	r0, r2
 80007d6:	f001 f8e9 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = Buf_PWM_IN_0_Pin|Buf_PWM_IN_1_Pin|Buf_PWM_IN_2_Pin|Buf_PWM_IN_3_Pin
 80007da:	0021      	movs	r1, r4
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	223f      	movs	r2, #63	@ 0x3f
 80007e0:	601a      	str	r2, [r3, #0]
                          |Buf_PWM_IN_4_Pin|Buf_PWM_IN_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2200      	movs	r2, #0
 80007e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000820 <MX_GPIO_Init+0x204>)
 80007f2:	0019      	movs	r1, r3
 80007f4:	0010      	movs	r0, r2
 80007f6:	f001 f8d9 	bl	80019ac <HAL_GPIO_Init>

}
 80007fa:	46c0      	nop			@ (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b00b      	add	sp, #44	@ 0x2c
 8000800:	bd90      	pop	{r4, r7, pc}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	40021000 	.word	0x40021000
 8000808:	50000400 	.word	0x50000400
 800080c:	00000fff 	.word	0x00000fff
 8000810:	50000800 	.word	0x50000800
 8000814:	50001400 	.word	0x50001400
 8000818:	000081df 	.word	0x000081df
 800081c:	00000207 	.word	0x00000207
 8000820:	50000c00 	.word	0x50000c00

08000824 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000828:	4b1b      	ldr	r3, [pc, #108]	@ (8000898 <MX_I2C2_Init+0x74>)
 800082a:	4a1c      	ldr	r2, [pc, #112]	@ (800089c <MX_I2C2_Init+0x78>)
 800082c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10B17DB5;
 800082e:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <MX_I2C2_Init+0x74>)
 8000830:	4a1b      	ldr	r2, [pc, #108]	@ (80008a0 <MX_I2C2_Init+0x7c>)
 8000832:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000834:	4b18      	ldr	r3, [pc, #96]	@ (8000898 <MX_I2C2_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800083a:	4b17      	ldr	r3, [pc, #92]	@ (8000898 <MX_I2C2_Init+0x74>)
 800083c:	2201      	movs	r2, #1
 800083e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000840:	4b15      	ldr	r3, [pc, #84]	@ (8000898 <MX_I2C2_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000846:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <MX_I2C2_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800084c:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <MX_I2C2_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000852:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_I2C2_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000858:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <MX_I2C2_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_I2C2_Init+0x74>)
 8000860:	0018      	movs	r0, r3
 8000862:	f001 fa25 	bl	8001cb0 <HAL_I2C_Init>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d001      	beq.n	800086e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800086a:	f000 f90c 	bl	8000a86 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800086e:	4b0a      	ldr	r3, [pc, #40]	@ (8000898 <MX_I2C2_Init+0x74>)
 8000870:	2100      	movs	r1, #0
 8000872:	0018      	movs	r0, r3
 8000874:	f001 fac2 	bl	8001dfc <HAL_I2CEx_ConfigAnalogFilter>
 8000878:	1e03      	subs	r3, r0, #0
 800087a:	d001      	beq.n	8000880 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800087c:	f000 f903 	bl	8000a86 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000880:	4b05      	ldr	r3, [pc, #20]	@ (8000898 <MX_I2C2_Init+0x74>)
 8000882:	2100      	movs	r1, #0
 8000884:	0018      	movs	r0, r3
 8000886:	f001 fb05 	bl	8001e94 <HAL_I2CEx_ConfigDigitalFilter>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800088e:	f000 f8fa 	bl	8000a86 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000040 	.word	0x20000040
 800089c:	40005800 	.word	0x40005800
 80008a0:	10b17db5 	.word	0x10b17db5

080008a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b08b      	sub	sp, #44	@ 0x2c
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	2414      	movs	r4, #20
 80008ae:	193b      	adds	r3, r7, r4
 80008b0:	0018      	movs	r0, r3
 80008b2:	2314      	movs	r3, #20
 80008b4:	001a      	movs	r2, r3
 80008b6:	2100      	movs	r1, #0
 80008b8:	f004 fcd0 	bl	800525c <memset>
  if(i2cHandle->Instance==I2C2)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a1c      	ldr	r2, [pc, #112]	@ (8000934 <HAL_I2C_MspInit+0x90>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d131      	bne.n	800092a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <HAL_I2C_MspInit+0x94>)
 80008c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <HAL_I2C_MspInit+0x94>)
 80008cc:	2101      	movs	r1, #1
 80008ce:	430a      	orrs	r2, r1
 80008d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80008d2:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <HAL_I2C_MspInit+0x94>)
 80008d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008d6:	2201      	movs	r2, #1
 80008d8:	4013      	ands	r3, r2
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = MC_I2C_SCL_Pin|MC_I2C_SDA_Pin;
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	22c0      	movs	r2, #192	@ 0xc0
 80008e2:	0152      	lsls	r2, r2, #5
 80008e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e6:	0021      	movs	r1, r4
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2212      	movs	r2, #18
 80008ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2206      	movs	r2, #6
 80008fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	187a      	adds	r2, r7, r1
 8000902:	23a0      	movs	r3, #160	@ 0xa0
 8000904:	05db      	lsls	r3, r3, #23
 8000906:	0011      	movs	r1, r2
 8000908:	0018      	movs	r0, r3
 800090a:	f001 f84f 	bl	80019ac <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800090e:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <HAL_I2C_MspInit+0x94>)
 8000910:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <HAL_I2C_MspInit+0x94>)
 8000914:	2180      	movs	r1, #128	@ 0x80
 8000916:	03c9      	lsls	r1, r1, #15
 8000918:	430a      	orrs	r2, r1
 800091a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800091c:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <HAL_I2C_MspInit+0x94>)
 800091e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000920:	2380      	movs	r3, #128	@ 0x80
 8000922:	03db      	lsls	r3, r3, #15
 8000924:	4013      	ands	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800092a:	46c0      	nop			@ (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	b00b      	add	sp, #44	@ 0x2c
 8000930:	bd90      	pop	{r4, r7, pc}
 8000932:	46c0      	nop			@ (mov r8, r8)
 8000934:	40005800 	.word	0x40005800
 8000938:	40021000 	.word	0x40021000

0800093c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000940:	f000 fed0 	bl	80016e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000944:	f000 f83e 	bl	80009c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000948:	f7ff fe68 	bl	800061c <MX_GPIO_Init>
  MX_TIM3_Init();
 800094c:	f000 fabc 	bl	8000ec8 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000950:	f000 f9da 	bl	8000d08 <MX_TIM1_Init>
  MX_TIM16_Init();
 8000954:	f000 fb72 	bl	800103c <MX_TIM16_Init>
  MX_TIM17_Init();
 8000958:	f000 fbfa 	bl	8001150 <MX_TIM17_Init>
  MX_I2C2_Init();
 800095c:	f7ff ff62 	bl	8000824 <MX_I2C2_Init>
  MX_RTC_Init();
 8000960:	f000 f898 	bl	8000a94 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000964:	f000 fdde 	bl	8001524 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8000968:	f000 fb42 	bl	8000ff0 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // запуск PWM на необходимых каналах таймеров
 800096c:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <main+0x78>)
 800096e:	2104      	movs	r1, #4
 8000970:	0018      	movs	r0, r3
 8000972:	f002 fc25 	bl	80031c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000976:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <main+0x78>)
 8000978:	2108      	movs	r1, #8
 800097a:	0018      	movs	r0, r3
 800097c:	f002 fc20 	bl	80031c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000980:	4b0d      	ldr	r3, [pc, #52]	@ (80009b8 <main+0x7c>)
 8000982:	2100      	movs	r1, #0
 8000984:	0018      	movs	r0, r3
 8000986:	f002 fc1b 	bl	80031c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800098a:	4b0b      	ldr	r3, [pc, #44]	@ (80009b8 <main+0x7c>)
 800098c:	2104      	movs	r1, #4
 800098e:	0018      	movs	r0, r3
 8000990:	f002 fc16 	bl	80031c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000994:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <main+0x80>)
 8000996:	2100      	movs	r1, #0
 8000998:	0018      	movs	r0, r3
 800099a:	f002 fc11 	bl	80031c0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim17, TIM_CHANNEL_1);
 800099e:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <main+0x84>)
 80009a0:	2100      	movs	r1, #0
 80009a2:	0018      	movs	r0, r3
 80009a4:	f003 fc0e 	bl	80041c4 <HAL_TIMEx_PWMN_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  set_PWM();
 80009a8:	f000 f952 	bl	8000c50 <set_PWM>
	  adjust_PWM();
 80009ac:	f000 f974 	bl	8000c98 <adjust_PWM>
  {
 80009b0:	46c0      	nop			@ (mov r8, r8)
 80009b2:	e7f9      	b.n	80009a8 <main+0x6c>
 80009b4:	200000c0 	.word	0x200000c0
 80009b8:	2000010c 	.word	0x2000010c
 80009bc:	200001a4 	.word	0x200001a4
 80009c0:	200001f0 	.word	0x200001f0

080009c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b093      	sub	sp, #76	@ 0x4c
 80009c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ca:	2410      	movs	r4, #16
 80009cc:	193b      	adds	r3, r7, r4
 80009ce:	0018      	movs	r0, r3
 80009d0:	2338      	movs	r3, #56	@ 0x38
 80009d2:	001a      	movs	r2, r3
 80009d4:	2100      	movs	r1, #0
 80009d6:	f004 fc41 	bl	800525c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009da:	003b      	movs	r3, r7
 80009dc:	0018      	movs	r0, r3
 80009de:	2310      	movs	r3, #16
 80009e0:	001a      	movs	r2, r3
 80009e2:	2100      	movs	r1, #0
 80009e4:	f004 fc3a 	bl	800525c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e8:	2380      	movs	r3, #128	@ 0x80
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	0018      	movs	r0, r3
 80009ee:	f001 fa9d 	bl	8001f2c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	220a      	movs	r2, #10
 80009f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f8:	193b      	adds	r3, r7, r4
 80009fa:	2280      	movs	r2, #128	@ 0x80
 80009fc:	0052      	lsls	r2, r2, #1
 80009fe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000a00:	0021      	movs	r1, r4
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2240      	movs	r2, #64	@ 0x40
 8000a0c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2201      	movs	r2, #1
 8000a12:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2202      	movs	r2, #2
 8000a18:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2200      	movs	r2, #0
 8000a24:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2208      	movs	r2, #8
 8000a2a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2280      	movs	r2, #128	@ 0x80
 8000a30:	0292      	lsls	r2, r2, #10
 8000a32:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	22c0      	movs	r2, #192	@ 0xc0
 8000a38:	04d2      	lsls	r2, r2, #19
 8000a3a:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2280      	movs	r2, #128	@ 0x80
 8000a40:	0592      	lsls	r2, r2, #22
 8000a42:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	0018      	movs	r0, r3
 8000a48:	f001 fabc 	bl	8001fc4 <HAL_RCC_OscConfig>
 8000a4c:	1e03      	subs	r3, r0, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a50:	f000 f819 	bl	8000a86 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a54:	003b      	movs	r3, r7
 8000a56:	2207      	movs	r2, #7
 8000a58:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5a:	003b      	movs	r3, r7
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a60:	003b      	movs	r3, r7
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a66:	003b      	movs	r3, r7
 8000a68:	2200      	movs	r2, #0
 8000a6a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a6c:	003b      	movs	r3, r7
 8000a6e:	2102      	movs	r1, #2
 8000a70:	0018      	movs	r0, r3
 8000a72:	f001 fdc1 	bl	80025f8 <HAL_RCC_ClockConfig>
 8000a76:	1e03      	subs	r3, r0, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000a7a:	f000 f804 	bl	8000a86 <Error_Handler>
  }
}
 8000a7e:	46c0      	nop			@ (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b013      	add	sp, #76	@ 0x4c
 8000a84:	bd90      	pop	{r4, r7, pc}

08000a86 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8a:	b672      	cpsid	i
}
 8000a8c:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */

  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	e7fd      	b.n	8000a8e <Error_Handler+0x8>
	...

08000a94 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a98:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <MX_RTC_Init+0x68>)
 8000a9a:	4a19      	ldr	r2, [pc, #100]	@ (8000b00 <MX_RTC_Init+0x6c>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a9e:	4b17      	ldr	r3, [pc, #92]	@ (8000afc <MX_RTC_Init+0x68>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000aa4:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <MX_RTC_Init+0x68>)
 8000aa6:	227f      	movs	r2, #127	@ 0x7f
 8000aa8:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000aaa:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <MX_RTC_Init+0x68>)
 8000aac:	22ff      	movs	r2, #255	@ 0xff
 8000aae:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_WAKEUP;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <MX_RTC_Init+0x68>)
 8000ab2:	22c0      	movs	r2, #192	@ 0xc0
 8000ab4:	03d2      	lsls	r2, r2, #15
 8000ab6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ab8:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <MX_RTC_Init+0x68>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000abe:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <MX_RTC_Init+0x68>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8000afc <MX_RTC_Init+0x68>)
 8000ac6:	2280      	movs	r2, #128	@ 0x80
 8000ac8:	05d2      	lsls	r2, r2, #23
 8000aca:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000acc:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <MX_RTC_Init+0x68>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <MX_RTC_Init+0x68>)
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f002 f8f1 	bl	8002cbc <HAL_RTC_Init>
 8000ada:	1e03      	subs	r3, r0, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_RTC_Init+0x4e>
  {
    Error_Handler();
 8000ade:	f7ff ffd2 	bl	8000a86 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <MX_RTC_Init+0x68>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f002 fa35 	bl	8002f58 <HAL_RTCEx_SetWakeUpTimer>
 8000aee:	1e03      	subs	r3, r0, #0
 8000af0:	d001      	beq.n	8000af6 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000af2:	f7ff ffc8 	bl	8000a86 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000094 	.word	0x20000094
 8000b00:	40002800 	.word	0x40002800

08000b04 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000b04:	b590      	push	{r4, r7, lr}
 8000b06:	b091      	sub	sp, #68	@ 0x44
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b0c:	240c      	movs	r4, #12
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	0018      	movs	r0, r3
 8000b12:	2334      	movs	r3, #52	@ 0x34
 8000b14:	001a      	movs	r2, r3
 8000b16:	2100      	movs	r1, #0
 8000b18:	f004 fba0 	bl	800525c <memset>
  if(rtcHandle->Instance==RTC)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a15      	ldr	r2, [pc, #84]	@ (8000b78 <HAL_RTC_MspInit+0x74>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d124      	bne.n	8000b70 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b26:	193b      	adds	r3, r7, r4
 8000b28:	2280      	movs	r2, #128	@ 0x80
 8000b2a:	0292      	lsls	r2, r2, #10
 8000b2c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b2e:	193b      	adds	r3, r7, r4
 8000b30:	2280      	movs	r2, #128	@ 0x80
 8000b32:	0092      	lsls	r2, r2, #2
 8000b34:	631a      	str	r2, [r3, #48]	@ 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f001 ff07 	bl	800294c <HAL_RCCEx_PeriphCLKConfig>
 8000b3e:	1e03      	subs	r3, r0, #0
 8000b40:	d001      	beq.n	8000b46 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000b42:	f7ff ffa0 	bl	8000a86 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b46:	4b0d      	ldr	r3, [pc, #52]	@ (8000b7c <HAL_RTC_MspInit+0x78>)
 8000b48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <HAL_RTC_MspInit+0x78>)
 8000b4c:	2180      	movs	r1, #128	@ 0x80
 8000b4e:	0209      	lsls	r1, r1, #8
 8000b50:	430a      	orrs	r2, r1
 8000b52:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000b54:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <HAL_RTC_MspInit+0x78>)
 8000b56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b58:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <HAL_RTC_MspInit+0x78>)
 8000b5a:	2180      	movs	r1, #128	@ 0x80
 8000b5c:	00c9      	lsls	r1, r1, #3
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <HAL_RTC_MspInit+0x78>)
 8000b64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b66:	2380      	movs	r3, #128	@ 0x80
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000b70:	46c0      	nop			@ (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	b011      	add	sp, #68	@ 0x44
 8000b76:	bd90      	pop	{r4, r7, pc}
 8000b78:	40002800 	.word	0x40002800
 8000b7c:	40021000 	.word	0x40021000

08000b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc4 <HAL_MspInit+0x44>)
 8000b88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <HAL_MspInit+0x44>)
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b92:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <HAL_MspInit+0x44>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b96:	2201      	movs	r2, #1
 8000b98:	4013      	ands	r3, r2
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <HAL_MspInit+0x44>)
 8000ba0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ba2:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <HAL_MspInit+0x44>)
 8000ba4:	2180      	movs	r1, #128	@ 0x80
 8000ba6:	0549      	lsls	r1, r1, #21
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bac:	4b05      	ldr	r3, [pc, #20]	@ (8000bc4 <HAL_MspInit+0x44>)
 8000bae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bb0:	2380      	movs	r3, #128	@ 0x80
 8000bb2:	055b      	lsls	r3, r3, #21
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b002      	add	sp, #8
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	46c0      	nop			@ (mov r8, r8)
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bcc:	46c0      	nop			@ (mov r8, r8)
 8000bce:	e7fd      	b.n	8000bcc <NMI_Handler+0x4>

08000bd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd4:	46c0      	nop			@ (mov r8, r8)
 8000bd6:	e7fd      	b.n	8000bd4 <HardFault_Handler+0x4>

08000bd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bdc:	46c0      	nop			@ (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be6:	46c0      	nop			@ (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf0:	f000 fde2 	bl	80017b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf4:	46c0      	nop			@ (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c00:	4b03      	ldr	r3, [pc, #12]	@ (8000c10 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000c02:	0018      	movs	r0, r3
 8000c04:	f002 fbc6 	bl	8003394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000c08:	46c0      	nop			@ (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	46c0      	nop			@ (mov r8, r8)
 8000c10:	200000c0 	.word	0x200000c0

08000c14 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c18:	4b03      	ldr	r3, [pc, #12]	@ (8000c28 <TIM1_CC_IRQHandler+0x14>)
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f002 fbba 	bl	8003394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000c20:	46c0      	nop			@ (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	200000c0 	.word	0x200000c0

08000c2c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000c30:	4b03      	ldr	r3, [pc, #12]	@ (8000c40 <TIM14_IRQHandler+0x14>)
 8000c32:	0018      	movs	r0, r3
 8000c34:	f002 fbae 	bl	8003394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000c38:	46c0      	nop			@ (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	20000158 	.word	0x20000158

08000c44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c48:	46c0      	nop			@ (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <set_PWM>:
int pulse_width_MC_OUT_PWM_3 = 75;
int pulse_width_MC_OUT_PWM_4 = 59;
int pulse_width_MC_OUT_PWM_5 = 40;

void set_PWM()
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	pulse_width_MC_OUT_PWM_0 = 50;
 8000c54:	4b0a      	ldr	r3, [pc, #40]	@ (8000c80 <set_PWM+0x30>)
 8000c56:	2232      	movs	r2, #50	@ 0x32
 8000c58:	601a      	str	r2, [r3, #0]
	pulse_width_MC_OUT_PWM_1 = 50;
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c84 <set_PWM+0x34>)
 8000c5c:	2232      	movs	r2, #50	@ 0x32
 8000c5e:	601a      	str	r2, [r3, #0]
	pulse_width_MC_OUT_PWM_2 = 50;
 8000c60:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <set_PWM+0x38>)
 8000c62:	2232      	movs	r2, #50	@ 0x32
 8000c64:	601a      	str	r2, [r3, #0]
	pulse_width_MC_OUT_PWM_3 = 50;
 8000c66:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <set_PWM+0x3c>)
 8000c68:	2232      	movs	r2, #50	@ 0x32
 8000c6a:	601a      	str	r2, [r3, #0]
	pulse_width_MC_OUT_PWM_4 = 50;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <set_PWM+0x40>)
 8000c6e:	2232      	movs	r2, #50	@ 0x32
 8000c70:	601a      	str	r2, [r3, #0]
	pulse_width_MC_OUT_PWM_5 = 50;
 8000c72:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <set_PWM+0x44>)
 8000c74:	2232      	movs	r2, #50	@ 0x32
 8000c76:	601a      	str	r2, [r3, #0]

}
 8000c78:	46c0      	nop			@ (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	20000004 	.word	0x20000004
 8000c84:	20000008 	.word	0x20000008
 8000c88:	2000000c 	.word	0x2000000c
 8000c8c:	20000010 	.word	0x20000010
 8000c90:	20000014 	.word	0x20000014
 8000c94:	20000018 	.word	0x20000018

08000c98 <adjust_PWM>:

void adjust_PWM()
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_width_MC_OUT_PWM_0);
 8000c9c:	4b10      	ldr	r3, [pc, #64]	@ (8000ce0 <adjust_PWM+0x48>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b10      	ldr	r3, [pc, #64]	@ (8000ce4 <adjust_PWM+0x4c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	639a      	str	r2, [r3, #56]	@ 0x38
__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse_width_MC_OUT_PWM_3);
 8000ca6:	4b10      	ldr	r3, [pc, #64]	@ (8000ce8 <adjust_PWM+0x50>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <adjust_PWM+0x4c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	63da      	str	r2, [r3, #60]	@ 0x3c
__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse_width_MC_OUT_PWM_1);
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <adjust_PWM+0x54>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf0 <adjust_PWM+0x58>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	635a      	str	r2, [r3, #52]	@ 0x34
__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulse_width_MC_OUT_PWM_2);
 8000cba:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <adjust_PWM+0x5c>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <adjust_PWM+0x58>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	639a      	str	r2, [r3, #56]	@ 0x38
__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, pulse_width_MC_OUT_PWM_5);
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <adjust_PWM+0x60>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <adjust_PWM+0x64>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	635a      	str	r2, [r3, #52]	@ 0x34
__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, pulse_width_MC_OUT_PWM_4);
 8000cce:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <adjust_PWM+0x68>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d04 <adjust_PWM+0x6c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000cd8:	46c0      	nop			@ (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			@ (mov r8, r8)
 8000ce0:	20000004 	.word	0x20000004
 8000ce4:	200000c0 	.word	0x200000c0
 8000ce8:	20000010 	.word	0x20000010
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	2000010c 	.word	0x2000010c
 8000cf4:	2000000c 	.word	0x2000000c
 8000cf8:	20000018 	.word	0x20000018
 8000cfc:	200001a4 	.word	0x200001a4
 8000d00:	20000014 	.word	0x20000014
 8000d04:	200001f0 	.word	0x200001f0

08000d08 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b09c      	sub	sp, #112	@ 0x70
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d0e:	2360      	movs	r3, #96	@ 0x60
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	0018      	movs	r0, r3
 8000d14:	2310      	movs	r3, #16
 8000d16:	001a      	movs	r2, r3
 8000d18:	2100      	movs	r1, #0
 8000d1a:	f004 fa9f 	bl	800525c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d1e:	2354      	movs	r3, #84	@ 0x54
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	0018      	movs	r0, r3
 8000d24:	230c      	movs	r3, #12
 8000d26:	001a      	movs	r2, r3
 8000d28:	2100      	movs	r1, #0
 8000d2a:	f004 fa97 	bl	800525c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d2e:	2338      	movs	r3, #56	@ 0x38
 8000d30:	18fb      	adds	r3, r7, r3
 8000d32:	0018      	movs	r0, r3
 8000d34:	231c      	movs	r3, #28
 8000d36:	001a      	movs	r2, r3
 8000d38:	2100      	movs	r1, #0
 8000d3a:	f004 fa8f 	bl	800525c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	0018      	movs	r0, r3
 8000d42:	2334      	movs	r3, #52	@ 0x34
 8000d44:	001a      	movs	r2, r3
 8000d46:	2100      	movs	r1, #0
 8000d48:	f004 fa88 	bl	800525c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d4c:	4b5a      	ldr	r3, [pc, #360]	@ (8000eb8 <MX_TIM1_Init+0x1b0>)
 8000d4e:	4a5b      	ldr	r2, [pc, #364]	@ (8000ebc <MX_TIM1_Init+0x1b4>)
 8000d50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 26;
 8000d52:	4b59      	ldr	r3, [pc, #356]	@ (8000eb8 <MX_TIM1_Init+0x1b0>)
 8000d54:	221a      	movs	r2, #26
 8000d56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d58:	4b57      	ldr	r3, [pc, #348]	@ (8000eb8 <MX_TIM1_Init+0x1b0>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000d5e:	4b56      	ldr	r3, [pc, #344]	@ (8000eb8 <MX_TIM1_Init+0x1b0>)
 8000d60:	2263      	movs	r2, #99	@ 0x63
 8000d62:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d64:	4b54      	ldr	r3, [pc, #336]	@ (8000eb8 <MX_TIM1_Init+0x1b0>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d6a:	4b53      	ldr	r3, [pc, #332]	@ (8000eb8 <MX_TIM1_Init+0x1b0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d70:	4b51      	ldr	r3, [pc, #324]	@ (8000eb8 <MX_TIM1_Init+0x1b0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d76:	4b50      	ldr	r3, [pc, #320]	@ (8000eb8 <MX_TIM1_Init+0x1b0>)
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f002 f969 	bl	8003050 <HAL_TIM_Base_Init>
 8000d7e:	1e03      	subs	r3, r0, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000d82:	f7ff fe80 	bl	8000a86 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d86:	2160      	movs	r1, #96	@ 0x60
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	2280      	movs	r2, #128	@ 0x80
 8000d8c:	0152      	lsls	r2, r2, #5
 8000d8e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d90:	187a      	adds	r2, r7, r1
 8000d92:	4b49      	ldr	r3, [pc, #292]	@ (8000eb8 <MX_TIM1_Init+0x1b0>)
 8000d94:	0011      	movs	r1, r2
 8000d96:	0018      	movs	r0, r3
 8000d98:	f002 fd04 	bl	80037a4 <HAL_TIM_ConfigClockSource>
 8000d9c:	1e03      	subs	r3, r0, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000da0:	f7ff fe71 	bl	8000a86 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000da4:	4b44      	ldr	r3, [pc, #272]	@ (8000eb8 <MX_TIM1_Init+0x1b0>)
 8000da6:	0018      	movs	r0, r3
 8000da8:	f002 f9aa 	bl	8003100 <HAL_TIM_PWM_Init>
 8000dac:	1e03      	subs	r3, r0, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000db0:	f7ff fe69 	bl	8000a86 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db4:	2154      	movs	r1, #84	@ 0x54
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dc8:	187a      	adds	r2, r7, r1
 8000dca:	4b3b      	ldr	r3, [pc, #236]	@ (8000eb8 <MX_TIM1_Init+0x1b0>)
 8000dcc:	0011      	movs	r1, r2
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f003 fa9c 	bl	800430c <HAL_TIMEx_MasterConfigSynchronization>
 8000dd4:	1e03      	subs	r3, r0, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000dd8:	f7ff fe55 	bl	8000a86 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ddc:	2138      	movs	r1, #56	@ 0x38
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	2260      	movs	r2, #96	@ 0x60
 8000de2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = pulse_width_MC_OUT_PWM_0;
 8000de4:	4b36      	ldr	r3, [pc, #216]	@ (8000ec0 <MX_TIM1_Init+0x1b8>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	001a      	movs	r2, r3
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dfa:	187b      	adds	r3, r7, r1
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	2200      	movs	r2, #0
 8000e04:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e0c:	1879      	adds	r1, r7, r1
 8000e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb8 <MX_TIM1_Init+0x1b0>)
 8000e10:	2204      	movs	r2, #4
 8000e12:	0018      	movs	r0, r3
 8000e14:	f002 fbc6 	bl	80035a4 <HAL_TIM_PWM_ConfigChannel>
 8000e18:	1e03      	subs	r3, r0, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000e1c:	f7ff fe33 	bl	8000a86 <Error_Handler>
  }
  sConfigOC.Pulse = pulse_width_MC_OUT_PWM_3;
 8000e20:	4b28      	ldr	r3, [pc, #160]	@ (8000ec4 <MX_TIM1_Init+0x1bc>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	001a      	movs	r2, r3
 8000e26:	2138      	movs	r1, #56	@ 0x38
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	4b22      	ldr	r3, [pc, #136]	@ (8000eb8 <MX_TIM1_Init+0x1b0>)
 8000e30:	2208      	movs	r2, #8
 8000e32:	0018      	movs	r0, r3
 8000e34:	f002 fbb6 	bl	80035a4 <HAL_TIM_PWM_ConfigChannel>
 8000e38:	1e03      	subs	r3, r0, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000e3c:	f7ff fe23 	bl	8000a86 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2200      	movs	r2, #0
 8000e56:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2280      	movs	r2, #128	@ 0x80
 8000e62:	0192      	lsls	r2, r2, #6
 8000e64:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2200      	movs	r2, #0
 8000e70:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2200      	movs	r2, #0
 8000e76:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2280      	movs	r2, #128	@ 0x80
 8000e7c:	0492      	lsls	r2, r2, #18
 8000e7e:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2200      	movs	r2, #0
 8000e84:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2200      	movs	r2, #0
 8000e8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	2200      	movs	r2, #0
 8000e90:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e92:	1d3a      	adds	r2, r7, #4
 8000e94:	4b08      	ldr	r3, [pc, #32]	@ (8000eb8 <MX_TIM1_Init+0x1b0>)
 8000e96:	0011      	movs	r1, r2
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f003 faa5 	bl	80043e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e9e:	1e03      	subs	r3, r0, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM1_Init+0x19e>
  {
    Error_Handler();
 8000ea2:	f7ff fdf0 	bl	8000a86 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ea6:	4b04      	ldr	r3, [pc, #16]	@ (8000eb8 <MX_TIM1_Init+0x1b0>)
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f000 fa7f 	bl	80013ac <HAL_TIM_MspPostInit>

}
 8000eae:	46c0      	nop			@ (mov r8, r8)
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b01c      	add	sp, #112	@ 0x70
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	46c0      	nop			@ (mov r8, r8)
 8000eb8:	200000c0 	.word	0x200000c0
 8000ebc:	40012c00 	.word	0x40012c00
 8000ec0:	20000004 	.word	0x20000004
 8000ec4:	20000010 	.word	0x20000010

08000ec8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08e      	sub	sp, #56	@ 0x38
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ece:	2328      	movs	r3, #40	@ 0x28
 8000ed0:	18fb      	adds	r3, r7, r3
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	2310      	movs	r3, #16
 8000ed6:	001a      	movs	r2, r3
 8000ed8:	2100      	movs	r1, #0
 8000eda:	f004 f9bf 	bl	800525c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ede:	231c      	movs	r3, #28
 8000ee0:	18fb      	adds	r3, r7, r3
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	230c      	movs	r3, #12
 8000ee6:	001a      	movs	r2, r3
 8000ee8:	2100      	movs	r1, #0
 8000eea:	f004 f9b7 	bl	800525c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eee:	003b      	movs	r3, r7
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	231c      	movs	r3, #28
 8000ef4:	001a      	movs	r2, r3
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	f004 f9b0 	bl	800525c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000efc:	4b38      	ldr	r3, [pc, #224]	@ (8000fe0 <MX_TIM3_Init+0x118>)
 8000efe:	4a39      	ldr	r2, [pc, #228]	@ (8000fe4 <MX_TIM3_Init+0x11c>)
 8000f00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 26;
 8000f02:	4b37      	ldr	r3, [pc, #220]	@ (8000fe0 <MX_TIM3_Init+0x118>)
 8000f04:	221a      	movs	r2, #26
 8000f06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f08:	4b35      	ldr	r3, [pc, #212]	@ (8000fe0 <MX_TIM3_Init+0x118>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000f0e:	4b34      	ldr	r3, [pc, #208]	@ (8000fe0 <MX_TIM3_Init+0x118>)
 8000f10:	2263      	movs	r2, #99	@ 0x63
 8000f12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f14:	4b32      	ldr	r3, [pc, #200]	@ (8000fe0 <MX_TIM3_Init+0x118>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1a:	4b31      	ldr	r3, [pc, #196]	@ (8000fe0 <MX_TIM3_Init+0x118>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f20:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe0 <MX_TIM3_Init+0x118>)
 8000f22:	0018      	movs	r0, r3
 8000f24:	f002 f894 	bl	8003050 <HAL_TIM_Base_Init>
 8000f28:	1e03      	subs	r3, r0, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000f2c:	f7ff fdab 	bl	8000a86 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f30:	2128      	movs	r1, #40	@ 0x28
 8000f32:	187b      	adds	r3, r7, r1
 8000f34:	2280      	movs	r2, #128	@ 0x80
 8000f36:	0152      	lsls	r2, r2, #5
 8000f38:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f3a:	187a      	adds	r2, r7, r1
 8000f3c:	4b28      	ldr	r3, [pc, #160]	@ (8000fe0 <MX_TIM3_Init+0x118>)
 8000f3e:	0011      	movs	r1, r2
 8000f40:	0018      	movs	r0, r3
 8000f42:	f002 fc2f 	bl	80037a4 <HAL_TIM_ConfigClockSource>
 8000f46:	1e03      	subs	r3, r0, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000f4a:	f7ff fd9c 	bl	8000a86 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f4e:	4b24      	ldr	r3, [pc, #144]	@ (8000fe0 <MX_TIM3_Init+0x118>)
 8000f50:	0018      	movs	r0, r3
 8000f52:	f002 f8d5 	bl	8003100 <HAL_TIM_PWM_Init>
 8000f56:	1e03      	subs	r3, r0, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000f5a:	f7ff fd94 	bl	8000a86 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f5e:	211c      	movs	r1, #28
 8000f60:	187b      	adds	r3, r7, r1
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f66:	187b      	adds	r3, r7, r1
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f6c:	187a      	adds	r2, r7, r1
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe0 <MX_TIM3_Init+0x118>)
 8000f70:	0011      	movs	r1, r2
 8000f72:	0018      	movs	r0, r3
 8000f74:	f003 f9ca 	bl	800430c <HAL_TIMEx_MasterConfigSynchronization>
 8000f78:	1e03      	subs	r3, r0, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000f7c:	f7ff fd83 	bl	8000a86 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f80:	003b      	movs	r3, r7
 8000f82:	2260      	movs	r2, #96	@ 0x60
 8000f84:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = pulse_width_MC_OUT_PWM_1;
 8000f86:	4b18      	ldr	r3, [pc, #96]	@ (8000fe8 <MX_TIM3_Init+0x120>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	001a      	movs	r2, r3
 8000f8c:	003b      	movs	r3, r7
 8000f8e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f90:	003b      	movs	r3, r7
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f96:	003b      	movs	r3, r7
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f9c:	0039      	movs	r1, r7
 8000f9e:	4b10      	ldr	r3, [pc, #64]	@ (8000fe0 <MX_TIM3_Init+0x118>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f002 fafe 	bl	80035a4 <HAL_TIM_PWM_ConfigChannel>
 8000fa8:	1e03      	subs	r3, r0, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 8000fac:	f7ff fd6b 	bl	8000a86 <Error_Handler>
  }
  sConfigOC.Pulse = pulse_width_MC_OUT_PWM_2;
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <MX_TIM3_Init+0x124>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	001a      	movs	r2, r3
 8000fb6:	003b      	movs	r3, r7
 8000fb8:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fba:	0039      	movs	r1, r7
 8000fbc:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <MX_TIM3_Init+0x118>)
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f002 faef 	bl	80035a4 <HAL_TIM_PWM_ConfigChannel>
 8000fc6:	1e03      	subs	r3, r0, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8000fca:	f7ff fd5c 	bl	8000a86 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fce:	4b04      	ldr	r3, [pc, #16]	@ (8000fe0 <MX_TIM3_Init+0x118>)
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f000 f9eb 	bl	80013ac <HAL_TIM_MspPostInit>

}
 8000fd6:	46c0      	nop			@ (mov r8, r8)
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b00e      	add	sp, #56	@ 0x38
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			@ (mov r8, r8)
 8000fe0:	2000010c 	.word	0x2000010c
 8000fe4:	40000400 	.word	0x40000400
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	2000000c 	.word	0x2000000c

08000ff0 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <MX_TIM14_Init+0x40>)
 8000ff6:	4a0f      	ldr	r2, [pc, #60]	@ (8001034 <MX_TIM14_Init+0x44>)
 8000ff8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 15999;
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8001030 <MX_TIM14_Init+0x40>)
 8000ffc:	4a0e      	ldr	r2, [pc, #56]	@ (8001038 <MX_TIM14_Init+0x48>)
 8000ffe:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001000:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <MX_TIM14_Init+0x40>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 8001006:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <MX_TIM14_Init+0x40>)
 8001008:	2263      	movs	r2, #99	@ 0x63
 800100a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100c:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <MX_TIM14_Init+0x40>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001012:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <MX_TIM14_Init+0x40>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001018:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <MX_TIM14_Init+0x40>)
 800101a:	0018      	movs	r0, r3
 800101c:	f002 f818 	bl	8003050 <HAL_TIM_Base_Init>
 8001020:	1e03      	subs	r3, r0, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8001024:	f7ff fd2f 	bl	8000a86 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001028:	46c0      	nop			@ (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	46c0      	nop			@ (mov r8, r8)
 8001030:	20000158 	.word	0x20000158
 8001034:	40002000 	.word	0x40002000
 8001038:	00003e7f 	.word	0x00003e7f

0800103c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b094      	sub	sp, #80	@ 0x50
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001042:	2334      	movs	r3, #52	@ 0x34
 8001044:	18fb      	adds	r3, r7, r3
 8001046:	0018      	movs	r0, r3
 8001048:	231c      	movs	r3, #28
 800104a:	001a      	movs	r2, r3
 800104c:	2100      	movs	r1, #0
 800104e:	f004 f905 	bl	800525c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001052:	003b      	movs	r3, r7
 8001054:	0018      	movs	r0, r3
 8001056:	2334      	movs	r3, #52	@ 0x34
 8001058:	001a      	movs	r2, r3
 800105a:	2100      	movs	r1, #0
 800105c:	f004 f8fe 	bl	800525c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001060:	4b38      	ldr	r3, [pc, #224]	@ (8001144 <MX_TIM16_Init+0x108>)
 8001062:	4a39      	ldr	r2, [pc, #228]	@ (8001148 <MX_TIM16_Init+0x10c>)
 8001064:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 26;
 8001066:	4b37      	ldr	r3, [pc, #220]	@ (8001144 <MX_TIM16_Init+0x108>)
 8001068:	221a      	movs	r2, #26
 800106a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106c:	4b35      	ldr	r3, [pc, #212]	@ (8001144 <MX_TIM16_Init+0x108>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 99;
 8001072:	4b34      	ldr	r3, [pc, #208]	@ (8001144 <MX_TIM16_Init+0x108>)
 8001074:	2263      	movs	r2, #99	@ 0x63
 8001076:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001078:	4b32      	ldr	r3, [pc, #200]	@ (8001144 <MX_TIM16_Init+0x108>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800107e:	4b31      	ldr	r3, [pc, #196]	@ (8001144 <MX_TIM16_Init+0x108>)
 8001080:	2200      	movs	r2, #0
 8001082:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001084:	4b2f      	ldr	r3, [pc, #188]	@ (8001144 <MX_TIM16_Init+0x108>)
 8001086:	2200      	movs	r2, #0
 8001088:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800108a:	4b2e      	ldr	r3, [pc, #184]	@ (8001144 <MX_TIM16_Init+0x108>)
 800108c:	0018      	movs	r0, r3
 800108e:	f001 ffdf 	bl	8003050 <HAL_TIM_Base_Init>
 8001092:	1e03      	subs	r3, r0, #0
 8001094:	d001      	beq.n	800109a <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8001096:	f7ff fcf6 	bl	8000a86 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800109a:	4b2a      	ldr	r3, [pc, #168]	@ (8001144 <MX_TIM16_Init+0x108>)
 800109c:	0018      	movs	r0, r3
 800109e:	f002 f82f 	bl	8003100 <HAL_TIM_PWM_Init>
 80010a2:	1e03      	subs	r3, r0, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 80010a6:	f7ff fcee 	bl	8000a86 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010aa:	2134      	movs	r1, #52	@ 0x34
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	2260      	movs	r2, #96	@ 0x60
 80010b0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = pulse_width_MC_OUT_PWM_5;
 80010b2:	4b26      	ldr	r3, [pc, #152]	@ (800114c <MX_TIM16_Init+0x110>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	001a      	movs	r2, r3
 80010b8:	187b      	adds	r3, r7, r1
 80010ba:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	2200      	movs	r2, #0
 80010c6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010ce:	187b      	adds	r3, r7, r1
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010d4:	187b      	adds	r3, r7, r1
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010da:	1879      	adds	r1, r7, r1
 80010dc:	4b19      	ldr	r3, [pc, #100]	@ (8001144 <MX_TIM16_Init+0x108>)
 80010de:	2200      	movs	r2, #0
 80010e0:	0018      	movs	r0, r3
 80010e2:	f002 fa5f 	bl	80035a4 <HAL_TIM_PWM_ConfigChannel>
 80010e6:	1e03      	subs	r3, r0, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM16_Init+0xb2>
  {
    Error_Handler();
 80010ea:	f7ff fccc 	bl	8000a86 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010ee:	003b      	movs	r3, r7
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010f4:	003b      	movs	r3, r7
 80010f6:	2200      	movs	r2, #0
 80010f8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010fa:	003b      	movs	r3, r7
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001100:	003b      	movs	r3, r7
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001106:	003b      	movs	r3, r7
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800110c:	003b      	movs	r3, r7
 800110e:	2280      	movs	r2, #128	@ 0x80
 8001110:	0192      	lsls	r2, r2, #6
 8001112:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001114:	003b      	movs	r3, r7
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800111a:	003b      	movs	r3, r7
 800111c:	2200      	movs	r2, #0
 800111e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001120:	003a      	movs	r2, r7
 8001122:	4b08      	ldr	r3, [pc, #32]	@ (8001144 <MX_TIM16_Init+0x108>)
 8001124:	0011      	movs	r1, r2
 8001126:	0018      	movs	r0, r3
 8001128:	f003 f95e 	bl	80043e8 <HAL_TIMEx_ConfigBreakDeadTime>
 800112c:	1e03      	subs	r3, r0, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM16_Init+0xf8>
  {
    Error_Handler();
 8001130:	f7ff fca9 	bl	8000a86 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001134:	4b03      	ldr	r3, [pc, #12]	@ (8001144 <MX_TIM16_Init+0x108>)
 8001136:	0018      	movs	r0, r3
 8001138:	f000 f938 	bl	80013ac <HAL_TIM_MspPostInit>

}
 800113c:	46c0      	nop			@ (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	b014      	add	sp, #80	@ 0x50
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200001a4 	.word	0x200001a4
 8001148:	40014400 	.word	0x40014400
 800114c:	20000018 	.word	0x20000018

08001150 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b094      	sub	sp, #80	@ 0x50
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001156:	2334      	movs	r3, #52	@ 0x34
 8001158:	18fb      	adds	r3, r7, r3
 800115a:	0018      	movs	r0, r3
 800115c:	231c      	movs	r3, #28
 800115e:	001a      	movs	r2, r3
 8001160:	2100      	movs	r1, #0
 8001162:	f004 f87b 	bl	800525c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001166:	003b      	movs	r3, r7
 8001168:	0018      	movs	r0, r3
 800116a:	2334      	movs	r3, #52	@ 0x34
 800116c:	001a      	movs	r2, r3
 800116e:	2100      	movs	r1, #0
 8001170:	f004 f874 	bl	800525c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001174:	4b38      	ldr	r3, [pc, #224]	@ (8001258 <MX_TIM17_Init+0x108>)
 8001176:	4a39      	ldr	r2, [pc, #228]	@ (800125c <MX_TIM17_Init+0x10c>)
 8001178:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 26;
 800117a:	4b37      	ldr	r3, [pc, #220]	@ (8001258 <MX_TIM17_Init+0x108>)
 800117c:	221a      	movs	r2, #26
 800117e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001180:	4b35      	ldr	r3, [pc, #212]	@ (8001258 <MX_TIM17_Init+0x108>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 99;
 8001186:	4b34      	ldr	r3, [pc, #208]	@ (8001258 <MX_TIM17_Init+0x108>)
 8001188:	2263      	movs	r2, #99	@ 0x63
 800118a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118c:	4b32      	ldr	r3, [pc, #200]	@ (8001258 <MX_TIM17_Init+0x108>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001192:	4b31      	ldr	r3, [pc, #196]	@ (8001258 <MX_TIM17_Init+0x108>)
 8001194:	2200      	movs	r2, #0
 8001196:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001198:	4b2f      	ldr	r3, [pc, #188]	@ (8001258 <MX_TIM17_Init+0x108>)
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800119e:	4b2e      	ldr	r3, [pc, #184]	@ (8001258 <MX_TIM17_Init+0x108>)
 80011a0:	0018      	movs	r0, r3
 80011a2:	f001 ff55 	bl	8003050 <HAL_TIM_Base_Init>
 80011a6:	1e03      	subs	r3, r0, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 80011aa:	f7ff fc6c 	bl	8000a86 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80011ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001258 <MX_TIM17_Init+0x108>)
 80011b0:	0018      	movs	r0, r3
 80011b2:	f001 ffa5 	bl	8003100 <HAL_TIM_PWM_Init>
 80011b6:	1e03      	subs	r3, r0, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 80011ba:	f7ff fc64 	bl	8000a86 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011be:	2134      	movs	r1, #52	@ 0x34
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	2260      	movs	r2, #96	@ 0x60
 80011c4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = pulse_width_MC_OUT_PWM_4;
 80011c6:	4b26      	ldr	r3, [pc, #152]	@ (8001260 <MX_TIM17_Init+0x110>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	001a      	movs	r2, r3
 80011cc:	187b      	adds	r3, r7, r1
 80011ce:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011d0:	187b      	adds	r3, r7, r1
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011d6:	187b      	adds	r3, r7, r1
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011dc:	187b      	adds	r3, r7, r1
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011e2:	187b      	adds	r3, r7, r1
 80011e4:	2200      	movs	r2, #0
 80011e6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011e8:	187b      	adds	r3, r7, r1
 80011ea:	2200      	movs	r2, #0
 80011ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ee:	1879      	adds	r1, r7, r1
 80011f0:	4b19      	ldr	r3, [pc, #100]	@ (8001258 <MX_TIM17_Init+0x108>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	0018      	movs	r0, r3
 80011f6:	f002 f9d5 	bl	80035a4 <HAL_TIM_PWM_ConfigChannel>
 80011fa:	1e03      	subs	r3, r0, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM17_Init+0xb2>
  {
    Error_Handler();
 80011fe:	f7ff fc42 	bl	8000a86 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001202:	003b      	movs	r3, r7
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001208:	003b      	movs	r3, r7
 800120a:	2200      	movs	r2, #0
 800120c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800120e:	003b      	movs	r3, r7
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001214:	003b      	movs	r3, r7
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800121a:	003b      	movs	r3, r7
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001220:	003b      	movs	r3, r7
 8001222:	2280      	movs	r2, #128	@ 0x80
 8001224:	0192      	lsls	r2, r2, #6
 8001226:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001228:	003b      	movs	r3, r7
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800122e:	003b      	movs	r3, r7
 8001230:	2200      	movs	r2, #0
 8001232:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001234:	003a      	movs	r2, r7
 8001236:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <MX_TIM17_Init+0x108>)
 8001238:	0011      	movs	r1, r2
 800123a:	0018      	movs	r0, r3
 800123c:	f003 f8d4 	bl	80043e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001240:	1e03      	subs	r3, r0, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM17_Init+0xf8>
  {
    Error_Handler();
 8001244:	f7ff fc1f 	bl	8000a86 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001248:	4b03      	ldr	r3, [pc, #12]	@ (8001258 <MX_TIM17_Init+0x108>)
 800124a:	0018      	movs	r0, r3
 800124c:	f000 f8ae 	bl	80013ac <HAL_TIM_MspPostInit>

}
 8001250:	46c0      	nop			@ (mov r8, r8)
 8001252:	46bd      	mov	sp, r7
 8001254:	b014      	add	sp, #80	@ 0x50
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200001f0 	.word	0x200001f0
 800125c:	40014800 	.word	0x40014800
 8001260:	20000014 	.word	0x20000014

08001264 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b095      	sub	sp, #84	@ 0x54
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800126c:	241c      	movs	r4, #28
 800126e:	193b      	adds	r3, r7, r4
 8001270:	0018      	movs	r0, r3
 8001272:	2334      	movs	r3, #52	@ 0x34
 8001274:	001a      	movs	r2, r3
 8001276:	2100      	movs	r1, #0
 8001278:	f003 fff0 	bl	800525c <memset>
  if(tim_baseHandle->Instance==TIM1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a44      	ldr	r2, [pc, #272]	@ (8001394 <HAL_TIM_Base_MspInit+0x130>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d12d      	bne.n	80012e2 <HAL_TIM_Base_MspInit+0x7e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001286:	193b      	adds	r3, r7, r4
 8001288:	2280      	movs	r2, #128	@ 0x80
 800128a:	0392      	lsls	r2, r2, #14
 800128c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800128e:	193b      	adds	r3, r7, r4
 8001290:	2200      	movs	r2, #0
 8001292:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001294:	193b      	adds	r3, r7, r4
 8001296:	0018      	movs	r0, r3
 8001298:	f001 fb58 	bl	800294c <HAL_RCCEx_PeriphCLKConfig>
 800129c:	1e03      	subs	r3, r0, #0
 800129e:	d001      	beq.n	80012a4 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 80012a0:	f7ff fbf1 	bl	8000a86 <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001398 <HAL_TIM_Base_MspInit+0x134>)
 80012a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001398 <HAL_TIM_Base_MspInit+0x134>)
 80012aa:	2180      	movs	r1, #128	@ 0x80
 80012ac:	0109      	lsls	r1, r1, #4
 80012ae:	430a      	orrs	r2, r1
 80012b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80012b2:	4b39      	ldr	r3, [pc, #228]	@ (8001398 <HAL_TIM_Base_MspInit+0x134>)
 80012b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012b6:	2380      	movs	r3, #128	@ 0x80
 80012b8:	011b      	lsls	r3, r3, #4
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
 80012be:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2100      	movs	r1, #0
 80012c4:	200d      	movs	r0, #13
 80012c6:	f000 fb3f 	bl	8001948 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80012ca:	200d      	movs	r0, #13
 80012cc:	f000 fb51 	bl	8001972 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2100      	movs	r1, #0
 80012d4:	200e      	movs	r0, #14
 80012d6:	f000 fb37 	bl	8001948 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80012da:	200e      	movs	r0, #14
 80012dc:	f000 fb49 	bl	8001972 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80012e0:	e054      	b.n	800138c <HAL_TIM_Base_MspInit+0x128>
  else if(tim_baseHandle->Instance==TIM3)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a2d      	ldr	r2, [pc, #180]	@ (800139c <HAL_TIM_Base_MspInit+0x138>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d10c      	bne.n	8001306 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001398 <HAL_TIM_Base_MspInit+0x134>)
 80012ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012f0:	4b29      	ldr	r3, [pc, #164]	@ (8001398 <HAL_TIM_Base_MspInit+0x134>)
 80012f2:	2102      	movs	r1, #2
 80012f4:	430a      	orrs	r2, r1
 80012f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80012f8:	4b27      	ldr	r3, [pc, #156]	@ (8001398 <HAL_TIM_Base_MspInit+0x134>)
 80012fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012fc:	2202      	movs	r2, #2
 80012fe:	4013      	ands	r3, r2
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	697b      	ldr	r3, [r7, #20]
}
 8001304:	e042      	b.n	800138c <HAL_TIM_Base_MspInit+0x128>
  else if(tim_baseHandle->Instance==TIM14)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a25      	ldr	r2, [pc, #148]	@ (80013a0 <HAL_TIM_Base_MspInit+0x13c>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d116      	bne.n	800133e <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001310:	4b21      	ldr	r3, [pc, #132]	@ (8001398 <HAL_TIM_Base_MspInit+0x134>)
 8001312:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001314:	4b20      	ldr	r3, [pc, #128]	@ (8001398 <HAL_TIM_Base_MspInit+0x134>)
 8001316:	2180      	movs	r1, #128	@ 0x80
 8001318:	0209      	lsls	r1, r1, #8
 800131a:	430a      	orrs	r2, r1
 800131c:	641a      	str	r2, [r3, #64]	@ 0x40
 800131e:	4b1e      	ldr	r3, [pc, #120]	@ (8001398 <HAL_TIM_Base_MspInit+0x134>)
 8001320:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001322:	2380      	movs	r3, #128	@ 0x80
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	2100      	movs	r1, #0
 8001330:	2013      	movs	r0, #19
 8001332:	f000 fb09 	bl	8001948 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001336:	2013      	movs	r0, #19
 8001338:	f000 fb1b 	bl	8001972 <HAL_NVIC_EnableIRQ>
}
 800133c:	e026      	b.n	800138c <HAL_TIM_Base_MspInit+0x128>
  else if(tim_baseHandle->Instance==TIM16)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a18      	ldr	r2, [pc, #96]	@ (80013a4 <HAL_TIM_Base_MspInit+0x140>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d10e      	bne.n	8001366 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001348:	4b13      	ldr	r3, [pc, #76]	@ (8001398 <HAL_TIM_Base_MspInit+0x134>)
 800134a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800134c:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <HAL_TIM_Base_MspInit+0x134>)
 800134e:	2180      	movs	r1, #128	@ 0x80
 8001350:	0289      	lsls	r1, r1, #10
 8001352:	430a      	orrs	r2, r1
 8001354:	641a      	str	r2, [r3, #64]	@ 0x40
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <HAL_TIM_Base_MspInit+0x134>)
 8001358:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800135a:	2380      	movs	r3, #128	@ 0x80
 800135c:	029b      	lsls	r3, r3, #10
 800135e:	4013      	ands	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]
}
 8001364:	e012      	b.n	800138c <HAL_TIM_Base_MspInit+0x128>
  else if(tim_baseHandle->Instance==TIM17)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a0f      	ldr	r2, [pc, #60]	@ (80013a8 <HAL_TIM_Base_MspInit+0x144>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d10d      	bne.n	800138c <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001370:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <HAL_TIM_Base_MspInit+0x134>)
 8001372:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001374:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <HAL_TIM_Base_MspInit+0x134>)
 8001376:	2180      	movs	r1, #128	@ 0x80
 8001378:	02c9      	lsls	r1, r1, #11
 800137a:	430a      	orrs	r2, r1
 800137c:	641a      	str	r2, [r3, #64]	@ 0x40
 800137e:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <HAL_TIM_Base_MspInit+0x134>)
 8001380:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001382:	2380      	movs	r3, #128	@ 0x80
 8001384:	02db      	lsls	r3, r3, #11
 8001386:	4013      	ands	r3, r2
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
}
 800138c:	46c0      	nop			@ (mov r8, r8)
 800138e:	46bd      	mov	sp, r7
 8001390:	b015      	add	sp, #84	@ 0x54
 8001392:	bd90      	pop	{r4, r7, pc}
 8001394:	40012c00 	.word	0x40012c00
 8001398:	40021000 	.word	0x40021000
 800139c:	40000400 	.word	0x40000400
 80013a0:	40002000 	.word	0x40002000
 80013a4:	40014400 	.word	0x40014400
 80013a8:	40014800 	.word	0x40014800

080013ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013ac:	b590      	push	{r4, r7, lr}
 80013ae:	b08d      	sub	sp, #52	@ 0x34
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	241c      	movs	r4, #28
 80013b6:	193b      	adds	r3, r7, r4
 80013b8:	0018      	movs	r0, r3
 80013ba:	2314      	movs	r3, #20
 80013bc:	001a      	movs	r2, r3
 80013be:	2100      	movs	r1, #0
 80013c0:	f003 ff4c 	bl	800525c <memset>
  if(timHandle->Instance==TIM1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a50      	ldr	r2, [pc, #320]	@ (800150c <HAL_TIM_MspPostInit+0x160>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d122      	bne.n	8001414 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ce:	4b50      	ldr	r3, [pc, #320]	@ (8001510 <HAL_TIM_MspPostInit+0x164>)
 80013d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013d2:	4b4f      	ldr	r3, [pc, #316]	@ (8001510 <HAL_TIM_MspPostInit+0x164>)
 80013d4:	2102      	movs	r1, #2
 80013d6:	430a      	orrs	r2, r1
 80013d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80013da:	4b4d      	ldr	r3, [pc, #308]	@ (8001510 <HAL_TIM_MspPostInit+0x164>)
 80013dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013de:	2202      	movs	r2, #2
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
 80013e4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PB3     ------> TIM1_CH2
    PB6     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = MC_PWM_OUT_0_Pin|MC_PWM_OUT_3_Pin;
 80013e6:	0021      	movs	r1, r4
 80013e8:	187b      	adds	r3, r7, r1
 80013ea:	2248      	movs	r2, #72	@ 0x48
 80013ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	187b      	adds	r3, r7, r1
 80013f0:	2202      	movs	r2, #2
 80013f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	187b      	adds	r3, r7, r1
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013fa:	187b      	adds	r3, r7, r1
 80013fc:	2202      	movs	r2, #2
 80013fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001400:	187b      	adds	r3, r7, r1
 8001402:	2201      	movs	r2, #1
 8001404:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001406:	187b      	adds	r3, r7, r1
 8001408:	4a42      	ldr	r2, [pc, #264]	@ (8001514 <HAL_TIM_MspPostInit+0x168>)
 800140a:	0019      	movs	r1, r3
 800140c:	0010      	movs	r0, r2
 800140e:	f000 facd 	bl	80019ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001412:	e077      	b.n	8001504 <HAL_TIM_MspPostInit+0x158>
  else if(timHandle->Instance==TIM3)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a3f      	ldr	r2, [pc, #252]	@ (8001518 <HAL_TIM_MspPostInit+0x16c>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d122      	bne.n	8001464 <HAL_TIM_MspPostInit+0xb8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	4b3c      	ldr	r3, [pc, #240]	@ (8001510 <HAL_TIM_MspPostInit+0x164>)
 8001420:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001422:	4b3b      	ldr	r3, [pc, #236]	@ (8001510 <HAL_TIM_MspPostInit+0x164>)
 8001424:	2102      	movs	r1, #2
 8001426:	430a      	orrs	r2, r1
 8001428:	635a      	str	r2, [r3, #52]	@ 0x34
 800142a:	4b39      	ldr	r3, [pc, #228]	@ (8001510 <HAL_TIM_MspPostInit+0x164>)
 800142c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800142e:	2202      	movs	r2, #2
 8001430:	4013      	ands	r3, r2
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MC_PWM_OUT_1_Pin|MC_PWM_OUT_2_Pin;
 8001436:	211c      	movs	r1, #28
 8001438:	187b      	adds	r3, r7, r1
 800143a:	2230      	movs	r2, #48	@ 0x30
 800143c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	187b      	adds	r3, r7, r1
 8001440:	2202      	movs	r2, #2
 8001442:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	187b      	adds	r3, r7, r1
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800144a:	187b      	adds	r3, r7, r1
 800144c:	2202      	movs	r2, #2
 800144e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001450:	187b      	adds	r3, r7, r1
 8001452:	2201      	movs	r2, #1
 8001454:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001456:	187b      	adds	r3, r7, r1
 8001458:	4a2e      	ldr	r2, [pc, #184]	@ (8001514 <HAL_TIM_MspPostInit+0x168>)
 800145a:	0019      	movs	r1, r3
 800145c:	0010      	movs	r0, r2
 800145e:	f000 faa5 	bl	80019ac <HAL_GPIO_Init>
}
 8001462:	e04f      	b.n	8001504 <HAL_TIM_MspPostInit+0x158>
  else if(timHandle->Instance==TIM16)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a2c      	ldr	r2, [pc, #176]	@ (800151c <HAL_TIM_MspPostInit+0x170>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d123      	bne.n	80014b6 <HAL_TIM_MspPostInit+0x10a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	4b28      	ldr	r3, [pc, #160]	@ (8001510 <HAL_TIM_MspPostInit+0x164>)
 8001470:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001472:	4b27      	ldr	r3, [pc, #156]	@ (8001510 <HAL_TIM_MspPostInit+0x164>)
 8001474:	2102      	movs	r1, #2
 8001476:	430a      	orrs	r2, r1
 8001478:	635a      	str	r2, [r3, #52]	@ 0x34
 800147a:	4b25      	ldr	r3, [pc, #148]	@ (8001510 <HAL_TIM_MspPostInit+0x164>)
 800147c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800147e:	2202      	movs	r2, #2
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MC_PWM_OUT_5_Pin;
 8001486:	211c      	movs	r1, #28
 8001488:	187b      	adds	r3, r7, r1
 800148a:	2280      	movs	r2, #128	@ 0x80
 800148c:	0052      	lsls	r2, r2, #1
 800148e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001490:	187b      	adds	r3, r7, r1
 8001492:	2202      	movs	r2, #2
 8001494:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	187b      	adds	r3, r7, r1
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800149c:	187b      	adds	r3, r7, r1
 800149e:	2202      	movs	r2, #2
 80014a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 80014a2:	187b      	adds	r3, r7, r1
 80014a4:	2202      	movs	r2, #2
 80014a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MC_PWM_OUT_5_GPIO_Port, &GPIO_InitStruct);
 80014a8:	187b      	adds	r3, r7, r1
 80014aa:	4a1a      	ldr	r2, [pc, #104]	@ (8001514 <HAL_TIM_MspPostInit+0x168>)
 80014ac:	0019      	movs	r1, r3
 80014ae:	0010      	movs	r0, r2
 80014b0:	f000 fa7c 	bl	80019ac <HAL_GPIO_Init>
}
 80014b4:	e026      	b.n	8001504 <HAL_TIM_MspPostInit+0x158>
  else if(timHandle->Instance==TIM17)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a19      	ldr	r2, [pc, #100]	@ (8001520 <HAL_TIM_MspPostInit+0x174>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d121      	bne.n	8001504 <HAL_TIM_MspPostInit+0x158>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c0:	4b13      	ldr	r3, [pc, #76]	@ (8001510 <HAL_TIM_MspPostInit+0x164>)
 80014c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <HAL_TIM_MspPostInit+0x164>)
 80014c6:	2102      	movs	r1, #2
 80014c8:	430a      	orrs	r2, r1
 80014ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80014cc:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <HAL_TIM_MspPostInit+0x164>)
 80014ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014d0:	2202      	movs	r2, #2
 80014d2:	4013      	ands	r3, r2
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MC_PWM_OUT_4_Pin;
 80014d8:	211c      	movs	r1, #28
 80014da:	187b      	adds	r3, r7, r1
 80014dc:	2280      	movs	r2, #128	@ 0x80
 80014de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	187b      	adds	r3, r7, r1
 80014e2:	2202      	movs	r2, #2
 80014e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	187b      	adds	r3, r7, r1
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ec:	187b      	adds	r3, r7, r1
 80014ee:	2202      	movs	r2, #2
 80014f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 80014f2:	187b      	adds	r3, r7, r1
 80014f4:	2202      	movs	r2, #2
 80014f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MC_PWM_OUT_4_GPIO_Port, &GPIO_InitStruct);
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	4a06      	ldr	r2, [pc, #24]	@ (8001514 <HAL_TIM_MspPostInit+0x168>)
 80014fc:	0019      	movs	r1, r3
 80014fe:	0010      	movs	r0, r2
 8001500:	f000 fa54 	bl	80019ac <HAL_GPIO_Init>
}
 8001504:	46c0      	nop			@ (mov r8, r8)
 8001506:	46bd      	mov	sp, r7
 8001508:	b00d      	add	sp, #52	@ 0x34
 800150a:	bd90      	pop	{r4, r7, pc}
 800150c:	40012c00 	.word	0x40012c00
 8001510:	40021000 	.word	0x40021000
 8001514:	50000400 	.word	0x50000400
 8001518:	40000400 	.word	0x40000400
 800151c:	40014400 	.word	0x40014400
 8001520:	40014800 	.word	0x40014800

08001524 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001528:	4b26      	ldr	r3, [pc, #152]	@ (80015c4 <MX_USART1_UART_Init+0xa0>)
 800152a:	4a27      	ldr	r2, [pc, #156]	@ (80015c8 <MX_USART1_UART_Init+0xa4>)
 800152c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800152e:	4b25      	ldr	r3, [pc, #148]	@ (80015c4 <MX_USART1_UART_Init+0xa0>)
 8001530:	22e1      	movs	r2, #225	@ 0xe1
 8001532:	0252      	lsls	r2, r2, #9
 8001534:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001536:	4b23      	ldr	r3, [pc, #140]	@ (80015c4 <MX_USART1_UART_Init+0xa0>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800153c:	4b21      	ldr	r3, [pc, #132]	@ (80015c4 <MX_USART1_UART_Init+0xa0>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001542:	4b20      	ldr	r3, [pc, #128]	@ (80015c4 <MX_USART1_UART_Init+0xa0>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001548:	4b1e      	ldr	r3, [pc, #120]	@ (80015c4 <MX_USART1_UART_Init+0xa0>)
 800154a:	220c      	movs	r2, #12
 800154c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154e:	4b1d      	ldr	r3, [pc, #116]	@ (80015c4 <MX_USART1_UART_Init+0xa0>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001554:	4b1b      	ldr	r3, [pc, #108]	@ (80015c4 <MX_USART1_UART_Init+0xa0>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800155a:	4b1a      	ldr	r3, [pc, #104]	@ (80015c4 <MX_USART1_UART_Init+0xa0>)
 800155c:	2200      	movs	r2, #0
 800155e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001560:	4b18      	ldr	r3, [pc, #96]	@ (80015c4 <MX_USART1_UART_Init+0xa0>)
 8001562:	2200      	movs	r2, #0
 8001564:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 8001566:	4b17      	ldr	r3, [pc, #92]	@ (80015c4 <MX_USART1_UART_Init+0xa0>)
 8001568:	2240      	movs	r2, #64	@ 0x40
 800156a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 800156c:	4b15      	ldr	r3, [pc, #84]	@ (80015c4 <MX_USART1_UART_Init+0xa0>)
 800156e:	2280      	movs	r2, #128	@ 0x80
 8001570:	0352      	lsls	r2, r2, #13
 8001572:	645a      	str	r2, [r3, #68]	@ 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 8001574:	4b13      	ldr	r3, [pc, #76]	@ (80015c4 <MX_USART1_UART_Init+0xa0>)
 8001576:	2200      	movs	r2, #0
 8001578:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800157a:	4b12      	ldr	r3, [pc, #72]	@ (80015c4 <MX_USART1_UART_Init+0xa0>)
 800157c:	0018      	movs	r0, r3
 800157e:	f003 f80b 	bl	8004598 <HAL_UART_Init>
 8001582:	1e03      	subs	r3, r0, #0
 8001584:	d001      	beq.n	800158a <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 8001586:	f7ff fa7e 	bl	8000a86 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800158a:	4b0e      	ldr	r3, [pc, #56]	@ (80015c4 <MX_USART1_UART_Init+0xa0>)
 800158c:	2100      	movs	r1, #0
 800158e:	0018      	movs	r0, r3
 8001590:	f003 fd84 	bl	800509c <HAL_UARTEx_SetTxFifoThreshold>
 8001594:	1e03      	subs	r3, r0, #0
 8001596:	d001      	beq.n	800159c <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 8001598:	f7ff fa75 	bl	8000a86 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800159c:	4b09      	ldr	r3, [pc, #36]	@ (80015c4 <MX_USART1_UART_Init+0xa0>)
 800159e:	2100      	movs	r1, #0
 80015a0:	0018      	movs	r0, r3
 80015a2:	f003 fdbb 	bl	800511c <HAL_UARTEx_SetRxFifoThreshold>
 80015a6:	1e03      	subs	r3, r0, #0
 80015a8:	d001      	beq.n	80015ae <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 80015aa:	f7ff fa6c 	bl	8000a86 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015ae:	4b05      	ldr	r3, [pc, #20]	@ (80015c4 <MX_USART1_UART_Init+0xa0>)
 80015b0:	0018      	movs	r0, r3
 80015b2:	f003 fd39 	bl	8005028 <HAL_UARTEx_DisableFifoMode>
 80015b6:	1e03      	subs	r3, r0, #0
 80015b8:	d001      	beq.n	80015be <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 80015ba:	f7ff fa64 	bl	8000a86 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015be:	46c0      	nop			@ (mov r8, r8)
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	2000023c 	.word	0x2000023c
 80015c8:	40013800 	.word	0x40013800

080015cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015cc:	b590      	push	{r4, r7, lr}
 80015ce:	b097      	sub	sp, #92	@ 0x5c
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	2344      	movs	r3, #68	@ 0x44
 80015d6:	18fb      	adds	r3, r7, r3
 80015d8:	0018      	movs	r0, r3
 80015da:	2314      	movs	r3, #20
 80015dc:	001a      	movs	r2, r3
 80015de:	2100      	movs	r1, #0
 80015e0:	f003 fe3c 	bl	800525c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015e4:	2410      	movs	r4, #16
 80015e6:	193b      	adds	r3, r7, r4
 80015e8:	0018      	movs	r0, r3
 80015ea:	2334      	movs	r3, #52	@ 0x34
 80015ec:	001a      	movs	r2, r3
 80015ee:	2100      	movs	r1, #0
 80015f0:	f003 fe34 	bl	800525c <memset>
  if(uartHandle->Instance==USART1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a23      	ldr	r2, [pc, #140]	@ (8001688 <HAL_UART_MspInit+0xbc>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d13f      	bne.n	800167e <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015fe:	193b      	adds	r3, r7, r4
 8001600:	2201      	movs	r2, #1
 8001602:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001604:	193b      	adds	r3, r7, r4
 8001606:	2200      	movs	r2, #0
 8001608:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800160a:	193b      	adds	r3, r7, r4
 800160c:	0018      	movs	r0, r3
 800160e:	f001 f99d 	bl	800294c <HAL_RCCEx_PeriphCLKConfig>
 8001612:	1e03      	subs	r3, r0, #0
 8001614:	d001      	beq.n	800161a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001616:	f7ff fa36 	bl	8000a86 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800161a:	4b1c      	ldr	r3, [pc, #112]	@ (800168c <HAL_UART_MspInit+0xc0>)
 800161c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800161e:	4b1b      	ldr	r3, [pc, #108]	@ (800168c <HAL_UART_MspInit+0xc0>)
 8001620:	2180      	movs	r1, #128	@ 0x80
 8001622:	01c9      	lsls	r1, r1, #7
 8001624:	430a      	orrs	r2, r1
 8001626:	641a      	str	r2, [r3, #64]	@ 0x40
 8001628:	4b18      	ldr	r3, [pc, #96]	@ (800168c <HAL_UART_MspInit+0xc0>)
 800162a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800162c:	2380      	movs	r3, #128	@ 0x80
 800162e:	01db      	lsls	r3, r3, #7
 8001630:	4013      	ands	r3, r2
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	4b15      	ldr	r3, [pc, #84]	@ (800168c <HAL_UART_MspInit+0xc0>)
 8001638:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800163a:	4b14      	ldr	r3, [pc, #80]	@ (800168c <HAL_UART_MspInit+0xc0>)
 800163c:	2101      	movs	r1, #1
 800163e:	430a      	orrs	r2, r1
 8001640:	635a      	str	r2, [r3, #52]	@ 0x34
 8001642:	4b12      	ldr	r3, [pc, #72]	@ (800168c <HAL_UART_MspInit+0xc0>)
 8001644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001646:	2201      	movs	r2, #1
 8001648:	4013      	ands	r3, r2
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MC_UART_TX_Pin|MC_UART_RX_Pin;
 800164e:	2144      	movs	r1, #68	@ 0x44
 8001650:	187b      	adds	r3, r7, r1
 8001652:	22c0      	movs	r2, #192	@ 0xc0
 8001654:	00d2      	lsls	r2, r2, #3
 8001656:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	187b      	adds	r3, r7, r1
 800165a:	2202      	movs	r2, #2
 800165c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	187b      	adds	r3, r7, r1
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	187b      	adds	r3, r7, r1
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800166a:	187b      	adds	r3, r7, r1
 800166c:	2201      	movs	r2, #1
 800166e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001670:	187a      	adds	r2, r7, r1
 8001672:	23a0      	movs	r3, #160	@ 0xa0
 8001674:	05db      	lsls	r3, r3, #23
 8001676:	0011      	movs	r1, r2
 8001678:	0018      	movs	r0, r3
 800167a:	f000 f997 	bl	80019ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800167e:	46c0      	nop			@ (mov r8, r8)
 8001680:	46bd      	mov	sp, r7
 8001682:	b017      	add	sp, #92	@ 0x5c
 8001684:	bd90      	pop	{r4, r7, pc}
 8001686:	46c0      	nop			@ (mov r8, r8)
 8001688:	40013800 	.word	0x40013800
 800168c:	40021000 	.word	0x40021000

08001690 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001690:	480d      	ldr	r0, [pc, #52]	@ (80016c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001692:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001694:	f7ff fad6 	bl	8000c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001698:	480c      	ldr	r0, [pc, #48]	@ (80016cc <LoopForever+0x6>)
  ldr r1, =_edata
 800169a:	490d      	ldr	r1, [pc, #52]	@ (80016d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800169c:	4a0d      	ldr	r2, [pc, #52]	@ (80016d4 <LoopForever+0xe>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a0:	e002      	b.n	80016a8 <LoopCopyDataInit>

080016a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a6:	3304      	adds	r3, #4

080016a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ac:	d3f9      	bcc.n	80016a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ae:	4a0a      	ldr	r2, [pc, #40]	@ (80016d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016b0:	4c0a      	ldr	r4, [pc, #40]	@ (80016dc <LoopForever+0x16>)
  movs r3, #0
 80016b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b4:	e001      	b.n	80016ba <LoopFillZerobss>

080016b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b8:	3204      	adds	r2, #4

080016ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016bc:	d3fb      	bcc.n	80016b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016be:	f003 fdd5 	bl	800526c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80016c2:	f7ff f93b 	bl	800093c <main>

080016c6 <LoopForever>:

LoopForever:
  b LoopForever
 80016c6:	e7fe      	b.n	80016c6 <LoopForever>
  ldr   r0, =_estack
 80016c8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80016cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80016d4:	080053b8 	.word	0x080053b8
  ldr r2, =_sbss
 80016d8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80016dc:	200002d4 	.word	0x200002d4

080016e0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016e0:	e7fe      	b.n	80016e0 <ADC1_COMP_IRQHandler>
	...

080016e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016ea:	1dfb      	adds	r3, r7, #7
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <HAL_Init+0x3c>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <HAL_Init+0x3c>)
 80016f6:	2180      	movs	r1, #128	@ 0x80
 80016f8:	0049      	lsls	r1, r1, #1
 80016fa:	430a      	orrs	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016fe:	2003      	movs	r0, #3
 8001700:	f000 f810 	bl	8001724 <HAL_InitTick>
 8001704:	1e03      	subs	r3, r0, #0
 8001706:	d003      	beq.n	8001710 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001708:	1dfb      	adds	r3, r7, #7
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
 800170e:	e001      	b.n	8001714 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001710:	f7ff fa36 	bl	8000b80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001714:	1dfb      	adds	r3, r7, #7
 8001716:	781b      	ldrb	r3, [r3, #0]
}
 8001718:	0018      	movs	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	b002      	add	sp, #8
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40022000 	.word	0x40022000

08001724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800172c:	230f      	movs	r3, #15
 800172e:	18fb      	adds	r3, r7, r3
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001734:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <HAL_InitTick+0x88>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d02b      	beq.n	8001794 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800173c:	4b1c      	ldr	r3, [pc, #112]	@ (80017b0 <HAL_InitTick+0x8c>)
 800173e:	681c      	ldr	r4, [r3, #0]
 8001740:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <HAL_InitTick+0x88>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	0019      	movs	r1, r3
 8001746:	23fa      	movs	r3, #250	@ 0xfa
 8001748:	0098      	lsls	r0, r3, #2
 800174a:	f7fe fcdb 	bl	8000104 <__udivsi3>
 800174e:	0003      	movs	r3, r0
 8001750:	0019      	movs	r1, r3
 8001752:	0020      	movs	r0, r4
 8001754:	f7fe fcd6 	bl	8000104 <__udivsi3>
 8001758:	0003      	movs	r3, r0
 800175a:	0018      	movs	r0, r3
 800175c:	f000 f919 	bl	8001992 <HAL_SYSTICK_Config>
 8001760:	1e03      	subs	r3, r0, #0
 8001762:	d112      	bne.n	800178a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b03      	cmp	r3, #3
 8001768:	d80a      	bhi.n	8001780 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	2301      	movs	r3, #1
 800176e:	425b      	negs	r3, r3
 8001770:	2200      	movs	r2, #0
 8001772:	0018      	movs	r0, r3
 8001774:	f000 f8e8 	bl	8001948 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001778:	4b0e      	ldr	r3, [pc, #56]	@ (80017b4 <HAL_InitTick+0x90>)
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	e00d      	b.n	800179c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001780:	230f      	movs	r3, #15
 8001782:	18fb      	adds	r3, r7, r3
 8001784:	2201      	movs	r2, #1
 8001786:	701a      	strb	r2, [r3, #0]
 8001788:	e008      	b.n	800179c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800178a:	230f      	movs	r3, #15
 800178c:	18fb      	adds	r3, r7, r3
 800178e:	2201      	movs	r2, #1
 8001790:	701a      	strb	r2, [r3, #0]
 8001792:	e003      	b.n	800179c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001794:	230f      	movs	r3, #15
 8001796:	18fb      	adds	r3, r7, r3
 8001798:	2201      	movs	r2, #1
 800179a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800179c:	230f      	movs	r3, #15
 800179e:	18fb      	adds	r3, r7, r3
 80017a0:	781b      	ldrb	r3, [r3, #0]
}
 80017a2:	0018      	movs	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b005      	add	sp, #20
 80017a8:	bd90      	pop	{r4, r7, pc}
 80017aa:	46c0      	nop			@ (mov r8, r8)
 80017ac:	20000020 	.word	0x20000020
 80017b0:	20000000 	.word	0x20000000
 80017b4:	2000001c 	.word	0x2000001c

080017b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017bc:	4b05      	ldr	r3, [pc, #20]	@ (80017d4 <HAL_IncTick+0x1c>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	001a      	movs	r2, r3
 80017c2:	4b05      	ldr	r3, [pc, #20]	@ (80017d8 <HAL_IncTick+0x20>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	18d2      	adds	r2, r2, r3
 80017c8:	4b03      	ldr	r3, [pc, #12]	@ (80017d8 <HAL_IncTick+0x20>)
 80017ca:	601a      	str	r2, [r3, #0]
}
 80017cc:	46c0      	nop			@ (mov r8, r8)
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	46c0      	nop			@ (mov r8, r8)
 80017d4:	20000020 	.word	0x20000020
 80017d8:	200002d0 	.word	0x200002d0

080017dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  return uwTick;
 80017e0:	4b02      	ldr	r3, [pc, #8]	@ (80017ec <HAL_GetTick+0x10>)
 80017e2:	681b      	ldr	r3, [r3, #0]
}
 80017e4:	0018      	movs	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	46c0      	nop			@ (mov r8, r8)
 80017ec:	200002d0 	.word	0x200002d0

080017f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	0002      	movs	r2, r0
 80017f8:	1dfb      	adds	r3, r7, #7
 80017fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017fc:	1dfb      	adds	r3, r7, #7
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b7f      	cmp	r3, #127	@ 0x7f
 8001802:	d809      	bhi.n	8001818 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001804:	1dfb      	adds	r3, r7, #7
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	001a      	movs	r2, r3
 800180a:	231f      	movs	r3, #31
 800180c:	401a      	ands	r2, r3
 800180e:	4b04      	ldr	r3, [pc, #16]	@ (8001820 <__NVIC_EnableIRQ+0x30>)
 8001810:	2101      	movs	r1, #1
 8001812:	4091      	lsls	r1, r2
 8001814:	000a      	movs	r2, r1
 8001816:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001818:	46c0      	nop			@ (mov r8, r8)
 800181a:	46bd      	mov	sp, r7
 800181c:	b002      	add	sp, #8
 800181e:	bd80      	pop	{r7, pc}
 8001820:	e000e100 	.word	0xe000e100

08001824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	0002      	movs	r2, r0
 800182c:	6039      	str	r1, [r7, #0]
 800182e:	1dfb      	adds	r3, r7, #7
 8001830:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001832:	1dfb      	adds	r3, r7, #7
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b7f      	cmp	r3, #127	@ 0x7f
 8001838:	d828      	bhi.n	800188c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800183a:	4a2f      	ldr	r2, [pc, #188]	@ (80018f8 <__NVIC_SetPriority+0xd4>)
 800183c:	1dfb      	adds	r3, r7, #7
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	b25b      	sxtb	r3, r3
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	33c0      	adds	r3, #192	@ 0xc0
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	589b      	ldr	r3, [r3, r2]
 800184a:	1dfa      	adds	r2, r7, #7
 800184c:	7812      	ldrb	r2, [r2, #0]
 800184e:	0011      	movs	r1, r2
 8001850:	2203      	movs	r2, #3
 8001852:	400a      	ands	r2, r1
 8001854:	00d2      	lsls	r2, r2, #3
 8001856:	21ff      	movs	r1, #255	@ 0xff
 8001858:	4091      	lsls	r1, r2
 800185a:	000a      	movs	r2, r1
 800185c:	43d2      	mvns	r2, r2
 800185e:	401a      	ands	r2, r3
 8001860:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	019b      	lsls	r3, r3, #6
 8001866:	22ff      	movs	r2, #255	@ 0xff
 8001868:	401a      	ands	r2, r3
 800186a:	1dfb      	adds	r3, r7, #7
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	0018      	movs	r0, r3
 8001870:	2303      	movs	r3, #3
 8001872:	4003      	ands	r3, r0
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001878:	481f      	ldr	r0, [pc, #124]	@ (80018f8 <__NVIC_SetPriority+0xd4>)
 800187a:	1dfb      	adds	r3, r7, #7
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	b25b      	sxtb	r3, r3
 8001880:	089b      	lsrs	r3, r3, #2
 8001882:	430a      	orrs	r2, r1
 8001884:	33c0      	adds	r3, #192	@ 0xc0
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800188a:	e031      	b.n	80018f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800188c:	4a1b      	ldr	r2, [pc, #108]	@ (80018fc <__NVIC_SetPriority+0xd8>)
 800188e:	1dfb      	adds	r3, r7, #7
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	0019      	movs	r1, r3
 8001894:	230f      	movs	r3, #15
 8001896:	400b      	ands	r3, r1
 8001898:	3b08      	subs	r3, #8
 800189a:	089b      	lsrs	r3, r3, #2
 800189c:	3306      	adds	r3, #6
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	18d3      	adds	r3, r2, r3
 80018a2:	3304      	adds	r3, #4
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	1dfa      	adds	r2, r7, #7
 80018a8:	7812      	ldrb	r2, [r2, #0]
 80018aa:	0011      	movs	r1, r2
 80018ac:	2203      	movs	r2, #3
 80018ae:	400a      	ands	r2, r1
 80018b0:	00d2      	lsls	r2, r2, #3
 80018b2:	21ff      	movs	r1, #255	@ 0xff
 80018b4:	4091      	lsls	r1, r2
 80018b6:	000a      	movs	r2, r1
 80018b8:	43d2      	mvns	r2, r2
 80018ba:	401a      	ands	r2, r3
 80018bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	019b      	lsls	r3, r3, #6
 80018c2:	22ff      	movs	r2, #255	@ 0xff
 80018c4:	401a      	ands	r2, r3
 80018c6:	1dfb      	adds	r3, r7, #7
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	0018      	movs	r0, r3
 80018cc:	2303      	movs	r3, #3
 80018ce:	4003      	ands	r3, r0
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018d4:	4809      	ldr	r0, [pc, #36]	@ (80018fc <__NVIC_SetPriority+0xd8>)
 80018d6:	1dfb      	adds	r3, r7, #7
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	001c      	movs	r4, r3
 80018dc:	230f      	movs	r3, #15
 80018de:	4023      	ands	r3, r4
 80018e0:	3b08      	subs	r3, #8
 80018e2:	089b      	lsrs	r3, r3, #2
 80018e4:	430a      	orrs	r2, r1
 80018e6:	3306      	adds	r3, #6
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	18c3      	adds	r3, r0, r3
 80018ec:	3304      	adds	r3, #4
 80018ee:	601a      	str	r2, [r3, #0]
}
 80018f0:	46c0      	nop			@ (mov r8, r8)
 80018f2:	46bd      	mov	sp, r7
 80018f4:	b003      	add	sp, #12
 80018f6:	bd90      	pop	{r4, r7, pc}
 80018f8:	e000e100 	.word	0xe000e100
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	1e5a      	subs	r2, r3, #1
 800190c:	2380      	movs	r3, #128	@ 0x80
 800190e:	045b      	lsls	r3, r3, #17
 8001910:	429a      	cmp	r2, r3
 8001912:	d301      	bcc.n	8001918 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001914:	2301      	movs	r3, #1
 8001916:	e010      	b.n	800193a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001918:	4b0a      	ldr	r3, [pc, #40]	@ (8001944 <SysTick_Config+0x44>)
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	3a01      	subs	r2, #1
 800191e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001920:	2301      	movs	r3, #1
 8001922:	425b      	negs	r3, r3
 8001924:	2103      	movs	r1, #3
 8001926:	0018      	movs	r0, r3
 8001928:	f7ff ff7c 	bl	8001824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800192c:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <SysTick_Config+0x44>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001932:	4b04      	ldr	r3, [pc, #16]	@ (8001944 <SysTick_Config+0x44>)
 8001934:	2207      	movs	r2, #7
 8001936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001938:	2300      	movs	r3, #0
}
 800193a:	0018      	movs	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	b002      	add	sp, #8
 8001940:	bd80      	pop	{r7, pc}
 8001942:	46c0      	nop			@ (mov r8, r8)
 8001944:	e000e010 	.word	0xe000e010

08001948 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
 8001952:	210f      	movs	r1, #15
 8001954:	187b      	adds	r3, r7, r1
 8001956:	1c02      	adds	r2, r0, #0
 8001958:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	187b      	adds	r3, r7, r1
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	b25b      	sxtb	r3, r3
 8001962:	0011      	movs	r1, r2
 8001964:	0018      	movs	r0, r3
 8001966:	f7ff ff5d 	bl	8001824 <__NVIC_SetPriority>
}
 800196a:	46c0      	nop			@ (mov r8, r8)
 800196c:	46bd      	mov	sp, r7
 800196e:	b004      	add	sp, #16
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	0002      	movs	r2, r0
 800197a:	1dfb      	adds	r3, r7, #7
 800197c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800197e:	1dfb      	adds	r3, r7, #7
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	b25b      	sxtb	r3, r3
 8001984:	0018      	movs	r0, r3
 8001986:	f7ff ff33 	bl	80017f0 <__NVIC_EnableIRQ>
}
 800198a:	46c0      	nop			@ (mov r8, r8)
 800198c:	46bd      	mov	sp, r7
 800198e:	b002      	add	sp, #8
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	0018      	movs	r0, r3
 800199e:	f7ff ffaf 	bl	8001900 <SysTick_Config>
 80019a2:	0003      	movs	r3, r0
}
 80019a4:	0018      	movs	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	b002      	add	sp, #8
 80019aa:	bd80      	pop	{r7, pc}

080019ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ba:	e147      	b.n	8001c4c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2101      	movs	r1, #1
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	4091      	lsls	r1, r2
 80019c6:	000a      	movs	r2, r1
 80019c8:	4013      	ands	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d100      	bne.n	80019d4 <HAL_GPIO_Init+0x28>
 80019d2:	e138      	b.n	8001c46 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2203      	movs	r2, #3
 80019da:	4013      	ands	r3, r2
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d005      	beq.n	80019ec <HAL_GPIO_Init+0x40>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2203      	movs	r2, #3
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d130      	bne.n	8001a4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	2203      	movs	r2, #3
 80019f8:	409a      	lsls	r2, r3
 80019fa:	0013      	movs	r3, r2
 80019fc:	43da      	mvns	r2, r3
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	0013      	movs	r3, r2
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a22:	2201      	movs	r2, #1
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	409a      	lsls	r2, r3
 8001a28:	0013      	movs	r3, r2
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	091b      	lsrs	r3, r3, #4
 8001a38:	2201      	movs	r2, #1
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	409a      	lsls	r2, r3
 8001a40:	0013      	movs	r3, r2
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2203      	movs	r2, #3
 8001a54:	4013      	ands	r3, r2
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	d017      	beq.n	8001a8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	2203      	movs	r2, #3
 8001a66:	409a      	lsls	r2, r3
 8001a68:	0013      	movs	r3, r2
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	0013      	movs	r3, r2
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2203      	movs	r2, #3
 8001a90:	4013      	ands	r3, r2
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d123      	bne.n	8001ade <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	08da      	lsrs	r2, r3, #3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3208      	adds	r2, #8
 8001a9e:	0092      	lsls	r2, r2, #2
 8001aa0:	58d3      	ldr	r3, [r2, r3]
 8001aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	2207      	movs	r2, #7
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	220f      	movs	r2, #15
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	0013      	movs	r3, r2
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	691a      	ldr	r2, [r3, #16]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2107      	movs	r1, #7
 8001ac2:	400b      	ands	r3, r1
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	0013      	movs	r3, r2
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	08da      	lsrs	r2, r3, #3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3208      	adds	r2, #8
 8001ad8:	0092      	lsls	r2, r2, #2
 8001ada:	6939      	ldr	r1, [r7, #16]
 8001adc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	2203      	movs	r2, #3
 8001aea:	409a      	lsls	r2, r3
 8001aec:	0013      	movs	r3, r2
 8001aee:	43da      	mvns	r2, r3
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2203      	movs	r2, #3
 8001afc:	401a      	ands	r2, r3
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	409a      	lsls	r2, r3
 8001b04:	0013      	movs	r3, r2
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	23c0      	movs	r3, #192	@ 0xc0
 8001b18:	029b      	lsls	r3, r3, #10
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d100      	bne.n	8001b20 <HAL_GPIO_Init+0x174>
 8001b1e:	e092      	b.n	8001c46 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001b20:	4a50      	ldr	r2, [pc, #320]	@ (8001c64 <HAL_GPIO_Init+0x2b8>)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	089b      	lsrs	r3, r3, #2
 8001b26:	3318      	adds	r3, #24
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	589b      	ldr	r3, [r3, r2]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	2203      	movs	r2, #3
 8001b32:	4013      	ands	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	220f      	movs	r2, #15
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	0013      	movs	r3, r2
 8001b3c:	43da      	mvns	r2, r3
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	23a0      	movs	r3, #160	@ 0xa0
 8001b48:	05db      	lsls	r3, r3, #23
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d013      	beq.n	8001b76 <HAL_GPIO_Init+0x1ca>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a45      	ldr	r2, [pc, #276]	@ (8001c68 <HAL_GPIO_Init+0x2bc>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d00d      	beq.n	8001b72 <HAL_GPIO_Init+0x1c6>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a44      	ldr	r2, [pc, #272]	@ (8001c6c <HAL_GPIO_Init+0x2c0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d007      	beq.n	8001b6e <HAL_GPIO_Init+0x1c2>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a43      	ldr	r2, [pc, #268]	@ (8001c70 <HAL_GPIO_Init+0x2c4>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d101      	bne.n	8001b6a <HAL_GPIO_Init+0x1be>
 8001b66:	2303      	movs	r3, #3
 8001b68:	e006      	b.n	8001b78 <HAL_GPIO_Init+0x1cc>
 8001b6a:	2305      	movs	r3, #5
 8001b6c:	e004      	b.n	8001b78 <HAL_GPIO_Init+0x1cc>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e002      	b.n	8001b78 <HAL_GPIO_Init+0x1cc>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <HAL_GPIO_Init+0x1cc>
 8001b76:	2300      	movs	r3, #0
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	2103      	movs	r1, #3
 8001b7c:	400a      	ands	r2, r1
 8001b7e:	00d2      	lsls	r2, r2, #3
 8001b80:	4093      	lsls	r3, r2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001b88:	4936      	ldr	r1, [pc, #216]	@ (8001c64 <HAL_GPIO_Init+0x2b8>)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	089b      	lsrs	r3, r3, #2
 8001b8e:	3318      	adds	r3, #24
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b96:	4b33      	ldr	r3, [pc, #204]	@ (8001c64 <HAL_GPIO_Init+0x2b8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	2380      	movs	r3, #128	@ 0x80
 8001bac:	035b      	lsls	r3, r3, #13
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bba:	4b2a      	ldr	r3, [pc, #168]	@ (8001c64 <HAL_GPIO_Init+0x2b8>)
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001bc0:	4b28      	ldr	r3, [pc, #160]	@ (8001c64 <HAL_GPIO_Init+0x2b8>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	43da      	mvns	r2, r3
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	2380      	movs	r3, #128	@ 0x80
 8001bd6:	039b      	lsls	r3, r3, #14
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d003      	beq.n	8001be4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001be4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c64 <HAL_GPIO_Init+0x2b8>)
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bea:	4a1e      	ldr	r2, [pc, #120]	@ (8001c64 <HAL_GPIO_Init+0x2b8>)
 8001bec:	2384      	movs	r3, #132	@ 0x84
 8001bee:	58d3      	ldr	r3, [r2, r3]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	43da      	mvns	r2, r3
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	2380      	movs	r3, #128	@ 0x80
 8001c02:	029b      	lsls	r3, r3, #10
 8001c04:	4013      	ands	r3, r2
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c10:	4914      	ldr	r1, [pc, #80]	@ (8001c64 <HAL_GPIO_Init+0x2b8>)
 8001c12:	2284      	movs	r2, #132	@ 0x84
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001c18:	4a12      	ldr	r2, [pc, #72]	@ (8001c64 <HAL_GPIO_Init+0x2b8>)
 8001c1a:	2380      	movs	r3, #128	@ 0x80
 8001c1c:	58d3      	ldr	r3, [r2, r3]
 8001c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	43da      	mvns	r2, r3
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4013      	ands	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	2380      	movs	r3, #128	@ 0x80
 8001c30:	025b      	lsls	r3, r3, #9
 8001c32:	4013      	ands	r3, r2
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c3e:	4909      	ldr	r1, [pc, #36]	@ (8001c64 <HAL_GPIO_Init+0x2b8>)
 8001c40:	2280      	movs	r2, #128	@ 0x80
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	40da      	lsrs	r2, r3
 8001c54:	1e13      	subs	r3, r2, #0
 8001c56:	d000      	beq.n	8001c5a <HAL_GPIO_Init+0x2ae>
 8001c58:	e6b0      	b.n	80019bc <HAL_GPIO_Init+0x10>
  }
}
 8001c5a:	46c0      	nop			@ (mov r8, r8)
 8001c5c:	46c0      	nop			@ (mov r8, r8)
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	b006      	add	sp, #24
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40021800 	.word	0x40021800
 8001c68:	50000400 	.word	0x50000400
 8001c6c:	50000800 	.word	0x50000800
 8001c70:	50000c00 	.word	0x50000c00

08001c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	0008      	movs	r0, r1
 8001c7e:	0011      	movs	r1, r2
 8001c80:	1cbb      	adds	r3, r7, #2
 8001c82:	1c02      	adds	r2, r0, #0
 8001c84:	801a      	strh	r2, [r3, #0]
 8001c86:	1c7b      	adds	r3, r7, #1
 8001c88:	1c0a      	adds	r2, r1, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c8c:	1c7b      	adds	r3, r7, #1
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d004      	beq.n	8001c9e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c94:	1cbb      	adds	r3, r7, #2
 8001c96:	881a      	ldrh	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c9c:	e003      	b.n	8001ca6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c9e:	1cbb      	adds	r3, r7, #2
 8001ca0:	881a      	ldrh	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ca6:	46c0      	nop			@ (mov r8, r8)
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	b002      	add	sp, #8
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e08f      	b.n	8001de2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2241      	movs	r2, #65	@ 0x41
 8001cc6:	5c9b      	ldrb	r3, [r3, r2]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d107      	bne.n	8001cde <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2240      	movs	r2, #64	@ 0x40
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	0018      	movs	r0, r3
 8001cda:	f7fe fde3 	bl	80008a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2241      	movs	r2, #65	@ 0x41
 8001ce2:	2124      	movs	r1, #36	@ 0x24
 8001ce4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	438a      	bics	r2, r1
 8001cf4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	493b      	ldr	r1, [pc, #236]	@ (8001dec <HAL_I2C_Init+0x13c>)
 8001d00:	400a      	ands	r2, r1
 8001d02:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4938      	ldr	r1, [pc, #224]	@ (8001df0 <HAL_I2C_Init+0x140>)
 8001d10:	400a      	ands	r2, r1
 8001d12:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d108      	bne.n	8001d2e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2180      	movs	r1, #128	@ 0x80
 8001d26:	0209      	lsls	r1, r1, #8
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	e007      	b.n	8001d3e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2184      	movs	r1, #132	@ 0x84
 8001d38:	0209      	lsls	r1, r1, #8
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d109      	bne.n	8001d5a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2180      	movs	r1, #128	@ 0x80
 8001d52:	0109      	lsls	r1, r1, #4
 8001d54:	430a      	orrs	r2, r1
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	e007      	b.n	8001d6a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4923      	ldr	r1, [pc, #140]	@ (8001df4 <HAL_I2C_Init+0x144>)
 8001d66:	400a      	ands	r2, r1
 8001d68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4920      	ldr	r1, [pc, #128]	@ (8001df8 <HAL_I2C_Init+0x148>)
 8001d76:	430a      	orrs	r2, r1
 8001d78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	491a      	ldr	r1, [pc, #104]	@ (8001df0 <HAL_I2C_Init+0x140>)
 8001d86:	400a      	ands	r2, r1
 8001d88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691a      	ldr	r2, [r3, #16]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	431a      	orrs	r2, r3
 8001d94:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69d9      	ldr	r1, [r3, #28]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a1a      	ldr	r2, [r3, #32]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2241      	movs	r2, #65	@ 0x41
 8001dce:	2120      	movs	r1, #32
 8001dd0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2242      	movs	r2, #66	@ 0x42
 8001ddc:	2100      	movs	r1, #0
 8001dde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	0018      	movs	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	b002      	add	sp, #8
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	46c0      	nop			@ (mov r8, r8)
 8001dec:	f0ffffff 	.word	0xf0ffffff
 8001df0:	ffff7fff 	.word	0xffff7fff
 8001df4:	fffff7ff 	.word	0xfffff7ff
 8001df8:	02008000 	.word	0x02008000

08001dfc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2241      	movs	r2, #65	@ 0x41
 8001e0a:	5c9b      	ldrb	r3, [r3, r2]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b20      	cmp	r3, #32
 8001e10:	d138      	bne.n	8001e84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2240      	movs	r2, #64	@ 0x40
 8001e16:	5c9b      	ldrb	r3, [r3, r2]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	e032      	b.n	8001e86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2240      	movs	r2, #64	@ 0x40
 8001e24:	2101      	movs	r1, #1
 8001e26:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2241      	movs	r2, #65	@ 0x41
 8001e2c:	2124      	movs	r1, #36	@ 0x24
 8001e2e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	438a      	bics	r2, r1
 8001e3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4911      	ldr	r1, [pc, #68]	@ (8001e90 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e4c:	400a      	ands	r2, r1
 8001e4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6819      	ldr	r1, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2241      	movs	r2, #65	@ 0x41
 8001e74:	2120      	movs	r1, #32
 8001e76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2240      	movs	r2, #64	@ 0x40
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	e000      	b.n	8001e86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e84:	2302      	movs	r3, #2
  }
}
 8001e86:	0018      	movs	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	b002      	add	sp, #8
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	46c0      	nop			@ (mov r8, r8)
 8001e90:	ffffefff 	.word	0xffffefff

08001e94 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2241      	movs	r2, #65	@ 0x41
 8001ea2:	5c9b      	ldrb	r3, [r3, r2]
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b20      	cmp	r3, #32
 8001ea8:	d139      	bne.n	8001f1e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2240      	movs	r2, #64	@ 0x40
 8001eae:	5c9b      	ldrb	r3, [r3, r2]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e033      	b.n	8001f20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2240      	movs	r2, #64	@ 0x40
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2241      	movs	r2, #65	@ 0x41
 8001ec4:	2124      	movs	r1, #36	@ 0x24
 8001ec6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	438a      	bics	r2, r1
 8001ed6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4a11      	ldr	r2, [pc, #68]	@ (8001f28 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	021b      	lsls	r3, r3, #8
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2101      	movs	r1, #1
 8001f06:	430a      	orrs	r2, r1
 8001f08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2241      	movs	r2, #65	@ 0x41
 8001f0e:	2120      	movs	r1, #32
 8001f10:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2240      	movs	r2, #64	@ 0x40
 8001f16:	2100      	movs	r1, #0
 8001f18:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	e000      	b.n	8001f20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f1e:	2302      	movs	r3, #2
  }
}
 8001f20:	0018      	movs	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b004      	add	sp, #16
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	fffff0ff 	.word	0xfffff0ff

08001f2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001f34:	4b19      	ldr	r3, [pc, #100]	@ (8001f9c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a19      	ldr	r2, [pc, #100]	@ (8001fa0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	4b17      	ldr	r3, [pc, #92]	@ (8001f9c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	2380      	movs	r3, #128	@ 0x80
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d11f      	bne.n	8001f90 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001f50:	4b14      	ldr	r3, [pc, #80]	@ (8001fa4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	0013      	movs	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	189b      	adds	r3, r3, r2
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4912      	ldr	r1, [pc, #72]	@ (8001fa8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f7fe f8d0 	bl	8000104 <__udivsi3>
 8001f64:	0003      	movs	r3, r0
 8001f66:	3301      	adds	r3, #1
 8001f68:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f6a:	e008      	b.n	8001f7e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	3b01      	subs	r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	e001      	b.n	8001f7e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e009      	b.n	8001f92 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f7e:	4b07      	ldr	r3, [pc, #28]	@ (8001f9c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f80:	695a      	ldr	r2, [r3, #20]
 8001f82:	2380      	movs	r3, #128	@ 0x80
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	401a      	ands	r2, r3
 8001f88:	2380      	movs	r3, #128	@ 0x80
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d0ed      	beq.n	8001f6c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	0018      	movs	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	b004      	add	sp, #16
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	46c0      	nop			@ (mov r8, r8)
 8001f9c:	40007000 	.word	0x40007000
 8001fa0:	fffff9ff 	.word	0xfffff9ff
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	000f4240 	.word	0x000f4240

08001fac <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001fb0:	4b03      	ldr	r3, [pc, #12]	@ (8001fc0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	23e0      	movs	r3, #224	@ 0xe0
 8001fb6:	01db      	lsls	r3, r3, #7
 8001fb8:	4013      	ands	r3, r2
}
 8001fba:	0018      	movs	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40021000 	.word	0x40021000

08001fc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e2fe      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d100      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x1e>
 8001fe0:	e07c      	b.n	80020dc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fe2:	4bc3      	ldr	r3, [pc, #780]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2238      	movs	r2, #56	@ 0x38
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fec:	4bc0      	ldr	r3, [pc, #768]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	2b10      	cmp	r3, #16
 8001ffa:	d102      	bne.n	8002002 <HAL_RCC_OscConfig+0x3e>
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d002      	beq.n	8002008 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	2b08      	cmp	r3, #8
 8002006:	d10b      	bne.n	8002020 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002008:	4bb9      	ldr	r3, [pc, #740]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	2380      	movs	r3, #128	@ 0x80
 800200e:	029b      	lsls	r3, r3, #10
 8002010:	4013      	ands	r3, r2
 8002012:	d062      	beq.n	80020da <HAL_RCC_OscConfig+0x116>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d15e      	bne.n	80020da <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e2d9      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	2380      	movs	r3, #128	@ 0x80
 8002026:	025b      	lsls	r3, r3, #9
 8002028:	429a      	cmp	r2, r3
 800202a:	d107      	bne.n	800203c <HAL_RCC_OscConfig+0x78>
 800202c:	4bb0      	ldr	r3, [pc, #704]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4baf      	ldr	r3, [pc, #700]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002032:	2180      	movs	r1, #128	@ 0x80
 8002034:	0249      	lsls	r1, r1, #9
 8002036:	430a      	orrs	r2, r1
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	e020      	b.n	800207e <HAL_RCC_OscConfig+0xba>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	23a0      	movs	r3, #160	@ 0xa0
 8002042:	02db      	lsls	r3, r3, #11
 8002044:	429a      	cmp	r2, r3
 8002046:	d10e      	bne.n	8002066 <HAL_RCC_OscConfig+0xa2>
 8002048:	4ba9      	ldr	r3, [pc, #676]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4ba8      	ldr	r3, [pc, #672]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 800204e:	2180      	movs	r1, #128	@ 0x80
 8002050:	02c9      	lsls	r1, r1, #11
 8002052:	430a      	orrs	r2, r1
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	4ba6      	ldr	r3, [pc, #664]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	4ba5      	ldr	r3, [pc, #660]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 800205c:	2180      	movs	r1, #128	@ 0x80
 800205e:	0249      	lsls	r1, r1, #9
 8002060:	430a      	orrs	r2, r1
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	e00b      	b.n	800207e <HAL_RCC_OscConfig+0xba>
 8002066:	4ba2      	ldr	r3, [pc, #648]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	4ba1      	ldr	r3, [pc, #644]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 800206c:	49a1      	ldr	r1, [pc, #644]	@ (80022f4 <HAL_RCC_OscConfig+0x330>)
 800206e:	400a      	ands	r2, r1
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	4b9f      	ldr	r3, [pc, #636]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	4b9e      	ldr	r3, [pc, #632]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002078:	499f      	ldr	r1, [pc, #636]	@ (80022f8 <HAL_RCC_OscConfig+0x334>)
 800207a:	400a      	ands	r2, r1
 800207c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d014      	beq.n	80020b0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002086:	f7ff fba9 	bl	80017dc <HAL_GetTick>
 800208a:	0003      	movs	r3, r0
 800208c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002090:	f7ff fba4 	bl	80017dc <HAL_GetTick>
 8002094:	0002      	movs	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b64      	cmp	r3, #100	@ 0x64
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e298      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020a2:	4b93      	ldr	r3, [pc, #588]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	2380      	movs	r3, #128	@ 0x80
 80020a8:	029b      	lsls	r3, r3, #10
 80020aa:	4013      	ands	r3, r2
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0xcc>
 80020ae:	e015      	b.n	80020dc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7ff fb94 	bl	80017dc <HAL_GetTick>
 80020b4:	0003      	movs	r3, r0
 80020b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ba:	f7ff fb8f 	bl	80017dc <HAL_GetTick>
 80020be:	0002      	movs	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b64      	cmp	r3, #100	@ 0x64
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e283      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020cc:	4b88      	ldr	r3, [pc, #544]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	2380      	movs	r3, #128	@ 0x80
 80020d2:	029b      	lsls	r3, r3, #10
 80020d4:	4013      	ands	r3, r2
 80020d6:	d1f0      	bne.n	80020ba <HAL_RCC_OscConfig+0xf6>
 80020d8:	e000      	b.n	80020dc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020da:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2202      	movs	r2, #2
 80020e2:	4013      	ands	r3, r2
 80020e4:	d100      	bne.n	80020e8 <HAL_RCC_OscConfig+0x124>
 80020e6:	e099      	b.n	800221c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020e8:	4b81      	ldr	r3, [pc, #516]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	2238      	movs	r2, #56	@ 0x38
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020f2:	4b7f      	ldr	r3, [pc, #508]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	2203      	movs	r2, #3
 80020f8:	4013      	ands	r3, r2
 80020fa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2b10      	cmp	r3, #16
 8002100:	d102      	bne.n	8002108 <HAL_RCC_OscConfig+0x144>
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d002      	beq.n	800210e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d135      	bne.n	800217a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800210e:	4b78      	ldr	r3, [pc, #480]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	2380      	movs	r3, #128	@ 0x80
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4013      	ands	r3, r2
 8002118:	d005      	beq.n	8002126 <HAL_RCC_OscConfig+0x162>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e256      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002126:	4b72      	ldr	r3, [pc, #456]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4a74      	ldr	r2, [pc, #464]	@ (80022fc <HAL_RCC_OscConfig+0x338>)
 800212c:	4013      	ands	r3, r2
 800212e:	0019      	movs	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	021a      	lsls	r2, r3, #8
 8002136:	4b6e      	ldr	r3, [pc, #440]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002138:	430a      	orrs	r2, r1
 800213a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d112      	bne.n	8002168 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002142:	4b6b      	ldr	r3, [pc, #428]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a6e      	ldr	r2, [pc, #440]	@ (8002300 <HAL_RCC_OscConfig+0x33c>)
 8002148:	4013      	ands	r3, r2
 800214a:	0019      	movs	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	4b67      	ldr	r3, [pc, #412]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002152:	430a      	orrs	r2, r1
 8002154:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002156:	4b66      	ldr	r3, [pc, #408]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	0adb      	lsrs	r3, r3, #11
 800215c:	2207      	movs	r2, #7
 800215e:	4013      	ands	r3, r2
 8002160:	4a68      	ldr	r2, [pc, #416]	@ (8002304 <HAL_RCC_OscConfig+0x340>)
 8002162:	40da      	lsrs	r2, r3
 8002164:	4b68      	ldr	r3, [pc, #416]	@ (8002308 <HAL_RCC_OscConfig+0x344>)
 8002166:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002168:	4b68      	ldr	r3, [pc, #416]	@ (800230c <HAL_RCC_OscConfig+0x348>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	0018      	movs	r0, r3
 800216e:	f7ff fad9 	bl	8001724 <HAL_InitTick>
 8002172:	1e03      	subs	r3, r0, #0
 8002174:	d051      	beq.n	800221a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e22c      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d030      	beq.n	80021e4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002182:	4b5b      	ldr	r3, [pc, #364]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a5e      	ldr	r2, [pc, #376]	@ (8002300 <HAL_RCC_OscConfig+0x33c>)
 8002188:	4013      	ands	r3, r2
 800218a:	0019      	movs	r1, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	4b57      	ldr	r3, [pc, #348]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002192:	430a      	orrs	r2, r1
 8002194:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002196:	4b56      	ldr	r3, [pc, #344]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	4b55      	ldr	r3, [pc, #340]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 800219c:	2180      	movs	r1, #128	@ 0x80
 800219e:	0049      	lsls	r1, r1, #1
 80021a0:	430a      	orrs	r2, r1
 80021a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a4:	f7ff fb1a 	bl	80017dc <HAL_GetTick>
 80021a8:	0003      	movs	r3, r0
 80021aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ae:	f7ff fb15 	bl	80017dc <HAL_GetTick>
 80021b2:	0002      	movs	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e209      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021c0:	4b4b      	ldr	r3, [pc, #300]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	2380      	movs	r3, #128	@ 0x80
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4013      	ands	r3, r2
 80021ca:	d0f0      	beq.n	80021ae <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021cc:	4b48      	ldr	r3, [pc, #288]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	4a4a      	ldr	r2, [pc, #296]	@ (80022fc <HAL_RCC_OscConfig+0x338>)
 80021d2:	4013      	ands	r3, r2
 80021d4:	0019      	movs	r1, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	021a      	lsls	r2, r3, #8
 80021dc:	4b44      	ldr	r3, [pc, #272]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 80021de:	430a      	orrs	r2, r1
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	e01b      	b.n	800221c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80021e4:	4b42      	ldr	r3, [pc, #264]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4b41      	ldr	r3, [pc, #260]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 80021ea:	4949      	ldr	r1, [pc, #292]	@ (8002310 <HAL_RCC_OscConfig+0x34c>)
 80021ec:	400a      	ands	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7ff faf4 	bl	80017dc <HAL_GetTick>
 80021f4:	0003      	movs	r3, r0
 80021f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021fa:	f7ff faef 	bl	80017dc <HAL_GetTick>
 80021fe:	0002      	movs	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e1e3      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800220c:	4b38      	ldr	r3, [pc, #224]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	2380      	movs	r3, #128	@ 0x80
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4013      	ands	r3, r2
 8002216:	d1f0      	bne.n	80021fa <HAL_RCC_OscConfig+0x236>
 8002218:	e000      	b.n	800221c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800221a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2208      	movs	r2, #8
 8002222:	4013      	ands	r3, r2
 8002224:	d047      	beq.n	80022b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002226:	4b32      	ldr	r3, [pc, #200]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2238      	movs	r2, #56	@ 0x38
 800222c:	4013      	ands	r3, r2
 800222e:	2b18      	cmp	r3, #24
 8002230:	d10a      	bne.n	8002248 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002232:	4b2f      	ldr	r3, [pc, #188]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002234:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002236:	2202      	movs	r2, #2
 8002238:	4013      	ands	r3, r2
 800223a:	d03c      	beq.n	80022b6 <HAL_RCC_OscConfig+0x2f2>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d138      	bne.n	80022b6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e1c5      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d019      	beq.n	8002284 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002250:	4b27      	ldr	r3, [pc, #156]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002252:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002254:	4b26      	ldr	r3, [pc, #152]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002256:	2101      	movs	r1, #1
 8002258:	430a      	orrs	r2, r1
 800225a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7ff fabe 	bl	80017dc <HAL_GetTick>
 8002260:	0003      	movs	r3, r0
 8002262:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002266:	f7ff fab9 	bl	80017dc <HAL_GetTick>
 800226a:	0002      	movs	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e1ad      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002278:	4b1d      	ldr	r3, [pc, #116]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 800227a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800227c:	2202      	movs	r2, #2
 800227e:	4013      	ands	r3, r2
 8002280:	d0f1      	beq.n	8002266 <HAL_RCC_OscConfig+0x2a2>
 8002282:	e018      	b.n	80022b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002284:	4b1a      	ldr	r3, [pc, #104]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 8002286:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002288:	4b19      	ldr	r3, [pc, #100]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 800228a:	2101      	movs	r1, #1
 800228c:	438a      	bics	r2, r1
 800228e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002290:	f7ff faa4 	bl	80017dc <HAL_GetTick>
 8002294:	0003      	movs	r3, r0
 8002296:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800229a:	f7ff fa9f 	bl	80017dc <HAL_GetTick>
 800229e:	0002      	movs	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e193      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022ac:	4b10      	ldr	r3, [pc, #64]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 80022ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022b0:	2202      	movs	r2, #2
 80022b2:	4013      	ands	r3, r2
 80022b4:	d1f1      	bne.n	800229a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2204      	movs	r2, #4
 80022bc:	4013      	ands	r3, r2
 80022be:	d100      	bne.n	80022c2 <HAL_RCC_OscConfig+0x2fe>
 80022c0:	e0c6      	b.n	8002450 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022c2:	231f      	movs	r3, #31
 80022c4:	18fb      	adds	r3, r7, r3
 80022c6:	2200      	movs	r2, #0
 80022c8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80022ca:	4b09      	ldr	r3, [pc, #36]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2238      	movs	r2, #56	@ 0x38
 80022d0:	4013      	ands	r3, r2
 80022d2:	2b20      	cmp	r3, #32
 80022d4:	d11e      	bne.n	8002314 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80022d6:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <HAL_RCC_OscConfig+0x32c>)
 80022d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022da:	2202      	movs	r2, #2
 80022dc:	4013      	ands	r3, r2
 80022de:	d100      	bne.n	80022e2 <HAL_RCC_OscConfig+0x31e>
 80022e0:	e0b6      	b.n	8002450 <HAL_RCC_OscConfig+0x48c>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d000      	beq.n	80022ec <HAL_RCC_OscConfig+0x328>
 80022ea:	e0b1      	b.n	8002450 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e171      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
 80022f0:	40021000 	.word	0x40021000
 80022f4:	fffeffff 	.word	0xfffeffff
 80022f8:	fffbffff 	.word	0xfffbffff
 80022fc:	ffff80ff 	.word	0xffff80ff
 8002300:	ffffc7ff 	.word	0xffffc7ff
 8002304:	00f42400 	.word	0x00f42400
 8002308:	20000000 	.word	0x20000000
 800230c:	2000001c 	.word	0x2000001c
 8002310:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002314:	4bb1      	ldr	r3, [pc, #708]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 8002316:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002318:	2380      	movs	r3, #128	@ 0x80
 800231a:	055b      	lsls	r3, r3, #21
 800231c:	4013      	ands	r3, r2
 800231e:	d101      	bne.n	8002324 <HAL_RCC_OscConfig+0x360>
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x362>
 8002324:	2300      	movs	r3, #0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d011      	beq.n	800234e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800232a:	4bac      	ldr	r3, [pc, #688]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 800232c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800232e:	4bab      	ldr	r3, [pc, #684]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 8002330:	2180      	movs	r1, #128	@ 0x80
 8002332:	0549      	lsls	r1, r1, #21
 8002334:	430a      	orrs	r2, r1
 8002336:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002338:	4ba8      	ldr	r3, [pc, #672]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 800233a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800233c:	2380      	movs	r3, #128	@ 0x80
 800233e:	055b      	lsls	r3, r3, #21
 8002340:	4013      	ands	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002346:	231f      	movs	r3, #31
 8002348:	18fb      	adds	r3, r7, r3
 800234a:	2201      	movs	r2, #1
 800234c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800234e:	4ba4      	ldr	r3, [pc, #656]	@ (80025e0 <HAL_RCC_OscConfig+0x61c>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	2380      	movs	r3, #128	@ 0x80
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	4013      	ands	r3, r2
 8002358:	d11a      	bne.n	8002390 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800235a:	4ba1      	ldr	r3, [pc, #644]	@ (80025e0 <HAL_RCC_OscConfig+0x61c>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	4ba0      	ldr	r3, [pc, #640]	@ (80025e0 <HAL_RCC_OscConfig+0x61c>)
 8002360:	2180      	movs	r1, #128	@ 0x80
 8002362:	0049      	lsls	r1, r1, #1
 8002364:	430a      	orrs	r2, r1
 8002366:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002368:	f7ff fa38 	bl	80017dc <HAL_GetTick>
 800236c:	0003      	movs	r3, r0
 800236e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002372:	f7ff fa33 	bl	80017dc <HAL_GetTick>
 8002376:	0002      	movs	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e127      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002384:	4b96      	ldr	r3, [pc, #600]	@ (80025e0 <HAL_RCC_OscConfig+0x61c>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	2380      	movs	r3, #128	@ 0x80
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	4013      	ands	r3, r2
 800238e:	d0f0      	beq.n	8002372 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d106      	bne.n	80023a6 <HAL_RCC_OscConfig+0x3e2>
 8002398:	4b90      	ldr	r3, [pc, #576]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 800239a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800239c:	4b8f      	ldr	r3, [pc, #572]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 800239e:	2101      	movs	r1, #1
 80023a0:	430a      	orrs	r2, r1
 80023a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023a4:	e01c      	b.n	80023e0 <HAL_RCC_OscConfig+0x41c>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2b05      	cmp	r3, #5
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCC_OscConfig+0x404>
 80023ae:	4b8b      	ldr	r3, [pc, #556]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 80023b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023b2:	4b8a      	ldr	r3, [pc, #552]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 80023b4:	2104      	movs	r1, #4
 80023b6:	430a      	orrs	r2, r1
 80023b8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023ba:	4b88      	ldr	r3, [pc, #544]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 80023bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023be:	4b87      	ldr	r3, [pc, #540]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 80023c0:	2101      	movs	r1, #1
 80023c2:	430a      	orrs	r2, r1
 80023c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023c6:	e00b      	b.n	80023e0 <HAL_RCC_OscConfig+0x41c>
 80023c8:	4b84      	ldr	r3, [pc, #528]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 80023ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023cc:	4b83      	ldr	r3, [pc, #524]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 80023ce:	2101      	movs	r1, #1
 80023d0:	438a      	bics	r2, r1
 80023d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023d4:	4b81      	ldr	r3, [pc, #516]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 80023d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023d8:	4b80      	ldr	r3, [pc, #512]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 80023da:	2104      	movs	r1, #4
 80023dc:	438a      	bics	r2, r1
 80023de:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d014      	beq.n	8002412 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7ff f9f8 	bl	80017dc <HAL_GetTick>
 80023ec:	0003      	movs	r3, r0
 80023ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023f0:	e009      	b.n	8002406 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f2:	f7ff f9f3 	bl	80017dc <HAL_GetTick>
 80023f6:	0002      	movs	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	4a79      	ldr	r2, [pc, #484]	@ (80025e4 <HAL_RCC_OscConfig+0x620>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e0e6      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002406:	4b75      	ldr	r3, [pc, #468]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 8002408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800240a:	2202      	movs	r2, #2
 800240c:	4013      	ands	r3, r2
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCC_OscConfig+0x42e>
 8002410:	e013      	b.n	800243a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002412:	f7ff f9e3 	bl	80017dc <HAL_GetTick>
 8002416:	0003      	movs	r3, r0
 8002418:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800241a:	e009      	b.n	8002430 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241c:	f7ff f9de 	bl	80017dc <HAL_GetTick>
 8002420:	0002      	movs	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	4a6f      	ldr	r2, [pc, #444]	@ (80025e4 <HAL_RCC_OscConfig+0x620>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e0d1      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002430:	4b6a      	ldr	r3, [pc, #424]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 8002432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002434:	2202      	movs	r2, #2
 8002436:	4013      	ands	r3, r2
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800243a:	231f      	movs	r3, #31
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d105      	bne.n	8002450 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002444:	4b65      	ldr	r3, [pc, #404]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 8002446:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002448:	4b64      	ldr	r3, [pc, #400]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 800244a:	4967      	ldr	r1, [pc, #412]	@ (80025e8 <HAL_RCC_OscConfig+0x624>)
 800244c:	400a      	ands	r2, r1
 800244e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d100      	bne.n	800245a <HAL_RCC_OscConfig+0x496>
 8002458:	e0bb      	b.n	80025d2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800245a:	4b60      	ldr	r3, [pc, #384]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2238      	movs	r2, #56	@ 0x38
 8002460:	4013      	ands	r3, r2
 8002462:	2b10      	cmp	r3, #16
 8002464:	d100      	bne.n	8002468 <HAL_RCC_OscConfig+0x4a4>
 8002466:	e07b      	b.n	8002560 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	2b02      	cmp	r3, #2
 800246e:	d156      	bne.n	800251e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002470:	4b5a      	ldr	r3, [pc, #360]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4b59      	ldr	r3, [pc, #356]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 8002476:	495d      	ldr	r1, [pc, #372]	@ (80025ec <HAL_RCC_OscConfig+0x628>)
 8002478:	400a      	ands	r2, r1
 800247a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7ff f9ae 	bl	80017dc <HAL_GetTick>
 8002480:	0003      	movs	r3, r0
 8002482:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002486:	f7ff f9a9 	bl	80017dc <HAL_GetTick>
 800248a:	0002      	movs	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e09d      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002498:	4b50      	ldr	r3, [pc, #320]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	2380      	movs	r3, #128	@ 0x80
 800249e:	049b      	lsls	r3, r3, #18
 80024a0:	4013      	ands	r3, r2
 80024a2:	d1f0      	bne.n	8002486 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024a4:	4b4d      	ldr	r3, [pc, #308]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	4a51      	ldr	r2, [pc, #324]	@ (80025f0 <HAL_RCC_OscConfig+0x62c>)
 80024aa:	4013      	ands	r3, r2
 80024ac:	0019      	movs	r1, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1a      	ldr	r2, [r3, #32]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c4:	431a      	orrs	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024d0:	431a      	orrs	r2, r3
 80024d2:	4b42      	ldr	r3, [pc, #264]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 80024d4:	430a      	orrs	r2, r1
 80024d6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d8:	4b40      	ldr	r3, [pc, #256]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4b3f      	ldr	r3, [pc, #252]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 80024de:	2180      	movs	r1, #128	@ 0x80
 80024e0:	0449      	lsls	r1, r1, #17
 80024e2:	430a      	orrs	r2, r1
 80024e4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80024e6:	4b3d      	ldr	r3, [pc, #244]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	4b3c      	ldr	r3, [pc, #240]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 80024ec:	2180      	movs	r1, #128	@ 0x80
 80024ee:	0549      	lsls	r1, r1, #21
 80024f0:	430a      	orrs	r2, r1
 80024f2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f4:	f7ff f972 	bl	80017dc <HAL_GetTick>
 80024f8:	0003      	movs	r3, r0
 80024fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fe:	f7ff f96d 	bl	80017dc <HAL_GetTick>
 8002502:	0002      	movs	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e061      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002510:	4b32      	ldr	r3, [pc, #200]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	2380      	movs	r3, #128	@ 0x80
 8002516:	049b      	lsls	r3, r3, #18
 8002518:	4013      	ands	r3, r2
 800251a:	d0f0      	beq.n	80024fe <HAL_RCC_OscConfig+0x53a>
 800251c:	e059      	b.n	80025d2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251e:	4b2f      	ldr	r3, [pc, #188]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	4b2e      	ldr	r3, [pc, #184]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 8002524:	4931      	ldr	r1, [pc, #196]	@ (80025ec <HAL_RCC_OscConfig+0x628>)
 8002526:	400a      	ands	r2, r1
 8002528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252a:	f7ff f957 	bl	80017dc <HAL_GetTick>
 800252e:	0003      	movs	r3, r0
 8002530:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002534:	f7ff f952 	bl	80017dc <HAL_GetTick>
 8002538:	0002      	movs	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e046      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002546:	4b25      	ldr	r3, [pc, #148]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	2380      	movs	r3, #128	@ 0x80
 800254c:	049b      	lsls	r3, r3, #18
 800254e:	4013      	ands	r3, r2
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002552:	4b22      	ldr	r3, [pc, #136]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	4b21      	ldr	r3, [pc, #132]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 8002558:	4926      	ldr	r1, [pc, #152]	@ (80025f4 <HAL_RCC_OscConfig+0x630>)
 800255a:	400a      	ands	r2, r1
 800255c:	60da      	str	r2, [r3, #12]
 800255e:	e038      	b.n	80025d2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d101      	bne.n	800256c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e033      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800256c:	4b1b      	ldr	r3, [pc, #108]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2203      	movs	r2, #3
 8002576:	401a      	ands	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	429a      	cmp	r2, r3
 800257e:	d126      	bne.n	80025ce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	2270      	movs	r2, #112	@ 0x70
 8002584:	401a      	ands	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258a:	429a      	cmp	r2, r3
 800258c:	d11f      	bne.n	80025ce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	23fe      	movs	r3, #254	@ 0xfe
 8002592:	01db      	lsls	r3, r3, #7
 8002594:	401a      	ands	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800259c:	429a      	cmp	r2, r3
 800259e:	d116      	bne.n	80025ce <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	23f8      	movs	r3, #248	@ 0xf8
 80025a4:	039b      	lsls	r3, r3, #14
 80025a6:	401a      	ands	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d10e      	bne.n	80025ce <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	23e0      	movs	r3, #224	@ 0xe0
 80025b4:	051b      	lsls	r3, r3, #20
 80025b6:	401a      	ands	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025bc:	429a      	cmp	r2, r3
 80025be:	d106      	bne.n	80025ce <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	0f5b      	lsrs	r3, r3, #29
 80025c4:	075a      	lsls	r2, r3, #29
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	0018      	movs	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b008      	add	sp, #32
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40007000 	.word	0x40007000
 80025e4:	00001388 	.word	0x00001388
 80025e8:	efffffff 	.word	0xefffffff
 80025ec:	feffffff 	.word	0xfeffffff
 80025f0:	11c1808c 	.word	0x11c1808c
 80025f4:	eefefffc 	.word	0xeefefffc

080025f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0e9      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800260c:	4b76      	ldr	r3, [pc, #472]	@ (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2207      	movs	r2, #7
 8002612:	4013      	ands	r3, r2
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d91e      	bls.n	8002658 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261a:	4b73      	ldr	r3, [pc, #460]	@ (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2207      	movs	r2, #7
 8002620:	4393      	bics	r3, r2
 8002622:	0019      	movs	r1, r3
 8002624:	4b70      	ldr	r3, [pc, #448]	@ (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800262c:	f7ff f8d6 	bl	80017dc <HAL_GetTick>
 8002630:	0003      	movs	r3, r0
 8002632:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002634:	e009      	b.n	800264a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002636:	f7ff f8d1 	bl	80017dc <HAL_GetTick>
 800263a:	0002      	movs	r2, r0
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	4a6a      	ldr	r2, [pc, #424]	@ (80027ec <HAL_RCC_ClockConfig+0x1f4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d901      	bls.n	800264a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e0ca      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800264a:	4b67      	ldr	r3, [pc, #412]	@ (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2207      	movs	r2, #7
 8002650:	4013      	ands	r3, r2
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d1ee      	bne.n	8002636 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2202      	movs	r2, #2
 800265e:	4013      	ands	r3, r2
 8002660:	d015      	beq.n	800268e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2204      	movs	r2, #4
 8002668:	4013      	ands	r3, r2
 800266a:	d006      	beq.n	800267a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800266c:	4b60      	ldr	r3, [pc, #384]	@ (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	4b5f      	ldr	r3, [pc, #380]	@ (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 8002672:	21e0      	movs	r1, #224	@ 0xe0
 8002674:	01c9      	lsls	r1, r1, #7
 8002676:	430a      	orrs	r2, r1
 8002678:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800267a:	4b5d      	ldr	r3, [pc, #372]	@ (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	4a5d      	ldr	r2, [pc, #372]	@ (80027f4 <HAL_RCC_ClockConfig+0x1fc>)
 8002680:	4013      	ands	r3, r2
 8002682:	0019      	movs	r1, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	4b59      	ldr	r3, [pc, #356]	@ (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 800268a:	430a      	orrs	r2, r1
 800268c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2201      	movs	r2, #1
 8002694:	4013      	ands	r3, r2
 8002696:	d057      	beq.n	8002748 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d107      	bne.n	80026b0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026a0:	4b53      	ldr	r3, [pc, #332]	@ (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	2380      	movs	r3, #128	@ 0x80
 80026a6:	029b      	lsls	r3, r3, #10
 80026a8:	4013      	ands	r3, r2
 80026aa:	d12b      	bne.n	8002704 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e097      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d107      	bne.n	80026c8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026b8:	4b4d      	ldr	r3, [pc, #308]	@ (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	2380      	movs	r3, #128	@ 0x80
 80026be:	049b      	lsls	r3, r3, #18
 80026c0:	4013      	ands	r3, r2
 80026c2:	d11f      	bne.n	8002704 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e08b      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d107      	bne.n	80026e0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026d0:	4b47      	ldr	r3, [pc, #284]	@ (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	2380      	movs	r3, #128	@ 0x80
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4013      	ands	r3, r2
 80026da:	d113      	bne.n	8002704 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e07f      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d106      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026e8:	4b41      	ldr	r3, [pc, #260]	@ (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 80026ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ec:	2202      	movs	r2, #2
 80026ee:	4013      	ands	r3, r2
 80026f0:	d108      	bne.n	8002704 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e074      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026f6:	4b3e      	ldr	r3, [pc, #248]	@ (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 80026f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fa:	2202      	movs	r2, #2
 80026fc:	4013      	ands	r3, r2
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e06d      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002704:	4b3a      	ldr	r3, [pc, #232]	@ (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2207      	movs	r2, #7
 800270a:	4393      	bics	r3, r2
 800270c:	0019      	movs	r1, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	4b37      	ldr	r3, [pc, #220]	@ (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 8002714:	430a      	orrs	r2, r1
 8002716:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002718:	f7ff f860 	bl	80017dc <HAL_GetTick>
 800271c:	0003      	movs	r3, r0
 800271e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002720:	e009      	b.n	8002736 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002722:	f7ff f85b 	bl	80017dc <HAL_GetTick>
 8002726:	0002      	movs	r2, r0
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	4a2f      	ldr	r2, [pc, #188]	@ (80027ec <HAL_RCC_ClockConfig+0x1f4>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e054      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002736:	4b2e      	ldr	r3, [pc, #184]	@ (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2238      	movs	r2, #56	@ 0x38
 800273c:	401a      	ands	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	429a      	cmp	r2, r3
 8002746:	d1ec      	bne.n	8002722 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002748:	4b27      	ldr	r3, [pc, #156]	@ (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2207      	movs	r2, #7
 800274e:	4013      	ands	r3, r2
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d21e      	bcs.n	8002794 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b24      	ldr	r3, [pc, #144]	@ (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2207      	movs	r2, #7
 800275c:	4393      	bics	r3, r2
 800275e:	0019      	movs	r1, r3
 8002760:	4b21      	ldr	r3, [pc, #132]	@ (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002768:	f7ff f838 	bl	80017dc <HAL_GetTick>
 800276c:	0003      	movs	r3, r0
 800276e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002770:	e009      	b.n	8002786 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002772:	f7ff f833 	bl	80017dc <HAL_GetTick>
 8002776:	0002      	movs	r2, r0
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	4a1b      	ldr	r2, [pc, #108]	@ (80027ec <HAL_RCC_ClockConfig+0x1f4>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e02c      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002786:	4b18      	ldr	r3, [pc, #96]	@ (80027e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2207      	movs	r2, #7
 800278c:	4013      	ands	r3, r2
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d1ee      	bne.n	8002772 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2204      	movs	r2, #4
 800279a:	4013      	ands	r3, r2
 800279c:	d009      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800279e:	4b14      	ldr	r3, [pc, #80]	@ (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	4a15      	ldr	r2, [pc, #84]	@ (80027f8 <HAL_RCC_ClockConfig+0x200>)
 80027a4:	4013      	ands	r3, r2
 80027a6:	0019      	movs	r1, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	4b10      	ldr	r3, [pc, #64]	@ (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 80027ae:	430a      	orrs	r2, r1
 80027b0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80027b2:	f000 f829 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 80027b6:	0001      	movs	r1, r0
 80027b8:	4b0d      	ldr	r3, [pc, #52]	@ (80027f0 <HAL_RCC_ClockConfig+0x1f8>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	0a1b      	lsrs	r3, r3, #8
 80027be:	220f      	movs	r2, #15
 80027c0:	401a      	ands	r2, r3
 80027c2:	4b0e      	ldr	r3, [pc, #56]	@ (80027fc <HAL_RCC_ClockConfig+0x204>)
 80027c4:	0092      	lsls	r2, r2, #2
 80027c6:	58d3      	ldr	r3, [r2, r3]
 80027c8:	221f      	movs	r2, #31
 80027ca:	4013      	ands	r3, r2
 80027cc:	000a      	movs	r2, r1
 80027ce:	40da      	lsrs	r2, r3
 80027d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002800 <HAL_RCC_ClockConfig+0x208>)
 80027d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80027d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002804 <HAL_RCC_ClockConfig+0x20c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	0018      	movs	r0, r3
 80027da:	f7fe ffa3 	bl	8001724 <HAL_InitTick>
 80027de:	0003      	movs	r3, r0
}
 80027e0:	0018      	movs	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b004      	add	sp, #16
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40022000 	.word	0x40022000
 80027ec:	00001388 	.word	0x00001388
 80027f0:	40021000 	.word	0x40021000
 80027f4:	fffff0ff 	.word	0xfffff0ff
 80027f8:	ffff8fff 	.word	0xffff8fff
 80027fc:	080052cc 	.word	0x080052cc
 8002800:	20000000 	.word	0x20000000
 8002804:	2000001c 	.word	0x2000001c

08002808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800280e:	4b3c      	ldr	r3, [pc, #240]	@ (8002900 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2238      	movs	r2, #56	@ 0x38
 8002814:	4013      	ands	r3, r2
 8002816:	d10f      	bne.n	8002838 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002818:	4b39      	ldr	r3, [pc, #228]	@ (8002900 <HAL_RCC_GetSysClockFreq+0xf8>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	0adb      	lsrs	r3, r3, #11
 800281e:	2207      	movs	r2, #7
 8002820:	4013      	ands	r3, r2
 8002822:	2201      	movs	r2, #1
 8002824:	409a      	lsls	r2, r3
 8002826:	0013      	movs	r3, r2
 8002828:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800282a:	6839      	ldr	r1, [r7, #0]
 800282c:	4835      	ldr	r0, [pc, #212]	@ (8002904 <HAL_RCC_GetSysClockFreq+0xfc>)
 800282e:	f7fd fc69 	bl	8000104 <__udivsi3>
 8002832:	0003      	movs	r3, r0
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	e05d      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002838:	4b31      	ldr	r3, [pc, #196]	@ (8002900 <HAL_RCC_GetSysClockFreq+0xf8>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2238      	movs	r2, #56	@ 0x38
 800283e:	4013      	ands	r3, r2
 8002840:	2b08      	cmp	r3, #8
 8002842:	d102      	bne.n	800284a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002844:	4b30      	ldr	r3, [pc, #192]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x100>)
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	e054      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800284a:	4b2d      	ldr	r3, [pc, #180]	@ (8002900 <HAL_RCC_GetSysClockFreq+0xf8>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2238      	movs	r2, #56	@ 0x38
 8002850:	4013      	ands	r3, r2
 8002852:	2b10      	cmp	r3, #16
 8002854:	d138      	bne.n	80028c8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002856:	4b2a      	ldr	r3, [pc, #168]	@ (8002900 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	2203      	movs	r2, #3
 800285c:	4013      	ands	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002860:	4b27      	ldr	r3, [pc, #156]	@ (8002900 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	091b      	lsrs	r3, r3, #4
 8002866:	2207      	movs	r2, #7
 8002868:	4013      	ands	r3, r2
 800286a:	3301      	adds	r3, #1
 800286c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2b03      	cmp	r3, #3
 8002872:	d10d      	bne.n	8002890 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002874:	68b9      	ldr	r1, [r7, #8]
 8002876:	4824      	ldr	r0, [pc, #144]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x100>)
 8002878:	f7fd fc44 	bl	8000104 <__udivsi3>
 800287c:	0003      	movs	r3, r0
 800287e:	0019      	movs	r1, r3
 8002880:	4b1f      	ldr	r3, [pc, #124]	@ (8002900 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	0a1b      	lsrs	r3, r3, #8
 8002886:	227f      	movs	r2, #127	@ 0x7f
 8002888:	4013      	ands	r3, r2
 800288a:	434b      	muls	r3, r1
 800288c:	617b      	str	r3, [r7, #20]
        break;
 800288e:	e00d      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002890:	68b9      	ldr	r1, [r7, #8]
 8002892:	481c      	ldr	r0, [pc, #112]	@ (8002904 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002894:	f7fd fc36 	bl	8000104 <__udivsi3>
 8002898:	0003      	movs	r3, r0
 800289a:	0019      	movs	r1, r3
 800289c:	4b18      	ldr	r3, [pc, #96]	@ (8002900 <HAL_RCC_GetSysClockFreq+0xf8>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	0a1b      	lsrs	r3, r3, #8
 80028a2:	227f      	movs	r2, #127	@ 0x7f
 80028a4:	4013      	ands	r3, r2
 80028a6:	434b      	muls	r3, r1
 80028a8:	617b      	str	r3, [r7, #20]
        break;
 80028aa:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80028ac:	4b14      	ldr	r3, [pc, #80]	@ (8002900 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	0f5b      	lsrs	r3, r3, #29
 80028b2:	2207      	movs	r2, #7
 80028b4:	4013      	ands	r3, r2
 80028b6:	3301      	adds	r3, #1
 80028b8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	6978      	ldr	r0, [r7, #20]
 80028be:	f7fd fc21 	bl	8000104 <__udivsi3>
 80028c2:	0003      	movs	r3, r0
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	e015      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80028c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002900 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2238      	movs	r2, #56	@ 0x38
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b20      	cmp	r3, #32
 80028d2:	d103      	bne.n	80028dc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80028d4:	2380      	movs	r3, #128	@ 0x80
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	e00b      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80028dc:	4b08      	ldr	r3, [pc, #32]	@ (8002900 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2238      	movs	r2, #56	@ 0x38
 80028e2:	4013      	ands	r3, r2
 80028e4:	2b18      	cmp	r3, #24
 80028e6:	d103      	bne.n	80028f0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80028e8:	23fa      	movs	r3, #250	@ 0xfa
 80028ea:	01db      	lsls	r3, r3, #7
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	e001      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80028f4:	693b      	ldr	r3, [r7, #16]
}
 80028f6:	0018      	movs	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b006      	add	sp, #24
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	46c0      	nop			@ (mov r8, r8)
 8002900:	40021000 	.word	0x40021000
 8002904:	00f42400 	.word	0x00f42400
 8002908:	007a1200 	.word	0x007a1200

0800290c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002910:	4b02      	ldr	r3, [pc, #8]	@ (800291c <HAL_RCC_GetHCLKFreq+0x10>)
 8002912:	681b      	ldr	r3, [r3, #0]
}
 8002914:	0018      	movs	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	46c0      	nop			@ (mov r8, r8)
 800291c:	20000000 	.word	0x20000000

08002920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002920:	b5b0      	push	{r4, r5, r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002924:	f7ff fff2 	bl	800290c <HAL_RCC_GetHCLKFreq>
 8002928:	0004      	movs	r4, r0
 800292a:	f7ff fb3f 	bl	8001fac <LL_RCC_GetAPB1Prescaler>
 800292e:	0003      	movs	r3, r0
 8002930:	0b1a      	lsrs	r2, r3, #12
 8002932:	4b05      	ldr	r3, [pc, #20]	@ (8002948 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002934:	0092      	lsls	r2, r2, #2
 8002936:	58d3      	ldr	r3, [r2, r3]
 8002938:	221f      	movs	r2, #31
 800293a:	4013      	ands	r3, r2
 800293c:	40dc      	lsrs	r4, r3
 800293e:	0023      	movs	r3, r4
}
 8002940:	0018      	movs	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	bdb0      	pop	{r4, r5, r7, pc}
 8002946:	46c0      	nop			@ (mov r8, r8)
 8002948:	0800530c 	.word	0x0800530c

0800294c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002954:	2313      	movs	r3, #19
 8002956:	18fb      	adds	r3, r7, r3
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800295c:	2312      	movs	r3, #18
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	2380      	movs	r3, #128	@ 0x80
 800296a:	029b      	lsls	r3, r3, #10
 800296c:	4013      	ands	r3, r2
 800296e:	d100      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002970:	e0a3      	b.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002972:	2011      	movs	r0, #17
 8002974:	183b      	adds	r3, r7, r0
 8002976:	2200      	movs	r2, #0
 8002978:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297a:	4bc3      	ldr	r3, [pc, #780]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800297c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800297e:	2380      	movs	r3, #128	@ 0x80
 8002980:	055b      	lsls	r3, r3, #21
 8002982:	4013      	ands	r3, r2
 8002984:	d110      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002986:	4bc0      	ldr	r3, [pc, #768]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002988:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800298a:	4bbf      	ldr	r3, [pc, #764]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800298c:	2180      	movs	r1, #128	@ 0x80
 800298e:	0549      	lsls	r1, r1, #21
 8002990:	430a      	orrs	r2, r1
 8002992:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002994:	4bbc      	ldr	r3, [pc, #752]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002996:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002998:	2380      	movs	r3, #128	@ 0x80
 800299a:	055b      	lsls	r3, r3, #21
 800299c:	4013      	ands	r3, r2
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a2:	183b      	adds	r3, r7, r0
 80029a4:	2201      	movs	r2, #1
 80029a6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029a8:	4bb8      	ldr	r3, [pc, #736]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	4bb7      	ldr	r3, [pc, #732]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80029ae:	2180      	movs	r1, #128	@ 0x80
 80029b0:	0049      	lsls	r1, r1, #1
 80029b2:	430a      	orrs	r2, r1
 80029b4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029b6:	f7fe ff11 	bl	80017dc <HAL_GetTick>
 80029ba:	0003      	movs	r3, r0
 80029bc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029be:	e00b      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c0:	f7fe ff0c 	bl	80017dc <HAL_GetTick>
 80029c4:	0002      	movs	r2, r0
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d904      	bls.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80029ce:	2313      	movs	r3, #19
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	2203      	movs	r2, #3
 80029d4:	701a      	strb	r2, [r3, #0]
        break;
 80029d6:	e005      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029d8:	4bac      	ldr	r3, [pc, #688]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	2380      	movs	r3, #128	@ 0x80
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	4013      	ands	r3, r2
 80029e2:	d0ed      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80029e4:	2313      	movs	r3, #19
 80029e6:	18fb      	adds	r3, r7, r3
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d154      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029ee:	4ba6      	ldr	r3, [pc, #664]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029f2:	23c0      	movs	r3, #192	@ 0xc0
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4013      	ands	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d019      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d014      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a0a:	4b9f      	ldr	r3, [pc, #636]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a0e:	4aa0      	ldr	r2, [pc, #640]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a14:	4b9c      	ldr	r3, [pc, #624]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a16:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a18:	4b9b      	ldr	r3, [pc, #620]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a1a:	2180      	movs	r1, #128	@ 0x80
 8002a1c:	0249      	lsls	r1, r1, #9
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a22:	4b99      	ldr	r3, [pc, #612]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a24:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a26:	4b98      	ldr	r3, [pc, #608]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a28:	499a      	ldr	r1, [pc, #616]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002a2a:	400a      	ands	r2, r1
 8002a2c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a2e:	4b96      	ldr	r3, [pc, #600]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2201      	movs	r2, #1
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d016      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3c:	f7fe fece 	bl	80017dc <HAL_GetTick>
 8002a40:	0003      	movs	r3, r0
 8002a42:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a44:	e00c      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a46:	f7fe fec9 	bl	80017dc <HAL_GetTick>
 8002a4a:	0002      	movs	r2, r0
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	4a91      	ldr	r2, [pc, #580]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d904      	bls.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002a56:	2313      	movs	r3, #19
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	701a      	strb	r2, [r3, #0]
            break;
 8002a5e:	e004      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a60:	4b89      	ldr	r3, [pc, #548]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a64:	2202      	movs	r2, #2
 8002a66:	4013      	ands	r3, r2
 8002a68:	d0ed      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002a6a:	2313      	movs	r3, #19
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10a      	bne.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a74:	4b84      	ldr	r3, [pc, #528]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a78:	4a85      	ldr	r2, [pc, #532]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	0019      	movs	r1, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a82:	4b81      	ldr	r3, [pc, #516]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a84:	430a      	orrs	r2, r1
 8002a86:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a88:	e00c      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a8a:	2312      	movs	r3, #18
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	2213      	movs	r2, #19
 8002a90:	18ba      	adds	r2, r7, r2
 8002a92:	7812      	ldrb	r2, [r2, #0]
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	e005      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a98:	2312      	movs	r3, #18
 8002a9a:	18fb      	adds	r3, r7, r3
 8002a9c:	2213      	movs	r2, #19
 8002a9e:	18ba      	adds	r2, r7, r2
 8002aa0:	7812      	ldrb	r2, [r2, #0]
 8002aa2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002aa4:	2311      	movs	r3, #17
 8002aa6:	18fb      	adds	r3, r7, r3
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d105      	bne.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aae:	4b76      	ldr	r3, [pc, #472]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ab0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ab2:	4b75      	ldr	r3, [pc, #468]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ab4:	4979      	ldr	r1, [pc, #484]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002ab6:	400a      	ands	r2, r1
 8002ab8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d009      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ac4:	4b70      	ldr	r3, [pc, #448]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac8:	2203      	movs	r2, #3
 8002aca:	4393      	bics	r3, r2
 8002acc:	0019      	movs	r1, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	4b6d      	ldr	r3, [pc, #436]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2202      	movs	r2, #2
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d009      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ae2:	4b69      	ldr	r3, [pc, #420]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae6:	220c      	movs	r2, #12
 8002ae8:	4393      	bics	r3, r2
 8002aea:	0019      	movs	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	4b65      	ldr	r3, [pc, #404]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002af2:	430a      	orrs	r2, r1
 8002af4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2210      	movs	r2, #16
 8002afc:	4013      	ands	r3, r2
 8002afe:	d009      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b00:	4b61      	ldr	r3, [pc, #388]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b04:	4a66      	ldr	r2, [pc, #408]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	0019      	movs	r1, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	4b5e      	ldr	r3, [pc, #376]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b10:	430a      	orrs	r2, r1
 8002b12:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	2380      	movs	r3, #128	@ 0x80
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d009      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b20:	4b59      	ldr	r3, [pc, #356]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b24:	4a5f      	ldr	r2, [pc, #380]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	0019      	movs	r1, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699a      	ldr	r2, [r3, #24]
 8002b2e:	4b56      	ldr	r3, [pc, #344]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b30:	430a      	orrs	r2, r1
 8002b32:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	2380      	movs	r3, #128	@ 0x80
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d009      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b40:	4b51      	ldr	r3, [pc, #324]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b44:	4a58      	ldr	r2, [pc, #352]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	0019      	movs	r1, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69da      	ldr	r2, [r3, #28]
 8002b4e:	4b4e      	ldr	r3, [pc, #312]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b50:	430a      	orrs	r2, r1
 8002b52:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d009      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b5e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b62:	4a52      	ldr	r2, [pc, #328]	@ (8002cac <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	0019      	movs	r1, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	4b46      	ldr	r3, [pc, #280]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	2380      	movs	r3, #128	@ 0x80
 8002b78:	01db      	lsls	r3, r3, #7
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d015      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b7e:	4b42      	ldr	r3, [pc, #264]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	0899      	lsrs	r1, r3, #2
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1a      	ldr	r2, [r3, #32]
 8002b8a:	4b3f      	ldr	r3, [pc, #252]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1a      	ldr	r2, [r3, #32]
 8002b94:	2380      	movs	r3, #128	@ 0x80
 8002b96:	05db      	lsls	r3, r3, #23
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d106      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b9c:	4b3a      	ldr	r3, [pc, #232]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	4b39      	ldr	r3, [pc, #228]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ba2:	2180      	movs	r1, #128	@ 0x80
 8002ba4:	0249      	lsls	r1, r1, #9
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	2380      	movs	r3, #128	@ 0x80
 8002bb0:	031b      	lsls	r3, r3, #12
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	d009      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002bb6:	4b34      	ldr	r3, [pc, #208]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bba:	2240      	movs	r2, #64	@ 0x40
 8002bbc:	4393      	bics	r3, r2
 8002bbe:	0019      	movs	r1, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bc4:	4b30      	ldr	r3, [pc, #192]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	2380      	movs	r3, #128	@ 0x80
 8002bd0:	039b      	lsls	r3, r3, #14
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d016      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002bd6:	4b2c      	ldr	r3, [pc, #176]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bda:	4a35      	ldr	r2, [pc, #212]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	0019      	movs	r1, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002be4:	4b28      	ldr	r3, [pc, #160]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002be6:	430a      	orrs	r2, r1
 8002be8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bee:	2380      	movs	r3, #128	@ 0x80
 8002bf0:	03db      	lsls	r3, r3, #15
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d106      	bne.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002bf6:	4b24      	ldr	r3, [pc, #144]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	4b23      	ldr	r3, [pc, #140]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bfc:	2180      	movs	r1, #128	@ 0x80
 8002bfe:	0449      	lsls	r1, r1, #17
 8002c00:	430a      	orrs	r2, r1
 8002c02:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	2380      	movs	r3, #128	@ 0x80
 8002c0a:	03db      	lsls	r3, r3, #15
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d016      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002c10:	4b1d      	ldr	r3, [pc, #116]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c14:	4a27      	ldr	r2, [pc, #156]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002c16:	4013      	ands	r3, r2
 8002c18:	0019      	movs	r1, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c20:	430a      	orrs	r2, r1
 8002c22:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c28:	2380      	movs	r3, #128	@ 0x80
 8002c2a:	045b      	lsls	r3, r3, #17
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d106      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002c30:	4b15      	ldr	r3, [pc, #84]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	4b14      	ldr	r3, [pc, #80]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c36:	2180      	movs	r1, #128	@ 0x80
 8002c38:	0449      	lsls	r1, r1, #17
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	2380      	movs	r3, #128	@ 0x80
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	4013      	ands	r3, r2
 8002c48:	d016      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c4e:	4a1a      	ldr	r2, [pc, #104]	@ (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	0019      	movs	r1, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	695a      	ldr	r2, [r3, #20]
 8002c58:	4b0b      	ldr	r3, [pc, #44]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695a      	ldr	r2, [r3, #20]
 8002c62:	2380      	movs	r3, #128	@ 0x80
 8002c64:	01db      	lsls	r3, r3, #7
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d106      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c6a:	4b07      	ldr	r3, [pc, #28]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	4b06      	ldr	r3, [pc, #24]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c70:	2180      	movs	r1, #128	@ 0x80
 8002c72:	0249      	lsls	r1, r1, #9
 8002c74:	430a      	orrs	r2, r1
 8002c76:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002c78:	2312      	movs	r3, #18
 8002c7a:	18fb      	adds	r3, r7, r3
 8002c7c:	781b      	ldrb	r3, [r3, #0]
}
 8002c7e:	0018      	movs	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	b006      	add	sp, #24
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	46c0      	nop			@ (mov r8, r8)
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	40007000 	.word	0x40007000
 8002c90:	fffffcff 	.word	0xfffffcff
 8002c94:	fffeffff 	.word	0xfffeffff
 8002c98:	00001388 	.word	0x00001388
 8002c9c:	efffffff 	.word	0xefffffff
 8002ca0:	fffff3ff 	.word	0xfffff3ff
 8002ca4:	fff3ffff 	.word	0xfff3ffff
 8002ca8:	ffcfffff 	.word	0xffcfffff
 8002cac:	ffffcfff 	.word	0xffffcfff
 8002cb0:	ffbfffff 	.word	0xffbfffff
 8002cb4:	feffffff 	.word	0xfeffffff
 8002cb8:	ffff3fff 	.word	0xffff3fff

08002cbc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002cbc:	b5b0      	push	{r4, r5, r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002cc4:	230f      	movs	r3, #15
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	2201      	movs	r2, #1
 8002cca:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d100      	bne.n	8002cd4 <HAL_RTC_Init+0x18>
 8002cd2:	e08c      	b.n	8002dee <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2229      	movs	r2, #41	@ 0x29
 8002cd8:	5c9b      	ldrb	r3, [r3, r2]
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10b      	bne.n	8002cf8 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2228      	movs	r2, #40	@ 0x28
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2288      	movs	r2, #136	@ 0x88
 8002cec:	0212      	lsls	r2, r2, #8
 8002cee:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f7fd ff06 	bl	8000b04 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2229      	movs	r2, #41	@ 0x29
 8002cfc:	2102      	movs	r1, #2
 8002cfe:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	2210      	movs	r2, #16
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b10      	cmp	r3, #16
 8002d0c:	d062      	beq.n	8002dd4 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	22ca      	movs	r2, #202	@ 0xca
 8002d14:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2253      	movs	r2, #83	@ 0x53
 8002d1c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002d1e:	250f      	movs	r5, #15
 8002d20:	197c      	adds	r4, r7, r5
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	0018      	movs	r0, r3
 8002d26:	f000 f891 	bl	8002e4c <RTC_EnterInitMode>
 8002d2a:	0003      	movs	r3, r0
 8002d2c:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002d2e:	0028      	movs	r0, r5
 8002d30:	183b      	adds	r3, r7, r0
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d12c      	bne.n	8002d92 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699a      	ldr	r2, [r3, #24]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	492e      	ldr	r1, [pc, #184]	@ (8002dfc <HAL_RTC_Init+0x140>)
 8002d44:	400a      	ands	r2, r1
 8002d46:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6999      	ldr	r1, [r3, #24]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6912      	ldr	r2, [r2, #16]
 8002d6e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6919      	ldr	r1, [r3, #16]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	041a      	lsls	r2, r3, #16
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002d84:	183c      	adds	r4, r7, r0
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f000 f8a1 	bl	8002ed0 <RTC_ExitInitMode>
 8002d8e:	0003      	movs	r3, r0
 8002d90:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002d92:	230f      	movs	r3, #15
 8002d94:	18fb      	adds	r3, r7, r3
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d116      	bne.n	8002dca <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	00d2      	lsls	r2, r2, #3
 8002da8:	08d2      	lsrs	r2, r2, #3
 8002daa:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6999      	ldr	r1, [r3, #24]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	22ff      	movs	r2, #255	@ 0xff
 8002dd0:	625a      	str	r2, [r3, #36]	@ 0x24
 8002dd2:	e003      	b.n	8002ddc <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002dd4:	230f      	movs	r3, #15
 8002dd6:	18fb      	adds	r3, r7, r3
 8002dd8:	2200      	movs	r2, #0
 8002dda:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002ddc:	230f      	movs	r3, #15
 8002dde:	18fb      	adds	r3, r7, r3
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d103      	bne.n	8002dee <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2229      	movs	r2, #41	@ 0x29
 8002dea:	2101      	movs	r1, #1
 8002dec:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002dee:	230f      	movs	r3, #15
 8002df0:	18fb      	adds	r3, r7, r3
 8002df2:	781b      	ldrb	r3, [r3, #0]
}
 8002df4:	0018      	movs	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b004      	add	sp, #16
 8002dfa:	bdb0      	pop	{r4, r5, r7, pc}
 8002dfc:	fb8fffbf 	.word	0xfb8fffbf

08002e00 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a0e      	ldr	r2, [pc, #56]	@ (8002e48 <HAL_RTC_WaitForSynchro+0x48>)
 8002e0e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002e10:	f7fe fce4 	bl	80017dc <HAL_GetTick>
 8002e14:	0003      	movs	r3, r0
 8002e16:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002e18:	e00a      	b.n	8002e30 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e1a:	f7fe fcdf 	bl	80017dc <HAL_GetTick>
 8002e1e:	0002      	movs	r2, r0
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	1ad2      	subs	r2, r2, r3
 8002e24:	23fa      	movs	r3, #250	@ 0xfa
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d901      	bls.n	8002e30 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e006      	b.n	8002e3e <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2220      	movs	r2, #32
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d0ee      	beq.n	8002e1a <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	0018      	movs	r0, r3
 8002e40:	46bd      	mov	sp, r7
 8002e42:	b004      	add	sp, #16
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	46c0      	nop			@ (mov r8, r8)
 8002e48:	0001005f 	.word	0x0001005f

08002e4c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002e54:	230f      	movs	r3, #15
 8002e56:	18fb      	adds	r3, r7, r3
 8002e58:	2200      	movs	r2, #0
 8002e5a:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	2240      	movs	r2, #64	@ 0x40
 8002e64:	4013      	ands	r3, r2
 8002e66:	d12c      	bne.n	8002ec2 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2180      	movs	r1, #128	@ 0x80
 8002e74:	430a      	orrs	r2, r1
 8002e76:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002e78:	f7fe fcb0 	bl	80017dc <HAL_GetTick>
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002e80:	e014      	b.n	8002eac <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e82:	f7fe fcab 	bl	80017dc <HAL_GetTick>
 8002e86:	0002      	movs	r2, r0
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	1ad2      	subs	r2, r2, r3
 8002e8c:	200f      	movs	r0, #15
 8002e8e:	183b      	adds	r3, r7, r0
 8002e90:	1839      	adds	r1, r7, r0
 8002e92:	7809      	ldrb	r1, [r1, #0]
 8002e94:	7019      	strb	r1, [r3, #0]
 8002e96:	23fa      	movs	r3, #250	@ 0xfa
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d906      	bls.n	8002eac <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8002e9e:	183b      	adds	r3, r7, r0
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2229      	movs	r2, #41	@ 0x29
 8002ea8:	2103      	movs	r1, #3
 8002eaa:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	2240      	movs	r2, #64	@ 0x40
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d104      	bne.n	8002ec2 <RTC_EnterInitMode+0x76>
 8002eb8:	230f      	movs	r3, #15
 8002eba:	18fb      	adds	r3, r7, r3
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d1df      	bne.n	8002e82 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002ec2:	230f      	movs	r3, #15
 8002ec4:	18fb      	adds	r3, r7, r3
 8002ec6:	781b      	ldrb	r3, [r3, #0]
}
 8002ec8:	0018      	movs	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	b004      	add	sp, #16
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed8:	240f      	movs	r4, #15
 8002eda:	193b      	adds	r3, r7, r4
 8002edc:	2200      	movs	r2, #0
 8002ede:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8002f54 <RTC_ExitInitMode+0x84>)
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f54 <RTC_ExitInitMode+0x84>)
 8002ee6:	2180      	movs	r1, #128	@ 0x80
 8002ee8:	438a      	bics	r2, r1
 8002eea:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002eec:	4b19      	ldr	r3, [pc, #100]	@ (8002f54 <RTC_ExitInitMode+0x84>)
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	d10d      	bne.n	8002f12 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f7ff ff81 	bl	8002e00 <HAL_RTC_WaitForSynchro>
 8002efe:	1e03      	subs	r3, r0, #0
 8002f00:	d021      	beq.n	8002f46 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2229      	movs	r2, #41	@ 0x29
 8002f06:	2103      	movs	r1, #3
 8002f08:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002f0a:	193b      	adds	r3, r7, r4
 8002f0c:	2203      	movs	r2, #3
 8002f0e:	701a      	strb	r2, [r3, #0]
 8002f10:	e019      	b.n	8002f46 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002f12:	4b10      	ldr	r3, [pc, #64]	@ (8002f54 <RTC_ExitInitMode+0x84>)
 8002f14:	699a      	ldr	r2, [r3, #24]
 8002f16:	4b0f      	ldr	r3, [pc, #60]	@ (8002f54 <RTC_ExitInitMode+0x84>)
 8002f18:	2120      	movs	r1, #32
 8002f1a:	438a      	bics	r2, r1
 8002f1c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	0018      	movs	r0, r3
 8002f22:	f7ff ff6d 	bl	8002e00 <HAL_RTC_WaitForSynchro>
 8002f26:	1e03      	subs	r3, r0, #0
 8002f28:	d007      	beq.n	8002f3a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2229      	movs	r2, #41	@ 0x29
 8002f2e:	2103      	movs	r1, #3
 8002f30:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002f32:	230f      	movs	r3, #15
 8002f34:	18fb      	adds	r3, r7, r3
 8002f36:	2203      	movs	r2, #3
 8002f38:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002f3a:	4b06      	ldr	r3, [pc, #24]	@ (8002f54 <RTC_ExitInitMode+0x84>)
 8002f3c:	699a      	ldr	r2, [r3, #24]
 8002f3e:	4b05      	ldr	r3, [pc, #20]	@ (8002f54 <RTC_ExitInitMode+0x84>)
 8002f40:	2120      	movs	r1, #32
 8002f42:	430a      	orrs	r2, r1
 8002f44:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002f46:	230f      	movs	r3, #15
 8002f48:	18fb      	adds	r3, r7, r3
 8002f4a:	781b      	ldrb	r3, [r3, #0]
}
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	b005      	add	sp, #20
 8002f52:	bd90      	pop	{r4, r7, pc}
 8002f54:	40002800 	.word	0x40002800

08002f58 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2228      	movs	r2, #40	@ 0x28
 8002f68:	5c9b      	ldrb	r3, [r3, r2]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e066      	b.n	8003040 <HAL_RTCEx_SetWakeUpTimer+0xe8>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2228      	movs	r2, #40	@ 0x28
 8002f76:	2101      	movs	r1, #1
 8002f78:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2229      	movs	r2, #41	@ 0x29
 8002f7e:	2102      	movs	r1, #2
 8002f80:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	22ca      	movs	r2, #202	@ 0xca
 8002f88:	625a      	str	r2, [r3, #36]	@ 0x24
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2253      	movs	r2, #83	@ 0x53
 8002f90:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8002f92:	4b2d      	ldr	r3, [pc, #180]	@ (8003048 <HAL_RTCEx_SetWakeUpTimer+0xf0>)
 8002f94:	699a      	ldr	r2, [r3, #24]
 8002f96:	4b2c      	ldr	r3, [pc, #176]	@ (8003048 <HAL_RTCEx_SetWakeUpTimer+0xf0>)
 8002f98:	492c      	ldr	r1, [pc, #176]	@ (800304c <HAL_RTCEx_SetWakeUpTimer+0xf4>)
 8002f9a:	400a      	ands	r2, r1
 8002f9c:	619a      	str	r2, [r3, #24]

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002f9e:	4b2a      	ldr	r3, [pc, #168]	@ (8003048 <HAL_RTCEx_SetWakeUpTimer+0xf0>)
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	2240      	movs	r2, #64	@ 0x40
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d121      	bne.n	8002fec <HAL_RTCEx_SetWakeUpTimer+0x94>
  {
    tickstart = HAL_GetTick();
 8002fa8:	f7fe fc18 	bl	80017dc <HAL_GetTick>
 8002fac:	0003      	movs	r3, r0
 8002fae:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002fb0:	e016      	b.n	8002fe0 <HAL_RTCEx_SetWakeUpTimer+0x88>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002fb2:	f7fe fc13 	bl	80017dc <HAL_GetTick>
 8002fb6:	0002      	movs	r2, r0
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	1ad2      	subs	r2, r2, r3
 8002fbc:	23fa      	movs	r3, #250	@ 0xfa
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d90d      	bls.n	8002fe0 <HAL_RTCEx_SetWakeUpTimer+0x88>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	22ff      	movs	r2, #255	@ 0xff
 8002fca:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2229      	movs	r2, #41	@ 0x29
 8002fd0:	2103      	movs	r1, #3
 8002fd2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2228      	movs	r2, #40	@ 0x28
 8002fd8:	2100      	movs	r1, #0
 8002fda:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e02f      	b.n	8003040 <HAL_RTCEx_SetWakeUpTimer+0xe8>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	2204      	movs	r2, #4
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d0e2      	beq.n	8002fb2 <HAL_RTCEx_SetWakeUpTimer+0x5a>
      }
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699a      	ldr	r2, [r3, #24]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2107      	movs	r1, #7
 8002ff8:	438a      	bics	r2, r1
 8002ffa:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6999      	ldr	r1, [r3, #24]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	430a      	orrs	r2, r1
 800300a:	619a      	str	r2, [r3, #24]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	615a      	str	r2, [r3, #20]

   /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699a      	ldr	r2, [r3, #24]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2180      	movs	r1, #128	@ 0x80
 8003020:	00c9      	lsls	r1, r1, #3
 8003022:	430a      	orrs	r2, r1
 8003024:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	22ff      	movs	r2, #255	@ 0xff
 800302c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2229      	movs	r2, #41	@ 0x29
 8003032:	2101      	movs	r1, #1
 8003034:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2228      	movs	r2, #40	@ 0x28
 800303a:	2100      	movs	r1, #0
 800303c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	0018      	movs	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	b006      	add	sp, #24
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40002800 	.word	0x40002800
 800304c:	fffffbff 	.word	0xfffffbff

08003050 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e04a      	b.n	80030f8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	223d      	movs	r2, #61	@ 0x3d
 8003066:	5c9b      	ldrb	r3, [r3, r2]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d107      	bne.n	800307e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	223c      	movs	r2, #60	@ 0x3c
 8003072:	2100      	movs	r1, #0
 8003074:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	0018      	movs	r0, r3
 800307a:	f7fe f8f3 	bl	8001264 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	223d      	movs	r2, #61	@ 0x3d
 8003082:	2102      	movs	r1, #2
 8003084:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3304      	adds	r3, #4
 800308e:	0019      	movs	r1, r3
 8003090:	0010      	movs	r0, r2
 8003092:	f000 fc85 	bl	80039a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2248      	movs	r2, #72	@ 0x48
 800309a:	2101      	movs	r1, #1
 800309c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	223e      	movs	r2, #62	@ 0x3e
 80030a2:	2101      	movs	r1, #1
 80030a4:	5499      	strb	r1, [r3, r2]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	223f      	movs	r2, #63	@ 0x3f
 80030aa:	2101      	movs	r1, #1
 80030ac:	5499      	strb	r1, [r3, r2]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2240      	movs	r2, #64	@ 0x40
 80030b2:	2101      	movs	r1, #1
 80030b4:	5499      	strb	r1, [r3, r2]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2241      	movs	r2, #65	@ 0x41
 80030ba:	2101      	movs	r1, #1
 80030bc:	5499      	strb	r1, [r3, r2]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2242      	movs	r2, #66	@ 0x42
 80030c2:	2101      	movs	r1, #1
 80030c4:	5499      	strb	r1, [r3, r2]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2243      	movs	r2, #67	@ 0x43
 80030ca:	2101      	movs	r1, #1
 80030cc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2244      	movs	r2, #68	@ 0x44
 80030d2:	2101      	movs	r1, #1
 80030d4:	5499      	strb	r1, [r3, r2]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2245      	movs	r2, #69	@ 0x45
 80030da:	2101      	movs	r1, #1
 80030dc:	5499      	strb	r1, [r3, r2]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2246      	movs	r2, #70	@ 0x46
 80030e2:	2101      	movs	r1, #1
 80030e4:	5499      	strb	r1, [r3, r2]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2247      	movs	r2, #71	@ 0x47
 80030ea:	2101      	movs	r1, #1
 80030ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	223d      	movs	r2, #61	@ 0x3d
 80030f2:	2101      	movs	r1, #1
 80030f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	0018      	movs	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b002      	add	sp, #8
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e04a      	b.n	80031a8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	223d      	movs	r2, #61	@ 0x3d
 8003116:	5c9b      	ldrb	r3, [r3, r2]
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d107      	bne.n	800312e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	223c      	movs	r2, #60	@ 0x3c
 8003122:	2100      	movs	r1, #0
 8003124:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	0018      	movs	r0, r3
 800312a:	f000 f841 	bl	80031b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	223d      	movs	r2, #61	@ 0x3d
 8003132:	2102      	movs	r1, #2
 8003134:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3304      	adds	r3, #4
 800313e:	0019      	movs	r1, r3
 8003140:	0010      	movs	r0, r2
 8003142:	f000 fc2d 	bl	80039a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2248      	movs	r2, #72	@ 0x48
 800314a:	2101      	movs	r1, #1
 800314c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	223e      	movs	r2, #62	@ 0x3e
 8003152:	2101      	movs	r1, #1
 8003154:	5499      	strb	r1, [r3, r2]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	223f      	movs	r2, #63	@ 0x3f
 800315a:	2101      	movs	r1, #1
 800315c:	5499      	strb	r1, [r3, r2]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2240      	movs	r2, #64	@ 0x40
 8003162:	2101      	movs	r1, #1
 8003164:	5499      	strb	r1, [r3, r2]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2241      	movs	r2, #65	@ 0x41
 800316a:	2101      	movs	r1, #1
 800316c:	5499      	strb	r1, [r3, r2]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2242      	movs	r2, #66	@ 0x42
 8003172:	2101      	movs	r1, #1
 8003174:	5499      	strb	r1, [r3, r2]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2243      	movs	r2, #67	@ 0x43
 800317a:	2101      	movs	r1, #1
 800317c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2244      	movs	r2, #68	@ 0x44
 8003182:	2101      	movs	r1, #1
 8003184:	5499      	strb	r1, [r3, r2]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2245      	movs	r2, #69	@ 0x45
 800318a:	2101      	movs	r1, #1
 800318c:	5499      	strb	r1, [r3, r2]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2246      	movs	r2, #70	@ 0x46
 8003192:	2101      	movs	r1, #1
 8003194:	5499      	strb	r1, [r3, r2]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2247      	movs	r2, #71	@ 0x47
 800319a:	2101      	movs	r1, #1
 800319c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	223d      	movs	r2, #61	@ 0x3d
 80031a2:	2101      	movs	r1, #1
 80031a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	0018      	movs	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b002      	add	sp, #8
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031b8:	46c0      	nop			@ (mov r8, r8)
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b002      	add	sp, #8
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d108      	bne.n	80031e2 <HAL_TIM_PWM_Start+0x22>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	223e      	movs	r2, #62	@ 0x3e
 80031d4:	5c9b      	ldrb	r3, [r3, r2]
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	3b01      	subs	r3, #1
 80031da:	1e5a      	subs	r2, r3, #1
 80031dc:	4193      	sbcs	r3, r2
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	e037      	b.n	8003252 <HAL_TIM_PWM_Start+0x92>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d108      	bne.n	80031fa <HAL_TIM_PWM_Start+0x3a>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	223f      	movs	r2, #63	@ 0x3f
 80031ec:	5c9b      	ldrb	r3, [r3, r2]
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	3b01      	subs	r3, #1
 80031f2:	1e5a      	subs	r2, r3, #1
 80031f4:	4193      	sbcs	r3, r2
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	e02b      	b.n	8003252 <HAL_TIM_PWM_Start+0x92>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d108      	bne.n	8003212 <HAL_TIM_PWM_Start+0x52>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2240      	movs	r2, #64	@ 0x40
 8003204:	5c9b      	ldrb	r3, [r3, r2]
 8003206:	b2db      	uxtb	r3, r3
 8003208:	3b01      	subs	r3, #1
 800320a:	1e5a      	subs	r2, r3, #1
 800320c:	4193      	sbcs	r3, r2
 800320e:	b2db      	uxtb	r3, r3
 8003210:	e01f      	b.n	8003252 <HAL_TIM_PWM_Start+0x92>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2b0c      	cmp	r3, #12
 8003216:	d108      	bne.n	800322a <HAL_TIM_PWM_Start+0x6a>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2241      	movs	r2, #65	@ 0x41
 800321c:	5c9b      	ldrb	r3, [r3, r2]
 800321e:	b2db      	uxtb	r3, r3
 8003220:	3b01      	subs	r3, #1
 8003222:	1e5a      	subs	r2, r3, #1
 8003224:	4193      	sbcs	r3, r2
 8003226:	b2db      	uxtb	r3, r3
 8003228:	e013      	b.n	8003252 <HAL_TIM_PWM_Start+0x92>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2b10      	cmp	r3, #16
 800322e:	d108      	bne.n	8003242 <HAL_TIM_PWM_Start+0x82>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2242      	movs	r2, #66	@ 0x42
 8003234:	5c9b      	ldrb	r3, [r3, r2]
 8003236:	b2db      	uxtb	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	1e5a      	subs	r2, r3, #1
 800323c:	4193      	sbcs	r3, r2
 800323e:	b2db      	uxtb	r3, r3
 8003240:	e007      	b.n	8003252 <HAL_TIM_PWM_Start+0x92>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2243      	movs	r2, #67	@ 0x43
 8003246:	5c9b      	ldrb	r3, [r3, r2]
 8003248:	b2db      	uxtb	r3, r3
 800324a:	3b01      	subs	r3, #1
 800324c:	1e5a      	subs	r2, r3, #1
 800324e:	4193      	sbcs	r3, r2
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e08b      	b.n	8003372 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d104      	bne.n	800326a <HAL_TIM_PWM_Start+0xaa>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	223e      	movs	r2, #62	@ 0x3e
 8003264:	2102      	movs	r1, #2
 8003266:	5499      	strb	r1, [r3, r2]
 8003268:	e023      	b.n	80032b2 <HAL_TIM_PWM_Start+0xf2>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b04      	cmp	r3, #4
 800326e:	d104      	bne.n	800327a <HAL_TIM_PWM_Start+0xba>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	223f      	movs	r2, #63	@ 0x3f
 8003274:	2102      	movs	r1, #2
 8003276:	5499      	strb	r1, [r3, r2]
 8003278:	e01b      	b.n	80032b2 <HAL_TIM_PWM_Start+0xf2>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b08      	cmp	r3, #8
 800327e:	d104      	bne.n	800328a <HAL_TIM_PWM_Start+0xca>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2240      	movs	r2, #64	@ 0x40
 8003284:	2102      	movs	r1, #2
 8003286:	5499      	strb	r1, [r3, r2]
 8003288:	e013      	b.n	80032b2 <HAL_TIM_PWM_Start+0xf2>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b0c      	cmp	r3, #12
 800328e:	d104      	bne.n	800329a <HAL_TIM_PWM_Start+0xda>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2241      	movs	r2, #65	@ 0x41
 8003294:	2102      	movs	r1, #2
 8003296:	5499      	strb	r1, [r3, r2]
 8003298:	e00b      	b.n	80032b2 <HAL_TIM_PWM_Start+0xf2>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b10      	cmp	r3, #16
 800329e:	d104      	bne.n	80032aa <HAL_TIM_PWM_Start+0xea>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2242      	movs	r2, #66	@ 0x42
 80032a4:	2102      	movs	r1, #2
 80032a6:	5499      	strb	r1, [r3, r2]
 80032a8:	e003      	b.n	80032b2 <HAL_TIM_PWM_Start+0xf2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2243      	movs	r2, #67	@ 0x43
 80032ae:	2102      	movs	r1, #2
 80032b0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6839      	ldr	r1, [r7, #0]
 80032b8:	2201      	movs	r2, #1
 80032ba:	0018      	movs	r0, r3
 80032bc:	f000 ff5e 	bl	800417c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a2d      	ldr	r2, [pc, #180]	@ (800337c <HAL_TIM_PWM_Start+0x1bc>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00e      	beq.n	80032e8 <HAL_TIM_PWM_Start+0x128>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003380 <HAL_TIM_PWM_Start+0x1c0>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d009      	beq.n	80032e8 <HAL_TIM_PWM_Start+0x128>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a2a      	ldr	r2, [pc, #168]	@ (8003384 <HAL_TIM_PWM_Start+0x1c4>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d004      	beq.n	80032e8 <HAL_TIM_PWM_Start+0x128>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a29      	ldr	r2, [pc, #164]	@ (8003388 <HAL_TIM_PWM_Start+0x1c8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d101      	bne.n	80032ec <HAL_TIM_PWM_Start+0x12c>
 80032e8:	2301      	movs	r3, #1
 80032ea:	e000      	b.n	80032ee <HAL_TIM_PWM_Start+0x12e>
 80032ec:	2300      	movs	r3, #0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d008      	beq.n	8003304 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2180      	movs	r1, #128	@ 0x80
 80032fe:	0209      	lsls	r1, r1, #8
 8003300:	430a      	orrs	r2, r1
 8003302:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a1c      	ldr	r2, [pc, #112]	@ (800337c <HAL_TIM_PWM_Start+0x1bc>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00f      	beq.n	800332e <HAL_TIM_PWM_Start+0x16e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	2380      	movs	r3, #128	@ 0x80
 8003314:	05db      	lsls	r3, r3, #23
 8003316:	429a      	cmp	r2, r3
 8003318:	d009      	beq.n	800332e <HAL_TIM_PWM_Start+0x16e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a1b      	ldr	r2, [pc, #108]	@ (800338c <HAL_TIM_PWM_Start+0x1cc>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d004      	beq.n	800332e <HAL_TIM_PWM_Start+0x16e>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a15      	ldr	r2, [pc, #84]	@ (8003380 <HAL_TIM_PWM_Start+0x1c0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d116      	bne.n	800335c <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	4a16      	ldr	r2, [pc, #88]	@ (8003390 <HAL_TIM_PWM_Start+0x1d0>)
 8003336:	4013      	ands	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2b06      	cmp	r3, #6
 800333e:	d016      	beq.n	800336e <HAL_TIM_PWM_Start+0x1ae>
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	2380      	movs	r3, #128	@ 0x80
 8003344:	025b      	lsls	r3, r3, #9
 8003346:	429a      	cmp	r2, r3
 8003348:	d011      	beq.n	800336e <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2101      	movs	r1, #1
 8003356:	430a      	orrs	r2, r1
 8003358:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800335a:	e008      	b.n	800336e <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2101      	movs	r1, #1
 8003368:	430a      	orrs	r2, r1
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	e000      	b.n	8003370 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800336e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	0018      	movs	r0, r3
 8003374:	46bd      	mov	sp, r7
 8003376:	b004      	add	sp, #16
 8003378:	bd80      	pop	{r7, pc}
 800337a:	46c0      	nop			@ (mov r8, r8)
 800337c:	40012c00 	.word	0x40012c00
 8003380:	40014000 	.word	0x40014000
 8003384:	40014400 	.word	0x40014400
 8003388:	40014800 	.word	0x40014800
 800338c:	40000400 	.word	0x40000400
 8003390:	00010007 	.word	0x00010007

08003394 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2202      	movs	r2, #2
 80033b0:	4013      	ands	r3, r2
 80033b2:	d021      	beq.n	80033f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2202      	movs	r2, #2
 80033b8:	4013      	ands	r3, r2
 80033ba:	d01d      	beq.n	80033f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2203      	movs	r2, #3
 80033c2:	4252      	negs	r2, r2
 80033c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	2203      	movs	r2, #3
 80033d4:	4013      	ands	r3, r2
 80033d6:	d004      	beq.n	80033e2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	0018      	movs	r0, r3
 80033dc:	f000 fac8 	bl	8003970 <HAL_TIM_IC_CaptureCallback>
 80033e0:	e007      	b.n	80033f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	0018      	movs	r0, r3
 80033e6:	f000 fabb 	bl	8003960 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	0018      	movs	r0, r3
 80033ee:	f000 fac7 	bl	8003980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2204      	movs	r2, #4
 80033fc:	4013      	ands	r3, r2
 80033fe:	d022      	beq.n	8003446 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2204      	movs	r2, #4
 8003404:	4013      	ands	r3, r2
 8003406:	d01e      	beq.n	8003446 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2205      	movs	r2, #5
 800340e:	4252      	negs	r2, r2
 8003410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2202      	movs	r2, #2
 8003416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	23c0      	movs	r3, #192	@ 0xc0
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4013      	ands	r3, r2
 8003424:	d004      	beq.n	8003430 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	0018      	movs	r0, r3
 800342a:	f000 faa1 	bl	8003970 <HAL_TIM_IC_CaptureCallback>
 800342e:	e007      	b.n	8003440 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	0018      	movs	r0, r3
 8003434:	f000 fa94 	bl	8003960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	0018      	movs	r0, r3
 800343c:	f000 faa0 	bl	8003980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2208      	movs	r2, #8
 800344a:	4013      	ands	r3, r2
 800344c:	d021      	beq.n	8003492 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2208      	movs	r2, #8
 8003452:	4013      	ands	r3, r2
 8003454:	d01d      	beq.n	8003492 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2209      	movs	r2, #9
 800345c:	4252      	negs	r2, r2
 800345e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2204      	movs	r2, #4
 8003464:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	2203      	movs	r2, #3
 800346e:	4013      	ands	r3, r2
 8003470:	d004      	beq.n	800347c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	0018      	movs	r0, r3
 8003476:	f000 fa7b 	bl	8003970 <HAL_TIM_IC_CaptureCallback>
 800347a:	e007      	b.n	800348c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	0018      	movs	r0, r3
 8003480:	f000 fa6e 	bl	8003960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	0018      	movs	r0, r3
 8003488:	f000 fa7a 	bl	8003980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2210      	movs	r2, #16
 8003496:	4013      	ands	r3, r2
 8003498:	d022      	beq.n	80034e0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2210      	movs	r2, #16
 800349e:	4013      	ands	r3, r2
 80034a0:	d01e      	beq.n	80034e0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2211      	movs	r2, #17
 80034a8:	4252      	negs	r2, r2
 80034aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2208      	movs	r2, #8
 80034b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	69da      	ldr	r2, [r3, #28]
 80034b8:	23c0      	movs	r3, #192	@ 0xc0
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4013      	ands	r3, r2
 80034be:	d004      	beq.n	80034ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	0018      	movs	r0, r3
 80034c4:	f000 fa54 	bl	8003970 <HAL_TIM_IC_CaptureCallback>
 80034c8:	e007      	b.n	80034da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	0018      	movs	r0, r3
 80034ce:	f000 fa47 	bl	8003960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	0018      	movs	r0, r3
 80034d6:	f000 fa53 	bl	8003980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2201      	movs	r2, #1
 80034e4:	4013      	ands	r3, r2
 80034e6:	d00c      	beq.n	8003502 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2201      	movs	r2, #1
 80034ec:	4013      	ands	r3, r2
 80034ee:	d008      	beq.n	8003502 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2202      	movs	r2, #2
 80034f6:	4252      	negs	r2, r2
 80034f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	0018      	movs	r0, r3
 80034fe:	f000 fa27 	bl	8003950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2280      	movs	r2, #128	@ 0x80
 8003506:	4013      	ands	r3, r2
 8003508:	d104      	bne.n	8003514 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	2380      	movs	r3, #128	@ 0x80
 800350e:	019b      	lsls	r3, r3, #6
 8003510:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003512:	d00b      	beq.n	800352c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2280      	movs	r2, #128	@ 0x80
 8003518:	4013      	ands	r3, r2
 800351a:	d007      	beq.n	800352c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1e      	ldr	r2, [pc, #120]	@ (800359c <HAL_TIM_IRQHandler+0x208>)
 8003522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	0018      	movs	r0, r3
 8003528:	f001 f802 	bl	8004530 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	2380      	movs	r3, #128	@ 0x80
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	4013      	ands	r3, r2
 8003534:	d00b      	beq.n	800354e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2280      	movs	r2, #128	@ 0x80
 800353a:	4013      	ands	r3, r2
 800353c:	d007      	beq.n	800354e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a17      	ldr	r2, [pc, #92]	@ (80035a0 <HAL_TIM_IRQHandler+0x20c>)
 8003544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	0018      	movs	r0, r3
 800354a:	f000 fff9 	bl	8004540 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2240      	movs	r2, #64	@ 0x40
 8003552:	4013      	ands	r3, r2
 8003554:	d00c      	beq.n	8003570 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2240      	movs	r2, #64	@ 0x40
 800355a:	4013      	ands	r3, r2
 800355c:	d008      	beq.n	8003570 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2241      	movs	r2, #65	@ 0x41
 8003564:	4252      	negs	r2, r2
 8003566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	0018      	movs	r0, r3
 800356c:	f000 fa10 	bl	8003990 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2220      	movs	r2, #32
 8003574:	4013      	ands	r3, r2
 8003576:	d00c      	beq.n	8003592 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2220      	movs	r2, #32
 800357c:	4013      	ands	r3, r2
 800357e:	d008      	beq.n	8003592 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2221      	movs	r2, #33	@ 0x21
 8003586:	4252      	negs	r2, r2
 8003588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	0018      	movs	r0, r3
 800358e:	f000 ffc7 	bl	8004520 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003592:	46c0      	nop			@ (mov r8, r8)
 8003594:	46bd      	mov	sp, r7
 8003596:	b004      	add	sp, #16
 8003598:	bd80      	pop	{r7, pc}
 800359a:	46c0      	nop			@ (mov r8, r8)
 800359c:	ffffdf7f 	.word	0xffffdf7f
 80035a0:	fffffeff 	.word	0xfffffeff

080035a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035b0:	2317      	movs	r3, #23
 80035b2:	18fb      	adds	r3, r7, r3
 80035b4:	2200      	movs	r2, #0
 80035b6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	223c      	movs	r2, #60	@ 0x3c
 80035bc:	5c9b      	ldrb	r3, [r3, r2]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d101      	bne.n	80035c6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80035c2:	2302      	movs	r3, #2
 80035c4:	e0e5      	b.n	8003792 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	223c      	movs	r2, #60	@ 0x3c
 80035ca:	2101      	movs	r1, #1
 80035cc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b14      	cmp	r3, #20
 80035d2:	d900      	bls.n	80035d6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80035d4:	e0d1      	b.n	800377a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	009a      	lsls	r2, r3, #2
 80035da:	4b70      	ldr	r3, [pc, #448]	@ (800379c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80035dc:	18d3      	adds	r3, r2, r3
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	0011      	movs	r1, r2
 80035ea:	0018      	movs	r0, r3
 80035ec:	f000 fa66 	bl	8003abc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699a      	ldr	r2, [r3, #24]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2108      	movs	r1, #8
 80035fc:	430a      	orrs	r2, r1
 80035fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2104      	movs	r1, #4
 800360c:	438a      	bics	r2, r1
 800360e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6999      	ldr	r1, [r3, #24]
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	619a      	str	r2, [r3, #24]
      break;
 8003622:	e0af      	b.n	8003784 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	0011      	movs	r1, r2
 800362c:	0018      	movs	r0, r3
 800362e:	f000 facf 	bl	8003bd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699a      	ldr	r2, [r3, #24]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2180      	movs	r1, #128	@ 0x80
 800363e:	0109      	lsls	r1, r1, #4
 8003640:	430a      	orrs	r2, r1
 8003642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	699a      	ldr	r2, [r3, #24]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4954      	ldr	r1, [pc, #336]	@ (80037a0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003650:	400a      	ands	r2, r1
 8003652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6999      	ldr	r1, [r3, #24]
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	021a      	lsls	r2, r3, #8
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	619a      	str	r2, [r3, #24]
      break;
 8003668:	e08c      	b.n	8003784 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	0011      	movs	r1, r2
 8003672:	0018      	movs	r0, r3
 8003674:	f000 fb30 	bl	8003cd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	69da      	ldr	r2, [r3, #28]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2108      	movs	r1, #8
 8003684:	430a      	orrs	r2, r1
 8003686:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	69da      	ldr	r2, [r3, #28]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2104      	movs	r1, #4
 8003694:	438a      	bics	r2, r1
 8003696:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	69d9      	ldr	r1, [r3, #28]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	61da      	str	r2, [r3, #28]
      break;
 80036aa:	e06b      	b.n	8003784 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	0011      	movs	r1, r2
 80036b4:	0018      	movs	r0, r3
 80036b6:	f000 fb97 	bl	8003de8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	69da      	ldr	r2, [r3, #28]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2180      	movs	r1, #128	@ 0x80
 80036c6:	0109      	lsls	r1, r1, #4
 80036c8:	430a      	orrs	r2, r1
 80036ca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	69da      	ldr	r2, [r3, #28]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4932      	ldr	r1, [pc, #200]	@ (80037a0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80036d8:	400a      	ands	r2, r1
 80036da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	69d9      	ldr	r1, [r3, #28]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	021a      	lsls	r2, r3, #8
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	61da      	str	r2, [r3, #28]
      break;
 80036f0:	e048      	b.n	8003784 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	0011      	movs	r1, r2
 80036fa:	0018      	movs	r0, r3
 80036fc:	f000 fbde 	bl	8003ebc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2108      	movs	r1, #8
 800370c:	430a      	orrs	r2, r1
 800370e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2104      	movs	r1, #4
 800371c:	438a      	bics	r2, r1
 800371e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	691a      	ldr	r2, [r3, #16]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003732:	e027      	b.n	8003784 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	0011      	movs	r1, r2
 800373c:	0018      	movs	r0, r3
 800373e:	f000 fc1d 	bl	8003f7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2180      	movs	r1, #128	@ 0x80
 800374e:	0109      	lsls	r1, r1, #4
 8003750:	430a      	orrs	r2, r1
 8003752:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4910      	ldr	r1, [pc, #64]	@ (80037a0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003760:	400a      	ands	r2, r1
 8003762:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	021a      	lsls	r2, r3, #8
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003778:	e004      	b.n	8003784 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800377a:	2317      	movs	r3, #23
 800377c:	18fb      	adds	r3, r7, r3
 800377e:	2201      	movs	r2, #1
 8003780:	701a      	strb	r2, [r3, #0]
      break;
 8003782:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	223c      	movs	r2, #60	@ 0x3c
 8003788:	2100      	movs	r1, #0
 800378a:	5499      	strb	r1, [r3, r2]

  return status;
 800378c:	2317      	movs	r3, #23
 800378e:	18fb      	adds	r3, r7, r3
 8003790:	781b      	ldrb	r3, [r3, #0]
}
 8003792:	0018      	movs	r0, r3
 8003794:	46bd      	mov	sp, r7
 8003796:	b006      	add	sp, #24
 8003798:	bd80      	pop	{r7, pc}
 800379a:	46c0      	nop			@ (mov r8, r8)
 800379c:	0800532c 	.word	0x0800532c
 80037a0:	fffffbff 	.word	0xfffffbff

080037a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ae:	230f      	movs	r3, #15
 80037b0:	18fb      	adds	r3, r7, r3
 80037b2:	2200      	movs	r2, #0
 80037b4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	223c      	movs	r2, #60	@ 0x3c
 80037ba:	5c9b      	ldrb	r3, [r3, r2]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_TIM_ConfigClockSource+0x20>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e0bc      	b.n	800393e <HAL_TIM_ConfigClockSource+0x19a>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	223c      	movs	r2, #60	@ 0x3c
 80037c8:	2101      	movs	r1, #1
 80037ca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	223d      	movs	r2, #61	@ 0x3d
 80037d0:	2102      	movs	r1, #2
 80037d2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4a5a      	ldr	r2, [pc, #360]	@ (8003948 <HAL_TIM_ConfigClockSource+0x1a4>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4a59      	ldr	r2, [pc, #356]	@ (800394c <HAL_TIM_ConfigClockSource+0x1a8>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2280      	movs	r2, #128	@ 0x80
 80037fa:	0192      	lsls	r2, r2, #6
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d040      	beq.n	8003882 <HAL_TIM_ConfigClockSource+0xde>
 8003800:	2280      	movs	r2, #128	@ 0x80
 8003802:	0192      	lsls	r2, r2, #6
 8003804:	4293      	cmp	r3, r2
 8003806:	d900      	bls.n	800380a <HAL_TIM_ConfigClockSource+0x66>
 8003808:	e088      	b.n	800391c <HAL_TIM_ConfigClockSource+0x178>
 800380a:	2280      	movs	r2, #128	@ 0x80
 800380c:	0152      	lsls	r2, r2, #5
 800380e:	4293      	cmp	r3, r2
 8003810:	d100      	bne.n	8003814 <HAL_TIM_ConfigClockSource+0x70>
 8003812:	e088      	b.n	8003926 <HAL_TIM_ConfigClockSource+0x182>
 8003814:	2280      	movs	r2, #128	@ 0x80
 8003816:	0152      	lsls	r2, r2, #5
 8003818:	4293      	cmp	r3, r2
 800381a:	d900      	bls.n	800381e <HAL_TIM_ConfigClockSource+0x7a>
 800381c:	e07e      	b.n	800391c <HAL_TIM_ConfigClockSource+0x178>
 800381e:	2b70      	cmp	r3, #112	@ 0x70
 8003820:	d018      	beq.n	8003854 <HAL_TIM_ConfigClockSource+0xb0>
 8003822:	d900      	bls.n	8003826 <HAL_TIM_ConfigClockSource+0x82>
 8003824:	e07a      	b.n	800391c <HAL_TIM_ConfigClockSource+0x178>
 8003826:	2b60      	cmp	r3, #96	@ 0x60
 8003828:	d04f      	beq.n	80038ca <HAL_TIM_ConfigClockSource+0x126>
 800382a:	d900      	bls.n	800382e <HAL_TIM_ConfigClockSource+0x8a>
 800382c:	e076      	b.n	800391c <HAL_TIM_ConfigClockSource+0x178>
 800382e:	2b50      	cmp	r3, #80	@ 0x50
 8003830:	d03b      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x106>
 8003832:	d900      	bls.n	8003836 <HAL_TIM_ConfigClockSource+0x92>
 8003834:	e072      	b.n	800391c <HAL_TIM_ConfigClockSource+0x178>
 8003836:	2b40      	cmp	r3, #64	@ 0x40
 8003838:	d057      	beq.n	80038ea <HAL_TIM_ConfigClockSource+0x146>
 800383a:	d900      	bls.n	800383e <HAL_TIM_ConfigClockSource+0x9a>
 800383c:	e06e      	b.n	800391c <HAL_TIM_ConfigClockSource+0x178>
 800383e:	2b30      	cmp	r3, #48	@ 0x30
 8003840:	d063      	beq.n	800390a <HAL_TIM_ConfigClockSource+0x166>
 8003842:	d86b      	bhi.n	800391c <HAL_TIM_ConfigClockSource+0x178>
 8003844:	2b20      	cmp	r3, #32
 8003846:	d060      	beq.n	800390a <HAL_TIM_ConfigClockSource+0x166>
 8003848:	d868      	bhi.n	800391c <HAL_TIM_ConfigClockSource+0x178>
 800384a:	2b00      	cmp	r3, #0
 800384c:	d05d      	beq.n	800390a <HAL_TIM_ConfigClockSource+0x166>
 800384e:	2b10      	cmp	r3, #16
 8003850:	d05b      	beq.n	800390a <HAL_TIM_ConfigClockSource+0x166>
 8003852:	e063      	b.n	800391c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003864:	f000 fc6a 	bl	800413c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2277      	movs	r2, #119	@ 0x77
 8003874:	4313      	orrs	r3, r2
 8003876:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	609a      	str	r2, [r3, #8]
      break;
 8003880:	e052      	b.n	8003928 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003892:	f000 fc53 	bl	800413c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2180      	movs	r1, #128	@ 0x80
 80038a2:	01c9      	lsls	r1, r1, #7
 80038a4:	430a      	orrs	r2, r1
 80038a6:	609a      	str	r2, [r3, #8]
      break;
 80038a8:	e03e      	b.n	8003928 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038b6:	001a      	movs	r2, r3
 80038b8:	f000 fbc4 	bl	8004044 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2150      	movs	r1, #80	@ 0x50
 80038c2:	0018      	movs	r0, r3
 80038c4:	f000 fc1e 	bl	8004104 <TIM_ITRx_SetConfig>
      break;
 80038c8:	e02e      	b.n	8003928 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038d6:	001a      	movs	r2, r3
 80038d8:	f000 fbe2 	bl	80040a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2160      	movs	r1, #96	@ 0x60
 80038e2:	0018      	movs	r0, r3
 80038e4:	f000 fc0e 	bl	8004104 <TIM_ITRx_SetConfig>
      break;
 80038e8:	e01e      	b.n	8003928 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038f6:	001a      	movs	r2, r3
 80038f8:	f000 fba4 	bl	8004044 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2140      	movs	r1, #64	@ 0x40
 8003902:	0018      	movs	r0, r3
 8003904:	f000 fbfe 	bl	8004104 <TIM_ITRx_SetConfig>
      break;
 8003908:	e00e      	b.n	8003928 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	0019      	movs	r1, r3
 8003914:	0010      	movs	r0, r2
 8003916:	f000 fbf5 	bl	8004104 <TIM_ITRx_SetConfig>
      break;
 800391a:	e005      	b.n	8003928 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800391c:	230f      	movs	r3, #15
 800391e:	18fb      	adds	r3, r7, r3
 8003920:	2201      	movs	r2, #1
 8003922:	701a      	strb	r2, [r3, #0]
      break;
 8003924:	e000      	b.n	8003928 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003926:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	223d      	movs	r2, #61	@ 0x3d
 800392c:	2101      	movs	r1, #1
 800392e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	223c      	movs	r2, #60	@ 0x3c
 8003934:	2100      	movs	r1, #0
 8003936:	5499      	strb	r1, [r3, r2]

  return status;
 8003938:	230f      	movs	r3, #15
 800393a:	18fb      	adds	r3, r7, r3
 800393c:	781b      	ldrb	r3, [r3, #0]
}
 800393e:	0018      	movs	r0, r3
 8003940:	46bd      	mov	sp, r7
 8003942:	b004      	add	sp, #16
 8003944:	bd80      	pop	{r7, pc}
 8003946:	46c0      	nop			@ (mov r8, r8)
 8003948:	ffceff88 	.word	0xffceff88
 800394c:	ffff00ff 	.word	0xffff00ff

08003950 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003958:	46c0      	nop			@ (mov r8, r8)
 800395a:	46bd      	mov	sp, r7
 800395c:	b002      	add	sp, #8
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003968:	46c0      	nop			@ (mov r8, r8)
 800396a:	46bd      	mov	sp, r7
 800396c:	b002      	add	sp, #8
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003978:	46c0      	nop			@ (mov r8, r8)
 800397a:	46bd      	mov	sp, r7
 800397c:	b002      	add	sp, #8
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003988:	46c0      	nop			@ (mov r8, r8)
 800398a:	46bd      	mov	sp, r7
 800398c:	b002      	add	sp, #8
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003998:	46c0      	nop			@ (mov r8, r8)
 800399a:	46bd      	mov	sp, r7
 800399c:	b002      	add	sp, #8
 800399e:	bd80      	pop	{r7, pc}

080039a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a3b      	ldr	r2, [pc, #236]	@ (8003aa0 <TIM_Base_SetConfig+0x100>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d008      	beq.n	80039ca <TIM_Base_SetConfig+0x2a>
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	2380      	movs	r3, #128	@ 0x80
 80039bc:	05db      	lsls	r3, r3, #23
 80039be:	429a      	cmp	r2, r3
 80039c0:	d003      	beq.n	80039ca <TIM_Base_SetConfig+0x2a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a37      	ldr	r2, [pc, #220]	@ (8003aa4 <TIM_Base_SetConfig+0x104>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d108      	bne.n	80039dc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2270      	movs	r2, #112	@ 0x70
 80039ce:	4393      	bics	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4313      	orrs	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a30      	ldr	r2, [pc, #192]	@ (8003aa0 <TIM_Base_SetConfig+0x100>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d018      	beq.n	8003a16 <TIM_Base_SetConfig+0x76>
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	2380      	movs	r3, #128	@ 0x80
 80039e8:	05db      	lsls	r3, r3, #23
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d013      	beq.n	8003a16 <TIM_Base_SetConfig+0x76>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a2c      	ldr	r2, [pc, #176]	@ (8003aa4 <TIM_Base_SetConfig+0x104>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00f      	beq.n	8003a16 <TIM_Base_SetConfig+0x76>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a2b      	ldr	r2, [pc, #172]	@ (8003aa8 <TIM_Base_SetConfig+0x108>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00b      	beq.n	8003a16 <TIM_Base_SetConfig+0x76>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a2a      	ldr	r2, [pc, #168]	@ (8003aac <TIM_Base_SetConfig+0x10c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d007      	beq.n	8003a16 <TIM_Base_SetConfig+0x76>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a29      	ldr	r2, [pc, #164]	@ (8003ab0 <TIM_Base_SetConfig+0x110>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d003      	beq.n	8003a16 <TIM_Base_SetConfig+0x76>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a28      	ldr	r2, [pc, #160]	@ (8003ab4 <TIM_Base_SetConfig+0x114>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d108      	bne.n	8003a28 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4a27      	ldr	r2, [pc, #156]	@ (8003ab8 <TIM_Base_SetConfig+0x118>)
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2280      	movs	r2, #128	@ 0x80
 8003a2c:	4393      	bics	r3, r2
 8003a2e:	001a      	movs	r2, r3
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a13      	ldr	r2, [pc, #76]	@ (8003aa0 <TIM_Base_SetConfig+0x100>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d00b      	beq.n	8003a6e <TIM_Base_SetConfig+0xce>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a14      	ldr	r2, [pc, #80]	@ (8003aac <TIM_Base_SetConfig+0x10c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d007      	beq.n	8003a6e <TIM_Base_SetConfig+0xce>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a13      	ldr	r2, [pc, #76]	@ (8003ab0 <TIM_Base_SetConfig+0x110>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d003      	beq.n	8003a6e <TIM_Base_SetConfig+0xce>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a12      	ldr	r2, [pc, #72]	@ (8003ab4 <TIM_Base_SetConfig+0x114>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d103      	bne.n	8003a76 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	691a      	ldr	r2, [r3, #16]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	2201      	movs	r2, #1
 8003a82:	4013      	ands	r3, r2
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d106      	bne.n	8003a96 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	4393      	bics	r3, r2
 8003a90:	001a      	movs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	611a      	str	r2, [r3, #16]
  }
}
 8003a96:	46c0      	nop			@ (mov r8, r8)
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	b004      	add	sp, #16
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	46c0      	nop			@ (mov r8, r8)
 8003aa0:	40012c00 	.word	0x40012c00
 8003aa4:	40000400 	.word	0x40000400
 8003aa8:	40002000 	.word	0x40002000
 8003aac:	40014000 	.word	0x40014000
 8003ab0:	40014400 	.word	0x40014400
 8003ab4:	40014800 	.word	0x40014800
 8003ab8:	fffffcff 	.word	0xfffffcff

08003abc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	4393      	bics	r3, r2
 8003ad4:	001a      	movs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4a32      	ldr	r2, [pc, #200]	@ (8003bb4 <TIM_OC1_SetConfig+0xf8>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2203      	movs	r2, #3
 8003af2:	4393      	bics	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	2202      	movs	r2, #2
 8003b04:	4393      	bics	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a28      	ldr	r2, [pc, #160]	@ (8003bb8 <TIM_OC1_SetConfig+0xfc>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00b      	beq.n	8003b32 <TIM_OC1_SetConfig+0x76>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a27      	ldr	r2, [pc, #156]	@ (8003bbc <TIM_OC1_SetConfig+0x100>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d007      	beq.n	8003b32 <TIM_OC1_SetConfig+0x76>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a26      	ldr	r2, [pc, #152]	@ (8003bc0 <TIM_OC1_SetConfig+0x104>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d003      	beq.n	8003b32 <TIM_OC1_SetConfig+0x76>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a25      	ldr	r2, [pc, #148]	@ (8003bc4 <TIM_OC1_SetConfig+0x108>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d10c      	bne.n	8003b4c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2208      	movs	r2, #8
 8003b36:	4393      	bics	r3, r2
 8003b38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	2204      	movs	r2, #4
 8003b48:	4393      	bics	r3, r2
 8003b4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a1a      	ldr	r2, [pc, #104]	@ (8003bb8 <TIM_OC1_SetConfig+0xfc>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d00b      	beq.n	8003b6c <TIM_OC1_SetConfig+0xb0>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a19      	ldr	r2, [pc, #100]	@ (8003bbc <TIM_OC1_SetConfig+0x100>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d007      	beq.n	8003b6c <TIM_OC1_SetConfig+0xb0>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a18      	ldr	r2, [pc, #96]	@ (8003bc0 <TIM_OC1_SetConfig+0x104>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d003      	beq.n	8003b6c <TIM_OC1_SetConfig+0xb0>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a17      	ldr	r2, [pc, #92]	@ (8003bc4 <TIM_OC1_SetConfig+0x108>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d111      	bne.n	8003b90 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	4a16      	ldr	r2, [pc, #88]	@ (8003bc8 <TIM_OC1_SetConfig+0x10c>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	4a15      	ldr	r2, [pc, #84]	@ (8003bcc <TIM_OC1_SetConfig+0x110>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	621a      	str	r2, [r3, #32]
}
 8003baa:	46c0      	nop			@ (mov r8, r8)
 8003bac:	46bd      	mov	sp, r7
 8003bae:	b006      	add	sp, #24
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	46c0      	nop			@ (mov r8, r8)
 8003bb4:	fffeff8f 	.word	0xfffeff8f
 8003bb8:	40012c00 	.word	0x40012c00
 8003bbc:	40014000 	.word	0x40014000
 8003bc0:	40014400 	.word	0x40014400
 8003bc4:	40014800 	.word	0x40014800
 8003bc8:	fffffeff 	.word	0xfffffeff
 8003bcc:	fffffdff 	.word	0xfffffdff

08003bd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	2210      	movs	r2, #16
 8003be6:	4393      	bics	r3, r2
 8003be8:	001a      	movs	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4a2e      	ldr	r2, [pc, #184]	@ (8003cb8 <TIM_OC2_SetConfig+0xe8>)
 8003bfe:	4013      	ands	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4a2d      	ldr	r2, [pc, #180]	@ (8003cbc <TIM_OC2_SetConfig+0xec>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	021b      	lsls	r3, r3, #8
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	4393      	bics	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a24      	ldr	r2, [pc, #144]	@ (8003cc0 <TIM_OC2_SetConfig+0xf0>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d10d      	bne.n	8003c4e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2280      	movs	r2, #128	@ 0x80
 8003c36:	4393      	bics	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2240      	movs	r2, #64	@ 0x40
 8003c4a:	4393      	bics	r3, r2
 8003c4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a1b      	ldr	r2, [pc, #108]	@ (8003cc0 <TIM_OC2_SetConfig+0xf0>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00b      	beq.n	8003c6e <TIM_OC2_SetConfig+0x9e>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a1a      	ldr	r2, [pc, #104]	@ (8003cc4 <TIM_OC2_SetConfig+0xf4>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d007      	beq.n	8003c6e <TIM_OC2_SetConfig+0x9e>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a19      	ldr	r2, [pc, #100]	@ (8003cc8 <TIM_OC2_SetConfig+0xf8>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d003      	beq.n	8003c6e <TIM_OC2_SetConfig+0x9e>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a18      	ldr	r2, [pc, #96]	@ (8003ccc <TIM_OC2_SetConfig+0xfc>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d113      	bne.n	8003c96 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	4a17      	ldr	r2, [pc, #92]	@ (8003cd0 <TIM_OC2_SetConfig+0x100>)
 8003c72:	4013      	ands	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4a16      	ldr	r2, [pc, #88]	@ (8003cd4 <TIM_OC2_SetConfig+0x104>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	621a      	str	r2, [r3, #32]
}
 8003cb0:	46c0      	nop			@ (mov r8, r8)
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b006      	add	sp, #24
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	feff8fff 	.word	0xfeff8fff
 8003cbc:	fffffcff 	.word	0xfffffcff
 8003cc0:	40012c00 	.word	0x40012c00
 8003cc4:	40014000 	.word	0x40014000
 8003cc8:	40014400 	.word	0x40014400
 8003ccc:	40014800 	.word	0x40014800
 8003cd0:	fffffbff 	.word	0xfffffbff
 8003cd4:	fffff7ff 	.word	0xfffff7ff

08003cd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	4a33      	ldr	r2, [pc, #204]	@ (8003dbc <TIM_OC3_SetConfig+0xe4>)
 8003cee:	401a      	ands	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4a2f      	ldr	r2, [pc, #188]	@ (8003dc0 <TIM_OC3_SetConfig+0xe8>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	4393      	bics	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	4a29      	ldr	r2, [pc, #164]	@ (8003dc4 <TIM_OC3_SetConfig+0xec>)
 8003d1e:	4013      	ands	r3, r2
 8003d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	021b      	lsls	r3, r3, #8
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a25      	ldr	r2, [pc, #148]	@ (8003dc8 <TIM_OC3_SetConfig+0xf0>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d10d      	bne.n	8003d52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	4a24      	ldr	r2, [pc, #144]	@ (8003dcc <TIM_OC3_SetConfig+0xf4>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	021b      	lsls	r3, r3, #8
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	4a20      	ldr	r2, [pc, #128]	@ (8003dd0 <TIM_OC3_SetConfig+0xf8>)
 8003d4e:	4013      	ands	r3, r2
 8003d50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a1c      	ldr	r2, [pc, #112]	@ (8003dc8 <TIM_OC3_SetConfig+0xf0>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00b      	beq.n	8003d72 <TIM_OC3_SetConfig+0x9a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8003dd4 <TIM_OC3_SetConfig+0xfc>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d007      	beq.n	8003d72 <TIM_OC3_SetConfig+0x9a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a1c      	ldr	r2, [pc, #112]	@ (8003dd8 <TIM_OC3_SetConfig+0x100>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d003      	beq.n	8003d72 <TIM_OC3_SetConfig+0x9a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8003ddc <TIM_OC3_SetConfig+0x104>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d113      	bne.n	8003d9a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	4a1a      	ldr	r2, [pc, #104]	@ (8003de0 <TIM_OC3_SetConfig+0x108>)
 8003d76:	4013      	ands	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	4a19      	ldr	r2, [pc, #100]	@ (8003de4 <TIM_OC3_SetConfig+0x10c>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	621a      	str	r2, [r3, #32]
}
 8003db4:	46c0      	nop			@ (mov r8, r8)
 8003db6:	46bd      	mov	sp, r7
 8003db8:	b006      	add	sp, #24
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	fffffeff 	.word	0xfffffeff
 8003dc0:	fffeff8f 	.word	0xfffeff8f
 8003dc4:	fffffdff 	.word	0xfffffdff
 8003dc8:	40012c00 	.word	0x40012c00
 8003dcc:	fffff7ff 	.word	0xfffff7ff
 8003dd0:	fffffbff 	.word	0xfffffbff
 8003dd4:	40014000 	.word	0x40014000
 8003dd8:	40014400 	.word	0x40014400
 8003ddc:	40014800 	.word	0x40014800
 8003de0:	ffffefff 	.word	0xffffefff
 8003de4:	ffffdfff 	.word	0xffffdfff

08003de8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	4a26      	ldr	r2, [pc, #152]	@ (8003e98 <TIM_OC4_SetConfig+0xb0>)
 8003dfe:	401a      	ands	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4a22      	ldr	r2, [pc, #136]	@ (8003e9c <TIM_OC4_SetConfig+0xb4>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4a21      	ldr	r2, [pc, #132]	@ (8003ea0 <TIM_OC4_SetConfig+0xb8>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	021b      	lsls	r3, r3, #8
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ea4 <TIM_OC4_SetConfig+0xbc>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	031b      	lsls	r3, r3, #12
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a19      	ldr	r2, [pc, #100]	@ (8003ea8 <TIM_OC4_SetConfig+0xc0>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d00b      	beq.n	8003e60 <TIM_OC4_SetConfig+0x78>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a18      	ldr	r2, [pc, #96]	@ (8003eac <TIM_OC4_SetConfig+0xc4>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d007      	beq.n	8003e60 <TIM_OC4_SetConfig+0x78>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a17      	ldr	r2, [pc, #92]	@ (8003eb0 <TIM_OC4_SetConfig+0xc8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d003      	beq.n	8003e60 <TIM_OC4_SetConfig+0x78>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a16      	ldr	r2, [pc, #88]	@ (8003eb4 <TIM_OC4_SetConfig+0xcc>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d109      	bne.n	8003e74 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	4a15      	ldr	r2, [pc, #84]	@ (8003eb8 <TIM_OC4_SetConfig+0xd0>)
 8003e64:	4013      	ands	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	019b      	lsls	r3, r3, #6
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	621a      	str	r2, [r3, #32]
}
 8003e8e:	46c0      	nop			@ (mov r8, r8)
 8003e90:	46bd      	mov	sp, r7
 8003e92:	b006      	add	sp, #24
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	46c0      	nop			@ (mov r8, r8)
 8003e98:	ffffefff 	.word	0xffffefff
 8003e9c:	feff8fff 	.word	0xfeff8fff
 8003ea0:	fffffcff 	.word	0xfffffcff
 8003ea4:	ffffdfff 	.word	0xffffdfff
 8003ea8:	40012c00 	.word	0x40012c00
 8003eac:	40014000 	.word	0x40014000
 8003eb0:	40014400 	.word	0x40014400
 8003eb4:	40014800 	.word	0x40014800
 8003eb8:	ffffbfff 	.word	0xffffbfff

08003ebc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	4a23      	ldr	r2, [pc, #140]	@ (8003f60 <TIM_OC5_SetConfig+0xa4>)
 8003ed2:	401a      	ands	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4a1f      	ldr	r2, [pc, #124]	@ (8003f64 <TIM_OC5_SetConfig+0xa8>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8003f68 <TIM_OC5_SetConfig+0xac>)
 8003efa:	4013      	ands	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	041b      	lsls	r3, r3, #16
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a17      	ldr	r2, [pc, #92]	@ (8003f6c <TIM_OC5_SetConfig+0xb0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d00b      	beq.n	8003f2a <TIM_OC5_SetConfig+0x6e>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a16      	ldr	r2, [pc, #88]	@ (8003f70 <TIM_OC5_SetConfig+0xb4>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d007      	beq.n	8003f2a <TIM_OC5_SetConfig+0x6e>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a15      	ldr	r2, [pc, #84]	@ (8003f74 <TIM_OC5_SetConfig+0xb8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d003      	beq.n	8003f2a <TIM_OC5_SetConfig+0x6e>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a14      	ldr	r2, [pc, #80]	@ (8003f78 <TIM_OC5_SetConfig+0xbc>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d109      	bne.n	8003f3e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	4a0c      	ldr	r2, [pc, #48]	@ (8003f60 <TIM_OC5_SetConfig+0xa4>)
 8003f2e:	4013      	ands	r3, r2
 8003f30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	021b      	lsls	r3, r3, #8
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	621a      	str	r2, [r3, #32]
}
 8003f58:	46c0      	nop			@ (mov r8, r8)
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	b006      	add	sp, #24
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	fffeffff 	.word	0xfffeffff
 8003f64:	fffeff8f 	.word	0xfffeff8f
 8003f68:	fffdffff 	.word	0xfffdffff
 8003f6c:	40012c00 	.word	0x40012c00
 8003f70:	40014000 	.word	0x40014000
 8003f74:	40014400 	.word	0x40014400
 8003f78:	40014800 	.word	0x40014800

08003f7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	4a24      	ldr	r2, [pc, #144]	@ (8004024 <TIM_OC6_SetConfig+0xa8>)
 8003f92:	401a      	ands	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4a20      	ldr	r2, [pc, #128]	@ (8004028 <TIM_OC6_SetConfig+0xac>)
 8003fa8:	4013      	ands	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	021b      	lsls	r3, r3, #8
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	4a1c      	ldr	r2, [pc, #112]	@ (800402c <TIM_OC6_SetConfig+0xb0>)
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	051b      	lsls	r3, r3, #20
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a18      	ldr	r2, [pc, #96]	@ (8004030 <TIM_OC6_SetConfig+0xb4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00b      	beq.n	8003fec <TIM_OC6_SetConfig+0x70>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a17      	ldr	r2, [pc, #92]	@ (8004034 <TIM_OC6_SetConfig+0xb8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d007      	beq.n	8003fec <TIM_OC6_SetConfig+0x70>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a16      	ldr	r2, [pc, #88]	@ (8004038 <TIM_OC6_SetConfig+0xbc>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d003      	beq.n	8003fec <TIM_OC6_SetConfig+0x70>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a15      	ldr	r2, [pc, #84]	@ (800403c <TIM_OC6_SetConfig+0xc0>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d109      	bne.n	8004000 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	4a14      	ldr	r2, [pc, #80]	@ (8004040 <TIM_OC6_SetConfig+0xc4>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	029b      	lsls	r3, r3, #10
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	621a      	str	r2, [r3, #32]
}
 800401a:	46c0      	nop			@ (mov r8, r8)
 800401c:	46bd      	mov	sp, r7
 800401e:	b006      	add	sp, #24
 8004020:	bd80      	pop	{r7, pc}
 8004022:	46c0      	nop			@ (mov r8, r8)
 8004024:	ffefffff 	.word	0xffefffff
 8004028:	feff8fff 	.word	0xfeff8fff
 800402c:	ffdfffff 	.word	0xffdfffff
 8004030:	40012c00 	.word	0x40012c00
 8004034:	40014000 	.word	0x40014000
 8004038:	40014400 	.word	0x40014400
 800403c:	40014800 	.word	0x40014800
 8004040:	fffbffff 	.word	0xfffbffff

08004044 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	2201      	movs	r2, #1
 800405c:	4393      	bics	r3, r2
 800405e:	001a      	movs	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	22f0      	movs	r2, #240	@ 0xf0
 800406e:	4393      	bics	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	4313      	orrs	r3, r2
 800407a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	220a      	movs	r2, #10
 8004080:	4393      	bics	r3, r2
 8004082:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	4313      	orrs	r3, r2
 800408a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	621a      	str	r2, [r3, #32]
}
 8004098:	46c0      	nop			@ (mov r8, r8)
 800409a:	46bd      	mov	sp, r7
 800409c:	b006      	add	sp, #24
 800409e:	bd80      	pop	{r7, pc}

080040a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	2210      	movs	r2, #16
 80040b8:	4393      	bics	r3, r2
 80040ba:	001a      	movs	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004100 <TIM_TI2_ConfigInputStage+0x60>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	031b      	lsls	r3, r3, #12
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	22a0      	movs	r2, #160	@ 0xa0
 80040dc:	4393      	bics	r3, r2
 80040de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	621a      	str	r2, [r3, #32]
}
 80040f6:	46c0      	nop			@ (mov r8, r8)
 80040f8:	46bd      	mov	sp, r7
 80040fa:	b006      	add	sp, #24
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	46c0      	nop			@ (mov r8, r8)
 8004100:	ffff0fff 	.word	0xffff0fff

08004104 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4a08      	ldr	r2, [pc, #32]	@ (8004138 <TIM_ITRx_SetConfig+0x34>)
 8004118:	4013      	ands	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	4313      	orrs	r3, r2
 8004122:	2207      	movs	r2, #7
 8004124:	4313      	orrs	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	609a      	str	r2, [r3, #8]
}
 800412e:	46c0      	nop			@ (mov r8, r8)
 8004130:	46bd      	mov	sp, r7
 8004132:	b004      	add	sp, #16
 8004134:	bd80      	pop	{r7, pc}
 8004136:	46c0      	nop			@ (mov r8, r8)
 8004138:	ffcfff8f 	.word	0xffcfff8f

0800413c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	4a09      	ldr	r2, [pc, #36]	@ (8004178 <TIM_ETR_SetConfig+0x3c>)
 8004154:	4013      	ands	r3, r2
 8004156:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	021a      	lsls	r2, r3, #8
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	431a      	orrs	r2, r3
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4313      	orrs	r3, r2
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	4313      	orrs	r3, r2
 8004168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	609a      	str	r2, [r3, #8]
}
 8004170:	46c0      	nop			@ (mov r8, r8)
 8004172:	46bd      	mov	sp, r7
 8004174:	b006      	add	sp, #24
 8004176:	bd80      	pop	{r7, pc}
 8004178:	ffff00ff 	.word	0xffff00ff

0800417c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	221f      	movs	r2, #31
 800418c:	4013      	ands	r3, r2
 800418e:	2201      	movs	r2, #1
 8004190:	409a      	lsls	r2, r3
 8004192:	0013      	movs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	43d2      	mvns	r2, r2
 800419e:	401a      	ands	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a1a      	ldr	r2, [r3, #32]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	211f      	movs	r1, #31
 80041ac:	400b      	ands	r3, r1
 80041ae:	6879      	ldr	r1, [r7, #4]
 80041b0:	4099      	lsls	r1, r3
 80041b2:	000b      	movs	r3, r1
 80041b4:	431a      	orrs	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	621a      	str	r2, [r3, #32]
}
 80041ba:	46c0      	nop			@ (mov r8, r8)
 80041bc:	46bd      	mov	sp, r7
 80041be:	b006      	add	sp, #24
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d108      	bne.n	80041e6 <HAL_TIMEx_PWMN_Start+0x22>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2244      	movs	r2, #68	@ 0x44
 80041d8:	5c9b      	ldrb	r3, [r3, r2]
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	3b01      	subs	r3, #1
 80041de:	1e5a      	subs	r2, r3, #1
 80041e0:	4193      	sbcs	r3, r2
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	e01f      	b.n	8004226 <HAL_TIMEx_PWMN_Start+0x62>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d108      	bne.n	80041fe <HAL_TIMEx_PWMN_Start+0x3a>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2245      	movs	r2, #69	@ 0x45
 80041f0:	5c9b      	ldrb	r3, [r3, r2]
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	3b01      	subs	r3, #1
 80041f6:	1e5a      	subs	r2, r3, #1
 80041f8:	4193      	sbcs	r3, r2
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	e013      	b.n	8004226 <HAL_TIMEx_PWMN_Start+0x62>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b08      	cmp	r3, #8
 8004202:	d108      	bne.n	8004216 <HAL_TIMEx_PWMN_Start+0x52>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2246      	movs	r2, #70	@ 0x46
 8004208:	5c9b      	ldrb	r3, [r3, r2]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	3b01      	subs	r3, #1
 800420e:	1e5a      	subs	r2, r3, #1
 8004210:	4193      	sbcs	r3, r2
 8004212:	b2db      	uxtb	r3, r3
 8004214:	e007      	b.n	8004226 <HAL_TIMEx_PWMN_Start+0x62>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2247      	movs	r2, #71	@ 0x47
 800421a:	5c9b      	ldrb	r3, [r3, r2]
 800421c:	b2db      	uxtb	r3, r3
 800421e:	3b01      	subs	r3, #1
 8004220:	1e5a      	subs	r2, r3, #1
 8004222:	4193      	sbcs	r3, r2
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e062      	b.n	80042f4 <HAL_TIMEx_PWMN_Start+0x130>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d104      	bne.n	800423e <HAL_TIMEx_PWMN_Start+0x7a>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2244      	movs	r2, #68	@ 0x44
 8004238:	2102      	movs	r1, #2
 800423a:	5499      	strb	r1, [r3, r2]
 800423c:	e013      	b.n	8004266 <HAL_TIMEx_PWMN_Start+0xa2>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b04      	cmp	r3, #4
 8004242:	d104      	bne.n	800424e <HAL_TIMEx_PWMN_Start+0x8a>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2245      	movs	r2, #69	@ 0x45
 8004248:	2102      	movs	r1, #2
 800424a:	5499      	strb	r1, [r3, r2]
 800424c:	e00b      	b.n	8004266 <HAL_TIMEx_PWMN_Start+0xa2>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b08      	cmp	r3, #8
 8004252:	d104      	bne.n	800425e <HAL_TIMEx_PWMN_Start+0x9a>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2246      	movs	r2, #70	@ 0x46
 8004258:	2102      	movs	r1, #2
 800425a:	5499      	strb	r1, [r3, r2]
 800425c:	e003      	b.n	8004266 <HAL_TIMEx_PWMN_Start+0xa2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2247      	movs	r2, #71	@ 0x47
 8004262:	2102      	movs	r1, #2
 8004264:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6839      	ldr	r1, [r7, #0]
 800426c:	2204      	movs	r2, #4
 800426e:	0018      	movs	r0, r3
 8004270:	f000 f96e 	bl	8004550 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2180      	movs	r1, #128	@ 0x80
 8004280:	0209      	lsls	r1, r1, #8
 8004282:	430a      	orrs	r2, r1
 8004284:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a1c      	ldr	r2, [pc, #112]	@ (80042fc <HAL_TIMEx_PWMN_Start+0x138>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00f      	beq.n	80042b0 <HAL_TIMEx_PWMN_Start+0xec>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	2380      	movs	r3, #128	@ 0x80
 8004296:	05db      	lsls	r3, r3, #23
 8004298:	429a      	cmp	r2, r3
 800429a:	d009      	beq.n	80042b0 <HAL_TIMEx_PWMN_Start+0xec>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a17      	ldr	r2, [pc, #92]	@ (8004300 <HAL_TIMEx_PWMN_Start+0x13c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d004      	beq.n	80042b0 <HAL_TIMEx_PWMN_Start+0xec>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a16      	ldr	r2, [pc, #88]	@ (8004304 <HAL_TIMEx_PWMN_Start+0x140>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d116      	bne.n	80042de <HAL_TIMEx_PWMN_Start+0x11a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	4a14      	ldr	r2, [pc, #80]	@ (8004308 <HAL_TIMEx_PWMN_Start+0x144>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2b06      	cmp	r3, #6
 80042c0:	d016      	beq.n	80042f0 <HAL_TIMEx_PWMN_Start+0x12c>
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	2380      	movs	r3, #128	@ 0x80
 80042c6:	025b      	lsls	r3, r3, #9
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d011      	beq.n	80042f0 <HAL_TIMEx_PWMN_Start+0x12c>
    {
      __HAL_TIM_ENABLE(htim);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2101      	movs	r1, #1
 80042d8:	430a      	orrs	r2, r1
 80042da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042dc:	e008      	b.n	80042f0 <HAL_TIMEx_PWMN_Start+0x12c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2101      	movs	r1, #1
 80042ea:	430a      	orrs	r2, r1
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	e000      	b.n	80042f2 <HAL_TIMEx_PWMN_Start+0x12e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	0018      	movs	r0, r3
 80042f6:	46bd      	mov	sp, r7
 80042f8:	b004      	add	sp, #16
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40012c00 	.word	0x40012c00
 8004300:	40000400 	.word	0x40000400
 8004304:	40014000 	.word	0x40014000
 8004308:	00010007 	.word	0x00010007

0800430c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	223c      	movs	r2, #60	@ 0x3c
 800431a:	5c9b      	ldrb	r3, [r3, r2]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d101      	bne.n	8004324 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004320:	2302      	movs	r3, #2
 8004322:	e055      	b.n	80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	223c      	movs	r2, #60	@ 0x3c
 8004328:	2101      	movs	r1, #1
 800432a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	223d      	movs	r2, #61	@ 0x3d
 8004330:	2102      	movs	r1, #2
 8004332:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a23      	ldr	r2, [pc, #140]	@ (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d108      	bne.n	8004360 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4a22      	ldr	r2, [pc, #136]	@ (80043dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004352:	4013      	ands	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4313      	orrs	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2270      	movs	r2, #112	@ 0x70
 8004364:	4393      	bics	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a16      	ldr	r2, [pc, #88]	@ (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d00f      	beq.n	80043a4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	2380      	movs	r3, #128	@ 0x80
 800438a:	05db      	lsls	r3, r3, #23
 800438c:	429a      	cmp	r2, r3
 800438e:	d009      	beq.n	80043a4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a12      	ldr	r2, [pc, #72]	@ (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d004      	beq.n	80043a4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a11      	ldr	r2, [pc, #68]	@ (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d10c      	bne.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2280      	movs	r2, #128	@ 0x80
 80043a8:	4393      	bics	r3, r2
 80043aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	223d      	movs	r2, #61	@ 0x3d
 80043c2:	2101      	movs	r1, #1
 80043c4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	223c      	movs	r2, #60	@ 0x3c
 80043ca:	2100      	movs	r1, #0
 80043cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	0018      	movs	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	b004      	add	sp, #16
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40012c00 	.word	0x40012c00
 80043dc:	ff0fffff 	.word	0xff0fffff
 80043e0:	40000400 	.word	0x40000400
 80043e4:	40014000 	.word	0x40014000

080043e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	223c      	movs	r2, #60	@ 0x3c
 80043fa:	5c9b      	ldrb	r3, [r3, r2]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d101      	bne.n	8004404 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004400:	2302      	movs	r3, #2
 8004402:	e06f      	b.n	80044e4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	223c      	movs	r2, #60	@ 0x3c
 8004408:	2101      	movs	r1, #1
 800440a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	22ff      	movs	r2, #255	@ 0xff
 8004410:	4393      	bics	r3, r2
 8004412:	001a      	movs	r2, r3
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4313      	orrs	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4a33      	ldr	r2, [pc, #204]	@ (80044ec <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004420:	401a      	ands	r2, r3
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	4a30      	ldr	r2, [pc, #192]	@ (80044f0 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800442e:	401a      	ands	r2, r3
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4a2e      	ldr	r2, [pc, #184]	@ (80044f4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800443c:	401a      	ands	r2, r3
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4a2b      	ldr	r2, [pc, #172]	@ (80044f8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800444a:	401a      	ands	r2, r3
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4a29      	ldr	r2, [pc, #164]	@ (80044fc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004458:	401a      	ands	r2, r3
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	4a26      	ldr	r2, [pc, #152]	@ (8004500 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004466:	401a      	ands	r2, r3
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446c:	4313      	orrs	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4a24      	ldr	r2, [pc, #144]	@ (8004504 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004474:	401a      	ands	r2, r3
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	041b      	lsls	r3, r3, #16
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4a21      	ldr	r2, [pc, #132]	@ (8004508 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004484:	401a      	ands	r2, r3
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a1e      	ldr	r2, [pc, #120]	@ (800450c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d11c      	bne.n	80044d2 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4a1d      	ldr	r2, [pc, #116]	@ (8004510 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800449c:	401a      	ands	r2, r3
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a2:	051b      	lsls	r3, r3, #20
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4a1a      	ldr	r2, [pc, #104]	@ (8004514 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80044ac:	401a      	ands	r2, r3
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	4a17      	ldr	r2, [pc, #92]	@ (8004518 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80044ba:	401a      	ands	r2, r3
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4a15      	ldr	r2, [pc, #84]	@ (800451c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80044c8:	401a      	ands	r2, r3
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	223c      	movs	r2, #60	@ 0x3c
 80044de:	2100      	movs	r1, #0
 80044e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	0018      	movs	r0, r3
 80044e6:	46bd      	mov	sp, r7
 80044e8:	b004      	add	sp, #16
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	fffffcff 	.word	0xfffffcff
 80044f0:	fffffbff 	.word	0xfffffbff
 80044f4:	fffff7ff 	.word	0xfffff7ff
 80044f8:	ffffefff 	.word	0xffffefff
 80044fc:	ffffdfff 	.word	0xffffdfff
 8004500:	ffffbfff 	.word	0xffffbfff
 8004504:	fff0ffff 	.word	0xfff0ffff
 8004508:	efffffff 	.word	0xefffffff
 800450c:	40012c00 	.word	0x40012c00
 8004510:	ff0fffff 	.word	0xff0fffff
 8004514:	feffffff 	.word	0xfeffffff
 8004518:	fdffffff 	.word	0xfdffffff
 800451c:	dfffffff 	.word	0xdfffffff

08004520 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004528:	46c0      	nop			@ (mov r8, r8)
 800452a:	46bd      	mov	sp, r7
 800452c:	b002      	add	sp, #8
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004538:	46c0      	nop			@ (mov r8, r8)
 800453a:	46bd      	mov	sp, r7
 800453c:	b002      	add	sp, #8
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004548:	46c0      	nop			@ (mov r8, r8)
 800454a:	46bd      	mov	sp, r7
 800454c:	b002      	add	sp, #8
 800454e:	bd80      	pop	{r7, pc}

08004550 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	220f      	movs	r2, #15
 8004560:	4013      	ands	r3, r2
 8004562:	2204      	movs	r2, #4
 8004564:	409a      	lsls	r2, r3
 8004566:	0013      	movs	r3, r2
 8004568:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	43d2      	mvns	r2, r2
 8004572:	401a      	ands	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a1a      	ldr	r2, [r3, #32]
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	210f      	movs	r1, #15
 8004580:	400b      	ands	r3, r1
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	4099      	lsls	r1, r3
 8004586:	000b      	movs	r3, r1
 8004588:	431a      	orrs	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	621a      	str	r2, [r3, #32]
}
 800458e:	46c0      	nop			@ (mov r8, r8)
 8004590:	46bd      	mov	sp, r7
 8004592:	b006      	add	sp, #24
 8004594:	bd80      	pop	{r7, pc}
	...

08004598 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e046      	b.n	8004638 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2288      	movs	r2, #136	@ 0x88
 80045ae:	589b      	ldr	r3, [r3, r2]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d107      	bne.n	80045c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2284      	movs	r2, #132	@ 0x84
 80045b8:	2100      	movs	r1, #0
 80045ba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	0018      	movs	r0, r3
 80045c0:	f7fd f804 	bl	80015cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2288      	movs	r2, #136	@ 0x88
 80045c8:	2124      	movs	r1, #36	@ 0x24
 80045ca:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2101      	movs	r1, #1
 80045d8:	438a      	bics	r2, r1
 80045da:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	0018      	movs	r0, r3
 80045e8:	f000 faea 	bl	8004bc0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	0018      	movs	r0, r3
 80045f0:	f000 f828 	bl	8004644 <UART_SetConfig>
 80045f4:	0003      	movs	r3, r0
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d101      	bne.n	80045fe <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e01c      	b.n	8004638 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	490d      	ldr	r1, [pc, #52]	@ (8004640 <HAL_UART_Init+0xa8>)
 800460a:	400a      	ands	r2, r1
 800460c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	212a      	movs	r1, #42	@ 0x2a
 800461a:	438a      	bics	r2, r1
 800461c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2101      	movs	r1, #1
 800462a:	430a      	orrs	r2, r1
 800462c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	0018      	movs	r0, r3
 8004632:	f000 fb79 	bl	8004d28 <UART_CheckIdleState>
 8004636:	0003      	movs	r3, r0
}
 8004638:	0018      	movs	r0, r3
 800463a:	46bd      	mov	sp, r7
 800463c:	b002      	add	sp, #8
 800463e:	bd80      	pop	{r7, pc}
 8004640:	ffffb7ff 	.word	0xffffb7ff

08004644 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004644:	b5b0      	push	{r4, r5, r7, lr}
 8004646:	b090      	sub	sp, #64	@ 0x40
 8004648:	af00      	add	r7, sp, #0
 800464a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800464c:	231a      	movs	r3, #26
 800464e:	2220      	movs	r2, #32
 8004650:	189b      	adds	r3, r3, r2
 8004652:	19db      	adds	r3, r3, r7
 8004654:	2200      	movs	r2, #0
 8004656:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	431a      	orrs	r2, r3
 8004662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	431a      	orrs	r2, r3
 8004668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	4313      	orrs	r3, r2
 800466e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4aaf      	ldr	r2, [pc, #700]	@ (8004934 <UART_SetConfig+0x2f0>)
 8004678:	4013      	ands	r3, r2
 800467a:	0019      	movs	r1, r3
 800467c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004682:	430b      	orrs	r3, r1
 8004684:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	4aaa      	ldr	r2, [pc, #680]	@ (8004938 <UART_SetConfig+0x2f4>)
 800468e:	4013      	ands	r3, r2
 8004690:	0018      	movs	r0, r3
 8004692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004694:	68d9      	ldr	r1, [r3, #12]
 8004696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	0003      	movs	r3, r0
 800469c:	430b      	orrs	r3, r1
 800469e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4aa4      	ldr	r2, [pc, #656]	@ (800493c <UART_SetConfig+0x2f8>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d004      	beq.n	80046ba <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80046b6:	4313      	orrs	r3, r2
 80046b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	4a9f      	ldr	r2, [pc, #636]	@ (8004940 <UART_SetConfig+0x2fc>)
 80046c2:	4013      	ands	r3, r2
 80046c4:	0019      	movs	r1, r3
 80046c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046cc:	430b      	orrs	r3, r1
 80046ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80046d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d6:	220f      	movs	r2, #15
 80046d8:	4393      	bics	r3, r2
 80046da:	0018      	movs	r0, r3
 80046dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046de:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80046e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	0003      	movs	r3, r0
 80046e6:	430b      	orrs	r3, r1
 80046e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a95      	ldr	r2, [pc, #596]	@ (8004944 <UART_SetConfig+0x300>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d131      	bne.n	8004758 <UART_SetConfig+0x114>
 80046f4:	4b94      	ldr	r3, [pc, #592]	@ (8004948 <UART_SetConfig+0x304>)
 80046f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f8:	2203      	movs	r2, #3
 80046fa:	4013      	ands	r3, r2
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d01d      	beq.n	800473c <UART_SetConfig+0xf8>
 8004700:	d823      	bhi.n	800474a <UART_SetConfig+0x106>
 8004702:	2b02      	cmp	r3, #2
 8004704:	d00c      	beq.n	8004720 <UART_SetConfig+0xdc>
 8004706:	d820      	bhi.n	800474a <UART_SetConfig+0x106>
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <UART_SetConfig+0xce>
 800470c:	2b01      	cmp	r3, #1
 800470e:	d00e      	beq.n	800472e <UART_SetConfig+0xea>
 8004710:	e01b      	b.n	800474a <UART_SetConfig+0x106>
 8004712:	231b      	movs	r3, #27
 8004714:	2220      	movs	r2, #32
 8004716:	189b      	adds	r3, r3, r2
 8004718:	19db      	adds	r3, r3, r7
 800471a:	2200      	movs	r2, #0
 800471c:	701a      	strb	r2, [r3, #0]
 800471e:	e0b4      	b.n	800488a <UART_SetConfig+0x246>
 8004720:	231b      	movs	r3, #27
 8004722:	2220      	movs	r2, #32
 8004724:	189b      	adds	r3, r3, r2
 8004726:	19db      	adds	r3, r3, r7
 8004728:	2202      	movs	r2, #2
 800472a:	701a      	strb	r2, [r3, #0]
 800472c:	e0ad      	b.n	800488a <UART_SetConfig+0x246>
 800472e:	231b      	movs	r3, #27
 8004730:	2220      	movs	r2, #32
 8004732:	189b      	adds	r3, r3, r2
 8004734:	19db      	adds	r3, r3, r7
 8004736:	2204      	movs	r2, #4
 8004738:	701a      	strb	r2, [r3, #0]
 800473a:	e0a6      	b.n	800488a <UART_SetConfig+0x246>
 800473c:	231b      	movs	r3, #27
 800473e:	2220      	movs	r2, #32
 8004740:	189b      	adds	r3, r3, r2
 8004742:	19db      	adds	r3, r3, r7
 8004744:	2208      	movs	r2, #8
 8004746:	701a      	strb	r2, [r3, #0]
 8004748:	e09f      	b.n	800488a <UART_SetConfig+0x246>
 800474a:	231b      	movs	r3, #27
 800474c:	2220      	movs	r2, #32
 800474e:	189b      	adds	r3, r3, r2
 8004750:	19db      	adds	r3, r3, r7
 8004752:	2210      	movs	r2, #16
 8004754:	701a      	strb	r2, [r3, #0]
 8004756:	e098      	b.n	800488a <UART_SetConfig+0x246>
 8004758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a7b      	ldr	r2, [pc, #492]	@ (800494c <UART_SetConfig+0x308>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d131      	bne.n	80047c6 <UART_SetConfig+0x182>
 8004762:	4b79      	ldr	r3, [pc, #484]	@ (8004948 <UART_SetConfig+0x304>)
 8004764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004766:	220c      	movs	r2, #12
 8004768:	4013      	ands	r3, r2
 800476a:	2b0c      	cmp	r3, #12
 800476c:	d01d      	beq.n	80047aa <UART_SetConfig+0x166>
 800476e:	d823      	bhi.n	80047b8 <UART_SetConfig+0x174>
 8004770:	2b08      	cmp	r3, #8
 8004772:	d00c      	beq.n	800478e <UART_SetConfig+0x14a>
 8004774:	d820      	bhi.n	80047b8 <UART_SetConfig+0x174>
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <UART_SetConfig+0x13c>
 800477a:	2b04      	cmp	r3, #4
 800477c:	d00e      	beq.n	800479c <UART_SetConfig+0x158>
 800477e:	e01b      	b.n	80047b8 <UART_SetConfig+0x174>
 8004780:	231b      	movs	r3, #27
 8004782:	2220      	movs	r2, #32
 8004784:	189b      	adds	r3, r3, r2
 8004786:	19db      	adds	r3, r3, r7
 8004788:	2200      	movs	r2, #0
 800478a:	701a      	strb	r2, [r3, #0]
 800478c:	e07d      	b.n	800488a <UART_SetConfig+0x246>
 800478e:	231b      	movs	r3, #27
 8004790:	2220      	movs	r2, #32
 8004792:	189b      	adds	r3, r3, r2
 8004794:	19db      	adds	r3, r3, r7
 8004796:	2202      	movs	r2, #2
 8004798:	701a      	strb	r2, [r3, #0]
 800479a:	e076      	b.n	800488a <UART_SetConfig+0x246>
 800479c:	231b      	movs	r3, #27
 800479e:	2220      	movs	r2, #32
 80047a0:	189b      	adds	r3, r3, r2
 80047a2:	19db      	adds	r3, r3, r7
 80047a4:	2204      	movs	r2, #4
 80047a6:	701a      	strb	r2, [r3, #0]
 80047a8:	e06f      	b.n	800488a <UART_SetConfig+0x246>
 80047aa:	231b      	movs	r3, #27
 80047ac:	2220      	movs	r2, #32
 80047ae:	189b      	adds	r3, r3, r2
 80047b0:	19db      	adds	r3, r3, r7
 80047b2:	2208      	movs	r2, #8
 80047b4:	701a      	strb	r2, [r3, #0]
 80047b6:	e068      	b.n	800488a <UART_SetConfig+0x246>
 80047b8:	231b      	movs	r3, #27
 80047ba:	2220      	movs	r2, #32
 80047bc:	189b      	adds	r3, r3, r2
 80047be:	19db      	adds	r3, r3, r7
 80047c0:	2210      	movs	r2, #16
 80047c2:	701a      	strb	r2, [r3, #0]
 80047c4:	e061      	b.n	800488a <UART_SetConfig+0x246>
 80047c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a61      	ldr	r2, [pc, #388]	@ (8004950 <UART_SetConfig+0x30c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d106      	bne.n	80047de <UART_SetConfig+0x19a>
 80047d0:	231b      	movs	r3, #27
 80047d2:	2220      	movs	r2, #32
 80047d4:	189b      	adds	r3, r3, r2
 80047d6:	19db      	adds	r3, r3, r7
 80047d8:	2200      	movs	r2, #0
 80047da:	701a      	strb	r2, [r3, #0]
 80047dc:	e055      	b.n	800488a <UART_SetConfig+0x246>
 80047de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a5c      	ldr	r2, [pc, #368]	@ (8004954 <UART_SetConfig+0x310>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d106      	bne.n	80047f6 <UART_SetConfig+0x1b2>
 80047e8:	231b      	movs	r3, #27
 80047ea:	2220      	movs	r2, #32
 80047ec:	189b      	adds	r3, r3, r2
 80047ee:	19db      	adds	r3, r3, r7
 80047f0:	2200      	movs	r2, #0
 80047f2:	701a      	strb	r2, [r3, #0]
 80047f4:	e049      	b.n	800488a <UART_SetConfig+0x246>
 80047f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a50      	ldr	r2, [pc, #320]	@ (800493c <UART_SetConfig+0x2f8>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d13e      	bne.n	800487e <UART_SetConfig+0x23a>
 8004800:	4b51      	ldr	r3, [pc, #324]	@ (8004948 <UART_SetConfig+0x304>)
 8004802:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004804:	23c0      	movs	r3, #192	@ 0xc0
 8004806:	011b      	lsls	r3, r3, #4
 8004808:	4013      	ands	r3, r2
 800480a:	22c0      	movs	r2, #192	@ 0xc0
 800480c:	0112      	lsls	r2, r2, #4
 800480e:	4293      	cmp	r3, r2
 8004810:	d027      	beq.n	8004862 <UART_SetConfig+0x21e>
 8004812:	22c0      	movs	r2, #192	@ 0xc0
 8004814:	0112      	lsls	r2, r2, #4
 8004816:	4293      	cmp	r3, r2
 8004818:	d82a      	bhi.n	8004870 <UART_SetConfig+0x22c>
 800481a:	2280      	movs	r2, #128	@ 0x80
 800481c:	0112      	lsls	r2, r2, #4
 800481e:	4293      	cmp	r3, r2
 8004820:	d011      	beq.n	8004846 <UART_SetConfig+0x202>
 8004822:	2280      	movs	r2, #128	@ 0x80
 8004824:	0112      	lsls	r2, r2, #4
 8004826:	4293      	cmp	r3, r2
 8004828:	d822      	bhi.n	8004870 <UART_SetConfig+0x22c>
 800482a:	2b00      	cmp	r3, #0
 800482c:	d004      	beq.n	8004838 <UART_SetConfig+0x1f4>
 800482e:	2280      	movs	r2, #128	@ 0x80
 8004830:	00d2      	lsls	r2, r2, #3
 8004832:	4293      	cmp	r3, r2
 8004834:	d00e      	beq.n	8004854 <UART_SetConfig+0x210>
 8004836:	e01b      	b.n	8004870 <UART_SetConfig+0x22c>
 8004838:	231b      	movs	r3, #27
 800483a:	2220      	movs	r2, #32
 800483c:	189b      	adds	r3, r3, r2
 800483e:	19db      	adds	r3, r3, r7
 8004840:	2200      	movs	r2, #0
 8004842:	701a      	strb	r2, [r3, #0]
 8004844:	e021      	b.n	800488a <UART_SetConfig+0x246>
 8004846:	231b      	movs	r3, #27
 8004848:	2220      	movs	r2, #32
 800484a:	189b      	adds	r3, r3, r2
 800484c:	19db      	adds	r3, r3, r7
 800484e:	2202      	movs	r2, #2
 8004850:	701a      	strb	r2, [r3, #0]
 8004852:	e01a      	b.n	800488a <UART_SetConfig+0x246>
 8004854:	231b      	movs	r3, #27
 8004856:	2220      	movs	r2, #32
 8004858:	189b      	adds	r3, r3, r2
 800485a:	19db      	adds	r3, r3, r7
 800485c:	2204      	movs	r2, #4
 800485e:	701a      	strb	r2, [r3, #0]
 8004860:	e013      	b.n	800488a <UART_SetConfig+0x246>
 8004862:	231b      	movs	r3, #27
 8004864:	2220      	movs	r2, #32
 8004866:	189b      	adds	r3, r3, r2
 8004868:	19db      	adds	r3, r3, r7
 800486a:	2208      	movs	r2, #8
 800486c:	701a      	strb	r2, [r3, #0]
 800486e:	e00c      	b.n	800488a <UART_SetConfig+0x246>
 8004870:	231b      	movs	r3, #27
 8004872:	2220      	movs	r2, #32
 8004874:	189b      	adds	r3, r3, r2
 8004876:	19db      	adds	r3, r3, r7
 8004878:	2210      	movs	r2, #16
 800487a:	701a      	strb	r2, [r3, #0]
 800487c:	e005      	b.n	800488a <UART_SetConfig+0x246>
 800487e:	231b      	movs	r3, #27
 8004880:	2220      	movs	r2, #32
 8004882:	189b      	adds	r3, r3, r2
 8004884:	19db      	adds	r3, r3, r7
 8004886:	2210      	movs	r2, #16
 8004888:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800488a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a2b      	ldr	r2, [pc, #172]	@ (800493c <UART_SetConfig+0x2f8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d000      	beq.n	8004896 <UART_SetConfig+0x252>
 8004894:	e0a9      	b.n	80049ea <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004896:	231b      	movs	r3, #27
 8004898:	2220      	movs	r2, #32
 800489a:	189b      	adds	r3, r3, r2
 800489c:	19db      	adds	r3, r3, r7
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d015      	beq.n	80048d0 <UART_SetConfig+0x28c>
 80048a4:	dc18      	bgt.n	80048d8 <UART_SetConfig+0x294>
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d00d      	beq.n	80048c6 <UART_SetConfig+0x282>
 80048aa:	dc15      	bgt.n	80048d8 <UART_SetConfig+0x294>
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <UART_SetConfig+0x272>
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d005      	beq.n	80048c0 <UART_SetConfig+0x27c>
 80048b4:	e010      	b.n	80048d8 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048b6:	f7fe f833 	bl	8002920 <HAL_RCC_GetPCLK1Freq>
 80048ba:	0003      	movs	r3, r0
 80048bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048be:	e014      	b.n	80048ea <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048c0:	4b25      	ldr	r3, [pc, #148]	@ (8004958 <UART_SetConfig+0x314>)
 80048c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048c4:	e011      	b.n	80048ea <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048c6:	f7fd ff9f 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 80048ca:	0003      	movs	r3, r0
 80048cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048ce:	e00c      	b.n	80048ea <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048d0:	2380      	movs	r3, #128	@ 0x80
 80048d2:	021b      	lsls	r3, r3, #8
 80048d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80048d6:	e008      	b.n	80048ea <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80048dc:	231a      	movs	r3, #26
 80048de:	2220      	movs	r2, #32
 80048e0:	189b      	adds	r3, r3, r2
 80048e2:	19db      	adds	r3, r3, r7
 80048e4:	2201      	movs	r2, #1
 80048e6:	701a      	strb	r2, [r3, #0]
        break;
 80048e8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d100      	bne.n	80048f2 <UART_SetConfig+0x2ae>
 80048f0:	e14b      	b.n	8004b8a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80048f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048f6:	4b19      	ldr	r3, [pc, #100]	@ (800495c <UART_SetConfig+0x318>)
 80048f8:	0052      	lsls	r2, r2, #1
 80048fa:	5ad3      	ldrh	r3, [r2, r3]
 80048fc:	0019      	movs	r1, r3
 80048fe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004900:	f7fb fc00 	bl	8000104 <__udivsi3>
 8004904:	0003      	movs	r3, r0
 8004906:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	0013      	movs	r3, r2
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	189b      	adds	r3, r3, r2
 8004912:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004914:	429a      	cmp	r2, r3
 8004916:	d305      	bcc.n	8004924 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800491e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004920:	429a      	cmp	r2, r3
 8004922:	d91d      	bls.n	8004960 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004924:	231a      	movs	r3, #26
 8004926:	2220      	movs	r2, #32
 8004928:	189b      	adds	r3, r3, r2
 800492a:	19db      	adds	r3, r3, r7
 800492c:	2201      	movs	r2, #1
 800492e:	701a      	strb	r2, [r3, #0]
 8004930:	e12b      	b.n	8004b8a <UART_SetConfig+0x546>
 8004932:	46c0      	nop			@ (mov r8, r8)
 8004934:	cfff69f3 	.word	0xcfff69f3
 8004938:	ffffcfff 	.word	0xffffcfff
 800493c:	40008000 	.word	0x40008000
 8004940:	11fff4ff 	.word	0x11fff4ff
 8004944:	40013800 	.word	0x40013800
 8004948:	40021000 	.word	0x40021000
 800494c:	40004400 	.word	0x40004400
 8004950:	40004800 	.word	0x40004800
 8004954:	40004c00 	.word	0x40004c00
 8004958:	00f42400 	.word	0x00f42400
 800495c:	08005380 	.word	0x08005380
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004962:	61bb      	str	r3, [r7, #24]
 8004964:	2300      	movs	r3, #0
 8004966:	61fb      	str	r3, [r7, #28]
 8004968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800496c:	4b92      	ldr	r3, [pc, #584]	@ (8004bb8 <UART_SetConfig+0x574>)
 800496e:	0052      	lsls	r2, r2, #1
 8004970:	5ad3      	ldrh	r3, [r2, r3]
 8004972:	613b      	str	r3, [r7, #16]
 8004974:	2300      	movs	r3, #0
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	69b8      	ldr	r0, [r7, #24]
 800497e:	69f9      	ldr	r1, [r7, #28]
 8004980:	f7fb fd36 	bl	80003f0 <__aeabi_uldivmod>
 8004984:	0002      	movs	r2, r0
 8004986:	000b      	movs	r3, r1
 8004988:	0e11      	lsrs	r1, r2, #24
 800498a:	021d      	lsls	r5, r3, #8
 800498c:	430d      	orrs	r5, r1
 800498e:	0214      	lsls	r4, r2, #8
 8004990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	085b      	lsrs	r3, r3, #1
 8004996:	60bb      	str	r3, [r7, #8]
 8004998:	2300      	movs	r3, #0
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	68b8      	ldr	r0, [r7, #8]
 800499e:	68f9      	ldr	r1, [r7, #12]
 80049a0:	1900      	adds	r0, r0, r4
 80049a2:	4169      	adcs	r1, r5
 80049a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	603b      	str	r3, [r7, #0]
 80049aa:	2300      	movs	r3, #0
 80049ac:	607b      	str	r3, [r7, #4]
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f7fb fd1d 	bl	80003f0 <__aeabi_uldivmod>
 80049b6:	0002      	movs	r2, r0
 80049b8:	000b      	movs	r3, r1
 80049ba:	0013      	movs	r3, r2
 80049bc:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049c0:	23c0      	movs	r3, #192	@ 0xc0
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d309      	bcc.n	80049dc <UART_SetConfig+0x398>
 80049c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049ca:	2380      	movs	r3, #128	@ 0x80
 80049cc:	035b      	lsls	r3, r3, #13
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d204      	bcs.n	80049dc <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80049d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049d8:	60da      	str	r2, [r3, #12]
 80049da:	e0d6      	b.n	8004b8a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80049dc:	231a      	movs	r3, #26
 80049de:	2220      	movs	r2, #32
 80049e0:	189b      	adds	r3, r3, r2
 80049e2:	19db      	adds	r3, r3, r7
 80049e4:	2201      	movs	r2, #1
 80049e6:	701a      	strb	r2, [r3, #0]
 80049e8:	e0cf      	b.n	8004b8a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ec:	69da      	ldr	r2, [r3, #28]
 80049ee:	2380      	movs	r3, #128	@ 0x80
 80049f0:	021b      	lsls	r3, r3, #8
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d000      	beq.n	80049f8 <UART_SetConfig+0x3b4>
 80049f6:	e070      	b.n	8004ada <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80049f8:	231b      	movs	r3, #27
 80049fa:	2220      	movs	r2, #32
 80049fc:	189b      	adds	r3, r3, r2
 80049fe:	19db      	adds	r3, r3, r7
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d015      	beq.n	8004a32 <UART_SetConfig+0x3ee>
 8004a06:	dc18      	bgt.n	8004a3a <UART_SetConfig+0x3f6>
 8004a08:	2b04      	cmp	r3, #4
 8004a0a:	d00d      	beq.n	8004a28 <UART_SetConfig+0x3e4>
 8004a0c:	dc15      	bgt.n	8004a3a <UART_SetConfig+0x3f6>
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <UART_SetConfig+0x3d4>
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d005      	beq.n	8004a22 <UART_SetConfig+0x3de>
 8004a16:	e010      	b.n	8004a3a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a18:	f7fd ff82 	bl	8002920 <HAL_RCC_GetPCLK1Freq>
 8004a1c:	0003      	movs	r3, r0
 8004a1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a20:	e014      	b.n	8004a4c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a22:	4b66      	ldr	r3, [pc, #408]	@ (8004bbc <UART_SetConfig+0x578>)
 8004a24:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a26:	e011      	b.n	8004a4c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a28:	f7fd feee 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 8004a2c:	0003      	movs	r3, r0
 8004a2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a30:	e00c      	b.n	8004a4c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a32:	2380      	movs	r3, #128	@ 0x80
 8004a34:	021b      	lsls	r3, r3, #8
 8004a36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a38:	e008      	b.n	8004a4c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004a3e:	231a      	movs	r3, #26
 8004a40:	2220      	movs	r2, #32
 8004a42:	189b      	adds	r3, r3, r2
 8004a44:	19db      	adds	r3, r3, r7
 8004a46:	2201      	movs	r2, #1
 8004a48:	701a      	strb	r2, [r3, #0]
        break;
 8004a4a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d100      	bne.n	8004a54 <UART_SetConfig+0x410>
 8004a52:	e09a      	b.n	8004b8a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a58:	4b57      	ldr	r3, [pc, #348]	@ (8004bb8 <UART_SetConfig+0x574>)
 8004a5a:	0052      	lsls	r2, r2, #1
 8004a5c:	5ad3      	ldrh	r3, [r2, r3]
 8004a5e:	0019      	movs	r1, r3
 8004a60:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004a62:	f7fb fb4f 	bl	8000104 <__udivsi3>
 8004a66:	0003      	movs	r3, r0
 8004a68:	005a      	lsls	r2, r3, #1
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	085b      	lsrs	r3, r3, #1
 8004a70:	18d2      	adds	r2, r2, r3
 8004a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	0019      	movs	r1, r3
 8004a78:	0010      	movs	r0, r2
 8004a7a:	f7fb fb43 	bl	8000104 <__udivsi3>
 8004a7e:	0003      	movs	r3, r0
 8004a80:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a84:	2b0f      	cmp	r3, #15
 8004a86:	d921      	bls.n	8004acc <UART_SetConfig+0x488>
 8004a88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a8a:	2380      	movs	r3, #128	@ 0x80
 8004a8c:	025b      	lsls	r3, r3, #9
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d21c      	bcs.n	8004acc <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	200e      	movs	r0, #14
 8004a98:	2420      	movs	r4, #32
 8004a9a:	1903      	adds	r3, r0, r4
 8004a9c:	19db      	adds	r3, r3, r7
 8004a9e:	210f      	movs	r1, #15
 8004aa0:	438a      	bics	r2, r1
 8004aa2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa6:	085b      	lsrs	r3, r3, #1
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	2207      	movs	r2, #7
 8004aac:	4013      	ands	r3, r2
 8004aae:	b299      	uxth	r1, r3
 8004ab0:	1903      	adds	r3, r0, r4
 8004ab2:	19db      	adds	r3, r3, r7
 8004ab4:	1902      	adds	r2, r0, r4
 8004ab6:	19d2      	adds	r2, r2, r7
 8004ab8:	8812      	ldrh	r2, [r2, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	1902      	adds	r2, r0, r4
 8004ac4:	19d2      	adds	r2, r2, r7
 8004ac6:	8812      	ldrh	r2, [r2, #0]
 8004ac8:	60da      	str	r2, [r3, #12]
 8004aca:	e05e      	b.n	8004b8a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004acc:	231a      	movs	r3, #26
 8004ace:	2220      	movs	r2, #32
 8004ad0:	189b      	adds	r3, r3, r2
 8004ad2:	19db      	adds	r3, r3, r7
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	701a      	strb	r2, [r3, #0]
 8004ad8:	e057      	b.n	8004b8a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ada:	231b      	movs	r3, #27
 8004adc:	2220      	movs	r2, #32
 8004ade:	189b      	adds	r3, r3, r2
 8004ae0:	19db      	adds	r3, r3, r7
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d015      	beq.n	8004b14 <UART_SetConfig+0x4d0>
 8004ae8:	dc18      	bgt.n	8004b1c <UART_SetConfig+0x4d8>
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d00d      	beq.n	8004b0a <UART_SetConfig+0x4c6>
 8004aee:	dc15      	bgt.n	8004b1c <UART_SetConfig+0x4d8>
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <UART_SetConfig+0x4b6>
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d005      	beq.n	8004b04 <UART_SetConfig+0x4c0>
 8004af8:	e010      	b.n	8004b1c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004afa:	f7fd ff11 	bl	8002920 <HAL_RCC_GetPCLK1Freq>
 8004afe:	0003      	movs	r3, r0
 8004b00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b02:	e014      	b.n	8004b2e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b04:	4b2d      	ldr	r3, [pc, #180]	@ (8004bbc <UART_SetConfig+0x578>)
 8004b06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b08:	e011      	b.n	8004b2e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b0a:	f7fd fe7d 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 8004b0e:	0003      	movs	r3, r0
 8004b10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b12:	e00c      	b.n	8004b2e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b14:	2380      	movs	r3, #128	@ 0x80
 8004b16:	021b      	lsls	r3, r3, #8
 8004b18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b1a:	e008      	b.n	8004b2e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004b20:	231a      	movs	r3, #26
 8004b22:	2220      	movs	r2, #32
 8004b24:	189b      	adds	r3, r3, r2
 8004b26:	19db      	adds	r3, r3, r7
 8004b28:	2201      	movs	r2, #1
 8004b2a:	701a      	strb	r2, [r3, #0]
        break;
 8004b2c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d02a      	beq.n	8004b8a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b38:	4b1f      	ldr	r3, [pc, #124]	@ (8004bb8 <UART_SetConfig+0x574>)
 8004b3a:	0052      	lsls	r2, r2, #1
 8004b3c:	5ad3      	ldrh	r3, [r2, r3]
 8004b3e:	0019      	movs	r1, r3
 8004b40:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004b42:	f7fb fadf 	bl	8000104 <__udivsi3>
 8004b46:	0003      	movs	r3, r0
 8004b48:	001a      	movs	r2, r3
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	085b      	lsrs	r3, r3, #1
 8004b50:	18d2      	adds	r2, r2, r3
 8004b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	0019      	movs	r1, r3
 8004b58:	0010      	movs	r0, r2
 8004b5a:	f7fb fad3 	bl	8000104 <__udivsi3>
 8004b5e:	0003      	movs	r3, r0
 8004b60:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b64:	2b0f      	cmp	r3, #15
 8004b66:	d90a      	bls.n	8004b7e <UART_SetConfig+0x53a>
 8004b68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b6a:	2380      	movs	r3, #128	@ 0x80
 8004b6c:	025b      	lsls	r3, r3, #9
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d205      	bcs.n	8004b7e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	60da      	str	r2, [r3, #12]
 8004b7c:	e005      	b.n	8004b8a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004b7e:	231a      	movs	r3, #26
 8004b80:	2220      	movs	r2, #32
 8004b82:	189b      	adds	r3, r3, r2
 8004b84:	19db      	adds	r3, r3, r7
 8004b86:	2201      	movs	r2, #1
 8004b88:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8c:	226a      	movs	r2, #106	@ 0x6a
 8004b8e:	2101      	movs	r1, #1
 8004b90:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b94:	2268      	movs	r2, #104	@ 0x68
 8004b96:	2101      	movs	r1, #1
 8004b98:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004ba6:	231a      	movs	r3, #26
 8004ba8:	2220      	movs	r2, #32
 8004baa:	189b      	adds	r3, r3, r2
 8004bac:	19db      	adds	r3, r3, r7
 8004bae:	781b      	ldrb	r3, [r3, #0]
}
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	b010      	add	sp, #64	@ 0x40
 8004bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8004bb8:	08005380 	.word	0x08005380
 8004bbc:	00f42400 	.word	0x00f42400

08004bc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bcc:	2208      	movs	r2, #8
 8004bce:	4013      	ands	r3, r2
 8004bd0:	d00b      	beq.n	8004bea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	4a4a      	ldr	r2, [pc, #296]	@ (8004d04 <UART_AdvFeatureConfig+0x144>)
 8004bda:	4013      	ands	r3, r2
 8004bdc:	0019      	movs	r1, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bee:	2201      	movs	r2, #1
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	d00b      	beq.n	8004c0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	4a43      	ldr	r2, [pc, #268]	@ (8004d08 <UART_AdvFeatureConfig+0x148>)
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	0019      	movs	r1, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c10:	2202      	movs	r2, #2
 8004c12:	4013      	ands	r3, r2
 8004c14:	d00b      	beq.n	8004c2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	4a3b      	ldr	r2, [pc, #236]	@ (8004d0c <UART_AdvFeatureConfig+0x14c>)
 8004c1e:	4013      	ands	r3, r2
 8004c20:	0019      	movs	r1, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c32:	2204      	movs	r2, #4
 8004c34:	4013      	ands	r3, r2
 8004c36:	d00b      	beq.n	8004c50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	4a34      	ldr	r2, [pc, #208]	@ (8004d10 <UART_AdvFeatureConfig+0x150>)
 8004c40:	4013      	ands	r3, r2
 8004c42:	0019      	movs	r1, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c54:	2210      	movs	r2, #16
 8004c56:	4013      	ands	r3, r2
 8004c58:	d00b      	beq.n	8004c72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	4a2c      	ldr	r2, [pc, #176]	@ (8004d14 <UART_AdvFeatureConfig+0x154>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	0019      	movs	r1, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c76:	2220      	movs	r2, #32
 8004c78:	4013      	ands	r3, r2
 8004c7a:	d00b      	beq.n	8004c94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	4a25      	ldr	r2, [pc, #148]	@ (8004d18 <UART_AdvFeatureConfig+0x158>)
 8004c84:	4013      	ands	r3, r2
 8004c86:	0019      	movs	r1, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c98:	2240      	movs	r2, #64	@ 0x40
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	d01d      	beq.n	8004cda <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8004d1c <UART_AdvFeatureConfig+0x15c>)
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	0019      	movs	r1, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cba:	2380      	movs	r3, #128	@ 0x80
 8004cbc:	035b      	lsls	r3, r3, #13
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d10b      	bne.n	8004cda <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	4a15      	ldr	r2, [pc, #84]	@ (8004d20 <UART_AdvFeatureConfig+0x160>)
 8004cca:	4013      	ands	r3, r2
 8004ccc:	0019      	movs	r1, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cde:	2280      	movs	r2, #128	@ 0x80
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	d00b      	beq.n	8004cfc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	4a0e      	ldr	r2, [pc, #56]	@ (8004d24 <UART_AdvFeatureConfig+0x164>)
 8004cec:	4013      	ands	r3, r2
 8004cee:	0019      	movs	r1, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	605a      	str	r2, [r3, #4]
  }
}
 8004cfc:	46c0      	nop			@ (mov r8, r8)
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	b002      	add	sp, #8
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	ffff7fff 	.word	0xffff7fff
 8004d08:	fffdffff 	.word	0xfffdffff
 8004d0c:	fffeffff 	.word	0xfffeffff
 8004d10:	fffbffff 	.word	0xfffbffff
 8004d14:	ffffefff 	.word	0xffffefff
 8004d18:	ffffdfff 	.word	0xffffdfff
 8004d1c:	ffefffff 	.word	0xffefffff
 8004d20:	ff9fffff 	.word	0xff9fffff
 8004d24:	fff7ffff 	.word	0xfff7ffff

08004d28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b092      	sub	sp, #72	@ 0x48
 8004d2c:	af02      	add	r7, sp, #8
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2290      	movs	r2, #144	@ 0x90
 8004d34:	2100      	movs	r1, #0
 8004d36:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d38:	f7fc fd50 	bl	80017dc <HAL_GetTick>
 8004d3c:	0003      	movs	r3, r0
 8004d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2208      	movs	r2, #8
 8004d48:	4013      	ands	r3, r2
 8004d4a:	2b08      	cmp	r3, #8
 8004d4c:	d12d      	bne.n	8004daa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d50:	2280      	movs	r2, #128	@ 0x80
 8004d52:	0391      	lsls	r1, r2, #14
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	4a47      	ldr	r2, [pc, #284]	@ (8004e74 <UART_CheckIdleState+0x14c>)
 8004d58:	9200      	str	r2, [sp, #0]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f000 f88e 	bl	8004e7c <UART_WaitOnFlagUntilTimeout>
 8004d60:	1e03      	subs	r3, r0, #0
 8004d62:	d022      	beq.n	8004daa <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d64:	f3ef 8310 	mrs	r3, PRIMASK
 8004d68:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d6e:	2301      	movs	r3, #1
 8004d70:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d74:	f383 8810 	msr	PRIMASK, r3
}
 8004d78:	46c0      	nop			@ (mov r8, r8)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2180      	movs	r1, #128	@ 0x80
 8004d86:	438a      	bics	r2, r1
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d90:	f383 8810 	msr	PRIMASK, r3
}
 8004d94:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2288      	movs	r2, #136	@ 0x88
 8004d9a:	2120      	movs	r1, #32
 8004d9c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2284      	movs	r2, #132	@ 0x84
 8004da2:	2100      	movs	r1, #0
 8004da4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e060      	b.n	8004e6c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2204      	movs	r2, #4
 8004db2:	4013      	ands	r3, r2
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d146      	bne.n	8004e46 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dba:	2280      	movs	r2, #128	@ 0x80
 8004dbc:	03d1      	lsls	r1, r2, #15
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	4a2c      	ldr	r2, [pc, #176]	@ (8004e74 <UART_CheckIdleState+0x14c>)
 8004dc2:	9200      	str	r2, [sp, #0]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f000 f859 	bl	8004e7c <UART_WaitOnFlagUntilTimeout>
 8004dca:	1e03      	subs	r3, r0, #0
 8004dcc:	d03b      	beq.n	8004e46 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dce:	f3ef 8310 	mrs	r3, PRIMASK
 8004dd2:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004dd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dd8:	2301      	movs	r3, #1
 8004dda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f383 8810 	msr	PRIMASK, r3
}
 8004de2:	46c0      	nop			@ (mov r8, r8)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4922      	ldr	r1, [pc, #136]	@ (8004e78 <UART_CheckIdleState+0x150>)
 8004df0:	400a      	ands	r2, r1
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004df6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	f383 8810 	msr	PRIMASK, r3
}
 8004dfe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e00:	f3ef 8310 	mrs	r3, PRIMASK
 8004e04:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e06:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e08:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	f383 8810 	msr	PRIMASK, r3
}
 8004e14:	46c0      	nop			@ (mov r8, r8)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2101      	movs	r1, #1
 8004e22:	438a      	bics	r2, r1
 8004e24:	609a      	str	r2, [r3, #8]
 8004e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e28:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	f383 8810 	msr	PRIMASK, r3
}
 8004e30:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	228c      	movs	r2, #140	@ 0x8c
 8004e36:	2120      	movs	r1, #32
 8004e38:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2284      	movs	r2, #132	@ 0x84
 8004e3e:	2100      	movs	r1, #0
 8004e40:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e012      	b.n	8004e6c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2288      	movs	r2, #136	@ 0x88
 8004e4a:	2120      	movs	r1, #32
 8004e4c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	228c      	movs	r2, #140	@ 0x8c
 8004e52:	2120      	movs	r1, #32
 8004e54:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2284      	movs	r2, #132	@ 0x84
 8004e66:	2100      	movs	r1, #0
 8004e68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	b010      	add	sp, #64	@ 0x40
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	01ffffff 	.word	0x01ffffff
 8004e78:	fffffedf 	.word	0xfffffedf

08004e7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	1dfb      	adds	r3, r7, #7
 8004e8a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e8c:	e051      	b.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	3301      	adds	r3, #1
 8004e92:	d04e      	beq.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e94:	f7fc fca2 	bl	80017dc <HAL_GetTick>
 8004e98:	0002      	movs	r2, r0
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d302      	bcc.n	8004eaa <UART_WaitOnFlagUntilTimeout+0x2e>
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e051      	b.n	8004f52 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2204      	movs	r2, #4
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	d03b      	beq.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2b80      	cmp	r3, #128	@ 0x80
 8004ebe:	d038      	beq.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b40      	cmp	r3, #64	@ 0x40
 8004ec4:	d035      	beq.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	2208      	movs	r2, #8
 8004ece:	4013      	ands	r3, r2
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d111      	bne.n	8004ef8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2208      	movs	r2, #8
 8004eda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	0018      	movs	r0, r3
 8004ee0:	f000 f83c 	bl	8004f5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2290      	movs	r2, #144	@ 0x90
 8004ee8:	2108      	movs	r1, #8
 8004eea:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2284      	movs	r2, #132	@ 0x84
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e02c      	b.n	8004f52 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	69da      	ldr	r2, [r3, #28]
 8004efe:	2380      	movs	r3, #128	@ 0x80
 8004f00:	011b      	lsls	r3, r3, #4
 8004f02:	401a      	ands	r2, r3
 8004f04:	2380      	movs	r3, #128	@ 0x80
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d112      	bne.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2280      	movs	r2, #128	@ 0x80
 8004f12:	0112      	lsls	r2, r2, #4
 8004f14:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f000 f81f 	bl	8004f5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2290      	movs	r2, #144	@ 0x90
 8004f22:	2120      	movs	r1, #32
 8004f24:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2284      	movs	r2, #132	@ 0x84
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e00f      	b.n	8004f52 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	425a      	negs	r2, r3
 8004f42:	4153      	adcs	r3, r2
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	001a      	movs	r2, r3
 8004f48:	1dfb      	adds	r3, r7, #7
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d09e      	beq.n	8004e8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	0018      	movs	r0, r3
 8004f54:	46bd      	mov	sp, r7
 8004f56:	b004      	add	sp, #16
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08e      	sub	sp, #56	@ 0x38
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f64:	f3ef 8310 	mrs	r3, PRIMASK
 8004f68:	617b      	str	r3, [r7, #20]
  return(result);
 8004f6a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f6e:	2301      	movs	r3, #1
 8004f70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	f383 8810 	msr	PRIMASK, r3
}
 8004f78:	46c0      	nop			@ (mov r8, r8)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4926      	ldr	r1, [pc, #152]	@ (8005020 <UART_EndRxTransfer+0xc4>)
 8004f86:	400a      	ands	r2, r1
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	f383 8810 	msr	PRIMASK, r3
}
 8004f94:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f96:	f3ef 8310 	mrs	r3, PRIMASK
 8004f9a:	623b      	str	r3, [r7, #32]
  return(result);
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa6:	f383 8810 	msr	PRIMASK, r3
}
 8004faa:	46c0      	nop			@ (mov r8, r8)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	491b      	ldr	r1, [pc, #108]	@ (8005024 <UART_EndRxTransfer+0xc8>)
 8004fb8:	400a      	ands	r2, r1
 8004fba:	609a      	str	r2, [r3, #8]
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc2:	f383 8810 	msr	PRIMASK, r3
}
 8004fc6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d118      	bne.n	8005002 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8004fd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fd6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fda:	2301      	movs	r3, #1
 8004fdc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f383 8810 	msr	PRIMASK, r3
}
 8004fe4:	46c0      	nop			@ (mov r8, r8)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2110      	movs	r1, #16
 8004ff2:	438a      	bics	r2, r1
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ff8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f383 8810 	msr	PRIMASK, r3
}
 8005000:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	228c      	movs	r2, #140	@ 0x8c
 8005006:	2120      	movs	r1, #32
 8005008:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005016:	46c0      	nop			@ (mov r8, r8)
 8005018:	46bd      	mov	sp, r7
 800501a:	b00e      	add	sp, #56	@ 0x38
 800501c:	bd80      	pop	{r7, pc}
 800501e:	46c0      	nop			@ (mov r8, r8)
 8005020:	fffffedf 	.word	0xfffffedf
 8005024:	effffffe 	.word	0xeffffffe

08005028 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2284      	movs	r2, #132	@ 0x84
 8005034:	5c9b      	ldrb	r3, [r3, r2]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <HAL_UARTEx_DisableFifoMode+0x16>
 800503a:	2302      	movs	r3, #2
 800503c:	e027      	b.n	800508e <HAL_UARTEx_DisableFifoMode+0x66>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2284      	movs	r2, #132	@ 0x84
 8005042:	2101      	movs	r1, #1
 8005044:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2288      	movs	r2, #136	@ 0x88
 800504a:	2124      	movs	r1, #36	@ 0x24
 800504c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2101      	movs	r1, #1
 8005062:	438a      	bics	r2, r1
 8005064:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	4a0b      	ldr	r2, [pc, #44]	@ (8005098 <HAL_UARTEx_DisableFifoMode+0x70>)
 800506a:	4013      	ands	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2288      	movs	r2, #136	@ 0x88
 8005080:	2120      	movs	r1, #32
 8005082:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2284      	movs	r2, #132	@ 0x84
 8005088:	2100      	movs	r1, #0
 800508a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	0018      	movs	r0, r3
 8005090:	46bd      	mov	sp, r7
 8005092:	b004      	add	sp, #16
 8005094:	bd80      	pop	{r7, pc}
 8005096:	46c0      	nop			@ (mov r8, r8)
 8005098:	dfffffff 	.word	0xdfffffff

0800509c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2284      	movs	r2, #132	@ 0x84
 80050aa:	5c9b      	ldrb	r3, [r3, r2]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d101      	bne.n	80050b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80050b0:	2302      	movs	r3, #2
 80050b2:	e02e      	b.n	8005112 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2284      	movs	r2, #132	@ 0x84
 80050b8:	2101      	movs	r1, #1
 80050ba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2288      	movs	r2, #136	@ 0x88
 80050c0:	2124      	movs	r1, #36	@ 0x24
 80050c2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2101      	movs	r1, #1
 80050d8:	438a      	bics	r2, r1
 80050da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	08d9      	lsrs	r1, r3, #3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	0018      	movs	r0, r3
 80050f4:	f000 f854 	bl	80051a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2288      	movs	r2, #136	@ 0x88
 8005104:	2120      	movs	r1, #32
 8005106:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2284      	movs	r2, #132	@ 0x84
 800510c:	2100      	movs	r1, #0
 800510e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	0018      	movs	r0, r3
 8005114:	46bd      	mov	sp, r7
 8005116:	b004      	add	sp, #16
 8005118:	bd80      	pop	{r7, pc}
	...

0800511c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2284      	movs	r2, #132	@ 0x84
 800512a:	5c9b      	ldrb	r3, [r3, r2]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d101      	bne.n	8005134 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005130:	2302      	movs	r3, #2
 8005132:	e02f      	b.n	8005194 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2284      	movs	r2, #132	@ 0x84
 8005138:	2101      	movs	r1, #1
 800513a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2288      	movs	r2, #136	@ 0x88
 8005140:	2124      	movs	r1, #36	@ 0x24
 8005142:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2101      	movs	r1, #1
 8005158:	438a      	bics	r2, r1
 800515a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	4a0e      	ldr	r2, [pc, #56]	@ (800519c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005164:	4013      	ands	r3, r2
 8005166:	0019      	movs	r1, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	0018      	movs	r0, r3
 8005176:	f000 f813 	bl	80051a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2288      	movs	r2, #136	@ 0x88
 8005186:	2120      	movs	r1, #32
 8005188:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2284      	movs	r2, #132	@ 0x84
 800518e:	2100      	movs	r1, #0
 8005190:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	0018      	movs	r0, r3
 8005196:	46bd      	mov	sp, r7
 8005198:	b004      	add	sp, #16
 800519a:	bd80      	pop	{r7, pc}
 800519c:	f1ffffff 	.word	0xf1ffffff

080051a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80051a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d108      	bne.n	80051c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	226a      	movs	r2, #106	@ 0x6a
 80051b4:	2101      	movs	r1, #1
 80051b6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2268      	movs	r2, #104	@ 0x68
 80051bc:	2101      	movs	r1, #1
 80051be:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80051c0:	e043      	b.n	800524a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80051c2:	260f      	movs	r6, #15
 80051c4:	19bb      	adds	r3, r7, r6
 80051c6:	2208      	movs	r2, #8
 80051c8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80051ca:	200e      	movs	r0, #14
 80051cc:	183b      	adds	r3, r7, r0
 80051ce:	2208      	movs	r2, #8
 80051d0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	0e5b      	lsrs	r3, r3, #25
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	240d      	movs	r4, #13
 80051de:	193b      	adds	r3, r7, r4
 80051e0:	2107      	movs	r1, #7
 80051e2:	400a      	ands	r2, r1
 80051e4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	0f5b      	lsrs	r3, r3, #29
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	250c      	movs	r5, #12
 80051f2:	197b      	adds	r3, r7, r5
 80051f4:	2107      	movs	r1, #7
 80051f6:	400a      	ands	r2, r1
 80051f8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80051fa:	183b      	adds	r3, r7, r0
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	197a      	adds	r2, r7, r5
 8005200:	7812      	ldrb	r2, [r2, #0]
 8005202:	4914      	ldr	r1, [pc, #80]	@ (8005254 <UARTEx_SetNbDataToProcess+0xb4>)
 8005204:	5c8a      	ldrb	r2, [r1, r2]
 8005206:	435a      	muls	r2, r3
 8005208:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800520a:	197b      	adds	r3, r7, r5
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	4a12      	ldr	r2, [pc, #72]	@ (8005258 <UARTEx_SetNbDataToProcess+0xb8>)
 8005210:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005212:	0019      	movs	r1, r3
 8005214:	f7fb f800 	bl	8000218 <__divsi3>
 8005218:	0003      	movs	r3, r0
 800521a:	b299      	uxth	r1, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	226a      	movs	r2, #106	@ 0x6a
 8005220:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005222:	19bb      	adds	r3, r7, r6
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	193a      	adds	r2, r7, r4
 8005228:	7812      	ldrb	r2, [r2, #0]
 800522a:	490a      	ldr	r1, [pc, #40]	@ (8005254 <UARTEx_SetNbDataToProcess+0xb4>)
 800522c:	5c8a      	ldrb	r2, [r1, r2]
 800522e:	435a      	muls	r2, r3
 8005230:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005232:	193b      	adds	r3, r7, r4
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	4a08      	ldr	r2, [pc, #32]	@ (8005258 <UARTEx_SetNbDataToProcess+0xb8>)
 8005238:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800523a:	0019      	movs	r1, r3
 800523c:	f7fa ffec 	bl	8000218 <__divsi3>
 8005240:	0003      	movs	r3, r0
 8005242:	b299      	uxth	r1, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2268      	movs	r2, #104	@ 0x68
 8005248:	5299      	strh	r1, [r3, r2]
}
 800524a:	46c0      	nop			@ (mov r8, r8)
 800524c:	46bd      	mov	sp, r7
 800524e:	b005      	add	sp, #20
 8005250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005252:	46c0      	nop			@ (mov r8, r8)
 8005254:	08005398 	.word	0x08005398
 8005258:	080053a0 	.word	0x080053a0

0800525c <memset>:
 800525c:	0003      	movs	r3, r0
 800525e:	1882      	adds	r2, r0, r2
 8005260:	4293      	cmp	r3, r2
 8005262:	d100      	bne.n	8005266 <memset+0xa>
 8005264:	4770      	bx	lr
 8005266:	7019      	strb	r1, [r3, #0]
 8005268:	3301      	adds	r3, #1
 800526a:	e7f9      	b.n	8005260 <memset+0x4>

0800526c <__libc_init_array>:
 800526c:	b570      	push	{r4, r5, r6, lr}
 800526e:	2600      	movs	r6, #0
 8005270:	4c0c      	ldr	r4, [pc, #48]	@ (80052a4 <__libc_init_array+0x38>)
 8005272:	4d0d      	ldr	r5, [pc, #52]	@ (80052a8 <__libc_init_array+0x3c>)
 8005274:	1b64      	subs	r4, r4, r5
 8005276:	10a4      	asrs	r4, r4, #2
 8005278:	42a6      	cmp	r6, r4
 800527a:	d109      	bne.n	8005290 <__libc_init_array+0x24>
 800527c:	2600      	movs	r6, #0
 800527e:	f000 f819 	bl	80052b4 <_init>
 8005282:	4c0a      	ldr	r4, [pc, #40]	@ (80052ac <__libc_init_array+0x40>)
 8005284:	4d0a      	ldr	r5, [pc, #40]	@ (80052b0 <__libc_init_array+0x44>)
 8005286:	1b64      	subs	r4, r4, r5
 8005288:	10a4      	asrs	r4, r4, #2
 800528a:	42a6      	cmp	r6, r4
 800528c:	d105      	bne.n	800529a <__libc_init_array+0x2e>
 800528e:	bd70      	pop	{r4, r5, r6, pc}
 8005290:	00b3      	lsls	r3, r6, #2
 8005292:	58eb      	ldr	r3, [r5, r3]
 8005294:	4798      	blx	r3
 8005296:	3601      	adds	r6, #1
 8005298:	e7ee      	b.n	8005278 <__libc_init_array+0xc>
 800529a:	00b3      	lsls	r3, r6, #2
 800529c:	58eb      	ldr	r3, [r5, r3]
 800529e:	4798      	blx	r3
 80052a0:	3601      	adds	r6, #1
 80052a2:	e7f2      	b.n	800528a <__libc_init_array+0x1e>
 80052a4:	080053b0 	.word	0x080053b0
 80052a8:	080053b0 	.word	0x080053b0
 80052ac:	080053b4 	.word	0x080053b4
 80052b0:	080053b0 	.word	0x080053b0

080052b4 <_init>:
 80052b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b6:	46c0      	nop			@ (mov r8, r8)
 80052b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ba:	bc08      	pop	{r3}
 80052bc:	469e      	mov	lr, r3
 80052be:	4770      	bx	lr

080052c0 <_fini>:
 80052c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c2:	46c0      	nop			@ (mov r8, r8)
 80052c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052c6:	bc08      	pop	{r3}
 80052c8:	469e      	mov	lr, r3
 80052ca:	4770      	bx	lr
