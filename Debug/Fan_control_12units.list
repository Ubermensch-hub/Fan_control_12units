
Fan_control_12units.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000685c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08006918  08006918  00007918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ac4  08006ac4  00008098  2**0
                  CONTENTS
  4 .ARM          00000008  08006ac4  08006ac4  00007ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006acc  08006acc  00008098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006acc  08006acc  00007acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ad0  08006ad0  00007ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08006ad4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  20000098  08006b6c  00008098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  08006b6c  00008500  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000173b9  00000000  00000000  000080c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035bf  00000000  00000000  0001f479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  00022a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001076  00000000  00000000  00023f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bce2  00000000  00000000  00024fae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bc87  00000000  00000000  00040c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad1c5  00000000  00000000  0005c917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00109adc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005328  00000000  00000000  00109b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0010ee48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000098 	.word	0x20000098
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006900 	.word	0x08006900

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000009c 	.word	0x2000009c
 8000100:	08006900 	.word	0x08006900

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	@ (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	@ (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	d434      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047a:	469b      	mov	fp, r3
 800047c:	4653      	mov	r3, sl
 800047e:	465a      	mov	r2, fp
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83b      	bhi.n	8000508 <__udivmoddi4+0xc4>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e079      	b.n	800058a <__udivmoddi4+0x146>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e076      	b.n	8000590 <__udivmoddi4+0x14c>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e029      	b.n	8000510 <__udivmoddi4+0xcc>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	469b      	mov	fp, r3
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	4652      	mov	r2, sl
 80004ee:	40da      	lsrs	r2, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0013      	movs	r3, r2
 80004f4:	464a      	mov	r2, r9
 80004f6:	408a      	lsls	r2, r1
 80004f8:	0017      	movs	r7, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	431f      	orrs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d9c3      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	4643      	mov	r3, r8
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0d8      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000516:	07fb      	lsls	r3, r7, #31
 8000518:	0872      	lsrs	r2, r6, #1
 800051a:	431a      	orrs	r2, r3
 800051c:	4646      	mov	r6, r8
 800051e:	087b      	lsrs	r3, r7, #1
 8000520:	e00e      	b.n	8000540 <__udivmoddi4+0xfc>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d101      	bne.n	800052a <__udivmoddi4+0xe6>
 8000526:	42a2      	cmp	r2, r4
 8000528:	d80c      	bhi.n	8000544 <__udivmoddi4+0x100>
 800052a:	1aa4      	subs	r4, r4, r2
 800052c:	419d      	sbcs	r5, r3
 800052e:	2001      	movs	r0, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2100      	movs	r1, #0
 8000536:	3e01      	subs	r6, #1
 8000538:	1824      	adds	r4, r4, r0
 800053a:	414d      	adcs	r5, r1
 800053c:	2e00      	cmp	r6, #0
 800053e:	d006      	beq.n	800054e <__udivmoddi4+0x10a>
 8000540:	42ab      	cmp	r3, r5
 8000542:	d9ee      	bls.n	8000522 <__udivmoddi4+0xde>
 8000544:	3e01      	subs	r6, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__udivmoddi4+0xfc>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	465b      	mov	r3, fp
 8000554:	1900      	adds	r0, r0, r4
 8000556:	4169      	adcs	r1, r5
 8000558:	2b00      	cmp	r3, #0
 800055a:	db24      	blt.n	80005a6 <__udivmoddi4+0x162>
 800055c:	002b      	movs	r3, r5
 800055e:	465a      	mov	r2, fp
 8000560:	4644      	mov	r4, r8
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	40e2      	lsrs	r2, r4
 8000568:	001c      	movs	r4, r3
 800056a:	465b      	mov	r3, fp
 800056c:	0015      	movs	r5, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	db2a      	blt.n	80005c8 <__udivmoddi4+0x184>
 8000572:	0026      	movs	r6, r4
 8000574:	409e      	lsls	r6, r3
 8000576:	0033      	movs	r3, r6
 8000578:	0026      	movs	r6, r4
 800057a:	4647      	mov	r7, r8
 800057c:	40be      	lsls	r6, r7
 800057e:	0032      	movs	r2, r6
 8000580:	1a80      	subs	r0, r0, r2
 8000582:	4199      	sbcs	r1, r3
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	9101      	str	r1, [sp, #4]
 8000588:	e79e      	b.n	80004c8 <__udivmoddi4+0x84>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d8bc      	bhi.n	8000508 <__udivmoddi4+0xc4>
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x52>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	2100      	movs	r1, #0
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	9100      	str	r1, [sp, #0]
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	e785      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4646      	mov	r6, r8
 80005b0:	409a      	lsls	r2, r3
 80005b2:	0023      	movs	r3, r4
 80005b4:	40f3      	lsrs	r3, r6
 80005b6:	4644      	mov	r4, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	465b      	mov	r3, fp
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad4      	bge.n	8000572 <__udivmoddi4+0x12e>
 80005c8:	4642      	mov	r2, r8
 80005ca:	002f      	movs	r7, r5
 80005cc:	2320      	movs	r3, #32
 80005ce:	0026      	movs	r6, r4
 80005d0:	4097      	lsls	r7, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	40de      	lsrs	r6, r3
 80005d6:	003b      	movs	r3, r7
 80005d8:	4333      	orrs	r3, r6
 80005da:	e7cd      	b.n	8000578 <__udivmoddi4+0x134>

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	@ (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b08b      	sub	sp, #44	@ 0x2c
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	2414      	movs	r4, #20
 8000638:	193b      	adds	r3, r7, r4
 800063a:	0018      	movs	r0, r3
 800063c:	2314      	movs	r3, #20
 800063e:	001a      	movs	r2, r3
 8000640:	2100      	movs	r1, #0
 8000642:	f005 fb1b 	bl	8005c7c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000646:	4b74      	ldr	r3, [pc, #464]	@ (8000818 <MX_GPIO_Init+0x1e8>)
 8000648:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800064a:	4b73      	ldr	r3, [pc, #460]	@ (8000818 <MX_GPIO_Init+0x1e8>)
 800064c:	2104      	movs	r1, #4
 800064e:	430a      	orrs	r2, r1
 8000650:	635a      	str	r2, [r3, #52]	@ 0x34
 8000652:	4b71      	ldr	r3, [pc, #452]	@ (8000818 <MX_GPIO_Init+0x1e8>)
 8000654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000656:	2204      	movs	r2, #4
 8000658:	4013      	ands	r3, r2
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800065e:	4b6e      	ldr	r3, [pc, #440]	@ (8000818 <MX_GPIO_Init+0x1e8>)
 8000660:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000662:	4b6d      	ldr	r3, [pc, #436]	@ (8000818 <MX_GPIO_Init+0x1e8>)
 8000664:	2120      	movs	r1, #32
 8000666:	430a      	orrs	r2, r1
 8000668:	635a      	str	r2, [r3, #52]	@ 0x34
 800066a:	4b6b      	ldr	r3, [pc, #428]	@ (8000818 <MX_GPIO_Init+0x1e8>)
 800066c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800066e:	2220      	movs	r2, #32
 8000670:	4013      	ands	r3, r2
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	4b68      	ldr	r3, [pc, #416]	@ (8000818 <MX_GPIO_Init+0x1e8>)
 8000678:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800067a:	4b67      	ldr	r3, [pc, #412]	@ (8000818 <MX_GPIO_Init+0x1e8>)
 800067c:	2101      	movs	r1, #1
 800067e:	430a      	orrs	r2, r1
 8000680:	635a      	str	r2, [r3, #52]	@ 0x34
 8000682:	4b65      	ldr	r3, [pc, #404]	@ (8000818 <MX_GPIO_Init+0x1e8>)
 8000684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000686:	2201      	movs	r2, #1
 8000688:	4013      	ands	r3, r2
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	4b62      	ldr	r3, [pc, #392]	@ (8000818 <MX_GPIO_Init+0x1e8>)
 8000690:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000692:	4b61      	ldr	r3, [pc, #388]	@ (8000818 <MX_GPIO_Init+0x1e8>)
 8000694:	2102      	movs	r1, #2
 8000696:	430a      	orrs	r2, r1
 8000698:	635a      	str	r2, [r3, #52]	@ 0x34
 800069a:	4b5f      	ldr	r3, [pc, #380]	@ (8000818 <MX_GPIO_Init+0x1e8>)
 800069c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800069e:	2202      	movs	r2, #2
 80006a0:	4013      	ands	r3, r2
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006a6:	4b5c      	ldr	r3, [pc, #368]	@ (8000818 <MX_GPIO_Init+0x1e8>)
 80006a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006aa:	4b5b      	ldr	r3, [pc, #364]	@ (8000818 <MX_GPIO_Init+0x1e8>)
 80006ac:	2108      	movs	r1, #8
 80006ae:	430a      	orrs	r2, r1
 80006b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006b2:	4b59      	ldr	r3, [pc, #356]	@ (8000818 <MX_GPIO_Init+0x1e8>)
 80006b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006b6:	2208      	movs	r2, #8
 80006b8:	4013      	ands	r3, r2
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MC_LED_GPIO_Port, MC_LED_Pin, GPIO_PIN_SET);
 80006be:	23a0      	movs	r3, #160	@ 0xa0
 80006c0:	05db      	lsls	r3, r3, #23
 80006c2:	2201      	movs	r2, #1
 80006c4:	2120      	movs	r1, #32
 80006c6:	0018      	movs	r0, r3
 80006c8:	f001 fe0c 	bl	80022e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MC_Tach_OUT_0_Pin|MC_Tach_OUT_1_Pin|MC_Tach_OUT_2_Pin|MC_Tach_OUT_3_Pin
 80006cc:	23fc      	movs	r3, #252	@ 0xfc
 80006ce:	021b      	lsls	r3, r3, #8
 80006d0:	4852      	ldr	r0, [pc, #328]	@ (800081c <MX_GPIO_Init+0x1ec>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	0019      	movs	r1, r3
 80006d6:	f001 fe05 	bl	80022e4 <HAL_GPIO_WritePin>
                          |MC_Tach_OUT_4_Pin|MC_Tach_OUT_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FAN_Tach_IN_11_Pin|FAN_Tach_IN_0_Pin|FAN_Tach_IN_1_Pin|FAN_Tach_IN_2_Pin
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	4a50      	ldr	r2, [pc, #320]	@ (8000820 <MX_GPIO_Init+0x1f0>)
 80006de:	601a      	str	r2, [r3, #0]
                          |FAN_Tach_IN_3_Pin|FAN_Tach_IN_4_Pin|FAN_Tach_IN_5_Pin|FAN_Tach_IN_6_Pin
                          |FAN_Tach_IN_7_Pin|FAN_Tach_IN_8_Pin|FAN_Tach_IN_9_Pin|FAN_Tach_IN_10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	2288      	movs	r2, #136	@ 0x88
 80006e4:	0352      	lsls	r2, r2, #13
 80006e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	2201      	movs	r2, #1
 80006ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	4a4c      	ldr	r2, [pc, #304]	@ (8000824 <MX_GPIO_Init+0x1f4>)
 80006f2:	0019      	movs	r1, r3
 80006f4:	0010      	movs	r0, r2
 80006f6:	f001 fc91 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80006fa:	0021      	movs	r1, r4
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	22d0      	movs	r2, #208	@ 0xd0
 8000700:	0212      	lsls	r2, r2, #8
 8000702:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000704:	000c      	movs	r4, r1
 8000706:	193b      	adds	r3, r7, r4
 8000708:	2203      	movs	r2, #3
 800070a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	193b      	adds	r3, r7, r4
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000712:	193b      	adds	r3, r7, r4
 8000714:	4a43      	ldr	r2, [pc, #268]	@ (8000824 <MX_GPIO_Init+0x1f4>)
 8000716:	0019      	movs	r1, r3
 8000718:	0010      	movs	r0, r2
 800071a:	f001 fc7f 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800071e:	193b      	adds	r3, r7, r4
 8000720:	2207      	movs	r2, #7
 8000722:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000724:	193b      	adds	r3, r7, r4
 8000726:	2203      	movs	r2, #3
 8000728:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	193b      	adds	r3, r7, r4
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000730:	193b      	adds	r3, r7, r4
 8000732:	4a3d      	ldr	r2, [pc, #244]	@ (8000828 <MX_GPIO_Init+0x1f8>)
 8000734:	0019      	movs	r1, r3
 8000736:	0010      	movs	r0, r2
 8000738:	f001 fc70 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA6 PA7 PA8
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800073c:	193b      	adds	r3, r7, r4
 800073e:	4a3b      	ldr	r2, [pc, #236]	@ (800082c <MX_GPIO_Init+0x1fc>)
 8000740:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000742:	193b      	adds	r3, r7, r4
 8000744:	2203      	movs	r2, #3
 8000746:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	193b      	adds	r3, r7, r4
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074e:	193a      	adds	r2, r7, r4
 8000750:	23a0      	movs	r3, #160	@ 0xa0
 8000752:	05db      	lsls	r3, r3, #23
 8000754:	0011      	movs	r1, r2
 8000756:	0018      	movs	r0, r3
 8000758:	f001 fc60 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MC_LED_Pin;
 800075c:	193b      	adds	r3, r7, r4
 800075e:	2220      	movs	r2, #32
 8000760:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	193b      	adds	r3, r7, r4
 8000764:	2201      	movs	r2, #1
 8000766:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	193b      	adds	r3, r7, r4
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	193b      	adds	r3, r7, r4
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MC_LED_GPIO_Port, &GPIO_InitStruct);
 8000774:	193a      	adds	r2, r7, r4
 8000776:	23a0      	movs	r3, #160	@ 0xa0
 8000778:	05db      	lsls	r3, r3, #23
 800077a:	0011      	movs	r1, r2
 800077c:	0018      	movs	r0, r3
 800077e:	f001 fc4d 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_9;
 8000782:	193b      	adds	r3, r7, r4
 8000784:	4a2a      	ldr	r2, [pc, #168]	@ (8000830 <MX_GPIO_Init+0x200>)
 8000786:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000788:	193b      	adds	r3, r7, r4
 800078a:	2203      	movs	r2, #3
 800078c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	193b      	adds	r3, r7, r4
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000794:	193b      	adds	r3, r7, r4
 8000796:	4a21      	ldr	r2, [pc, #132]	@ (800081c <MX_GPIO_Init+0x1ec>)
 8000798:	0019      	movs	r1, r3
 800079a:	0010      	movs	r0, r2
 800079c:	f001 fc3e 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = MC_Tach_OUT_0_Pin|MC_Tach_OUT_1_Pin|MC_Tach_OUT_2_Pin|MC_Tach_OUT_3_Pin
 80007a0:	0021      	movs	r1, r4
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	22fc      	movs	r2, #252	@ 0xfc
 80007a6:	0212      	lsls	r2, r2, #8
 80007a8:	601a      	str	r2, [r3, #0]
                          |MC_Tach_OUT_4_Pin|MC_Tach_OUT_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	000c      	movs	r4, r1
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	2201      	movs	r2, #1
 80007b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	193b      	adds	r3, r7, r4
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007be:	193b      	adds	r3, r7, r4
 80007c0:	4a16      	ldr	r2, [pc, #88]	@ (800081c <MX_GPIO_Init+0x1ec>)
 80007c2:	0019      	movs	r1, r3
 80007c4:	0010      	movs	r0, r2
 80007c6:	f001 fc29 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_6;
 80007ca:	0021      	movs	r1, r4
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	22d0      	movs	r2, #208	@ 0xd0
 80007d0:	0092      	lsls	r2, r2, #2
 80007d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007d4:	000c      	movs	r4, r1
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	2203      	movs	r2, #3
 80007da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	4a13      	ldr	r2, [pc, #76]	@ (8000834 <MX_GPIO_Init+0x204>)
 80007e6:	0019      	movs	r1, r3
 80007e8:	0010      	movs	r0, r2
 80007ea:	f001 fc17 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = Buf_PWM_IN_0_Pin|Buf_PWM_IN_1_Pin|Buf_PWM_IN_2_Pin|Buf_PWM_IN_3_Pin
 80007ee:	0021      	movs	r1, r4
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	223f      	movs	r2, #63	@ 0x3f
 80007f4:	601a      	str	r2, [r3, #0]
                          |Buf_PWM_IN_4_Pin|Buf_PWM_IN_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2200      	movs	r2, #0
 80007fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000802:	187b      	adds	r3, r7, r1
 8000804:	4a0b      	ldr	r2, [pc, #44]	@ (8000834 <MX_GPIO_Init+0x204>)
 8000806:	0019      	movs	r1, r3
 8000808:	0010      	movs	r0, r2
 800080a:	f001 fc07 	bl	800201c <HAL_GPIO_Init>

}
 800080e:	46c0      	nop			@ (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	b00b      	add	sp, #44	@ 0x2c
 8000814:	bd90      	pop	{r4, r7, pc}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	40021000 	.word	0x40021000
 800081c:	50000400 	.word	0x50000400
 8000820:	00000fff 	.word	0x00000fff
 8000824:	50000800 	.word	0x50000800
 8000828:	50001400 	.word	0x50001400
 800082c:	000081df 	.word	0x000081df
 8000830:	00000207 	.word	0x00000207
 8000834:	50000c00 	.word	0x50000c00

08000838 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800083c:	4b1b      	ldr	r3, [pc, #108]	@ (80008ac <MX_I2C2_Init+0x74>)
 800083e:	4a1c      	ldr	r2, [pc, #112]	@ (80008b0 <MX_I2C2_Init+0x78>)
 8000840:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10B17DB5;
 8000842:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <MX_I2C2_Init+0x74>)
 8000844:	4a1b      	ldr	r2, [pc, #108]	@ (80008b4 <MX_I2C2_Init+0x7c>)
 8000846:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000848:	4b18      	ldr	r3, [pc, #96]	@ (80008ac <MX_I2C2_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800084e:	4b17      	ldr	r3, [pc, #92]	@ (80008ac <MX_I2C2_Init+0x74>)
 8000850:	2201      	movs	r2, #1
 8000852:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000854:	4b15      	ldr	r3, [pc, #84]	@ (80008ac <MX_I2C2_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800085a:	4b14      	ldr	r3, [pc, #80]	@ (80008ac <MX_I2C2_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000860:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <MX_I2C2_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000866:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <MX_I2C2_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800086c:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <MX_I2C2_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000872:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <MX_I2C2_Init+0x74>)
 8000874:	0018      	movs	r0, r3
 8000876:	f001 fd53 	bl	8002320 <HAL_I2C_Init>
 800087a:	1e03      	subs	r3, r0, #0
 800087c:	d001      	beq.n	8000882 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800087e:	f000 fb80 	bl	8000f82 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000882:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <MX_I2C2_Init+0x74>)
 8000884:	2100      	movs	r1, #0
 8000886:	0018      	movs	r0, r3
 8000888:	f001 fdf0 	bl	800246c <HAL_I2CEx_ConfigAnalogFilter>
 800088c:	1e03      	subs	r3, r0, #0
 800088e:	d001      	beq.n	8000894 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000890:	f000 fb77 	bl	8000f82 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000894:	4b05      	ldr	r3, [pc, #20]	@ (80008ac <MX_I2C2_Init+0x74>)
 8000896:	2100      	movs	r1, #0
 8000898:	0018      	movs	r0, r3
 800089a:	f001 fe33 	bl	8002504 <HAL_I2CEx_ConfigDigitalFilter>
 800089e:	1e03      	subs	r3, r0, #0
 80008a0:	d001      	beq.n	80008a6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008a2:	f000 fb6e 	bl	8000f82 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	200000b4 	.word	0x200000b4
 80008b0:	40005800 	.word	0x40005800
 80008b4:	10b17db5 	.word	0x10b17db5

080008b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b08b      	sub	sp, #44	@ 0x2c
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	2414      	movs	r4, #20
 80008c2:	193b      	adds	r3, r7, r4
 80008c4:	0018      	movs	r0, r3
 80008c6:	2314      	movs	r3, #20
 80008c8:	001a      	movs	r2, r3
 80008ca:	2100      	movs	r1, #0
 80008cc:	f005 f9d6 	bl	8005c7c <memset>
  if(i2cHandle->Instance==I2C2)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a1c      	ldr	r2, [pc, #112]	@ (8000948 <HAL_I2C_MspInit+0x90>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d131      	bne.n	800093e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b1c      	ldr	r3, [pc, #112]	@ (800094c <HAL_I2C_MspInit+0x94>)
 80008dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008de:	4b1b      	ldr	r3, [pc, #108]	@ (800094c <HAL_I2C_MspInit+0x94>)
 80008e0:	2101      	movs	r1, #1
 80008e2:	430a      	orrs	r2, r1
 80008e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80008e6:	4b19      	ldr	r3, [pc, #100]	@ (800094c <HAL_I2C_MspInit+0x94>)
 80008e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008ea:	2201      	movs	r2, #1
 80008ec:	4013      	ands	r3, r2
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = MC_I2C_SCL_Pin|MC_I2C_SDA_Pin;
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	22c0      	movs	r2, #192	@ 0xc0
 80008f6:	0152      	lsls	r2, r2, #5
 80008f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008fa:	0021      	movs	r1, r4
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2212      	movs	r2, #18
 8000900:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2206      	movs	r2, #6
 8000912:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	187a      	adds	r2, r7, r1
 8000916:	23a0      	movs	r3, #160	@ 0xa0
 8000918:	05db      	lsls	r3, r3, #23
 800091a:	0011      	movs	r1, r2
 800091c:	0018      	movs	r0, r3
 800091e:	f001 fb7d 	bl	800201c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000922:	4b0a      	ldr	r3, [pc, #40]	@ (800094c <HAL_I2C_MspInit+0x94>)
 8000924:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000926:	4b09      	ldr	r3, [pc, #36]	@ (800094c <HAL_I2C_MspInit+0x94>)
 8000928:	2180      	movs	r1, #128	@ 0x80
 800092a:	03c9      	lsls	r1, r1, #15
 800092c:	430a      	orrs	r2, r1
 800092e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <HAL_I2C_MspInit+0x94>)
 8000932:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000934:	2380      	movs	r3, #128	@ 0x80
 8000936:	03db      	lsls	r3, r3, #15
 8000938:	4013      	ands	r3, r2
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800093e:	46c0      	nop			@ (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b00b      	add	sp, #44	@ 0x2c
 8000944:	bd90      	pop	{r4, r7, pc}
 8000946:	46c0      	nop			@ (mov r8, r8)
 8000948:	40005800 	.word	0x40005800
 800094c:	40021000 	.word	0x40021000

08000950 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	USART2->TDR = ch;
 8000958:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <__io_putchar+0x24>)
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	629a      	str	r2, [r3, #40]	@ 0x28
	while ((USART2->ISR & USART_ISR_TC) == 0)
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	4b04      	ldr	r3, [pc, #16]	@ (8000974 <__io_putchar+0x24>)
 8000962:	69db      	ldr	r3, [r3, #28]
 8000964:	2240      	movs	r2, #64	@ 0x40
 8000966:	4013      	ands	r3, r2
 8000968:	d0fa      	beq.n	8000960 <__io_putchar+0x10>
		;
	return ch;
 800096a:	687b      	ldr	r3, [r7, #4]
}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b002      	add	sp, #8
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40004400 	.word	0x40004400

08000978 <__io_getchar>:
int __io_getchar(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	while ((USART2->ISR & USART_ISR_RXNE_RXFNE) == 0)
 800097c:	46c0      	nop			@ (mov r8, r8)
 800097e:	4b05      	ldr	r3, [pc, #20]	@ (8000994 <__io_getchar+0x1c>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	2220      	movs	r2, #32
 8000984:	4013      	ands	r3, r2
 8000986:	d0fa      	beq.n	800097e <__io_getchar+0x6>
		;
	return USART2->RDR;
 8000988:	4b02      	ldr	r3, [pc, #8]	@ (8000994 <__io_getchar+0x1c>)
 800098a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 800098c:	0018      	movs	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			@ (mov r8, r8)
 8000994:	40004400 	.word	0x40004400

08000998 <HAL_IncTick>:
		printf("portD- %u\r\n", t);// логирование
	}
}
uint16_t LedMask;
void HAL_IncTick(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	uwTick += (uint32_t) uwTickFreq;
 800099c:	4b19      	ldr	r3, [pc, #100]	@ (8000a04 <HAL_IncTick+0x6c>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	001a      	movs	r2, r3
 80009a2:	4b19      	ldr	r3, [pc, #100]	@ (8000a08 <HAL_IncTick+0x70>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	18d2      	adds	r2, r2, r3
 80009a8:	4b17      	ldr	r3, [pc, #92]	@ (8000a08 <HAL_IncTick+0x70>)
 80009aa:	601a      	str	r2, [r3, #0]
//	if ((uwTick % 64) == 0)
	{
		if (LedMask & 1)
 80009ac:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <HAL_IncTick+0x74>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	001a      	movs	r2, r3
 80009b2:	2301      	movs	r3, #1
 80009b4:	4013      	ands	r3, r2
 80009b6:	d014      	beq.n	80009e2 <HAL_IncTick+0x4a>
		{
			LedOn;
 80009b8:	23a0      	movs	r3, #160	@ 0xa0
 80009ba:	05db      	lsls	r3, r3, #23
 80009bc:	2201      	movs	r2, #1
 80009be:	2120      	movs	r1, #32
 80009c0:	0018      	movs	r0, r3
 80009c2:	f001 fc8f 	bl	80022e4 <HAL_GPIO_WritePin>
			LedMask >>= 1;
 80009c6:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <HAL_IncTick+0x74>)
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	085b      	lsrs	r3, r3, #1
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <HAL_IncTick+0x74>)
 80009d0:	801a      	strh	r2, [r3, #0]
			LedMask |= (1 << 15);
 80009d2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <HAL_IncTick+0x74>)
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000a10 <HAL_IncTick+0x78>)
 80009d8:	4313      	orrs	r3, r2
 80009da:	b29a      	uxth	r2, r3
 80009dc:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <HAL_IncTick+0x74>)
 80009de:	801a      	strh	r2, [r3, #0]
		{
			LedOff;
			LedMask >>= 1;
		}
	}
}
 80009e0:	e00c      	b.n	80009fc <HAL_IncTick+0x64>
			LedOff;
 80009e2:	23a0      	movs	r3, #160	@ 0xa0
 80009e4:	05db      	lsls	r3, r3, #23
 80009e6:	2200      	movs	r2, #0
 80009e8:	2120      	movs	r1, #32
 80009ea:	0018      	movs	r0, r3
 80009ec:	f001 fc7a 	bl	80022e4 <HAL_GPIO_WritePin>
			LedMask >>= 1;
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <HAL_IncTick+0x74>)
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	085b      	lsrs	r3, r3, #1
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <HAL_IncTick+0x74>)
 80009fa:	801a      	strh	r2, [r3, #0]
}
 80009fc:	46c0      	nop			@ (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			@ (mov r8, r8)
 8000a04:	20000038 	.word	0x20000038
 8000a08:	200003b0 	.word	0x200003b0
 8000a0c:	20000108 	.word	0x20000108
 8000a10:	ffff8000 	.word	0xffff8000

08000a14 <HAL_TIM_OC_DelayElapsedCallback>:
#define StopFan	60000
uint16_t timeB6_11[12] =
{ 40000, 40000, 40000, 40000, 40000, 40000, 40000, 40000, 40000, 40000, 40000,
		40000 };
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) // Обработчик таймера
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	int isr;
	uint16_t period;
	if (htim->Instance == TIM1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a9a      	ldr	r2, [pc, #616]	@ (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x278>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d000      	beq.n	8000a28 <HAL_TIM_OC_DelayElapsedCallback+0x14>
 8000a26:	e0be      	b.n	8000ba6 <HAL_TIM_OC_DelayElapsedCallback+0x192>
	{
		isr = TIM1->SR; // получение флага прерывания TIM1
 8000a28:	4b98      	ldr	r3, [pc, #608]	@ (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x278>)
 8000a2a:	691b      	ldr	r3, [r3, #16]
 8000a2c:	60bb      	str	r3, [r7, #8]
		TIM1->SR = 0; // Сброс флагов прерываний
 8000a2e:	4b97      	ldr	r3, [pc, #604]	@ (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x278>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
		printf("Timer1 %u %u\r\n", timeB6_11[0], timeB6_11[1]);
 8000a34:	4b96      	ldr	r3, [pc, #600]	@ (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 8000a36:	881b      	ldrh	r3, [r3, #0]
 8000a38:	0019      	movs	r1, r3
 8000a3a:	4b95      	ldr	r3, [pc, #596]	@ (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 8000a3c:	885b      	ldrh	r3, [r3, #2]
 8000a3e:	001a      	movs	r2, r3
 8000a40:	4b94      	ldr	r3, [pc, #592]	@ (8000c94 <HAL_TIM_OC_DelayElapsedCallback+0x280>)
 8000a42:	0018      	movs	r0, r3
 8000a44:	f005 f8be 	bl	8005bc4 <iprintf>
		printf("Timer2 %u %u\r\n", timeB6_11[10], timeB6_11[11]);
 8000a48:	4b91      	ldr	r3, [pc, #580]	@ (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 8000a4a:	8a9b      	ldrh	r3, [r3, #20]
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	4b90      	ldr	r3, [pc, #576]	@ (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 8000a50:	8adb      	ldrh	r3, [r3, #22]
 8000a52:	001a      	movs	r2, r3
 8000a54:	4b90      	ldr	r3, [pc, #576]	@ (8000c98 <HAL_TIM_OC_DelayElapsedCallback+0x284>)
 8000a56:	0018      	movs	r0, r3
 8000a58:	f005 f8b4 	bl	8005bc4 <iprintf>
		if (isr & (1 << 1))
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	2202      	movs	r2, #2
 8000a60:	4013      	ands	r3, r2
 8000a62:	d023      	beq.n	8000aac <HAL_TIM_OC_DelayElapsedCallback+0x98>
		{
			if (timeB6_11[0] > timeB6_11[1])
 8000a64:	4b8a      	ldr	r3, [pc, #552]	@ (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 8000a66:	881a      	ldrh	r2, [r3, #0]
 8000a68:	4b89      	ldr	r3, [pc, #548]	@ (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 8000a6a:	885b      	ldrh	r3, [r3, #2]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d905      	bls.n	8000a7c <HAL_TIM_OC_DelayElapsedCallback+0x68>
				period = timeB6_11[0];
 8000a70:	230e      	movs	r3, #14
 8000a72:	18fb      	adds	r3, r7, r3
 8000a74:	4a86      	ldr	r2, [pc, #536]	@ (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 8000a76:	8812      	ldrh	r2, [r2, #0]
 8000a78:	801a      	strh	r2, [r3, #0]
 8000a7a:	e004      	b.n	8000a86 <HAL_TIM_OC_DelayElapsedCallback+0x72>
			else
				period = timeB6_11[1];
 8000a7c:	230e      	movs	r3, #14
 8000a7e:	18fb      	adds	r3, r7, r3
 8000a80:	4a83      	ldr	r2, [pc, #524]	@ (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 8000a82:	8852      	ldrh	r2, [r2, #2]
 8000a84:	801a      	strh	r2, [r3, #0]
			if (period < StopFan)
 8000a86:	200e      	movs	r0, #14
 8000a88:	183b      	adds	r3, r7, r0
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	4a83      	ldr	r2, [pc, #524]	@ (8000c9c <HAL_TIM_OC_DelayElapsedCallback+0x288>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d80c      	bhi.n	8000aac <HAL_TIM_OC_DelayElapsedCallback+0x98>
			{
				TIM1->CCR1 += period;
 8000a92:	4b7e      	ldr	r3, [pc, #504]	@ (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x278>)
 8000a94:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000a96:	183b      	adds	r3, r7, r0
 8000a98:	881a      	ldrh	r2, [r3, #0]
 8000a9a:	4b7c      	ldr	r3, [pc, #496]	@ (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x278>)
 8000a9c:	188a      	adds	r2, r1, r2
 8000a9e:	635a      	str	r2, [r3, #52]	@ 0x34
				GPIOB->ODR ^= (1 << 6);
 8000aa0:	4b7f      	ldr	r3, [pc, #508]	@ (8000ca0 <HAL_TIM_OC_DelayElapsedCallback+0x28c>)
 8000aa2:	695a      	ldr	r2, [r3, #20]
 8000aa4:	4b7e      	ldr	r3, [pc, #504]	@ (8000ca0 <HAL_TIM_OC_DelayElapsedCallback+0x28c>)
 8000aa6:	2140      	movs	r1, #64	@ 0x40
 8000aa8:	404a      	eors	r2, r1
 8000aaa:	615a      	str	r2, [r3, #20]
			}
		}
		if (isr & (1 << 2))
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	2204      	movs	r2, #4
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	d023      	beq.n	8000afc <HAL_TIM_OC_DelayElapsedCallback+0xe8>
		{
			if (timeB6_11[2] > timeB6_11[3])
 8000ab4:	4b76      	ldr	r3, [pc, #472]	@ (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 8000ab6:	889a      	ldrh	r2, [r3, #4]
 8000ab8:	4b75      	ldr	r3, [pc, #468]	@ (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 8000aba:	88db      	ldrh	r3, [r3, #6]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d905      	bls.n	8000acc <HAL_TIM_OC_DelayElapsedCallback+0xb8>
				period = timeB6_11[2];
 8000ac0:	230e      	movs	r3, #14
 8000ac2:	18fb      	adds	r3, r7, r3
 8000ac4:	4a72      	ldr	r2, [pc, #456]	@ (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 8000ac6:	8892      	ldrh	r2, [r2, #4]
 8000ac8:	801a      	strh	r2, [r3, #0]
 8000aca:	e004      	b.n	8000ad6 <HAL_TIM_OC_DelayElapsedCallback+0xc2>
			else
				period = timeB6_11[3];
 8000acc:	230e      	movs	r3, #14
 8000ace:	18fb      	adds	r3, r7, r3
 8000ad0:	4a6f      	ldr	r2, [pc, #444]	@ (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 8000ad2:	88d2      	ldrh	r2, [r2, #6]
 8000ad4:	801a      	strh	r2, [r3, #0]
			if (period < StopFan)
 8000ad6:	200e      	movs	r0, #14
 8000ad8:	183b      	adds	r3, r7, r0
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	4a6f      	ldr	r2, [pc, #444]	@ (8000c9c <HAL_TIM_OC_DelayElapsedCallback+0x288>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d80c      	bhi.n	8000afc <HAL_TIM_OC_DelayElapsedCallback+0xe8>
			{
				TIM1->CCR2 += period;
 8000ae2:	4b6a      	ldr	r3, [pc, #424]	@ (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x278>)
 8000ae4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8000ae6:	183b      	adds	r3, r7, r0
 8000ae8:	881a      	ldrh	r2, [r3, #0]
 8000aea:	4b68      	ldr	r3, [pc, #416]	@ (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x278>)
 8000aec:	188a      	adds	r2, r1, r2
 8000aee:	639a      	str	r2, [r3, #56]	@ 0x38
				GPIOB->ODR ^= (1 << 7);
 8000af0:	4b6b      	ldr	r3, [pc, #428]	@ (8000ca0 <HAL_TIM_OC_DelayElapsedCallback+0x28c>)
 8000af2:	695a      	ldr	r2, [r3, #20]
 8000af4:	4b6a      	ldr	r3, [pc, #424]	@ (8000ca0 <HAL_TIM_OC_DelayElapsedCallback+0x28c>)
 8000af6:	2180      	movs	r1, #128	@ 0x80
 8000af8:	404a      	eors	r2, r1
 8000afa:	615a      	str	r2, [r3, #20]
			}
		}
		if (isr & (1 << 3))
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	2208      	movs	r2, #8
 8000b00:	4013      	ands	r3, r2
 8000b02:	d024      	beq.n	8000b4e <HAL_TIM_OC_DelayElapsedCallback+0x13a>
		{
			if (timeB6_11[4] > timeB6_11[5])
 8000b04:	4b62      	ldr	r3, [pc, #392]	@ (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 8000b06:	891a      	ldrh	r2, [r3, #8]
 8000b08:	4b61      	ldr	r3, [pc, #388]	@ (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 8000b0a:	895b      	ldrh	r3, [r3, #10]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d905      	bls.n	8000b1c <HAL_TIM_OC_DelayElapsedCallback+0x108>
				period = timeB6_11[4];
 8000b10:	230e      	movs	r3, #14
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	4a5e      	ldr	r2, [pc, #376]	@ (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 8000b16:	8912      	ldrh	r2, [r2, #8]
 8000b18:	801a      	strh	r2, [r3, #0]
 8000b1a:	e004      	b.n	8000b26 <HAL_TIM_OC_DelayElapsedCallback+0x112>
			else
				period = timeB6_11[5];
 8000b1c:	230e      	movs	r3, #14
 8000b1e:	18fb      	adds	r3, r7, r3
 8000b20:	4a5b      	ldr	r2, [pc, #364]	@ (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 8000b22:	8952      	ldrh	r2, [r2, #10]
 8000b24:	801a      	strh	r2, [r3, #0]
			if (period < StopFan)
 8000b26:	200e      	movs	r0, #14
 8000b28:	183b      	adds	r3, r7, r0
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	4a5b      	ldr	r2, [pc, #364]	@ (8000c9c <HAL_TIM_OC_DelayElapsedCallback+0x288>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d80d      	bhi.n	8000b4e <HAL_TIM_OC_DelayElapsedCallback+0x13a>
			{
				TIM1->CCR3 += period;
 8000b32:	4b56      	ldr	r3, [pc, #344]	@ (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x278>)
 8000b34:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8000b36:	183b      	adds	r3, r7, r0
 8000b38:	881a      	ldrh	r2, [r3, #0]
 8000b3a:	4b54      	ldr	r3, [pc, #336]	@ (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x278>)
 8000b3c:	188a      	adds	r2, r1, r2
 8000b3e:	63da      	str	r2, [r3, #60]	@ 0x3c
				GPIOB->ODR ^= (1 << 8);
 8000b40:	4b57      	ldr	r3, [pc, #348]	@ (8000ca0 <HAL_TIM_OC_DelayElapsedCallback+0x28c>)
 8000b42:	695a      	ldr	r2, [r3, #20]
 8000b44:	4b56      	ldr	r3, [pc, #344]	@ (8000ca0 <HAL_TIM_OC_DelayElapsedCallback+0x28c>)
 8000b46:	2180      	movs	r1, #128	@ 0x80
 8000b48:	0049      	lsls	r1, r1, #1
 8000b4a:	404a      	eors	r2, r1
 8000b4c:	615a      	str	r2, [r3, #20]
			}
		}
		if (isr & (1 << 4))
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	2210      	movs	r2, #16
 8000b52:	4013      	ands	r3, r2
 8000b54:	d100      	bne.n	8000b58 <HAL_TIM_OC_DelayElapsedCallback+0x144>
 8000b56:	e095      	b.n	8000c84 <HAL_TIM_OC_DelayElapsedCallback+0x270>
		{
			if (timeB6_11[6] > timeB6_11[7])
 8000b58:	4b4d      	ldr	r3, [pc, #308]	@ (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 8000b5a:	899a      	ldrh	r2, [r3, #12]
 8000b5c:	4b4c      	ldr	r3, [pc, #304]	@ (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 8000b5e:	89db      	ldrh	r3, [r3, #14]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d905      	bls.n	8000b70 <HAL_TIM_OC_DelayElapsedCallback+0x15c>
				period = timeB6_11[6];
 8000b64:	230e      	movs	r3, #14
 8000b66:	18fb      	adds	r3, r7, r3
 8000b68:	4a49      	ldr	r2, [pc, #292]	@ (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 8000b6a:	8992      	ldrh	r2, [r2, #12]
 8000b6c:	801a      	strh	r2, [r3, #0]
 8000b6e:	e004      	b.n	8000b7a <HAL_TIM_OC_DelayElapsedCallback+0x166>
			else
				period = timeB6_11[7];
 8000b70:	230e      	movs	r3, #14
 8000b72:	18fb      	adds	r3, r7, r3
 8000b74:	4a46      	ldr	r2, [pc, #280]	@ (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 8000b76:	89d2      	ldrh	r2, [r2, #14]
 8000b78:	801a      	strh	r2, [r3, #0]
			if (period < StopFan)
 8000b7a:	200e      	movs	r0, #14
 8000b7c:	183b      	adds	r3, r7, r0
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	4a46      	ldr	r2, [pc, #280]	@ (8000c9c <HAL_TIM_OC_DelayElapsedCallback+0x288>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d900      	bls.n	8000b88 <HAL_TIM_OC_DelayElapsedCallback+0x174>
 8000b86:	e07d      	b.n	8000c84 <HAL_TIM_OC_DelayElapsedCallback+0x270>
			{
				TIM1->CCR4 += period;
 8000b88:	4b40      	ldr	r3, [pc, #256]	@ (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x278>)
 8000b8a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000b8c:	183b      	adds	r3, r7, r0
 8000b8e:	881a      	ldrh	r2, [r3, #0]
 8000b90:	4b3e      	ldr	r3, [pc, #248]	@ (8000c8c <HAL_TIM_OC_DelayElapsedCallback+0x278>)
 8000b92:	188a      	adds	r2, r1, r2
 8000b94:	641a      	str	r2, [r3, #64]	@ 0x40
				GPIOB->ODR ^= (1 << 9);
 8000b96:	4b42      	ldr	r3, [pc, #264]	@ (8000ca0 <HAL_TIM_OC_DelayElapsedCallback+0x28c>)
 8000b98:	695a      	ldr	r2, [r3, #20]
 8000b9a:	4b41      	ldr	r3, [pc, #260]	@ (8000ca0 <HAL_TIM_OC_DelayElapsedCallback+0x28c>)
 8000b9c:	2180      	movs	r1, #128	@ 0x80
 8000b9e:	0089      	lsls	r1, r1, #2
 8000ba0:	404a      	eors	r2, r1
 8000ba2:	615a      	str	r2, [r3, #20]
				TIM2->CCR2 += period;
				GPIOB->ODR ^= (1 << 11);
			}
		}
	}
}
 8000ba4:	e06e      	b.n	8000c84 <HAL_TIM_OC_DelayElapsedCallback+0x270>
	else if (htim->Instance == TIM2)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	2380      	movs	r3, #128	@ 0x80
 8000bac:	05db      	lsls	r3, r3, #23
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d000      	beq.n	8000bb4 <HAL_TIM_OC_DelayElapsedCallback+0x1a0>
 8000bb2:	e067      	b.n	8000c84 <HAL_TIM_OC_DelayElapsedCallback+0x270>
		isr = TIM2->SR;
 8000bb4:	2380      	movs	r3, #128	@ 0x80
 8000bb6:	05db      	lsls	r3, r3, #23
 8000bb8:	691b      	ldr	r3, [r3, #16]
 8000bba:	60bb      	str	r3, [r7, #8]
		TIM2->SR = 0;
 8000bbc:	2380      	movs	r3, #128	@ 0x80
 8000bbe:	05db      	lsls	r3, r3, #23
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
		printf("Timer2 CMP %u\r\n", (uint16_t) (TIM2->CNT & 0x0000FFFF));
 8000bc4:	2380      	movs	r3, #128	@ 0x80
 8000bc6:	05db      	lsls	r3, r3, #23
 8000bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	001a      	movs	r2, r3
 8000bce:	4b35      	ldr	r3, [pc, #212]	@ (8000ca4 <HAL_TIM_OC_DelayElapsedCallback+0x290>)
 8000bd0:	0011      	movs	r1, r2
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f004 fff6 	bl	8005bc4 <iprintf>
		if (isr & (1 << 1))
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	2202      	movs	r2, #2
 8000bdc:	4013      	ands	r3, r2
 8000bde:	d026      	beq.n	8000c2e <HAL_TIM_OC_DelayElapsedCallback+0x21a>
			if (timeB6_11[8] > timeB6_11[9])
 8000be0:	4b2b      	ldr	r3, [pc, #172]	@ (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 8000be2:	8a1a      	ldrh	r2, [r3, #16]
 8000be4:	4b2a      	ldr	r3, [pc, #168]	@ (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 8000be6:	8a5b      	ldrh	r3, [r3, #18]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d905      	bls.n	8000bf8 <HAL_TIM_OC_DelayElapsedCallback+0x1e4>
				period = timeB6_11[8];
 8000bec:	230e      	movs	r3, #14
 8000bee:	18fb      	adds	r3, r7, r3
 8000bf0:	4a27      	ldr	r2, [pc, #156]	@ (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 8000bf2:	8a12      	ldrh	r2, [r2, #16]
 8000bf4:	801a      	strh	r2, [r3, #0]
 8000bf6:	e004      	b.n	8000c02 <HAL_TIM_OC_DelayElapsedCallback+0x1ee>
				period = timeB6_11[9];
 8000bf8:	230e      	movs	r3, #14
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	4a24      	ldr	r2, [pc, #144]	@ (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 8000bfe:	8a52      	ldrh	r2, [r2, #18]
 8000c00:	801a      	strh	r2, [r3, #0]
			if (period < StopFan)
 8000c02:	200e      	movs	r0, #14
 8000c04:	183b      	adds	r3, r7, r0
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	4a24      	ldr	r2, [pc, #144]	@ (8000c9c <HAL_TIM_OC_DelayElapsedCallback+0x288>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d80f      	bhi.n	8000c2e <HAL_TIM_OC_DelayElapsedCallback+0x21a>
				TIM2->CCR1 += period;
 8000c0e:	2380      	movs	r3, #128	@ 0x80
 8000c10:	05db      	lsls	r3, r3, #23
 8000c12:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c14:	183b      	adds	r3, r7, r0
 8000c16:	881a      	ldrh	r2, [r3, #0]
 8000c18:	2380      	movs	r3, #128	@ 0x80
 8000c1a:	05db      	lsls	r3, r3, #23
 8000c1c:	188a      	adds	r2, r1, r2
 8000c1e:	635a      	str	r2, [r3, #52]	@ 0x34
				GPIOB->ODR ^= (1 << 10);
 8000c20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca0 <HAL_TIM_OC_DelayElapsedCallback+0x28c>)
 8000c22:	695a      	ldr	r2, [r3, #20]
 8000c24:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca0 <HAL_TIM_OC_DelayElapsedCallback+0x28c>)
 8000c26:	2180      	movs	r1, #128	@ 0x80
 8000c28:	00c9      	lsls	r1, r1, #3
 8000c2a:	404a      	eors	r2, r1
 8000c2c:	615a      	str	r2, [r3, #20]
		if (isr & (1 << 2))
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	2204      	movs	r2, #4
 8000c32:	4013      	ands	r3, r2
 8000c34:	d026      	beq.n	8000c84 <HAL_TIM_OC_DelayElapsedCallback+0x270>
			if (timeB6_11[10] > timeB6_11[11])
 8000c36:	4b16      	ldr	r3, [pc, #88]	@ (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 8000c38:	8a9a      	ldrh	r2, [r3, #20]
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 8000c3c:	8adb      	ldrh	r3, [r3, #22]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d905      	bls.n	8000c4e <HAL_TIM_OC_DelayElapsedCallback+0x23a>
				period = timeB6_11[10];
 8000c42:	230e      	movs	r3, #14
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	4a12      	ldr	r2, [pc, #72]	@ (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 8000c48:	8a92      	ldrh	r2, [r2, #20]
 8000c4a:	801a      	strh	r2, [r3, #0]
 8000c4c:	e004      	b.n	8000c58 <HAL_TIM_OC_DelayElapsedCallback+0x244>
				period = timeB6_11[11];
 8000c4e:	230e      	movs	r3, #14
 8000c50:	18fb      	adds	r3, r7, r3
 8000c52:	4a0f      	ldr	r2, [pc, #60]	@ (8000c90 <HAL_TIM_OC_DelayElapsedCallback+0x27c>)
 8000c54:	8ad2      	ldrh	r2, [r2, #22]
 8000c56:	801a      	strh	r2, [r3, #0]
			if (period < StopFan)
 8000c58:	200e      	movs	r0, #14
 8000c5a:	183b      	adds	r3, r7, r0
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000c9c <HAL_TIM_OC_DelayElapsedCallback+0x288>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d80f      	bhi.n	8000c84 <HAL_TIM_OC_DelayElapsedCallback+0x270>
				TIM2->CCR2 += period;
 8000c64:	2380      	movs	r3, #128	@ 0x80
 8000c66:	05db      	lsls	r3, r3, #23
 8000c68:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8000c6a:	183b      	adds	r3, r7, r0
 8000c6c:	881a      	ldrh	r2, [r3, #0]
 8000c6e:	2380      	movs	r3, #128	@ 0x80
 8000c70:	05db      	lsls	r3, r3, #23
 8000c72:	188a      	adds	r2, r1, r2
 8000c74:	639a      	str	r2, [r3, #56]	@ 0x38
				GPIOB->ODR ^= (1 << 11);
 8000c76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca0 <HAL_TIM_OC_DelayElapsedCallback+0x28c>)
 8000c78:	695a      	ldr	r2, [r3, #20]
 8000c7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <HAL_TIM_OC_DelayElapsedCallback+0x28c>)
 8000c7c:	2180      	movs	r1, #128	@ 0x80
 8000c7e:	0109      	lsls	r1, r1, #4
 8000c80:	404a      	eors	r2, r1
 8000c82:	615a      	str	r2, [r3, #20]
}
 8000c84:	46c0      	nop			@ (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b004      	add	sp, #16
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40012c00 	.word	0x40012c00
 8000c90:	20000000 	.word	0x20000000
 8000c94:	08006930 	.word	0x08006930
 8000c98:	08006940 	.word	0x08006940
 8000c9c:	0000ea5f 	.word	0x0000ea5f
 8000ca0:	50000400 	.word	0x50000400
 8000ca4:	08006950 	.word	0x08006950

08000ca8 <checkTah>:
uint16_t portC;
uint16_t timeCstart[12];
void checkTah(uint16_t ch, uint16_t ticks, uint16_t change)
{
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	0004      	movs	r4, r0
 8000cb0:	0008      	movs	r0, r1
 8000cb2:	0011      	movs	r1, r2
 8000cb4:	1dbb      	adds	r3, r7, #6
 8000cb6:	1c22      	adds	r2, r4, #0
 8000cb8:	801a      	strh	r2, [r3, #0]
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	1c02      	adds	r2, r0, #0
 8000cbe:	801a      	strh	r2, [r3, #0]
 8000cc0:	1cbb      	adds	r3, r7, #2
 8000cc2:	1c0a      	adds	r2, r1, #0
 8000cc4:	801a      	strh	r2, [r3, #0]
	uint16_t v;
	v = ticks - timeCstart[ch]; // Расчёт времени, прошедшего с момента последнего изменения
 8000cc6:	1dbb      	adds	r3, r7, #6
 8000cc8:	881a      	ldrh	r2, [r3, #0]
 8000cca:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <checkTah+0x78>)
 8000ccc:	0052      	lsls	r2, r2, #1
 8000cce:	5ad2      	ldrh	r2, [r2, r3]
 8000cd0:	200e      	movs	r0, #14
 8000cd2:	183b      	adds	r3, r7, r0
 8000cd4:	1d39      	adds	r1, r7, #4
 8000cd6:	8809      	ldrh	r1, [r1, #0]
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	801a      	strh	r2, [r3, #0]
	if ((change & (1 << ch)) || (v >= StopFan)) //Если произошли изменения или время превышает порог
 8000cdc:	1cbb      	adds	r3, r7, #2
 8000cde:	881a      	ldrh	r2, [r3, #0]
 8000ce0:	1dbb      	adds	r3, r7, #6
 8000ce2:	881b      	ldrh	r3, [r3, #0]
 8000ce4:	411a      	asrs	r2, r3
 8000ce6:	0013      	movs	r3, r2
 8000ce8:	2201      	movs	r2, #1
 8000cea:	4013      	ands	r3, r2
 8000cec:	d104      	bne.n	8000cf8 <checkTah+0x50>
 8000cee:	183b      	adds	r3, r7, r0
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8000d24 <checkTah+0x7c>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d90e      	bls.n	8000d16 <checkTah+0x6e>
	{
		timeCstart[ch] = ticks;// Обновление времени старта
 8000cf8:	1dbb      	adds	r3, r7, #6
 8000cfa:	881a      	ldrh	r2, [r3, #0]
 8000cfc:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <checkTah+0x78>)
 8000cfe:	0052      	lsls	r2, r2, #1
 8000d00:	1d39      	adds	r1, r7, #4
 8000d02:	8809      	ldrh	r1, [r1, #0]
 8000d04:	52d1      	strh	r1, [r2, r3]
		timeB6_11[ch] = v; // Сохранение времени
 8000d06:	1dbb      	adds	r3, r7, #6
 8000d08:	881a      	ldrh	r2, [r3, #0]
 8000d0a:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <checkTah+0x80>)
 8000d0c:	0052      	lsls	r2, r2, #1
 8000d0e:	210e      	movs	r1, #14
 8000d10:	1879      	adds	r1, r7, r1
 8000d12:	8809      	ldrh	r1, [r1, #0]
 8000d14:	52d1      	strh	r1, [r2, r3]
	}
}
 8000d16:	46c0      	nop			@ (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b005      	add	sp, #20
 8000d1c:	bd90      	pop	{r4, r7, pc}
 8000d1e:	46c0      	nop			@ (mov r8, r8)
 8000d20:	2000010c 	.word	0x2000010c
 8000d24:	0000ea5f 	.word	0x0000ea5f
 8000d28:	20000000 	.word	0x20000000

08000d2c <Tahometr>:
void Tahometr(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
	uint16_t port, cport, ticks;
	port = GPIOC->IDR; // Чтение состояния порта GPIOC
 8000d32:	4b3e      	ldr	r3, [pc, #248]	@ (8000e2c <Tahometr+0x100>)
 8000d34:	691a      	ldr	r2, [r3, #16]
 8000d36:	1dbb      	adds	r3, r7, #6
 8000d38:	801a      	strh	r2, [r3, #0]
	cport = port ^ portC; // Определение изменения состояния
 8000d3a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e30 <Tahometr+0x104>)
 8000d3c:	8819      	ldrh	r1, [r3, #0]
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	1dba      	adds	r2, r7, #6
 8000d42:	8812      	ldrh	r2, [r2, #0]
 8000d44:	404a      	eors	r2, r1
 8000d46:	801a      	strh	r2, [r3, #0]
	portC = port; // Обновление сохранённого состояния
 8000d48:	4b39      	ldr	r3, [pc, #228]	@ (8000e30 <Tahometr+0x104>)
 8000d4a:	1dba      	adds	r2, r7, #6
 8000d4c:	8812      	ldrh	r2, [r2, #0]
 8000d4e:	801a      	strh	r2, [r3, #0]
	/***** FAN 1...7 */
	ticks = TIM1->CNT & 0x0000FFFF;
 8000d50:	4b38      	ldr	r3, [pc, #224]	@ (8000e34 <Tahometr+0x108>)
 8000d52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d54:	1cbb      	adds	r3, r7, #2
 8000d56:	801a      	strh	r2, [r3, #0]
	/** check FAN 1 & 2 */
	checkTah(0, ticks, cport);
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	881a      	ldrh	r2, [r3, #0]
 8000d5c:	1cbb      	adds	r3, r7, #2
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	0019      	movs	r1, r3
 8000d62:	2000      	movs	r0, #0
 8000d64:	f7ff ffa0 	bl	8000ca8 <checkTah>
	checkTah(1, ticks, cport);
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	881a      	ldrh	r2, [r3, #0]
 8000d6c:	1cbb      	adds	r3, r7, #2
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	0019      	movs	r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	f7ff ff98 	bl	8000ca8 <checkTah>
	/** check FAN 3 & 4 */
	checkTah(2, ticks, cport);
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	881a      	ldrh	r2, [r3, #0]
 8000d7c:	1cbb      	adds	r3, r7, #2
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	0019      	movs	r1, r3
 8000d82:	2002      	movs	r0, #2
 8000d84:	f7ff ff90 	bl	8000ca8 <checkTah>
	checkTah(3, ticks, cport);
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	881a      	ldrh	r2, [r3, #0]
 8000d8c:	1cbb      	adds	r3, r7, #2
 8000d8e:	881b      	ldrh	r3, [r3, #0]
 8000d90:	0019      	movs	r1, r3
 8000d92:	2003      	movs	r0, #3
 8000d94:	f7ff ff88 	bl	8000ca8 <checkTah>
	/** check FAN 5 & 6 */
	checkTah(4, ticks, cport);
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	881a      	ldrh	r2, [r3, #0]
 8000d9c:	1cbb      	adds	r3, r7, #2
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	0019      	movs	r1, r3
 8000da2:	2004      	movs	r0, #4
 8000da4:	f7ff ff80 	bl	8000ca8 <checkTah>
	checkTah(5, ticks, cport);
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	881a      	ldrh	r2, [r3, #0]
 8000dac:	1cbb      	adds	r3, r7, #2
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	0019      	movs	r1, r3
 8000db2:	2005      	movs	r0, #5
 8000db4:	f7ff ff78 	bl	8000ca8 <checkTah>
	/** check FAN 7 & 8 */
	checkTah(6, ticks, cport);
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	881a      	ldrh	r2, [r3, #0]
 8000dbc:	1cbb      	adds	r3, r7, #2
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	0019      	movs	r1, r3
 8000dc2:	2006      	movs	r0, #6
 8000dc4:	f7ff ff70 	bl	8000ca8 <checkTah>
	checkTah(7, ticks, cport);
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	881a      	ldrh	r2, [r3, #0]
 8000dcc:	1cbb      	adds	r3, r7, #2
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	0019      	movs	r1, r3
 8000dd2:	2007      	movs	r0, #7
 8000dd4:	f7ff ff68 	bl	8000ca8 <checkTah>
	/***** FAN 9...12 */
	ticks = TIM2->CNT & 0x0000FFFF;
 8000dd8:	2380      	movs	r3, #128	@ 0x80
 8000dda:	05db      	lsls	r3, r3, #23
 8000ddc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000dde:	1cbb      	adds	r3, r7, #2
 8000de0:	801a      	strh	r2, [r3, #0]
	/** check FAN 9 & 10 */
	checkTah(8, ticks, cport);
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	881a      	ldrh	r2, [r3, #0]
 8000de6:	1cbb      	adds	r3, r7, #2
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	0019      	movs	r1, r3
 8000dec:	2008      	movs	r0, #8
 8000dee:	f7ff ff5b 	bl	8000ca8 <checkTah>
	checkTah(9, ticks, cport);
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	881a      	ldrh	r2, [r3, #0]
 8000df6:	1cbb      	adds	r3, r7, #2
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	0019      	movs	r1, r3
 8000dfc:	2009      	movs	r0, #9
 8000dfe:	f7ff ff53 	bl	8000ca8 <checkTah>
	/** check FAN 11 & 12 */
	checkTah(10, ticks, cport);
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	881a      	ldrh	r2, [r3, #0]
 8000e06:	1cbb      	adds	r3, r7, #2
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	0019      	movs	r1, r3
 8000e0c:	200a      	movs	r0, #10
 8000e0e:	f7ff ff4b 	bl	8000ca8 <checkTah>
	checkTah(11, ticks, cport);
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	881a      	ldrh	r2, [r3, #0]
 8000e16:	1cbb      	adds	r3, r7, #2
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	0019      	movs	r1, r3
 8000e1c:	200b      	movs	r0, #11
 8000e1e:	f7ff ff43 	bl	8000ca8 <checkTah>
}
 8000e22:	46c0      	nop			@ (mov r8, r8)
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b002      	add	sp, #8
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	46c0      	nop			@ (mov r8, r8)
 8000e2c:	50000800 	.word	0x50000800
 8000e30:	2000010a 	.word	0x2000010a
 8000e34:	40012c00 	.word	0x40012c00

08000e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3c:	f000 ff9c 	bl	8001d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e40:	f000 f83e 	bl	8000ec0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e44:	f7ff fbf4 	bl	8000630 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000e48:	f000 fb88 	bl	800155c <MX_TIM3_Init>
  MX_TIM1_Init();
 8000e4c:	f000 fa1a 	bl	8001284 <MX_TIM1_Init>
  MX_TIM16_Init();
 8000e50:	f000 fc3e 	bl	80016d0 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000e54:	f000 fcc6 	bl	80017e4 <MX_TIM17_Init>
  MX_I2C2_Init();
 8000e58:	f7ff fcee 	bl	8000838 <MX_I2C2_Init>
  MX_RTC_Init();
 8000e5c:	f000 f898 	bl	8000f90 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000e60:	f000 feaa 	bl	8001bb8 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8000e64:	f000 fc0e 	bl	8001684 <MX_TIM14_Init>
  MX_TIM2_Init();
 8000e68:	f000 faec 	bl	8001444 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // запуск PWM на необходимых каналах таймеров
 8000e6c:	4b10      	ldr	r3, [pc, #64]	@ (8000eb0 <main+0x78>)
 8000e6e:	2104      	movs	r1, #4
 8000e70:	0018      	movs	r0, r3
 8000e72:	f002 fd3d 	bl	80038f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000e76:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb0 <main+0x78>)
 8000e78:	2108      	movs	r1, #8
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f002 fd38 	bl	80038f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e80:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb4 <main+0x7c>)
 8000e82:	2100      	movs	r1, #0
 8000e84:	0018      	movs	r0, r3
 8000e86:	f002 fd33 	bl	80038f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb4 <main+0x7c>)
 8000e8c:	2104      	movs	r1, #4
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f002 fd2e 	bl	80038f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000e94:	4b08      	ldr	r3, [pc, #32]	@ (8000eb8 <main+0x80>)
 8000e96:	2100      	movs	r1, #0
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f002 fd29 	bl	80038f0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim17, TIM_CHANNEL_1);
 8000e9e:	4b07      	ldr	r3, [pc, #28]	@ (8000ebc <main+0x84>)
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f003 fd7e 	bl	80049a4 <HAL_TIMEx_PWMN_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  Tahometr();
 8000ea8:	f7ff ff40 	bl	8000d2c <Tahometr>
 8000eac:	e7fc      	b.n	8000ea8 <main+0x70>
 8000eae:	46c0      	nop			@ (mov r8, r8)
 8000eb0:	20000154 	.word	0x20000154
 8000eb4:	200001ec 	.word	0x200001ec
 8000eb8:	20000284 	.word	0x20000284
 8000ebc:	200002d0 	.word	0x200002d0

08000ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b093      	sub	sp, #76	@ 0x4c
 8000ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec6:	2410      	movs	r4, #16
 8000ec8:	193b      	adds	r3, r7, r4
 8000eca:	0018      	movs	r0, r3
 8000ecc:	2338      	movs	r3, #56	@ 0x38
 8000ece:	001a      	movs	r2, r3
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	f004 fed3 	bl	8005c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed6:	003b      	movs	r3, r7
 8000ed8:	0018      	movs	r0, r3
 8000eda:	2310      	movs	r3, #16
 8000edc:	001a      	movs	r2, r3
 8000ede:	2100      	movs	r1, #0
 8000ee0:	f004 fecc 	bl	8005c7c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee4:	2380      	movs	r3, #128	@ 0x80
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f001 fb57 	bl	800259c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000eee:	193b      	adds	r3, r7, r4
 8000ef0:	220a      	movs	r2, #10
 8000ef2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef4:	193b      	adds	r3, r7, r4
 8000ef6:	2280      	movs	r2, #128	@ 0x80
 8000ef8:	0052      	lsls	r2, r2, #1
 8000efa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000efc:	0021      	movs	r1, r4
 8000efe:	187b      	adds	r3, r7, r1
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f04:	187b      	adds	r3, r7, r1
 8000f06:	2240      	movs	r2, #64	@ 0x40
 8000f08:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f0a:	187b      	adds	r3, r7, r1
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	2202      	movs	r2, #2
 8000f14:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f16:	187b      	adds	r3, r7, r1
 8000f18:	2202      	movs	r2, #2
 8000f1a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000f1c:	187b      	adds	r3, r7, r1
 8000f1e:	2200      	movs	r2, #0
 8000f20:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	2208      	movs	r2, #8
 8000f26:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	2280      	movs	r2, #128	@ 0x80
 8000f2c:	0292      	lsls	r2, r2, #10
 8000f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	22c0      	movs	r2, #192	@ 0xc0
 8000f34:	04d2      	lsls	r2, r2, #19
 8000f36:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f38:	187b      	adds	r3, r7, r1
 8000f3a:	2280      	movs	r2, #128	@ 0x80
 8000f3c:	0592      	lsls	r2, r2, #22
 8000f3e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	0018      	movs	r0, r3
 8000f44:	f001 fb76 	bl	8002634 <HAL_RCC_OscConfig>
 8000f48:	1e03      	subs	r3, r0, #0
 8000f4a:	d001      	beq.n	8000f50 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000f4c:	f000 f819 	bl	8000f82 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f50:	003b      	movs	r3, r7
 8000f52:	2207      	movs	r2, #7
 8000f54:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f56:	003b      	movs	r3, r7
 8000f58:	2202      	movs	r2, #2
 8000f5a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f5c:	003b      	movs	r3, r7
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f62:	003b      	movs	r3, r7
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f68:	003b      	movs	r3, r7
 8000f6a:	2102      	movs	r1, #2
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f001 fe7b 	bl	8002c68 <HAL_RCC_ClockConfig>
 8000f72:	1e03      	subs	r3, r0, #0
 8000f74:	d001      	beq.n	8000f7a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000f76:	f000 f804 	bl	8000f82 <Error_Handler>
  }
}
 8000f7a:	46c0      	nop			@ (mov r8, r8)
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	b013      	add	sp, #76	@ 0x4c
 8000f80:	bd90      	pop	{r4, r7, pc}

08000f82 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f86:	b672      	cpsid	i
}
 8000f88:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */

  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f8a:	46c0      	nop			@ (mov r8, r8)
 8000f8c:	e7fd      	b.n	8000f8a <Error_Handler+0x8>
	...

08000f90 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f94:	4b18      	ldr	r3, [pc, #96]	@ (8000ff8 <MX_RTC_Init+0x68>)
 8000f96:	4a19      	ldr	r2, [pc, #100]	@ (8000ffc <MX_RTC_Init+0x6c>)
 8000f98:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <MX_RTC_Init+0x68>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <MX_RTC_Init+0x68>)
 8000fa2:	227f      	movs	r2, #127	@ 0x7f
 8000fa4:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000fa6:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <MX_RTC_Init+0x68>)
 8000fa8:	22ff      	movs	r2, #255	@ 0xff
 8000faa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_WAKEUP;
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <MX_RTC_Init+0x68>)
 8000fae:	22c0      	movs	r2, #192	@ 0xc0
 8000fb0:	03d2      	lsls	r2, r2, #15
 8000fb2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000fb4:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <MX_RTC_Init+0x68>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <MX_RTC_Init+0x68>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff8 <MX_RTC_Init+0x68>)
 8000fc2:	2280      	movs	r2, #128	@ 0x80
 8000fc4:	05d2      	lsls	r2, r2, #23
 8000fc6:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff8 <MX_RTC_Init+0x68>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fce:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <MX_RTC_Init+0x68>)
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f002 f9ab 	bl	800332c <HAL_RTC_Init>
 8000fd6:	1e03      	subs	r3, r0, #0
 8000fd8:	d001      	beq.n	8000fde <MX_RTC_Init+0x4e>
  {
    Error_Handler();
 8000fda:	f7ff ffd2 	bl	8000f82 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000fde:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <MX_RTC_Init+0x68>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f002 faef 	bl	80035c8 <HAL_RTCEx_SetWakeUpTimer>
 8000fea:	1e03      	subs	r3, r0, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000fee:	f7ff ffc8 	bl	8000f82 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ff2:	46c0      	nop			@ (mov r8, r8)
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000124 	.word	0x20000124
 8000ffc:	40002800 	.word	0x40002800

08001000 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001000:	b590      	push	{r4, r7, lr}
 8001002:	b091      	sub	sp, #68	@ 0x44
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001008:	240c      	movs	r4, #12
 800100a:	193b      	adds	r3, r7, r4
 800100c:	0018      	movs	r0, r3
 800100e:	2334      	movs	r3, #52	@ 0x34
 8001010:	001a      	movs	r2, r3
 8001012:	2100      	movs	r1, #0
 8001014:	f004 fe32 	bl	8005c7c <memset>
  if(rtcHandle->Instance==RTC)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a15      	ldr	r2, [pc, #84]	@ (8001074 <HAL_RTC_MspInit+0x74>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d124      	bne.n	800106c <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001022:	193b      	adds	r3, r7, r4
 8001024:	2280      	movs	r2, #128	@ 0x80
 8001026:	0292      	lsls	r2, r2, #10
 8001028:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800102a:	193b      	adds	r3, r7, r4
 800102c:	2280      	movs	r2, #128	@ 0x80
 800102e:	0092      	lsls	r2, r2, #2
 8001030:	631a      	str	r2, [r3, #48]	@ 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001032:	193b      	adds	r3, r7, r4
 8001034:	0018      	movs	r0, r3
 8001036:	f001 ffc1 	bl	8002fbc <HAL_RCCEx_PeriphCLKConfig>
 800103a:	1e03      	subs	r3, r0, #0
 800103c:	d001      	beq.n	8001042 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800103e:	f7ff ffa0 	bl	8000f82 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001042:	4b0d      	ldr	r3, [pc, #52]	@ (8001078 <HAL_RTC_MspInit+0x78>)
 8001044:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001046:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <HAL_RTC_MspInit+0x78>)
 8001048:	2180      	movs	r1, #128	@ 0x80
 800104a:	0209      	lsls	r1, r1, #8
 800104c:	430a      	orrs	r2, r1
 800104e:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001050:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <HAL_RTC_MspInit+0x78>)
 8001052:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001054:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <HAL_RTC_MspInit+0x78>)
 8001056:	2180      	movs	r1, #128	@ 0x80
 8001058:	00c9      	lsls	r1, r1, #3
 800105a:	430a      	orrs	r2, r1
 800105c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <HAL_RTC_MspInit+0x78>)
 8001060:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001062:	2380      	movs	r3, #128	@ 0x80
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	4013      	ands	r3, r2
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800106c:	46c0      	nop			@ (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	b011      	add	sp, #68	@ 0x44
 8001072:	bd90      	pop	{r4, r7, pc}
 8001074:	40002800 	.word	0x40002800
 8001078:	40021000 	.word	0x40021000

0800107c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001082:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <HAL_MspInit+0x44>)
 8001084:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001086:	4b0e      	ldr	r3, [pc, #56]	@ (80010c0 <HAL_MspInit+0x44>)
 8001088:	2101      	movs	r1, #1
 800108a:	430a      	orrs	r2, r1
 800108c:	641a      	str	r2, [r3, #64]	@ 0x40
 800108e:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <HAL_MspInit+0x44>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001092:	2201      	movs	r2, #1
 8001094:	4013      	ands	r3, r2
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <HAL_MspInit+0x44>)
 800109c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800109e:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <HAL_MspInit+0x44>)
 80010a0:	2180      	movs	r1, #128	@ 0x80
 80010a2:	0549      	lsls	r1, r1, #21
 80010a4:	430a      	orrs	r2, r1
 80010a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010a8:	4b05      	ldr	r3, [pc, #20]	@ (80010c0 <HAL_MspInit+0x44>)
 80010aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010ac:	2380      	movs	r3, #128	@ 0x80
 80010ae:	055b      	lsls	r3, r3, #21
 80010b0:	4013      	ands	r3, r2
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b6:	46c0      	nop			@ (mov r8, r8)
 80010b8:	46bd      	mov	sp, r7
 80010ba:	b002      	add	sp, #8
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	46c0      	nop			@ (mov r8, r8)
 80010c0:	40021000 	.word	0x40021000

080010c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010c8:	46c0      	nop			@ (mov r8, r8)
 80010ca:	e7fd      	b.n	80010c8 <NMI_Handler+0x4>

080010cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d0:	46c0      	nop			@ (mov r8, r8)
 80010d2:	e7fd      	b.n	80010d0 <HardFault_Handler+0x4>

080010d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010d8:	46c0      	nop			@ (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e2:	46c0      	nop			@ (mov r8, r8)
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ec:	f7ff fc54 	bl	8000998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f0:	46c0      	nop			@ (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010fc:	4b03      	ldr	r3, [pc, #12]	@ (800110c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80010fe:	0018      	movs	r0, r3
 8001100:	f002 fce0 	bl	8003ac4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001104:	46c0      	nop			@ (mov r8, r8)
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	46c0      	nop			@ (mov r8, r8)
 800110c:	20000154 	.word	0x20000154

08001110 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001114:	4b03      	ldr	r3, [pc, #12]	@ (8001124 <TIM1_CC_IRQHandler+0x14>)
 8001116:	0018      	movs	r0, r3
 8001118:	f002 fcd4 	bl	8003ac4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800111c:	46c0      	nop			@ (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	46c0      	nop			@ (mov r8, r8)
 8001124:	20000154 	.word	0x20000154

08001128 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800112c:	4b03      	ldr	r3, [pc, #12]	@ (800113c <TIM14_IRQHandler+0x14>)
 800112e:	0018      	movs	r0, r3
 8001130:	f002 fcc8 	bl	8003ac4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001134:	46c0      	nop			@ (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	46c0      	nop			@ (mov r8, r8)
 800113c:	20000238 	.word	0x20000238

08001140 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	e00a      	b.n	8001168 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001152:	f7ff fc11 	bl	8000978 <__io_getchar>
 8001156:	0001      	movs	r1, r0
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	1c5a      	adds	r2, r3, #1
 800115c:	60ba      	str	r2, [r7, #8]
 800115e:	b2ca      	uxtb	r2, r1
 8001160:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	3301      	adds	r3, #1
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	429a      	cmp	r2, r3
 800116e:	dbf0      	blt.n	8001152 <_read+0x12>
  }

  return len;
 8001170:	687b      	ldr	r3, [r7, #4]
}
 8001172:	0018      	movs	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	b006      	add	sp, #24
 8001178:	bd80      	pop	{r7, pc}

0800117a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b086      	sub	sp, #24
 800117e:	af00      	add	r7, sp, #0
 8001180:	60f8      	str	r0, [r7, #12]
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	e009      	b.n	80011a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	60ba      	str	r2, [r7, #8]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	0018      	movs	r0, r3
 8001196:	f7ff fbdb 	bl	8000950 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	3301      	adds	r3, #1
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	dbf1      	blt.n	800118c <_write+0x12>
  }
  return len;
 80011a8:	687b      	ldr	r3, [r7, #4]
}
 80011aa:	0018      	movs	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	b006      	add	sp, #24
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <_close>:

int _close(int file)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011ba:	2301      	movs	r3, #1
 80011bc:	425b      	negs	r3, r3
}
 80011be:	0018      	movs	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b002      	add	sp, #8
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	2280      	movs	r2, #128	@ 0x80
 80011d4:	0192      	lsls	r2, r2, #6
 80011d6:	605a      	str	r2, [r3, #4]
  return 0;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	0018      	movs	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	b002      	add	sp, #8
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <_isatty>:

int _isatty(int file)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011ea:	2301      	movs	r3, #1
}
 80011ec:	0018      	movs	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b002      	add	sp, #8
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001200:	2300      	movs	r3, #0
}
 8001202:	0018      	movs	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	b004      	add	sp, #16
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001214:	4a14      	ldr	r2, [pc, #80]	@ (8001268 <_sbrk+0x5c>)
 8001216:	4b15      	ldr	r3, [pc, #84]	@ (800126c <_sbrk+0x60>)
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001220:	4b13      	ldr	r3, [pc, #76]	@ (8001270 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d102      	bne.n	800122e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001228:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <_sbrk+0x64>)
 800122a:	4a12      	ldr	r2, [pc, #72]	@ (8001274 <_sbrk+0x68>)
 800122c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800122e:	4b10      	ldr	r3, [pc, #64]	@ (8001270 <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	18d3      	adds	r3, r2, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	429a      	cmp	r2, r3
 800123a:	d207      	bcs.n	800124c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800123c:	f004 fd74 	bl	8005d28 <__errno>
 8001240:	0003      	movs	r3, r0
 8001242:	220c      	movs	r2, #12
 8001244:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001246:	2301      	movs	r3, #1
 8001248:	425b      	negs	r3, r3
 800124a:	e009      	b.n	8001260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800124c:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <_sbrk+0x64>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001252:	4b07      	ldr	r3, [pc, #28]	@ (8001270 <_sbrk+0x64>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	18d2      	adds	r2, r2, r3
 800125a:	4b05      	ldr	r3, [pc, #20]	@ (8001270 <_sbrk+0x64>)
 800125c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800125e:	68fb      	ldr	r3, [r7, #12]
}
 8001260:	0018      	movs	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	b006      	add	sp, #24
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20009000 	.word	0x20009000
 800126c:	00000400 	.word	0x00000400
 8001270:	20000150 	.word	0x20000150
 8001274:	20000500 	.word	0x20000500

08001278 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800127c:	46c0      	nop			@ (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b09c      	sub	sp, #112	@ 0x70
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128a:	2360      	movs	r3, #96	@ 0x60
 800128c:	18fb      	adds	r3, r7, r3
 800128e:	0018      	movs	r0, r3
 8001290:	2310      	movs	r3, #16
 8001292:	001a      	movs	r2, r3
 8001294:	2100      	movs	r1, #0
 8001296:	f004 fcf1 	bl	8005c7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129a:	2354      	movs	r3, #84	@ 0x54
 800129c:	18fb      	adds	r3, r7, r3
 800129e:	0018      	movs	r0, r3
 80012a0:	230c      	movs	r3, #12
 80012a2:	001a      	movs	r2, r3
 80012a4:	2100      	movs	r1, #0
 80012a6:	f004 fce9 	bl	8005c7c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012aa:	2338      	movs	r3, #56	@ 0x38
 80012ac:	18fb      	adds	r3, r7, r3
 80012ae:	0018      	movs	r0, r3
 80012b0:	231c      	movs	r3, #28
 80012b2:	001a      	movs	r2, r3
 80012b4:	2100      	movs	r1, #0
 80012b6:	f004 fce1 	bl	8005c7c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	0018      	movs	r0, r3
 80012be:	2334      	movs	r3, #52	@ 0x34
 80012c0:	001a      	movs	r2, r3
 80012c2:	2100      	movs	r1, #0
 80012c4:	f004 fcda 	bl	8005c7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012c8:	4b5a      	ldr	r3, [pc, #360]	@ (8001434 <MX_TIM1_Init+0x1b0>)
 80012ca:	4a5b      	ldr	r2, [pc, #364]	@ (8001438 <MX_TIM1_Init+0x1b4>)
 80012cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 25;
 80012ce:	4b59      	ldr	r3, [pc, #356]	@ (8001434 <MX_TIM1_Init+0x1b0>)
 80012d0:	2219      	movs	r2, #25
 80012d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d4:	4b57      	ldr	r3, [pc, #348]	@ (8001434 <MX_TIM1_Init+0x1b0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80012da:	4b56      	ldr	r3, [pc, #344]	@ (8001434 <MX_TIM1_Init+0x1b0>)
 80012dc:	2263      	movs	r2, #99	@ 0x63
 80012de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e0:	4b54      	ldr	r3, [pc, #336]	@ (8001434 <MX_TIM1_Init+0x1b0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012e6:	4b53      	ldr	r3, [pc, #332]	@ (8001434 <MX_TIM1_Init+0x1b0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ec:	4b51      	ldr	r3, [pc, #324]	@ (8001434 <MX_TIM1_Init+0x1b0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012f2:	4b50      	ldr	r3, [pc, #320]	@ (8001434 <MX_TIM1_Init+0x1b0>)
 80012f4:	0018      	movs	r0, r3
 80012f6:	f002 f9e3 	bl	80036c0 <HAL_TIM_Base_Init>
 80012fa:	1e03      	subs	r3, r0, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80012fe:	f7ff fe40 	bl	8000f82 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001302:	2160      	movs	r1, #96	@ 0x60
 8001304:	187b      	adds	r3, r7, r1
 8001306:	2280      	movs	r2, #128	@ 0x80
 8001308:	0152      	lsls	r2, r2, #5
 800130a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800130c:	187a      	adds	r2, r7, r1
 800130e:	4b49      	ldr	r3, [pc, #292]	@ (8001434 <MX_TIM1_Init+0x1b0>)
 8001310:	0011      	movs	r1, r2
 8001312:	0018      	movs	r0, r3
 8001314:	f002 fe3e 	bl	8003f94 <HAL_TIM_ConfigClockSource>
 8001318:	1e03      	subs	r3, r0, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800131c:	f7ff fe31 	bl	8000f82 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001320:	4b44      	ldr	r3, [pc, #272]	@ (8001434 <MX_TIM1_Init+0x1b0>)
 8001322:	0018      	movs	r0, r3
 8001324:	f002 fa84 	bl	8003830 <HAL_TIM_PWM_Init>
 8001328:	1e03      	subs	r3, r0, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800132c:	f7ff fe29 	bl	8000f82 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001330:	2154      	movs	r1, #84	@ 0x54
 8001332:	187b      	adds	r3, r7, r1
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001338:	187b      	adds	r3, r7, r1
 800133a:	2200      	movs	r2, #0
 800133c:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133e:	187b      	adds	r3, r7, r1
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001344:	187a      	adds	r2, r7, r1
 8001346:	4b3b      	ldr	r3, [pc, #236]	@ (8001434 <MX_TIM1_Init+0x1b0>)
 8001348:	0011      	movs	r1, r2
 800134a:	0018      	movs	r0, r3
 800134c:	f003 fbce 	bl	8004aec <HAL_TIMEx_MasterConfigSynchronization>
 8001350:	1e03      	subs	r3, r0, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001354:	f7ff fe15 	bl	8000f82 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001358:	2138      	movs	r1, #56	@ 0x38
 800135a:	187b      	adds	r3, r7, r1
 800135c:	2260      	movs	r2, #96	@ 0x60
 800135e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = pulse_width_MC_OUT_PWM_0;
 8001360:	4b36      	ldr	r3, [pc, #216]	@ (800143c <MX_TIM1_Init+0x1b8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	001a      	movs	r2, r3
 8001366:	187b      	adds	r3, r7, r1
 8001368:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800136a:	187b      	adds	r3, r7, r1
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001370:	187b      	adds	r3, r7, r1
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001376:	187b      	adds	r3, r7, r1
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800137c:	187b      	adds	r3, r7, r1
 800137e:	2200      	movs	r2, #0
 8001380:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001382:	187b      	adds	r3, r7, r1
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001388:	1879      	adds	r1, r7, r1
 800138a:	4b2a      	ldr	r3, [pc, #168]	@ (8001434 <MX_TIM1_Init+0x1b0>)
 800138c:	2204      	movs	r2, #4
 800138e:	0018      	movs	r0, r3
 8001390:	f002 fd00 	bl	8003d94 <HAL_TIM_PWM_ConfigChannel>
 8001394:	1e03      	subs	r3, r0, #0
 8001396:	d001      	beq.n	800139c <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001398:	f7ff fdf3 	bl	8000f82 <Error_Handler>
  }
  sConfigOC.Pulse = pulse_width_MC_OUT_PWM_3;
 800139c:	4b28      	ldr	r3, [pc, #160]	@ (8001440 <MX_TIM1_Init+0x1bc>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	001a      	movs	r2, r3
 80013a2:	2138      	movs	r1, #56	@ 0x38
 80013a4:	187b      	adds	r3, r7, r1
 80013a6:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013a8:	1879      	adds	r1, r7, r1
 80013aa:	4b22      	ldr	r3, [pc, #136]	@ (8001434 <MX_TIM1_Init+0x1b0>)
 80013ac:	2208      	movs	r2, #8
 80013ae:	0018      	movs	r0, r3
 80013b0:	f002 fcf0 	bl	8003d94 <HAL_TIM_PWM_ConfigChannel>
 80013b4:	1e03      	subs	r3, r0, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80013b8:	f7ff fde3 	bl	8000f82 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2200      	movs	r2, #0
 80013c6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2200      	movs	r2, #0
 80013d2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2280      	movs	r2, #128	@ 0x80
 80013de:	0192      	lsls	r2, r2, #6
 80013e0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2200      	movs	r2, #0
 80013f2:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	2280      	movs	r2, #128	@ 0x80
 80013f8:	0492      	lsls	r2, r2, #18
 80013fa:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	2200      	movs	r2, #0
 8001400:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2200      	movs	r2, #0
 8001406:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	2200      	movs	r2, #0
 800140c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800140e:	1d3a      	adds	r2, r7, #4
 8001410:	4b08      	ldr	r3, [pc, #32]	@ (8001434 <MX_TIM1_Init+0x1b0>)
 8001412:	0011      	movs	r1, r2
 8001414:	0018      	movs	r0, r3
 8001416:	f003 fbd7 	bl	8004bc8 <HAL_TIMEx_ConfigBreakDeadTime>
 800141a:	1e03      	subs	r3, r0, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM1_Init+0x19e>
  {
    Error_Handler();
 800141e:	f7ff fdb0 	bl	8000f82 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001422:	4b04      	ldr	r3, [pc, #16]	@ (8001434 <MX_TIM1_Init+0x1b0>)
 8001424:	0018      	movs	r0, r3
 8001426:	f000 fb0b 	bl	8001a40 <HAL_TIM_MspPostInit>

}
 800142a:	46c0      	nop			@ (mov r8, r8)
 800142c:	46bd      	mov	sp, r7
 800142e:	b01c      	add	sp, #112	@ 0x70
 8001430:	bd80      	pop	{r7, pc}
 8001432:	46c0      	nop			@ (mov r8, r8)
 8001434:	20000154 	.word	0x20000154
 8001438:	40012c00 	.word	0x40012c00
 800143c:	2000001c 	.word	0x2000001c
 8001440:	20000028 	.word	0x20000028

08001444 <MX_TIM2_Init>:
/*TIM2 init function */
void MX_TIM2_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08e      	sub	sp, #56	@ 0x38
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144a:	2328      	movs	r3, #40	@ 0x28
 800144c:	18fb      	adds	r3, r7, r3
 800144e:	0018      	movs	r0, r3
 8001450:	2310      	movs	r3, #16
 8001452:	001a      	movs	r2, r3
 8001454:	2100      	movs	r1, #0
 8001456:	f004 fc11 	bl	8005c7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145a:	231c      	movs	r3, #28
 800145c:	18fb      	adds	r3, r7, r3
 800145e:	0018      	movs	r0, r3
 8001460:	230c      	movs	r3, #12
 8001462:	001a      	movs	r2, r3
 8001464:	2100      	movs	r1, #0
 8001466:	f004 fc09 	bl	8005c7c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800146a:	003b      	movs	r3, r7
 800146c:	0018      	movs	r0, r3
 800146e:	231c      	movs	r3, #28
 8001470:	001a      	movs	r2, r3
 8001472:	2100      	movs	r1, #0
 8001474:	f004 fc02 	bl	8005c7c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001478:	4b35      	ldr	r3, [pc, #212]	@ (8001550 <MX_TIM2_Init+0x10c>)
 800147a:	2280      	movs	r2, #128	@ 0x80
 800147c:	05d2      	lsls	r2, r2, #23
 800147e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8001480:	4b33      	ldr	r3, [pc, #204]	@ (8001550 <MX_TIM2_Init+0x10c>)
 8001482:	223f      	movs	r2, #63	@ 0x3f
 8001484:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001486:	4b32      	ldr	r3, [pc, #200]	@ (8001550 <MX_TIM2_Init+0x10c>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800148c:	4b30      	ldr	r3, [pc, #192]	@ (8001550 <MX_TIM2_Init+0x10c>)
 800148e:	2201      	movs	r2, #1
 8001490:	4252      	negs	r2, r2
 8001492:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001494:	4b2e      	ldr	r3, [pc, #184]	@ (8001550 <MX_TIM2_Init+0x10c>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149a:	4b2d      	ldr	r3, [pc, #180]	@ (8001550 <MX_TIM2_Init+0x10c>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001550 <MX_TIM2_Init+0x10c>)
 80014a2:	0018      	movs	r0, r3
 80014a4:	f002 f90c 	bl	80036c0 <HAL_TIM_Base_Init>
 80014a8:	1e03      	subs	r3, r0, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80014ac:	f7ff fd69 	bl	8000f82 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b0:	2128      	movs	r1, #40	@ 0x28
 80014b2:	187b      	adds	r3, r7, r1
 80014b4:	2280      	movs	r2, #128	@ 0x80
 80014b6:	0152      	lsls	r2, r2, #5
 80014b8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014ba:	187a      	adds	r2, r7, r1
 80014bc:	4b24      	ldr	r3, [pc, #144]	@ (8001550 <MX_TIM2_Init+0x10c>)
 80014be:	0011      	movs	r1, r2
 80014c0:	0018      	movs	r0, r3
 80014c2:	f002 fd67 	bl	8003f94 <HAL_TIM_ConfigClockSource>
 80014c6:	1e03      	subs	r3, r0, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80014ca:	f7ff fd5a 	bl	8000f82 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80014ce:	4b20      	ldr	r3, [pc, #128]	@ (8001550 <MX_TIM2_Init+0x10c>)
 80014d0:	0018      	movs	r0, r3
 80014d2:	f002 f94d 	bl	8003770 <HAL_TIM_OC_Init>
 80014d6:	1e03      	subs	r3, r0, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80014da:	f7ff fd52 	bl	8000f82 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014de:	211c      	movs	r1, #28
 80014e0:	187b      	adds	r3, r7, r1
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e6:	187b      	adds	r3, r7, r1
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ec:	187a      	adds	r2, r7, r1
 80014ee:	4b18      	ldr	r3, [pc, #96]	@ (8001550 <MX_TIM2_Init+0x10c>)
 80014f0:	0011      	movs	r1, r2
 80014f2:	0018      	movs	r0, r3
 80014f4:	f003 fafa 	bl	8004aec <HAL_TIMEx_MasterConfigSynchronization>
 80014f8:	1e03      	subs	r3, r0, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80014fc:	f7ff fd41 	bl	8000f82 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001500:	003b      	movs	r3, r7
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 3000000;
 8001506:	003b      	movs	r3, r7
 8001508:	4a12      	ldr	r2, [pc, #72]	@ (8001554 <MX_TIM2_Init+0x110>)
 800150a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800150c:	003b      	movs	r3, r7
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001512:	003b      	movs	r3, r7
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001518:	0039      	movs	r1, r7
 800151a:	4b0d      	ldr	r3, [pc, #52]	@ (8001550 <MX_TIM2_Init+0x10c>)
 800151c:	2200      	movs	r2, #0
 800151e:	0018      	movs	r0, r3
 8001520:	f002 fbd8 	bl	8003cd4 <HAL_TIM_OC_ConfigChannel>
 8001524:	1e03      	subs	r3, r0, #0
 8001526:	d001      	beq.n	800152c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001528:	f7ff fd2b 	bl	8000f82 <Error_Handler>
  }
  sConfigOC.Pulse = 35000000;
 800152c:	003b      	movs	r3, r7
 800152e:	4a0a      	ldr	r2, [pc, #40]	@ (8001558 <MX_TIM2_Init+0x114>)
 8001530:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001532:	0039      	movs	r1, r7
 8001534:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <MX_TIM2_Init+0x10c>)
 8001536:	2204      	movs	r2, #4
 8001538:	0018      	movs	r0, r3
 800153a:	f002 fbcb 	bl	8003cd4 <HAL_TIM_OC_ConfigChannel>
 800153e:	1e03      	subs	r3, r0, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 8001542:	f7ff fd1e 	bl	8000f82 <Error_Handler>
  }
}
 8001546:	46c0      	nop			@ (mov r8, r8)
 8001548:	46bd      	mov	sp, r7
 800154a:	b00e      	add	sp, #56	@ 0x38
 800154c:	bd80      	pop	{r7, pc}
 800154e:	46c0      	nop			@ (mov r8, r8)
 8001550:	200001a0 	.word	0x200001a0
 8001554:	002dc6c0 	.word	0x002dc6c0
 8001558:	02160ec0 	.word	0x02160ec0

0800155c <MX_TIM3_Init>:
/* TIM3 init function */

void MX_TIM3_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08e      	sub	sp, #56	@ 0x38
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001562:	2328      	movs	r3, #40	@ 0x28
 8001564:	18fb      	adds	r3, r7, r3
 8001566:	0018      	movs	r0, r3
 8001568:	2310      	movs	r3, #16
 800156a:	001a      	movs	r2, r3
 800156c:	2100      	movs	r1, #0
 800156e:	f004 fb85 	bl	8005c7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001572:	231c      	movs	r3, #28
 8001574:	18fb      	adds	r3, r7, r3
 8001576:	0018      	movs	r0, r3
 8001578:	230c      	movs	r3, #12
 800157a:	001a      	movs	r2, r3
 800157c:	2100      	movs	r1, #0
 800157e:	f004 fb7d 	bl	8005c7c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001582:	003b      	movs	r3, r7
 8001584:	0018      	movs	r0, r3
 8001586:	231c      	movs	r3, #28
 8001588:	001a      	movs	r2, r3
 800158a:	2100      	movs	r1, #0
 800158c:	f004 fb76 	bl	8005c7c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001590:	4b38      	ldr	r3, [pc, #224]	@ (8001674 <MX_TIM3_Init+0x118>)
 8001592:	4a39      	ldr	r2, [pc, #228]	@ (8001678 <MX_TIM3_Init+0x11c>)
 8001594:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 25;
 8001596:	4b37      	ldr	r3, [pc, #220]	@ (8001674 <MX_TIM3_Init+0x118>)
 8001598:	2219      	movs	r2, #25
 800159a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159c:	4b35      	ldr	r3, [pc, #212]	@ (8001674 <MX_TIM3_Init+0x118>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80015a2:	4b34      	ldr	r3, [pc, #208]	@ (8001674 <MX_TIM3_Init+0x118>)
 80015a4:	2263      	movs	r2, #99	@ 0x63
 80015a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a8:	4b32      	ldr	r3, [pc, #200]	@ (8001674 <MX_TIM3_Init+0x118>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ae:	4b31      	ldr	r3, [pc, #196]	@ (8001674 <MX_TIM3_Init+0x118>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001674 <MX_TIM3_Init+0x118>)
 80015b6:	0018      	movs	r0, r3
 80015b8:	f002 f882 	bl	80036c0 <HAL_TIM_Base_Init>
 80015bc:	1e03      	subs	r3, r0, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80015c0:	f7ff fcdf 	bl	8000f82 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c4:	2128      	movs	r1, #40	@ 0x28
 80015c6:	187b      	adds	r3, r7, r1
 80015c8:	2280      	movs	r2, #128	@ 0x80
 80015ca:	0152      	lsls	r2, r2, #5
 80015cc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015ce:	187a      	adds	r2, r7, r1
 80015d0:	4b28      	ldr	r3, [pc, #160]	@ (8001674 <MX_TIM3_Init+0x118>)
 80015d2:	0011      	movs	r1, r2
 80015d4:	0018      	movs	r0, r3
 80015d6:	f002 fcdd 	bl	8003f94 <HAL_TIM_ConfigClockSource>
 80015da:	1e03      	subs	r3, r0, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80015de:	f7ff fcd0 	bl	8000f82 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015e2:	4b24      	ldr	r3, [pc, #144]	@ (8001674 <MX_TIM3_Init+0x118>)
 80015e4:	0018      	movs	r0, r3
 80015e6:	f002 f923 	bl	8003830 <HAL_TIM_PWM_Init>
 80015ea:	1e03      	subs	r3, r0, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80015ee:	f7ff fcc8 	bl	8000f82 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f2:	211c      	movs	r1, #28
 80015f4:	187b      	adds	r3, r7, r1
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fa:	187b      	adds	r3, r7, r1
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001600:	187a      	adds	r2, r7, r1
 8001602:	4b1c      	ldr	r3, [pc, #112]	@ (8001674 <MX_TIM3_Init+0x118>)
 8001604:	0011      	movs	r1, r2
 8001606:	0018      	movs	r0, r3
 8001608:	f003 fa70 	bl	8004aec <HAL_TIMEx_MasterConfigSynchronization>
 800160c:	1e03      	subs	r3, r0, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8001610:	f7ff fcb7 	bl	8000f82 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001614:	003b      	movs	r3, r7
 8001616:	2260      	movs	r2, #96	@ 0x60
 8001618:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = pulse_width_MC_OUT_PWM_1;
 800161a:	4b18      	ldr	r3, [pc, #96]	@ (800167c <MX_TIM3_Init+0x120>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	001a      	movs	r2, r3
 8001620:	003b      	movs	r3, r7
 8001622:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001624:	003b      	movs	r3, r7
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800162a:	003b      	movs	r3, r7
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001630:	0039      	movs	r1, r7
 8001632:	4b10      	ldr	r3, [pc, #64]	@ (8001674 <MX_TIM3_Init+0x118>)
 8001634:	2200      	movs	r2, #0
 8001636:	0018      	movs	r0, r3
 8001638:	f002 fbac 	bl	8003d94 <HAL_TIM_PWM_ConfigChannel>
 800163c:	1e03      	subs	r3, r0, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 8001640:	f7ff fc9f 	bl	8000f82 <Error_Handler>
  }
  sConfigOC.Pulse = pulse_width_MC_OUT_PWM_2;
 8001644:	4b0e      	ldr	r3, [pc, #56]	@ (8001680 <MX_TIM3_Init+0x124>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	001a      	movs	r2, r3
 800164a:	003b      	movs	r3, r7
 800164c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800164e:	0039      	movs	r1, r7
 8001650:	4b08      	ldr	r3, [pc, #32]	@ (8001674 <MX_TIM3_Init+0x118>)
 8001652:	2204      	movs	r2, #4
 8001654:	0018      	movs	r0, r3
 8001656:	f002 fb9d 	bl	8003d94 <HAL_TIM_PWM_ConfigChannel>
 800165a:	1e03      	subs	r3, r0, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 800165e:	f7ff fc90 	bl	8000f82 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001662:	4b04      	ldr	r3, [pc, #16]	@ (8001674 <MX_TIM3_Init+0x118>)
 8001664:	0018      	movs	r0, r3
 8001666:	f000 f9eb 	bl	8001a40 <HAL_TIM_MspPostInit>

}
 800166a:	46c0      	nop			@ (mov r8, r8)
 800166c:	46bd      	mov	sp, r7
 800166e:	b00e      	add	sp, #56	@ 0x38
 8001670:	bd80      	pop	{r7, pc}
 8001672:	46c0      	nop			@ (mov r8, r8)
 8001674:	200001ec 	.word	0x200001ec
 8001678:	40000400 	.word	0x40000400
 800167c:	20000020 	.word	0x20000020
 8001680:	20000024 	.word	0x20000024

08001684 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001688:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <MX_TIM14_Init+0x40>)
 800168a:	4a0f      	ldr	r2, [pc, #60]	@ (80016c8 <MX_TIM14_Init+0x44>)
 800168c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 15999;
 800168e:	4b0d      	ldr	r3, [pc, #52]	@ (80016c4 <MX_TIM14_Init+0x40>)
 8001690:	4a0e      	ldr	r2, [pc, #56]	@ (80016cc <MX_TIM14_Init+0x48>)
 8001692:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001694:	4b0b      	ldr	r3, [pc, #44]	@ (80016c4 <MX_TIM14_Init+0x40>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 800169a:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <MX_TIM14_Init+0x40>)
 800169c:	2263      	movs	r2, #99	@ 0x63
 800169e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a0:	4b08      	ldr	r3, [pc, #32]	@ (80016c4 <MX_TIM14_Init+0x40>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a6:	4b07      	ldr	r3, [pc, #28]	@ (80016c4 <MX_TIM14_Init+0x40>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80016ac:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <MX_TIM14_Init+0x40>)
 80016ae:	0018      	movs	r0, r3
 80016b0:	f002 f806 	bl	80036c0 <HAL_TIM_Base_Init>
 80016b4:	1e03      	subs	r3, r0, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80016b8:	f7ff fc63 	bl	8000f82 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80016bc:	46c0      	nop			@ (mov r8, r8)
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	46c0      	nop			@ (mov r8, r8)
 80016c4:	20000238 	.word	0x20000238
 80016c8:	40002000 	.word	0x40002000
 80016cc:	00003e7f 	.word	0x00003e7f

080016d0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b094      	sub	sp, #80	@ 0x50
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80016d6:	2334      	movs	r3, #52	@ 0x34
 80016d8:	18fb      	adds	r3, r7, r3
 80016da:	0018      	movs	r0, r3
 80016dc:	231c      	movs	r3, #28
 80016de:	001a      	movs	r2, r3
 80016e0:	2100      	movs	r1, #0
 80016e2:	f004 facb 	bl	8005c7c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016e6:	003b      	movs	r3, r7
 80016e8:	0018      	movs	r0, r3
 80016ea:	2334      	movs	r3, #52	@ 0x34
 80016ec:	001a      	movs	r2, r3
 80016ee:	2100      	movs	r1, #0
 80016f0:	f004 fac4 	bl	8005c7c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80016f4:	4b38      	ldr	r3, [pc, #224]	@ (80017d8 <MX_TIM16_Init+0x108>)
 80016f6:	4a39      	ldr	r2, [pc, #228]	@ (80017dc <MX_TIM16_Init+0x10c>)
 80016f8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 25;
 80016fa:	4b37      	ldr	r3, [pc, #220]	@ (80017d8 <MX_TIM16_Init+0x108>)
 80016fc:	2219      	movs	r2, #25
 80016fe:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001700:	4b35      	ldr	r3, [pc, #212]	@ (80017d8 <MX_TIM16_Init+0x108>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 99;
 8001706:	4b34      	ldr	r3, [pc, #208]	@ (80017d8 <MX_TIM16_Init+0x108>)
 8001708:	2263      	movs	r2, #99	@ 0x63
 800170a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170c:	4b32      	ldr	r3, [pc, #200]	@ (80017d8 <MX_TIM16_Init+0x108>)
 800170e:	2200      	movs	r2, #0
 8001710:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001712:	4b31      	ldr	r3, [pc, #196]	@ (80017d8 <MX_TIM16_Init+0x108>)
 8001714:	2200      	movs	r2, #0
 8001716:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001718:	4b2f      	ldr	r3, [pc, #188]	@ (80017d8 <MX_TIM16_Init+0x108>)
 800171a:	2200      	movs	r2, #0
 800171c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800171e:	4b2e      	ldr	r3, [pc, #184]	@ (80017d8 <MX_TIM16_Init+0x108>)
 8001720:	0018      	movs	r0, r3
 8001722:	f001 ffcd 	bl	80036c0 <HAL_TIM_Base_Init>
 8001726:	1e03      	subs	r3, r0, #0
 8001728:	d001      	beq.n	800172e <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 800172a:	f7ff fc2a 	bl	8000f82 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800172e:	4b2a      	ldr	r3, [pc, #168]	@ (80017d8 <MX_TIM16_Init+0x108>)
 8001730:	0018      	movs	r0, r3
 8001732:	f002 f87d 	bl	8003830 <HAL_TIM_PWM_Init>
 8001736:	1e03      	subs	r3, r0, #0
 8001738:	d001      	beq.n	800173e <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 800173a:	f7ff fc22 	bl	8000f82 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800173e:	2134      	movs	r1, #52	@ 0x34
 8001740:	187b      	adds	r3, r7, r1
 8001742:	2260      	movs	r2, #96	@ 0x60
 8001744:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = pulse_width_MC_OUT_PWM_5;
 8001746:	4b26      	ldr	r3, [pc, #152]	@ (80017e0 <MX_TIM16_Init+0x110>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	001a      	movs	r2, r3
 800174c:	187b      	adds	r3, r7, r1
 800174e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001750:	187b      	adds	r3, r7, r1
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001756:	187b      	adds	r3, r7, r1
 8001758:	2200      	movs	r2, #0
 800175a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800175c:	187b      	adds	r3, r7, r1
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001762:	187b      	adds	r3, r7, r1
 8001764:	2200      	movs	r2, #0
 8001766:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001768:	187b      	adds	r3, r7, r1
 800176a:	2200      	movs	r2, #0
 800176c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800176e:	1879      	adds	r1, r7, r1
 8001770:	4b19      	ldr	r3, [pc, #100]	@ (80017d8 <MX_TIM16_Init+0x108>)
 8001772:	2200      	movs	r2, #0
 8001774:	0018      	movs	r0, r3
 8001776:	f002 fb0d 	bl	8003d94 <HAL_TIM_PWM_ConfigChannel>
 800177a:	1e03      	subs	r3, r0, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM16_Init+0xb2>
  {
    Error_Handler();
 800177e:	f7ff fc00 	bl	8000f82 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001782:	003b      	movs	r3, r7
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001788:	003b      	movs	r3, r7
 800178a:	2200      	movs	r2, #0
 800178c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800178e:	003b      	movs	r3, r7
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001794:	003b      	movs	r3, r7
 8001796:	2200      	movs	r2, #0
 8001798:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800179a:	003b      	movs	r3, r7
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017a0:	003b      	movs	r3, r7
 80017a2:	2280      	movs	r2, #128	@ 0x80
 80017a4:	0192      	lsls	r2, r2, #6
 80017a6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017a8:	003b      	movs	r3, r7
 80017aa:	2200      	movs	r2, #0
 80017ac:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017ae:	003b      	movs	r3, r7
 80017b0:	2200      	movs	r2, #0
 80017b2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80017b4:	003a      	movs	r2, r7
 80017b6:	4b08      	ldr	r3, [pc, #32]	@ (80017d8 <MX_TIM16_Init+0x108>)
 80017b8:	0011      	movs	r1, r2
 80017ba:	0018      	movs	r0, r3
 80017bc:	f003 fa04 	bl	8004bc8 <HAL_TIMEx_ConfigBreakDeadTime>
 80017c0:	1e03      	subs	r3, r0, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM16_Init+0xf8>
  {
    Error_Handler();
 80017c4:	f7ff fbdd 	bl	8000f82 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80017c8:	4b03      	ldr	r3, [pc, #12]	@ (80017d8 <MX_TIM16_Init+0x108>)
 80017ca:	0018      	movs	r0, r3
 80017cc:	f000 f938 	bl	8001a40 <HAL_TIM_MspPostInit>

}
 80017d0:	46c0      	nop			@ (mov r8, r8)
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b014      	add	sp, #80	@ 0x50
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000284 	.word	0x20000284
 80017dc:	40014400 	.word	0x40014400
 80017e0:	20000030 	.word	0x20000030

080017e4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b094      	sub	sp, #80	@ 0x50
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ea:	2334      	movs	r3, #52	@ 0x34
 80017ec:	18fb      	adds	r3, r7, r3
 80017ee:	0018      	movs	r0, r3
 80017f0:	231c      	movs	r3, #28
 80017f2:	001a      	movs	r2, r3
 80017f4:	2100      	movs	r1, #0
 80017f6:	f004 fa41 	bl	8005c7c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017fa:	003b      	movs	r3, r7
 80017fc:	0018      	movs	r0, r3
 80017fe:	2334      	movs	r3, #52	@ 0x34
 8001800:	001a      	movs	r2, r3
 8001802:	2100      	movs	r1, #0
 8001804:	f004 fa3a 	bl	8005c7c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001808:	4b38      	ldr	r3, [pc, #224]	@ (80018ec <MX_TIM17_Init+0x108>)
 800180a:	4a39      	ldr	r2, [pc, #228]	@ (80018f0 <MX_TIM17_Init+0x10c>)
 800180c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 25;
 800180e:	4b37      	ldr	r3, [pc, #220]	@ (80018ec <MX_TIM17_Init+0x108>)
 8001810:	2219      	movs	r2, #25
 8001812:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001814:	4b35      	ldr	r3, [pc, #212]	@ (80018ec <MX_TIM17_Init+0x108>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 99;
 800181a:	4b34      	ldr	r3, [pc, #208]	@ (80018ec <MX_TIM17_Init+0x108>)
 800181c:	2263      	movs	r2, #99	@ 0x63
 800181e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001820:	4b32      	ldr	r3, [pc, #200]	@ (80018ec <MX_TIM17_Init+0x108>)
 8001822:	2200      	movs	r2, #0
 8001824:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001826:	4b31      	ldr	r3, [pc, #196]	@ (80018ec <MX_TIM17_Init+0x108>)
 8001828:	2200      	movs	r2, #0
 800182a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182c:	4b2f      	ldr	r3, [pc, #188]	@ (80018ec <MX_TIM17_Init+0x108>)
 800182e:	2200      	movs	r2, #0
 8001830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001832:	4b2e      	ldr	r3, [pc, #184]	@ (80018ec <MX_TIM17_Init+0x108>)
 8001834:	0018      	movs	r0, r3
 8001836:	f001 ff43 	bl	80036c0 <HAL_TIM_Base_Init>
 800183a:	1e03      	subs	r3, r0, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800183e:	f7ff fba0 	bl	8000f82 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001842:	4b2a      	ldr	r3, [pc, #168]	@ (80018ec <MX_TIM17_Init+0x108>)
 8001844:	0018      	movs	r0, r3
 8001846:	f001 fff3 	bl	8003830 <HAL_TIM_PWM_Init>
 800184a:	1e03      	subs	r3, r0, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 800184e:	f7ff fb98 	bl	8000f82 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001852:	2134      	movs	r1, #52	@ 0x34
 8001854:	187b      	adds	r3, r7, r1
 8001856:	2260      	movs	r2, #96	@ 0x60
 8001858:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = pulse_width_MC_OUT_PWM_4;
 800185a:	4b26      	ldr	r3, [pc, #152]	@ (80018f4 <MX_TIM17_Init+0x110>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	001a      	movs	r2, r3
 8001860:	187b      	adds	r3, r7, r1
 8001862:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001864:	187b      	adds	r3, r7, r1
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800186a:	187b      	adds	r3, r7, r1
 800186c:	2200      	movs	r2, #0
 800186e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001870:	187b      	adds	r3, r7, r1
 8001872:	2200      	movs	r2, #0
 8001874:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001876:	187b      	adds	r3, r7, r1
 8001878:	2200      	movs	r2, #0
 800187a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800187c:	187b      	adds	r3, r7, r1
 800187e:	2200      	movs	r2, #0
 8001880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001882:	1879      	adds	r1, r7, r1
 8001884:	4b19      	ldr	r3, [pc, #100]	@ (80018ec <MX_TIM17_Init+0x108>)
 8001886:	2200      	movs	r2, #0
 8001888:	0018      	movs	r0, r3
 800188a:	f002 fa83 	bl	8003d94 <HAL_TIM_PWM_ConfigChannel>
 800188e:	1e03      	subs	r3, r0, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM17_Init+0xb2>
  {
    Error_Handler();
 8001892:	f7ff fb76 	bl	8000f82 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001896:	003b      	movs	r3, r7
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800189c:	003b      	movs	r3, r7
 800189e:	2200      	movs	r2, #0
 80018a0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018a2:	003b      	movs	r3, r7
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018a8:	003b      	movs	r3, r7
 80018aa:	2200      	movs	r2, #0
 80018ac:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018ae:	003b      	movs	r3, r7
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018b4:	003b      	movs	r3, r7
 80018b6:	2280      	movs	r2, #128	@ 0x80
 80018b8:	0192      	lsls	r2, r2, #6
 80018ba:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018bc:	003b      	movs	r3, r7
 80018be:	2200      	movs	r2, #0
 80018c0:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018c2:	003b      	movs	r3, r7
 80018c4:	2200      	movs	r2, #0
 80018c6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80018c8:	003a      	movs	r2, r7
 80018ca:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <MX_TIM17_Init+0x108>)
 80018cc:	0011      	movs	r1, r2
 80018ce:	0018      	movs	r0, r3
 80018d0:	f003 f97a 	bl	8004bc8 <HAL_TIMEx_ConfigBreakDeadTime>
 80018d4:	1e03      	subs	r3, r0, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM17_Init+0xf8>
  {
    Error_Handler();
 80018d8:	f7ff fb53 	bl	8000f82 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80018dc:	4b03      	ldr	r3, [pc, #12]	@ (80018ec <MX_TIM17_Init+0x108>)
 80018de:	0018      	movs	r0, r3
 80018e0:	f000 f8ae 	bl	8001a40 <HAL_TIM_MspPostInit>

}
 80018e4:	46c0      	nop			@ (mov r8, r8)
 80018e6:	46bd      	mov	sp, r7
 80018e8:	b014      	add	sp, #80	@ 0x50
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	200002d0 	.word	0x200002d0
 80018f0:	40014800 	.word	0x40014800
 80018f4:	2000002c 	.word	0x2000002c

080018f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018f8:	b590      	push	{r4, r7, lr}
 80018fa:	b095      	sub	sp, #84	@ 0x54
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001900:	241c      	movs	r4, #28
 8001902:	193b      	adds	r3, r7, r4
 8001904:	0018      	movs	r0, r3
 8001906:	2334      	movs	r3, #52	@ 0x34
 8001908:	001a      	movs	r2, r3
 800190a:	2100      	movs	r1, #0
 800190c:	f004 f9b6 	bl	8005c7c <memset>
  if(tim_baseHandle->Instance==TIM1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a44      	ldr	r2, [pc, #272]	@ (8001a28 <HAL_TIM_Base_MspInit+0x130>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d12d      	bne.n	8001976 <HAL_TIM_Base_MspInit+0x7e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800191a:	193b      	adds	r3, r7, r4
 800191c:	2280      	movs	r2, #128	@ 0x80
 800191e:	0392      	lsls	r2, r2, #14
 8001920:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8001922:	193b      	adds	r3, r7, r4
 8001924:	2200      	movs	r2, #0
 8001926:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001928:	193b      	adds	r3, r7, r4
 800192a:	0018      	movs	r0, r3
 800192c:	f001 fb46 	bl	8002fbc <HAL_RCCEx_PeriphCLKConfig>
 8001930:	1e03      	subs	r3, r0, #0
 8001932:	d001      	beq.n	8001938 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8001934:	f7ff fb25 	bl	8000f82 <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001938:	4b3c      	ldr	r3, [pc, #240]	@ (8001a2c <HAL_TIM_Base_MspInit+0x134>)
 800193a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800193c:	4b3b      	ldr	r3, [pc, #236]	@ (8001a2c <HAL_TIM_Base_MspInit+0x134>)
 800193e:	2180      	movs	r1, #128	@ 0x80
 8001940:	0109      	lsls	r1, r1, #4
 8001942:	430a      	orrs	r2, r1
 8001944:	641a      	str	r2, [r3, #64]	@ 0x40
 8001946:	4b39      	ldr	r3, [pc, #228]	@ (8001a2c <HAL_TIM_Base_MspInit+0x134>)
 8001948:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800194a:	2380      	movs	r3, #128	@ 0x80
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	4013      	ands	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
 8001952:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001954:	2200      	movs	r2, #0
 8001956:	2100      	movs	r1, #0
 8001958:	200d      	movs	r0, #13
 800195a:	f000 fb2d 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800195e:	200d      	movs	r0, #13
 8001960:	f000 fb3f 	bl	8001fe2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001964:	2200      	movs	r2, #0
 8001966:	2100      	movs	r1, #0
 8001968:	200e      	movs	r0, #14
 800196a:	f000 fb25 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800196e:	200e      	movs	r0, #14
 8001970:	f000 fb37 	bl	8001fe2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001974:	e054      	b.n	8001a20 <HAL_TIM_Base_MspInit+0x128>
  else if(tim_baseHandle->Instance==TIM3)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a2d      	ldr	r2, [pc, #180]	@ (8001a30 <HAL_TIM_Base_MspInit+0x138>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d10c      	bne.n	800199a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001980:	4b2a      	ldr	r3, [pc, #168]	@ (8001a2c <HAL_TIM_Base_MspInit+0x134>)
 8001982:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001984:	4b29      	ldr	r3, [pc, #164]	@ (8001a2c <HAL_TIM_Base_MspInit+0x134>)
 8001986:	2102      	movs	r1, #2
 8001988:	430a      	orrs	r2, r1
 800198a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800198c:	4b27      	ldr	r3, [pc, #156]	@ (8001a2c <HAL_TIM_Base_MspInit+0x134>)
 800198e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001990:	2202      	movs	r2, #2
 8001992:	4013      	ands	r3, r2
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	697b      	ldr	r3, [r7, #20]
}
 8001998:	e042      	b.n	8001a20 <HAL_TIM_Base_MspInit+0x128>
  else if(tim_baseHandle->Instance==TIM14)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a25      	ldr	r2, [pc, #148]	@ (8001a34 <HAL_TIM_Base_MspInit+0x13c>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d116      	bne.n	80019d2 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80019a4:	4b21      	ldr	r3, [pc, #132]	@ (8001a2c <HAL_TIM_Base_MspInit+0x134>)
 80019a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019a8:	4b20      	ldr	r3, [pc, #128]	@ (8001a2c <HAL_TIM_Base_MspInit+0x134>)
 80019aa:	2180      	movs	r1, #128	@ 0x80
 80019ac:	0209      	lsls	r1, r1, #8
 80019ae:	430a      	orrs	r2, r1
 80019b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80019b2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a2c <HAL_TIM_Base_MspInit+0x134>)
 80019b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019b6:	2380      	movs	r3, #128	@ 0x80
 80019b8:	021b      	lsls	r3, r3, #8
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2100      	movs	r1, #0
 80019c4:	2013      	movs	r0, #19
 80019c6:	f000 faf7 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80019ca:	2013      	movs	r0, #19
 80019cc:	f000 fb09 	bl	8001fe2 <HAL_NVIC_EnableIRQ>
}
 80019d0:	e026      	b.n	8001a20 <HAL_TIM_Base_MspInit+0x128>
  else if(tim_baseHandle->Instance==TIM16)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a18      	ldr	r2, [pc, #96]	@ (8001a38 <HAL_TIM_Base_MspInit+0x140>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d10e      	bne.n	80019fa <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80019dc:	4b13      	ldr	r3, [pc, #76]	@ (8001a2c <HAL_TIM_Base_MspInit+0x134>)
 80019de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019e0:	4b12      	ldr	r3, [pc, #72]	@ (8001a2c <HAL_TIM_Base_MspInit+0x134>)
 80019e2:	2180      	movs	r1, #128	@ 0x80
 80019e4:	0289      	lsls	r1, r1, #10
 80019e6:	430a      	orrs	r2, r1
 80019e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80019ea:	4b10      	ldr	r3, [pc, #64]	@ (8001a2c <HAL_TIM_Base_MspInit+0x134>)
 80019ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019ee:	2380      	movs	r3, #128	@ 0x80
 80019f0:	029b      	lsls	r3, r3, #10
 80019f2:	4013      	ands	r3, r2
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]
}
 80019f8:	e012      	b.n	8001a20 <HAL_TIM_Base_MspInit+0x128>
  else if(tim_baseHandle->Instance==TIM17)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a0f      	ldr	r2, [pc, #60]	@ (8001a3c <HAL_TIM_Base_MspInit+0x144>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d10d      	bne.n	8001a20 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001a04:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <HAL_TIM_Base_MspInit+0x134>)
 8001a06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a08:	4b08      	ldr	r3, [pc, #32]	@ (8001a2c <HAL_TIM_Base_MspInit+0x134>)
 8001a0a:	2180      	movs	r1, #128	@ 0x80
 8001a0c:	02c9      	lsls	r1, r1, #11
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a12:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <HAL_TIM_Base_MspInit+0x134>)
 8001a14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a16:	2380      	movs	r3, #128	@ 0x80
 8001a18:	02db      	lsls	r3, r3, #11
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
}
 8001a20:	46c0      	nop			@ (mov r8, r8)
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b015      	add	sp, #84	@ 0x54
 8001a26:	bd90      	pop	{r4, r7, pc}
 8001a28:	40012c00 	.word	0x40012c00
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40000400 	.word	0x40000400
 8001a34:	40002000 	.word	0x40002000
 8001a38:	40014400 	.word	0x40014400
 8001a3c:	40014800 	.word	0x40014800

08001a40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a40:	b590      	push	{r4, r7, lr}
 8001a42:	b08d      	sub	sp, #52	@ 0x34
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	241c      	movs	r4, #28
 8001a4a:	193b      	adds	r3, r7, r4
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	2314      	movs	r3, #20
 8001a50:	001a      	movs	r2, r3
 8001a52:	2100      	movs	r1, #0
 8001a54:	f004 f912 	bl	8005c7c <memset>
  if(timHandle->Instance==TIM1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a50      	ldr	r2, [pc, #320]	@ (8001ba0 <HAL_TIM_MspPostInit+0x160>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d122      	bne.n	8001aa8 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a62:	4b50      	ldr	r3, [pc, #320]	@ (8001ba4 <HAL_TIM_MspPostInit+0x164>)
 8001a64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a66:	4b4f      	ldr	r3, [pc, #316]	@ (8001ba4 <HAL_TIM_MspPostInit+0x164>)
 8001a68:	2102      	movs	r1, #2
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a6e:	4b4d      	ldr	r3, [pc, #308]	@ (8001ba4 <HAL_TIM_MspPostInit+0x164>)
 8001a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a72:	2202      	movs	r2, #2
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
 8001a78:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PB3     ------> TIM1_CH2
    PB6     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = MC_PWM_OUT_0_Pin|MC_PWM_OUT_3_Pin;
 8001a7a:	0021      	movs	r1, r4
 8001a7c:	187b      	adds	r3, r7, r1
 8001a7e:	2248      	movs	r2, #72	@ 0x48
 8001a80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	187b      	adds	r3, r7, r1
 8001a84:	2202      	movs	r2, #2
 8001a86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	187b      	adds	r3, r7, r1
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a8e:	187b      	adds	r3, r7, r1
 8001a90:	2202      	movs	r2, #2
 8001a92:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a94:	187b      	adds	r3, r7, r1
 8001a96:	2201      	movs	r2, #1
 8001a98:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9a:	187b      	adds	r3, r7, r1
 8001a9c:	4a42      	ldr	r2, [pc, #264]	@ (8001ba8 <HAL_TIM_MspPostInit+0x168>)
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	0010      	movs	r0, r2
 8001aa2:	f000 fabb 	bl	800201c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001aa6:	e077      	b.n	8001b98 <HAL_TIM_MspPostInit+0x158>
  else if(timHandle->Instance==TIM3)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a3f      	ldr	r2, [pc, #252]	@ (8001bac <HAL_TIM_MspPostInit+0x16c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d122      	bne.n	8001af8 <HAL_TIM_MspPostInit+0xb8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ba4 <HAL_TIM_MspPostInit+0x164>)
 8001ab4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ba4 <HAL_TIM_MspPostInit+0x164>)
 8001ab8:	2102      	movs	r1, #2
 8001aba:	430a      	orrs	r2, r1
 8001abc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001abe:	4b39      	ldr	r3, [pc, #228]	@ (8001ba4 <HAL_TIM_MspPostInit+0x164>)
 8001ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MC_PWM_OUT_1_Pin|MC_PWM_OUT_2_Pin;
 8001aca:	211c      	movs	r1, #28
 8001acc:	187b      	adds	r3, r7, r1
 8001ace:	2230      	movs	r2, #48	@ 0x30
 8001ad0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	187b      	adds	r3, r7, r1
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	187b      	adds	r3, r7, r1
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ade:	187b      	adds	r3, r7, r1
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001ae4:	187b      	adds	r3, r7, r1
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aea:	187b      	adds	r3, r7, r1
 8001aec:	4a2e      	ldr	r2, [pc, #184]	@ (8001ba8 <HAL_TIM_MspPostInit+0x168>)
 8001aee:	0019      	movs	r1, r3
 8001af0:	0010      	movs	r0, r2
 8001af2:	f000 fa93 	bl	800201c <HAL_GPIO_Init>
}
 8001af6:	e04f      	b.n	8001b98 <HAL_TIM_MspPostInit+0x158>
  else if(timHandle->Instance==TIM16)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a2c      	ldr	r2, [pc, #176]	@ (8001bb0 <HAL_TIM_MspPostInit+0x170>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d123      	bne.n	8001b4a <HAL_TIM_MspPostInit+0x10a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b02:	4b28      	ldr	r3, [pc, #160]	@ (8001ba4 <HAL_TIM_MspPostInit+0x164>)
 8001b04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b06:	4b27      	ldr	r3, [pc, #156]	@ (8001ba4 <HAL_TIM_MspPostInit+0x164>)
 8001b08:	2102      	movs	r1, #2
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b0e:	4b25      	ldr	r3, [pc, #148]	@ (8001ba4 <HAL_TIM_MspPostInit+0x164>)
 8001b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b12:	2202      	movs	r2, #2
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MC_PWM_OUT_5_Pin;
 8001b1a:	211c      	movs	r1, #28
 8001b1c:	187b      	adds	r3, r7, r1
 8001b1e:	2280      	movs	r2, #128	@ 0x80
 8001b20:	0052      	lsls	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b24:	187b      	adds	r3, r7, r1
 8001b26:	2202      	movs	r2, #2
 8001b28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	187b      	adds	r3, r7, r1
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b30:	187b      	adds	r3, r7, r1
 8001b32:	2202      	movs	r2, #2
 8001b34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8001b36:	187b      	adds	r3, r7, r1
 8001b38:	2202      	movs	r2, #2
 8001b3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MC_PWM_OUT_5_GPIO_Port, &GPIO_InitStruct);
 8001b3c:	187b      	adds	r3, r7, r1
 8001b3e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ba8 <HAL_TIM_MspPostInit+0x168>)
 8001b40:	0019      	movs	r1, r3
 8001b42:	0010      	movs	r0, r2
 8001b44:	f000 fa6a 	bl	800201c <HAL_GPIO_Init>
}
 8001b48:	e026      	b.n	8001b98 <HAL_TIM_MspPostInit+0x158>
  else if(timHandle->Instance==TIM17)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a19      	ldr	r2, [pc, #100]	@ (8001bb4 <HAL_TIM_MspPostInit+0x174>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d121      	bne.n	8001b98 <HAL_TIM_MspPostInit+0x158>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b54:	4b13      	ldr	r3, [pc, #76]	@ (8001ba4 <HAL_TIM_MspPostInit+0x164>)
 8001b56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b58:	4b12      	ldr	r3, [pc, #72]	@ (8001ba4 <HAL_TIM_MspPostInit+0x164>)
 8001b5a:	2102      	movs	r1, #2
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b60:	4b10      	ldr	r3, [pc, #64]	@ (8001ba4 <HAL_TIM_MspPostInit+0x164>)
 8001b62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b64:	2202      	movs	r2, #2
 8001b66:	4013      	ands	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MC_PWM_OUT_4_Pin;
 8001b6c:	211c      	movs	r1, #28
 8001b6e:	187b      	adds	r3, r7, r1
 8001b70:	2280      	movs	r2, #128	@ 0x80
 8001b72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	187b      	adds	r3, r7, r1
 8001b76:	2202      	movs	r2, #2
 8001b78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	187b      	adds	r3, r7, r1
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b80:	187b      	adds	r3, r7, r1
 8001b82:	2202      	movs	r2, #2
 8001b84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8001b86:	187b      	adds	r3, r7, r1
 8001b88:	2202      	movs	r2, #2
 8001b8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MC_PWM_OUT_4_GPIO_Port, &GPIO_InitStruct);
 8001b8c:	187b      	adds	r3, r7, r1
 8001b8e:	4a06      	ldr	r2, [pc, #24]	@ (8001ba8 <HAL_TIM_MspPostInit+0x168>)
 8001b90:	0019      	movs	r1, r3
 8001b92:	0010      	movs	r0, r2
 8001b94:	f000 fa42 	bl	800201c <HAL_GPIO_Init>
}
 8001b98:	46c0      	nop			@ (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b00d      	add	sp, #52	@ 0x34
 8001b9e:	bd90      	pop	{r4, r7, pc}
 8001ba0:	40012c00 	.word	0x40012c00
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	50000400 	.word	0x50000400
 8001bac:	40000400 	.word	0x40000400
 8001bb0:	40014400 	.word	0x40014400
 8001bb4:	40014800 	.word	0x40014800

08001bb8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bbc:	4b26      	ldr	r3, [pc, #152]	@ (8001c58 <MX_USART1_UART_Init+0xa0>)
 8001bbe:	4a27      	ldr	r2, [pc, #156]	@ (8001c5c <MX_USART1_UART_Init+0xa4>)
 8001bc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bc2:	4b25      	ldr	r3, [pc, #148]	@ (8001c58 <MX_USART1_UART_Init+0xa0>)
 8001bc4:	22e1      	movs	r2, #225	@ 0xe1
 8001bc6:	0252      	lsls	r2, r2, #9
 8001bc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bca:	4b23      	ldr	r3, [pc, #140]	@ (8001c58 <MX_USART1_UART_Init+0xa0>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bd0:	4b21      	ldr	r3, [pc, #132]	@ (8001c58 <MX_USART1_UART_Init+0xa0>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bd6:	4b20      	ldr	r3, [pc, #128]	@ (8001c58 <MX_USART1_UART_Init+0xa0>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c58 <MX_USART1_UART_Init+0xa0>)
 8001bde:	220c      	movs	r2, #12
 8001be0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c58 <MX_USART1_UART_Init+0xa0>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c58 <MX_USART1_UART_Init+0xa0>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bee:	4b1a      	ldr	r3, [pc, #104]	@ (8001c58 <MX_USART1_UART_Init+0xa0>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bf4:	4b18      	ldr	r3, [pc, #96]	@ (8001c58 <MX_USART1_UART_Init+0xa0>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 8001bfa:	4b17      	ldr	r3, [pc, #92]	@ (8001c58 <MX_USART1_UART_Init+0xa0>)
 8001bfc:	2240      	movs	r2, #64	@ 0x40
 8001bfe:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 8001c00:	4b15      	ldr	r3, [pc, #84]	@ (8001c58 <MX_USART1_UART_Init+0xa0>)
 8001c02:	2280      	movs	r2, #128	@ 0x80
 8001c04:	0352      	lsls	r2, r2, #13
 8001c06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 8001c08:	4b13      	ldr	r3, [pc, #76]	@ (8001c58 <MX_USART1_UART_Init+0xa0>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c0e:	4b12      	ldr	r3, [pc, #72]	@ (8001c58 <MX_USART1_UART_Init+0xa0>)
 8001c10:	0018      	movs	r0, r3
 8001c12:	f003 f8b1 	bl	8004d78 <HAL_UART_Init>
 8001c16:	1e03      	subs	r3, r0, #0
 8001c18:	d001      	beq.n	8001c1e <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 8001c1a:	f7ff f9b2 	bl	8000f82 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c58 <MX_USART1_UART_Init+0xa0>)
 8001c20:	2100      	movs	r1, #0
 8001c22:	0018      	movs	r0, r3
 8001c24:	f003 fe2a 	bl	800587c <HAL_UARTEx_SetTxFifoThreshold>
 8001c28:	1e03      	subs	r3, r0, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 8001c2c:	f7ff f9a9 	bl	8000f82 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c30:	4b09      	ldr	r3, [pc, #36]	@ (8001c58 <MX_USART1_UART_Init+0xa0>)
 8001c32:	2100      	movs	r1, #0
 8001c34:	0018      	movs	r0, r3
 8001c36:	f003 fe61 	bl	80058fc <HAL_UARTEx_SetRxFifoThreshold>
 8001c3a:	1e03      	subs	r3, r0, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001c3e:	f7ff f9a0 	bl	8000f82 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c42:	4b05      	ldr	r3, [pc, #20]	@ (8001c58 <MX_USART1_UART_Init+0xa0>)
 8001c44:	0018      	movs	r0, r3
 8001c46:	f003 fddf 	bl	8005808 <HAL_UARTEx_DisableFifoMode>
 8001c4a:	1e03      	subs	r3, r0, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 8001c4e:	f7ff f998 	bl	8000f82 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c52:	46c0      	nop			@ (mov r8, r8)
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	2000031c 	.word	0x2000031c
 8001c5c:	40013800 	.word	0x40013800

08001c60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b097      	sub	sp, #92	@ 0x5c
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	2344      	movs	r3, #68	@ 0x44
 8001c6a:	18fb      	adds	r3, r7, r3
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	2314      	movs	r3, #20
 8001c70:	001a      	movs	r2, r3
 8001c72:	2100      	movs	r1, #0
 8001c74:	f004 f802 	bl	8005c7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c78:	2410      	movs	r4, #16
 8001c7a:	193b      	adds	r3, r7, r4
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	2334      	movs	r3, #52	@ 0x34
 8001c80:	001a      	movs	r2, r3
 8001c82:	2100      	movs	r1, #0
 8001c84:	f003 fffa 	bl	8005c7c <memset>
  if(uartHandle->Instance==USART1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a23      	ldr	r2, [pc, #140]	@ (8001d1c <HAL_UART_MspInit+0xbc>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d13f      	bne.n	8001d12 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c92:	193b      	adds	r3, r7, r4
 8001c94:	2201      	movs	r2, #1
 8001c96:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001c98:	193b      	adds	r3, r7, r4
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c9e:	193b      	adds	r3, r7, r4
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f001 f98b 	bl	8002fbc <HAL_RCCEx_PeriphCLKConfig>
 8001ca6:	1e03      	subs	r3, r0, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001caa:	f7ff f96a 	bl	8000f82 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cae:	4b1c      	ldr	r3, [pc, #112]	@ (8001d20 <HAL_UART_MspInit+0xc0>)
 8001cb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d20 <HAL_UART_MspInit+0xc0>)
 8001cb4:	2180      	movs	r1, #128	@ 0x80
 8001cb6:	01c9      	lsls	r1, r1, #7
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cbc:	4b18      	ldr	r3, [pc, #96]	@ (8001d20 <HAL_UART_MspInit+0xc0>)
 8001cbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cc0:	2380      	movs	r3, #128	@ 0x80
 8001cc2:	01db      	lsls	r3, r3, #7
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cca:	4b15      	ldr	r3, [pc, #84]	@ (8001d20 <HAL_UART_MspInit+0xc0>)
 8001ccc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cce:	4b14      	ldr	r3, [pc, #80]	@ (8001d20 <HAL_UART_MspInit+0xc0>)
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cd6:	4b12      	ldr	r3, [pc, #72]	@ (8001d20 <HAL_UART_MspInit+0xc0>)
 8001cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cda:	2201      	movs	r2, #1
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MC_UART_TX_Pin|MC_UART_RX_Pin;
 8001ce2:	2144      	movs	r1, #68	@ 0x44
 8001ce4:	187b      	adds	r3, r7, r1
 8001ce6:	22c0      	movs	r2, #192	@ 0xc0
 8001ce8:	00d2      	lsls	r2, r2, #3
 8001cea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	187b      	adds	r3, r7, r1
 8001cee:	2202      	movs	r2, #2
 8001cf0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	187b      	adds	r3, r7, r1
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf8:	187b      	adds	r3, r7, r1
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001cfe:	187b      	adds	r3, r7, r1
 8001d00:	2201      	movs	r2, #1
 8001d02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d04:	187a      	adds	r2, r7, r1
 8001d06:	23a0      	movs	r3, #160	@ 0xa0
 8001d08:	05db      	lsls	r3, r3, #23
 8001d0a:	0011      	movs	r1, r2
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f000 f985 	bl	800201c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001d12:	46c0      	nop			@ (mov r8, r8)
 8001d14:	46bd      	mov	sp, r7
 8001d16:	b017      	add	sp, #92	@ 0x5c
 8001d18:	bd90      	pop	{r4, r7, pc}
 8001d1a:	46c0      	nop			@ (mov r8, r8)
 8001d1c:	40013800 	.word	0x40013800
 8001d20:	40021000 	.word	0x40021000

08001d24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d24:	480d      	ldr	r0, [pc, #52]	@ (8001d5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d26:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d28:	f7ff faa6 	bl	8001278 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d2c:	480c      	ldr	r0, [pc, #48]	@ (8001d60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d2e:	490d      	ldr	r1, [pc, #52]	@ (8001d64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d30:	4a0d      	ldr	r2, [pc, #52]	@ (8001d68 <LoopForever+0xe>)
  movs r3, #0
 8001d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d34:	e002      	b.n	8001d3c <LoopCopyDataInit>

08001d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d3a:	3304      	adds	r3, #4

08001d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d40:	d3f9      	bcc.n	8001d36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d42:	4a0a      	ldr	r2, [pc, #40]	@ (8001d6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d44:	4c0a      	ldr	r4, [pc, #40]	@ (8001d70 <LoopForever+0x16>)
  movs r3, #0
 8001d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d48:	e001      	b.n	8001d4e <LoopFillZerobss>

08001d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d4c:	3204      	adds	r2, #4

08001d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d50:	d3fb      	bcc.n	8001d4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d52:	f003 ffef 	bl	8005d34 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001d56:	f7ff f86f 	bl	8000e38 <main>

08001d5a <LoopForever>:

LoopForever:
  b LoopForever
 8001d5a:	e7fe      	b.n	8001d5a <LoopForever>
  ldr   r0, =_estack
 8001d5c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d64:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001d68:	08006ad4 	.word	0x08006ad4
  ldr r2, =_sbss
 8001d6c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001d70:	20000500 	.word	0x20000500

08001d74 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d74:	e7fe      	b.n	8001d74 <ADC1_COMP_IRQHandler>
	...

08001d78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d7e:	1dfb      	adds	r3, r7, #7
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d84:	4b0b      	ldr	r3, [pc, #44]	@ (8001db4 <HAL_Init+0x3c>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b0a      	ldr	r3, [pc, #40]	@ (8001db4 <HAL_Init+0x3c>)
 8001d8a:	2180      	movs	r1, #128	@ 0x80
 8001d8c:	0049      	lsls	r1, r1, #1
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d92:	2003      	movs	r0, #3
 8001d94:	f000 f810 	bl	8001db8 <HAL_InitTick>
 8001d98:	1e03      	subs	r3, r0, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001d9c:	1dfb      	adds	r3, r7, #7
 8001d9e:	2201      	movs	r2, #1
 8001da0:	701a      	strb	r2, [r3, #0]
 8001da2:	e001      	b.n	8001da8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001da4:	f7ff f96a 	bl	800107c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001da8:	1dfb      	adds	r3, r7, #7
 8001daa:	781b      	ldrb	r3, [r3, #0]
}
 8001dac:	0018      	movs	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b002      	add	sp, #8
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40022000 	.word	0x40022000

08001db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dc0:	230f      	movs	r3, #15
 8001dc2:	18fb      	adds	r3, r7, r3
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e40 <HAL_InitTick+0x88>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d02b      	beq.n	8001e28 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e44 <HAL_InitTick+0x8c>)
 8001dd2:	681c      	ldr	r4, [r3, #0]
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e40 <HAL_InitTick+0x88>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	0019      	movs	r1, r3
 8001dda:	23fa      	movs	r3, #250	@ 0xfa
 8001ddc:	0098      	lsls	r0, r3, #2
 8001dde:	f7fe f99b 	bl	8000118 <__udivsi3>
 8001de2:	0003      	movs	r3, r0
 8001de4:	0019      	movs	r1, r3
 8001de6:	0020      	movs	r0, r4
 8001de8:	f7fe f996 	bl	8000118 <__udivsi3>
 8001dec:	0003      	movs	r3, r0
 8001dee:	0018      	movs	r0, r3
 8001df0:	f000 f907 	bl	8002002 <HAL_SYSTICK_Config>
 8001df4:	1e03      	subs	r3, r0, #0
 8001df6:	d112      	bne.n	8001e1e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d80a      	bhi.n	8001e14 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	2301      	movs	r3, #1
 8001e02:	425b      	negs	r3, r3
 8001e04:	2200      	movs	r2, #0
 8001e06:	0018      	movs	r0, r3
 8001e08:	f000 f8d6 	bl	8001fb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e48 <HAL_InitTick+0x90>)
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	e00d      	b.n	8001e30 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001e14:	230f      	movs	r3, #15
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	2201      	movs	r2, #1
 8001e1a:	701a      	strb	r2, [r3, #0]
 8001e1c:	e008      	b.n	8001e30 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e1e:	230f      	movs	r3, #15
 8001e20:	18fb      	adds	r3, r7, r3
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]
 8001e26:	e003      	b.n	8001e30 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e28:	230f      	movs	r3, #15
 8001e2a:	18fb      	adds	r3, r7, r3
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001e30:	230f      	movs	r3, #15
 8001e32:	18fb      	adds	r3, r7, r3
 8001e34:	781b      	ldrb	r3, [r3, #0]
}
 8001e36:	0018      	movs	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	b005      	add	sp, #20
 8001e3c:	bd90      	pop	{r4, r7, pc}
 8001e3e:	46c0      	nop			@ (mov r8, r8)
 8001e40:	20000038 	.word	0x20000038
 8001e44:	20000018 	.word	0x20000018
 8001e48:	20000034 	.word	0x20000034

08001e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e50:	4b02      	ldr	r3, [pc, #8]	@ (8001e5c <HAL_GetTick+0x10>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	0018      	movs	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	46c0      	nop			@ (mov r8, r8)
 8001e5c:	200003b0 	.word	0x200003b0

08001e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	0002      	movs	r2, r0
 8001e68:	1dfb      	adds	r3, r7, #7
 8001e6a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e6c:	1dfb      	adds	r3, r7, #7
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e72:	d809      	bhi.n	8001e88 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e74:	1dfb      	adds	r3, r7, #7
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	001a      	movs	r2, r3
 8001e7a:	231f      	movs	r3, #31
 8001e7c:	401a      	ands	r2, r3
 8001e7e:	4b04      	ldr	r3, [pc, #16]	@ (8001e90 <__NVIC_EnableIRQ+0x30>)
 8001e80:	2101      	movs	r1, #1
 8001e82:	4091      	lsls	r1, r2
 8001e84:	000a      	movs	r2, r1
 8001e86:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001e88:	46c0      	nop			@ (mov r8, r8)
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	b002      	add	sp, #8
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	e000e100 	.word	0xe000e100

08001e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e94:	b590      	push	{r4, r7, lr}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	0002      	movs	r2, r0
 8001e9c:	6039      	str	r1, [r7, #0]
 8001e9e:	1dfb      	adds	r3, r7, #7
 8001ea0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ea2:	1dfb      	adds	r3, r7, #7
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ea8:	d828      	bhi.n	8001efc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001eaa:	4a2f      	ldr	r2, [pc, #188]	@ (8001f68 <__NVIC_SetPriority+0xd4>)
 8001eac:	1dfb      	adds	r3, r7, #7
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	b25b      	sxtb	r3, r3
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	33c0      	adds	r3, #192	@ 0xc0
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	589b      	ldr	r3, [r3, r2]
 8001eba:	1dfa      	adds	r2, r7, #7
 8001ebc:	7812      	ldrb	r2, [r2, #0]
 8001ebe:	0011      	movs	r1, r2
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	400a      	ands	r2, r1
 8001ec4:	00d2      	lsls	r2, r2, #3
 8001ec6:	21ff      	movs	r1, #255	@ 0xff
 8001ec8:	4091      	lsls	r1, r2
 8001eca:	000a      	movs	r2, r1
 8001ecc:	43d2      	mvns	r2, r2
 8001ece:	401a      	ands	r2, r3
 8001ed0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	019b      	lsls	r3, r3, #6
 8001ed6:	22ff      	movs	r2, #255	@ 0xff
 8001ed8:	401a      	ands	r2, r3
 8001eda:	1dfb      	adds	r3, r7, #7
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	0018      	movs	r0, r3
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	4003      	ands	r3, r0
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ee8:	481f      	ldr	r0, [pc, #124]	@ (8001f68 <__NVIC_SetPriority+0xd4>)
 8001eea:	1dfb      	adds	r3, r7, #7
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	b25b      	sxtb	r3, r3
 8001ef0:	089b      	lsrs	r3, r3, #2
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	33c0      	adds	r3, #192	@ 0xc0
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001efa:	e031      	b.n	8001f60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001efc:	4a1b      	ldr	r2, [pc, #108]	@ (8001f6c <__NVIC_SetPriority+0xd8>)
 8001efe:	1dfb      	adds	r3, r7, #7
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	0019      	movs	r1, r3
 8001f04:	230f      	movs	r3, #15
 8001f06:	400b      	ands	r3, r1
 8001f08:	3b08      	subs	r3, #8
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	3306      	adds	r3, #6
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	18d3      	adds	r3, r2, r3
 8001f12:	3304      	adds	r3, #4
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	1dfa      	adds	r2, r7, #7
 8001f18:	7812      	ldrb	r2, [r2, #0]
 8001f1a:	0011      	movs	r1, r2
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	400a      	ands	r2, r1
 8001f20:	00d2      	lsls	r2, r2, #3
 8001f22:	21ff      	movs	r1, #255	@ 0xff
 8001f24:	4091      	lsls	r1, r2
 8001f26:	000a      	movs	r2, r1
 8001f28:	43d2      	mvns	r2, r2
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	019b      	lsls	r3, r3, #6
 8001f32:	22ff      	movs	r2, #255	@ 0xff
 8001f34:	401a      	ands	r2, r3
 8001f36:	1dfb      	adds	r3, r7, #7
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	4003      	ands	r3, r0
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f44:	4809      	ldr	r0, [pc, #36]	@ (8001f6c <__NVIC_SetPriority+0xd8>)
 8001f46:	1dfb      	adds	r3, r7, #7
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	001c      	movs	r4, r3
 8001f4c:	230f      	movs	r3, #15
 8001f4e:	4023      	ands	r3, r4
 8001f50:	3b08      	subs	r3, #8
 8001f52:	089b      	lsrs	r3, r3, #2
 8001f54:	430a      	orrs	r2, r1
 8001f56:	3306      	adds	r3, #6
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	18c3      	adds	r3, r0, r3
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	601a      	str	r2, [r3, #0]
}
 8001f60:	46c0      	nop			@ (mov r8, r8)
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b003      	add	sp, #12
 8001f66:	bd90      	pop	{r4, r7, pc}
 8001f68:	e000e100 	.word	0xe000e100
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	1e5a      	subs	r2, r3, #1
 8001f7c:	2380      	movs	r3, #128	@ 0x80
 8001f7e:	045b      	lsls	r3, r3, #17
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d301      	bcc.n	8001f88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f84:	2301      	movs	r3, #1
 8001f86:	e010      	b.n	8001faa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f88:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb4 <SysTick_Config+0x44>)
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	3a01      	subs	r2, #1
 8001f8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f90:	2301      	movs	r3, #1
 8001f92:	425b      	negs	r3, r3
 8001f94:	2103      	movs	r1, #3
 8001f96:	0018      	movs	r0, r3
 8001f98:	f7ff ff7c 	bl	8001e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f9c:	4b05      	ldr	r3, [pc, #20]	@ (8001fb4 <SysTick_Config+0x44>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa2:	4b04      	ldr	r3, [pc, #16]	@ (8001fb4 <SysTick_Config+0x44>)
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	0018      	movs	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	b002      	add	sp, #8
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	46c0      	nop			@ (mov r8, r8)
 8001fb4:	e000e010 	.word	0xe000e010

08001fb8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	210f      	movs	r1, #15
 8001fc4:	187b      	adds	r3, r7, r1
 8001fc6:	1c02      	adds	r2, r0, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	187b      	adds	r3, r7, r1
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	b25b      	sxtb	r3, r3
 8001fd2:	0011      	movs	r1, r2
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f7ff ff5d 	bl	8001e94 <__NVIC_SetPriority>
}
 8001fda:	46c0      	nop			@ (mov r8, r8)
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	b004      	add	sp, #16
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	0002      	movs	r2, r0
 8001fea:	1dfb      	adds	r3, r7, #7
 8001fec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fee:	1dfb      	adds	r3, r7, #7
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	b25b      	sxtb	r3, r3
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	f7ff ff33 	bl	8001e60 <__NVIC_EnableIRQ>
}
 8001ffa:	46c0      	nop			@ (mov r8, r8)
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	b002      	add	sp, #8
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	0018      	movs	r0, r3
 800200e:	f7ff ffaf 	bl	8001f70 <SysTick_Config>
 8002012:	0003      	movs	r3, r0
}
 8002014:	0018      	movs	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	b002      	add	sp, #8
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202a:	e147      	b.n	80022bc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2101      	movs	r1, #1
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	4091      	lsls	r1, r2
 8002036:	000a      	movs	r2, r1
 8002038:	4013      	ands	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d100      	bne.n	8002044 <HAL_GPIO_Init+0x28>
 8002042:	e138      	b.n	80022b6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2203      	movs	r2, #3
 800204a:	4013      	ands	r3, r2
 800204c:	2b01      	cmp	r3, #1
 800204e:	d005      	beq.n	800205c <HAL_GPIO_Init+0x40>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2203      	movs	r2, #3
 8002056:	4013      	ands	r3, r2
 8002058:	2b02      	cmp	r3, #2
 800205a:	d130      	bne.n	80020be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	2203      	movs	r2, #3
 8002068:	409a      	lsls	r2, r3
 800206a:	0013      	movs	r3, r2
 800206c:	43da      	mvns	r2, r3
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	409a      	lsls	r2, r3
 800207e:	0013      	movs	r3, r2
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	4313      	orrs	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002092:	2201      	movs	r2, #1
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	409a      	lsls	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	43da      	mvns	r2, r3
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4013      	ands	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	091b      	lsrs	r3, r3, #4
 80020a8:	2201      	movs	r2, #1
 80020aa:	401a      	ands	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	409a      	lsls	r2, r3
 80020b0:	0013      	movs	r3, r2
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2203      	movs	r2, #3
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d017      	beq.n	80020fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	2203      	movs	r2, #3
 80020d6:	409a      	lsls	r2, r3
 80020d8:	0013      	movs	r3, r2
 80020da:	43da      	mvns	r2, r3
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4013      	ands	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	409a      	lsls	r2, r3
 80020ec:	0013      	movs	r3, r2
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2203      	movs	r2, #3
 8002100:	4013      	ands	r3, r2
 8002102:	2b02      	cmp	r3, #2
 8002104:	d123      	bne.n	800214e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	08da      	lsrs	r2, r3, #3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3208      	adds	r2, #8
 800210e:	0092      	lsls	r2, r2, #2
 8002110:	58d3      	ldr	r3, [r2, r3]
 8002112:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2207      	movs	r2, #7
 8002118:	4013      	ands	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	220f      	movs	r2, #15
 800211e:	409a      	lsls	r2, r3
 8002120:	0013      	movs	r3, r2
 8002122:	43da      	mvns	r2, r3
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4013      	ands	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	691a      	ldr	r2, [r3, #16]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2107      	movs	r1, #7
 8002132:	400b      	ands	r3, r1
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	409a      	lsls	r2, r3
 8002138:	0013      	movs	r3, r2
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	08da      	lsrs	r2, r3, #3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3208      	adds	r2, #8
 8002148:	0092      	lsls	r2, r2, #2
 800214a:	6939      	ldr	r1, [r7, #16]
 800214c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	2203      	movs	r2, #3
 800215a:	409a      	lsls	r2, r3
 800215c:	0013      	movs	r3, r2
 800215e:	43da      	mvns	r2, r3
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4013      	ands	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2203      	movs	r2, #3
 800216c:	401a      	ands	r2, r3
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	409a      	lsls	r2, r3
 8002174:	0013      	movs	r3, r2
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	23c0      	movs	r3, #192	@ 0xc0
 8002188:	029b      	lsls	r3, r3, #10
 800218a:	4013      	ands	r3, r2
 800218c:	d100      	bne.n	8002190 <HAL_GPIO_Init+0x174>
 800218e:	e092      	b.n	80022b6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002190:	4a50      	ldr	r2, [pc, #320]	@ (80022d4 <HAL_GPIO_Init+0x2b8>)
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	089b      	lsrs	r3, r3, #2
 8002196:	3318      	adds	r3, #24
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	589b      	ldr	r3, [r3, r2]
 800219c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	2203      	movs	r2, #3
 80021a2:	4013      	ands	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	220f      	movs	r2, #15
 80021a8:	409a      	lsls	r2, r3
 80021aa:	0013      	movs	r3, r2
 80021ac:	43da      	mvns	r2, r3
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4013      	ands	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	23a0      	movs	r3, #160	@ 0xa0
 80021b8:	05db      	lsls	r3, r3, #23
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d013      	beq.n	80021e6 <HAL_GPIO_Init+0x1ca>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a45      	ldr	r2, [pc, #276]	@ (80022d8 <HAL_GPIO_Init+0x2bc>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00d      	beq.n	80021e2 <HAL_GPIO_Init+0x1c6>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a44      	ldr	r2, [pc, #272]	@ (80022dc <HAL_GPIO_Init+0x2c0>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d007      	beq.n	80021de <HAL_GPIO_Init+0x1c2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a43      	ldr	r2, [pc, #268]	@ (80022e0 <HAL_GPIO_Init+0x2c4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d101      	bne.n	80021da <HAL_GPIO_Init+0x1be>
 80021d6:	2303      	movs	r3, #3
 80021d8:	e006      	b.n	80021e8 <HAL_GPIO_Init+0x1cc>
 80021da:	2305      	movs	r3, #5
 80021dc:	e004      	b.n	80021e8 <HAL_GPIO_Init+0x1cc>
 80021de:	2302      	movs	r3, #2
 80021e0:	e002      	b.n	80021e8 <HAL_GPIO_Init+0x1cc>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <HAL_GPIO_Init+0x1cc>
 80021e6:	2300      	movs	r3, #0
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	2103      	movs	r1, #3
 80021ec:	400a      	ands	r2, r1
 80021ee:	00d2      	lsls	r2, r2, #3
 80021f0:	4093      	lsls	r3, r2
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80021f8:	4936      	ldr	r1, [pc, #216]	@ (80022d4 <HAL_GPIO_Init+0x2b8>)
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	089b      	lsrs	r3, r3, #2
 80021fe:	3318      	adds	r3, #24
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002206:	4b33      	ldr	r3, [pc, #204]	@ (80022d4 <HAL_GPIO_Init+0x2b8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	43da      	mvns	r2, r3
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4013      	ands	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	2380      	movs	r3, #128	@ 0x80
 800221c:	035b      	lsls	r3, r3, #13
 800221e:	4013      	ands	r3, r2
 8002220:	d003      	beq.n	800222a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800222a:	4b2a      	ldr	r3, [pc, #168]	@ (80022d4 <HAL_GPIO_Init+0x2b8>)
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002230:	4b28      	ldr	r3, [pc, #160]	@ (80022d4 <HAL_GPIO_Init+0x2b8>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	43da      	mvns	r2, r3
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	2380      	movs	r3, #128	@ 0x80
 8002246:	039b      	lsls	r3, r3, #14
 8002248:	4013      	ands	r3, r2
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002254:	4b1f      	ldr	r3, [pc, #124]	@ (80022d4 <HAL_GPIO_Init+0x2b8>)
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800225a:	4a1e      	ldr	r2, [pc, #120]	@ (80022d4 <HAL_GPIO_Init+0x2b8>)
 800225c:	2384      	movs	r3, #132	@ 0x84
 800225e:	58d3      	ldr	r3, [r2, r3]
 8002260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	43da      	mvns	r2, r3
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4013      	ands	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	2380      	movs	r3, #128	@ 0x80
 8002272:	029b      	lsls	r3, r3, #10
 8002274:	4013      	ands	r3, r2
 8002276:	d003      	beq.n	8002280 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002280:	4914      	ldr	r1, [pc, #80]	@ (80022d4 <HAL_GPIO_Init+0x2b8>)
 8002282:	2284      	movs	r2, #132	@ 0x84
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002288:	4a12      	ldr	r2, [pc, #72]	@ (80022d4 <HAL_GPIO_Init+0x2b8>)
 800228a:	2380      	movs	r3, #128	@ 0x80
 800228c:	58d3      	ldr	r3, [r2, r3]
 800228e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	43da      	mvns	r2, r3
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	2380      	movs	r3, #128	@ 0x80
 80022a0:	025b      	lsls	r3, r3, #9
 80022a2:	4013      	ands	r3, r2
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022ae:	4909      	ldr	r1, [pc, #36]	@ (80022d4 <HAL_GPIO_Init+0x2b8>)
 80022b0:	2280      	movs	r2, #128	@ 0x80
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	3301      	adds	r3, #1
 80022ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	40da      	lsrs	r2, r3
 80022c4:	1e13      	subs	r3, r2, #0
 80022c6:	d000      	beq.n	80022ca <HAL_GPIO_Init+0x2ae>
 80022c8:	e6b0      	b.n	800202c <HAL_GPIO_Init+0x10>
  }
}
 80022ca:	46c0      	nop			@ (mov r8, r8)
 80022cc:	46c0      	nop			@ (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b006      	add	sp, #24
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40021800 	.word	0x40021800
 80022d8:	50000400 	.word	0x50000400
 80022dc:	50000800 	.word	0x50000800
 80022e0:	50000c00 	.word	0x50000c00

080022e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	0008      	movs	r0, r1
 80022ee:	0011      	movs	r1, r2
 80022f0:	1cbb      	adds	r3, r7, #2
 80022f2:	1c02      	adds	r2, r0, #0
 80022f4:	801a      	strh	r2, [r3, #0]
 80022f6:	1c7b      	adds	r3, r7, #1
 80022f8:	1c0a      	adds	r2, r1, #0
 80022fa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022fc:	1c7b      	adds	r3, r7, #1
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d004      	beq.n	800230e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002304:	1cbb      	adds	r3, r7, #2
 8002306:	881a      	ldrh	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800230c:	e003      	b.n	8002316 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800230e:	1cbb      	adds	r3, r7, #2
 8002310:	881a      	ldrh	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002316:	46c0      	nop			@ (mov r8, r8)
 8002318:	46bd      	mov	sp, r7
 800231a:	b002      	add	sp, #8
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e08f      	b.n	8002452 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2241      	movs	r2, #65	@ 0x41
 8002336:	5c9b      	ldrb	r3, [r3, r2]
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d107      	bne.n	800234e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2240      	movs	r2, #64	@ 0x40
 8002342:	2100      	movs	r1, #0
 8002344:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	0018      	movs	r0, r3
 800234a:	f7fe fab5 	bl	80008b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2241      	movs	r2, #65	@ 0x41
 8002352:	2124      	movs	r1, #36	@ 0x24
 8002354:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2101      	movs	r1, #1
 8002362:	438a      	bics	r2, r1
 8002364:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	493b      	ldr	r1, [pc, #236]	@ (800245c <HAL_I2C_Init+0x13c>)
 8002370:	400a      	ands	r2, r1
 8002372:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4938      	ldr	r1, [pc, #224]	@ (8002460 <HAL_I2C_Init+0x140>)
 8002380:	400a      	ands	r2, r1
 8002382:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d108      	bne.n	800239e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2180      	movs	r1, #128	@ 0x80
 8002396:	0209      	lsls	r1, r1, #8
 8002398:	430a      	orrs	r2, r1
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	e007      	b.n	80023ae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2184      	movs	r1, #132	@ 0x84
 80023a8:	0209      	lsls	r1, r1, #8
 80023aa:	430a      	orrs	r2, r1
 80023ac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d109      	bne.n	80023ca <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2180      	movs	r1, #128	@ 0x80
 80023c2:	0109      	lsls	r1, r1, #4
 80023c4:	430a      	orrs	r2, r1
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	e007      	b.n	80023da <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4923      	ldr	r1, [pc, #140]	@ (8002464 <HAL_I2C_Init+0x144>)
 80023d6:	400a      	ands	r2, r1
 80023d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4920      	ldr	r1, [pc, #128]	@ (8002468 <HAL_I2C_Init+0x148>)
 80023e6:	430a      	orrs	r2, r1
 80023e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	491a      	ldr	r1, [pc, #104]	@ (8002460 <HAL_I2C_Init+0x140>)
 80023f6:	400a      	ands	r2, r1
 80023f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691a      	ldr	r2, [r3, #16]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	431a      	orrs	r2, r3
 8002404:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69d9      	ldr	r1, [r3, #28]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1a      	ldr	r2, [r3, #32]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2101      	movs	r1, #1
 8002430:	430a      	orrs	r2, r1
 8002432:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2241      	movs	r2, #65	@ 0x41
 800243e:	2120      	movs	r1, #32
 8002440:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2242      	movs	r2, #66	@ 0x42
 800244c:	2100      	movs	r1, #0
 800244e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	0018      	movs	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	b002      	add	sp, #8
 8002458:	bd80      	pop	{r7, pc}
 800245a:	46c0      	nop			@ (mov r8, r8)
 800245c:	f0ffffff 	.word	0xf0ffffff
 8002460:	ffff7fff 	.word	0xffff7fff
 8002464:	fffff7ff 	.word	0xfffff7ff
 8002468:	02008000 	.word	0x02008000

0800246c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2241      	movs	r2, #65	@ 0x41
 800247a:	5c9b      	ldrb	r3, [r3, r2]
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b20      	cmp	r3, #32
 8002480:	d138      	bne.n	80024f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2240      	movs	r2, #64	@ 0x40
 8002486:	5c9b      	ldrb	r3, [r3, r2]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800248c:	2302      	movs	r3, #2
 800248e:	e032      	b.n	80024f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2240      	movs	r2, #64	@ 0x40
 8002494:	2101      	movs	r1, #1
 8002496:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2241      	movs	r2, #65	@ 0x41
 800249c:	2124      	movs	r1, #36	@ 0x24
 800249e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2101      	movs	r1, #1
 80024ac:	438a      	bics	r2, r1
 80024ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4911      	ldr	r1, [pc, #68]	@ (8002500 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80024bc:	400a      	ands	r2, r1
 80024be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6819      	ldr	r1, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2101      	movs	r1, #1
 80024dc:	430a      	orrs	r2, r1
 80024de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2241      	movs	r2, #65	@ 0x41
 80024e4:	2120      	movs	r1, #32
 80024e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2240      	movs	r2, #64	@ 0x40
 80024ec:	2100      	movs	r1, #0
 80024ee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	e000      	b.n	80024f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024f4:	2302      	movs	r3, #2
  }
}
 80024f6:	0018      	movs	r0, r3
 80024f8:	46bd      	mov	sp, r7
 80024fa:	b002      	add	sp, #8
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	46c0      	nop			@ (mov r8, r8)
 8002500:	ffffefff 	.word	0xffffefff

08002504 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2241      	movs	r2, #65	@ 0x41
 8002512:	5c9b      	ldrb	r3, [r3, r2]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b20      	cmp	r3, #32
 8002518:	d139      	bne.n	800258e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2240      	movs	r2, #64	@ 0x40
 800251e:	5c9b      	ldrb	r3, [r3, r2]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002524:	2302      	movs	r3, #2
 8002526:	e033      	b.n	8002590 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2240      	movs	r2, #64	@ 0x40
 800252c:	2101      	movs	r1, #1
 800252e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2241      	movs	r2, #65	@ 0x41
 8002534:	2124      	movs	r1, #36	@ 0x24
 8002536:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2101      	movs	r1, #1
 8002544:	438a      	bics	r2, r1
 8002546:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4a11      	ldr	r2, [pc, #68]	@ (8002598 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002554:	4013      	ands	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	021b      	lsls	r3, r3, #8
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2101      	movs	r1, #1
 8002576:	430a      	orrs	r2, r1
 8002578:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2241      	movs	r2, #65	@ 0x41
 800257e:	2120      	movs	r1, #32
 8002580:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2240      	movs	r2, #64	@ 0x40
 8002586:	2100      	movs	r1, #0
 8002588:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	e000      	b.n	8002590 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800258e:	2302      	movs	r3, #2
  }
}
 8002590:	0018      	movs	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	b004      	add	sp, #16
 8002596:	bd80      	pop	{r7, pc}
 8002598:	fffff0ff 	.word	0xfffff0ff

0800259c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80025a4:	4b19      	ldr	r3, [pc, #100]	@ (800260c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a19      	ldr	r2, [pc, #100]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	0019      	movs	r1, r3
 80025ae:	4b17      	ldr	r3, [pc, #92]	@ (800260c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	2380      	movs	r3, #128	@ 0x80
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	429a      	cmp	r2, r3
 80025be:	d11f      	bne.n	8002600 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80025c0:	4b14      	ldr	r3, [pc, #80]	@ (8002614 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	0013      	movs	r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	189b      	adds	r3, r3, r2
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4912      	ldr	r1, [pc, #72]	@ (8002618 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80025ce:	0018      	movs	r0, r3
 80025d0:	f7fd fda2 	bl	8000118 <__udivsi3>
 80025d4:	0003      	movs	r3, r0
 80025d6:	3301      	adds	r3, #1
 80025d8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025da:	e008      	b.n	80025ee <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	3b01      	subs	r3, #1
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	e001      	b.n	80025ee <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e009      	b.n	8002602 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025ee:	4b07      	ldr	r3, [pc, #28]	@ (800260c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80025f0:	695a      	ldr	r2, [r3, #20]
 80025f2:	2380      	movs	r3, #128	@ 0x80
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	401a      	ands	r2, r3
 80025f8:	2380      	movs	r3, #128	@ 0x80
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d0ed      	beq.n	80025dc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	0018      	movs	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	b004      	add	sp, #16
 8002608:	bd80      	pop	{r7, pc}
 800260a:	46c0      	nop			@ (mov r8, r8)
 800260c:	40007000 	.word	0x40007000
 8002610:	fffff9ff 	.word	0xfffff9ff
 8002614:	20000018 	.word	0x20000018
 8002618:	000f4240 	.word	0x000f4240

0800261c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002620:	4b03      	ldr	r3, [pc, #12]	@ (8002630 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	23e0      	movs	r3, #224	@ 0xe0
 8002626:	01db      	lsls	r3, r3, #7
 8002628:	4013      	ands	r3, r2
}
 800262a:	0018      	movs	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40021000 	.word	0x40021000

08002634 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e2fe      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2201      	movs	r2, #1
 800264c:	4013      	ands	r3, r2
 800264e:	d100      	bne.n	8002652 <HAL_RCC_OscConfig+0x1e>
 8002650:	e07c      	b.n	800274c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002652:	4bc3      	ldr	r3, [pc, #780]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	2238      	movs	r2, #56	@ 0x38
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800265c:	4bc0      	ldr	r3, [pc, #768]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2203      	movs	r2, #3
 8002662:	4013      	ands	r3, r2
 8002664:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	2b10      	cmp	r3, #16
 800266a:	d102      	bne.n	8002672 <HAL_RCC_OscConfig+0x3e>
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	2b03      	cmp	r3, #3
 8002670:	d002      	beq.n	8002678 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	2b08      	cmp	r3, #8
 8002676:	d10b      	bne.n	8002690 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002678:	4bb9      	ldr	r3, [pc, #740]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	2380      	movs	r3, #128	@ 0x80
 800267e:	029b      	lsls	r3, r3, #10
 8002680:	4013      	ands	r3, r2
 8002682:	d062      	beq.n	800274a <HAL_RCC_OscConfig+0x116>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d15e      	bne.n	800274a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e2d9      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	2380      	movs	r3, #128	@ 0x80
 8002696:	025b      	lsls	r3, r3, #9
 8002698:	429a      	cmp	r2, r3
 800269a:	d107      	bne.n	80026ac <HAL_RCC_OscConfig+0x78>
 800269c:	4bb0      	ldr	r3, [pc, #704]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4baf      	ldr	r3, [pc, #700]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 80026a2:	2180      	movs	r1, #128	@ 0x80
 80026a4:	0249      	lsls	r1, r1, #9
 80026a6:	430a      	orrs	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	e020      	b.n	80026ee <HAL_RCC_OscConfig+0xba>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	23a0      	movs	r3, #160	@ 0xa0
 80026b2:	02db      	lsls	r3, r3, #11
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d10e      	bne.n	80026d6 <HAL_RCC_OscConfig+0xa2>
 80026b8:	4ba9      	ldr	r3, [pc, #676]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4ba8      	ldr	r3, [pc, #672]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 80026be:	2180      	movs	r1, #128	@ 0x80
 80026c0:	02c9      	lsls	r1, r1, #11
 80026c2:	430a      	orrs	r2, r1
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	4ba6      	ldr	r3, [pc, #664]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	4ba5      	ldr	r3, [pc, #660]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 80026cc:	2180      	movs	r1, #128	@ 0x80
 80026ce:	0249      	lsls	r1, r1, #9
 80026d0:	430a      	orrs	r2, r1
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	e00b      	b.n	80026ee <HAL_RCC_OscConfig+0xba>
 80026d6:	4ba2      	ldr	r3, [pc, #648]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	4ba1      	ldr	r3, [pc, #644]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 80026dc:	49a1      	ldr	r1, [pc, #644]	@ (8002964 <HAL_RCC_OscConfig+0x330>)
 80026de:	400a      	ands	r2, r1
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	4b9f      	ldr	r3, [pc, #636]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	4b9e      	ldr	r3, [pc, #632]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 80026e8:	499f      	ldr	r1, [pc, #636]	@ (8002968 <HAL_RCC_OscConfig+0x334>)
 80026ea:	400a      	ands	r2, r1
 80026ec:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d014      	beq.n	8002720 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f6:	f7ff fba9 	bl	8001e4c <HAL_GetTick>
 80026fa:	0003      	movs	r3, r0
 80026fc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002700:	f7ff fba4 	bl	8001e4c <HAL_GetTick>
 8002704:	0002      	movs	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	@ 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e298      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002712:	4b93      	ldr	r3, [pc, #588]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	2380      	movs	r3, #128	@ 0x80
 8002718:	029b      	lsls	r3, r3, #10
 800271a:	4013      	ands	r3, r2
 800271c:	d0f0      	beq.n	8002700 <HAL_RCC_OscConfig+0xcc>
 800271e:	e015      	b.n	800274c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002720:	f7ff fb94 	bl	8001e4c <HAL_GetTick>
 8002724:	0003      	movs	r3, r0
 8002726:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800272a:	f7ff fb8f 	bl	8001e4c <HAL_GetTick>
 800272e:	0002      	movs	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b64      	cmp	r3, #100	@ 0x64
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e283      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800273c:	4b88      	ldr	r3, [pc, #544]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	2380      	movs	r3, #128	@ 0x80
 8002742:	029b      	lsls	r3, r3, #10
 8002744:	4013      	ands	r3, r2
 8002746:	d1f0      	bne.n	800272a <HAL_RCC_OscConfig+0xf6>
 8002748:	e000      	b.n	800274c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800274a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2202      	movs	r2, #2
 8002752:	4013      	ands	r3, r2
 8002754:	d100      	bne.n	8002758 <HAL_RCC_OscConfig+0x124>
 8002756:	e099      	b.n	800288c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002758:	4b81      	ldr	r3, [pc, #516]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2238      	movs	r2, #56	@ 0x38
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002762:	4b7f      	ldr	r3, [pc, #508]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	2203      	movs	r2, #3
 8002768:	4013      	ands	r3, r2
 800276a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	2b10      	cmp	r3, #16
 8002770:	d102      	bne.n	8002778 <HAL_RCC_OscConfig+0x144>
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d002      	beq.n	800277e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d135      	bne.n	80027ea <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800277e:	4b78      	ldr	r3, [pc, #480]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	2380      	movs	r3, #128	@ 0x80
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4013      	ands	r3, r2
 8002788:	d005      	beq.n	8002796 <HAL_RCC_OscConfig+0x162>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e256      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002796:	4b72      	ldr	r3, [pc, #456]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	4a74      	ldr	r2, [pc, #464]	@ (800296c <HAL_RCC_OscConfig+0x338>)
 800279c:	4013      	ands	r3, r2
 800279e:	0019      	movs	r1, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	021a      	lsls	r2, r3, #8
 80027a6:	4b6e      	ldr	r3, [pc, #440]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 80027a8:	430a      	orrs	r2, r1
 80027aa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d112      	bne.n	80027d8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80027b2:	4b6b      	ldr	r3, [pc, #428]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a6e      	ldr	r2, [pc, #440]	@ (8002970 <HAL_RCC_OscConfig+0x33c>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	0019      	movs	r1, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	4b67      	ldr	r3, [pc, #412]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 80027c2:	430a      	orrs	r2, r1
 80027c4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80027c6:	4b66      	ldr	r3, [pc, #408]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	0adb      	lsrs	r3, r3, #11
 80027cc:	2207      	movs	r2, #7
 80027ce:	4013      	ands	r3, r2
 80027d0:	4a68      	ldr	r2, [pc, #416]	@ (8002974 <HAL_RCC_OscConfig+0x340>)
 80027d2:	40da      	lsrs	r2, r3
 80027d4:	4b68      	ldr	r3, [pc, #416]	@ (8002978 <HAL_RCC_OscConfig+0x344>)
 80027d6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027d8:	4b68      	ldr	r3, [pc, #416]	@ (800297c <HAL_RCC_OscConfig+0x348>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	0018      	movs	r0, r3
 80027de:	f7ff faeb 	bl	8001db8 <HAL_InitTick>
 80027e2:	1e03      	subs	r3, r0, #0
 80027e4:	d051      	beq.n	800288a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e22c      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d030      	beq.n	8002854 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80027f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a5e      	ldr	r2, [pc, #376]	@ (8002970 <HAL_RCC_OscConfig+0x33c>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	0019      	movs	r1, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	4b57      	ldr	r3, [pc, #348]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 8002802:	430a      	orrs	r2, r1
 8002804:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002806:	4b56      	ldr	r3, [pc, #344]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4b55      	ldr	r3, [pc, #340]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 800280c:	2180      	movs	r1, #128	@ 0x80
 800280e:	0049      	lsls	r1, r1, #1
 8002810:	430a      	orrs	r2, r1
 8002812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7ff fb1a 	bl	8001e4c <HAL_GetTick>
 8002818:	0003      	movs	r3, r0
 800281a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800281e:	f7ff fb15 	bl	8001e4c <HAL_GetTick>
 8002822:	0002      	movs	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e209      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002830:	4b4b      	ldr	r3, [pc, #300]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	2380      	movs	r3, #128	@ 0x80
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4013      	ands	r3, r2
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283c:	4b48      	ldr	r3, [pc, #288]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	4a4a      	ldr	r2, [pc, #296]	@ (800296c <HAL_RCC_OscConfig+0x338>)
 8002842:	4013      	ands	r3, r2
 8002844:	0019      	movs	r1, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	021a      	lsls	r2, r3, #8
 800284c:	4b44      	ldr	r3, [pc, #272]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 800284e:	430a      	orrs	r2, r1
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	e01b      	b.n	800288c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002854:	4b42      	ldr	r3, [pc, #264]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b41      	ldr	r3, [pc, #260]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 800285a:	4949      	ldr	r1, [pc, #292]	@ (8002980 <HAL_RCC_OscConfig+0x34c>)
 800285c:	400a      	ands	r2, r1
 800285e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7ff faf4 	bl	8001e4c <HAL_GetTick>
 8002864:	0003      	movs	r3, r0
 8002866:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800286a:	f7ff faef 	bl	8001e4c <HAL_GetTick>
 800286e:	0002      	movs	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e1e3      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800287c:	4b38      	ldr	r3, [pc, #224]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	2380      	movs	r3, #128	@ 0x80
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4013      	ands	r3, r2
 8002886:	d1f0      	bne.n	800286a <HAL_RCC_OscConfig+0x236>
 8002888:	e000      	b.n	800288c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800288a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2208      	movs	r2, #8
 8002892:	4013      	ands	r3, r2
 8002894:	d047      	beq.n	8002926 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002896:	4b32      	ldr	r3, [pc, #200]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2238      	movs	r2, #56	@ 0x38
 800289c:	4013      	ands	r3, r2
 800289e:	2b18      	cmp	r3, #24
 80028a0:	d10a      	bne.n	80028b8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80028a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 80028a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028a6:	2202      	movs	r2, #2
 80028a8:	4013      	ands	r3, r2
 80028aa:	d03c      	beq.n	8002926 <HAL_RCC_OscConfig+0x2f2>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d138      	bne.n	8002926 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e1c5      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d019      	beq.n	80028f4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80028c0:	4b27      	ldr	r3, [pc, #156]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 80028c2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80028c4:	4b26      	ldr	r3, [pc, #152]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 80028c6:	2101      	movs	r1, #1
 80028c8:	430a      	orrs	r2, r1
 80028ca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028cc:	f7ff fabe 	bl	8001e4c <HAL_GetTick>
 80028d0:	0003      	movs	r3, r0
 80028d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d6:	f7ff fab9 	bl	8001e4c <HAL_GetTick>
 80028da:	0002      	movs	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e1ad      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 80028ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028ec:	2202      	movs	r2, #2
 80028ee:	4013      	ands	r3, r2
 80028f0:	d0f1      	beq.n	80028d6 <HAL_RCC_OscConfig+0x2a2>
 80028f2:	e018      	b.n	8002926 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80028f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 80028f6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80028f8:	4b19      	ldr	r3, [pc, #100]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 80028fa:	2101      	movs	r1, #1
 80028fc:	438a      	bics	r2, r1
 80028fe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002900:	f7ff faa4 	bl	8001e4c <HAL_GetTick>
 8002904:	0003      	movs	r3, r0
 8002906:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800290a:	f7ff fa9f 	bl	8001e4c <HAL_GetTick>
 800290e:	0002      	movs	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e193      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800291c:	4b10      	ldr	r3, [pc, #64]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 800291e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002920:	2202      	movs	r2, #2
 8002922:	4013      	ands	r3, r2
 8002924:	d1f1      	bne.n	800290a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2204      	movs	r2, #4
 800292c:	4013      	ands	r3, r2
 800292e:	d100      	bne.n	8002932 <HAL_RCC_OscConfig+0x2fe>
 8002930:	e0c6      	b.n	8002ac0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002932:	231f      	movs	r3, #31
 8002934:	18fb      	adds	r3, r7, r3
 8002936:	2200      	movs	r2, #0
 8002938:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800293a:	4b09      	ldr	r3, [pc, #36]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2238      	movs	r2, #56	@ 0x38
 8002940:	4013      	ands	r3, r2
 8002942:	2b20      	cmp	r3, #32
 8002944:	d11e      	bne.n	8002984 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002946:	4b06      	ldr	r3, [pc, #24]	@ (8002960 <HAL_RCC_OscConfig+0x32c>)
 8002948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800294a:	2202      	movs	r2, #2
 800294c:	4013      	ands	r3, r2
 800294e:	d100      	bne.n	8002952 <HAL_RCC_OscConfig+0x31e>
 8002950:	e0b6      	b.n	8002ac0 <HAL_RCC_OscConfig+0x48c>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d000      	beq.n	800295c <HAL_RCC_OscConfig+0x328>
 800295a:	e0b1      	b.n	8002ac0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e171      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
 8002960:	40021000 	.word	0x40021000
 8002964:	fffeffff 	.word	0xfffeffff
 8002968:	fffbffff 	.word	0xfffbffff
 800296c:	ffff80ff 	.word	0xffff80ff
 8002970:	ffffc7ff 	.word	0xffffc7ff
 8002974:	00f42400 	.word	0x00f42400
 8002978:	20000018 	.word	0x20000018
 800297c:	20000034 	.word	0x20000034
 8002980:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002984:	4bb1      	ldr	r3, [pc, #708]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002986:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002988:	2380      	movs	r3, #128	@ 0x80
 800298a:	055b      	lsls	r3, r3, #21
 800298c:	4013      	ands	r3, r2
 800298e:	d101      	bne.n	8002994 <HAL_RCC_OscConfig+0x360>
 8002990:	2301      	movs	r3, #1
 8002992:	e000      	b.n	8002996 <HAL_RCC_OscConfig+0x362>
 8002994:	2300      	movs	r3, #0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d011      	beq.n	80029be <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800299a:	4bac      	ldr	r3, [pc, #688]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 800299c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800299e:	4bab      	ldr	r3, [pc, #684]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 80029a0:	2180      	movs	r1, #128	@ 0x80
 80029a2:	0549      	lsls	r1, r1, #21
 80029a4:	430a      	orrs	r2, r1
 80029a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80029a8:	4ba8      	ldr	r3, [pc, #672]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 80029aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029ac:	2380      	movs	r3, #128	@ 0x80
 80029ae:	055b      	lsls	r3, r3, #21
 80029b0:	4013      	ands	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80029b6:	231f      	movs	r3, #31
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	2201      	movs	r2, #1
 80029bc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029be:	4ba4      	ldr	r3, [pc, #656]	@ (8002c50 <HAL_RCC_OscConfig+0x61c>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	2380      	movs	r3, #128	@ 0x80
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	4013      	ands	r3, r2
 80029c8:	d11a      	bne.n	8002a00 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029ca:	4ba1      	ldr	r3, [pc, #644]	@ (8002c50 <HAL_RCC_OscConfig+0x61c>)
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	4ba0      	ldr	r3, [pc, #640]	@ (8002c50 <HAL_RCC_OscConfig+0x61c>)
 80029d0:	2180      	movs	r1, #128	@ 0x80
 80029d2:	0049      	lsls	r1, r1, #1
 80029d4:	430a      	orrs	r2, r1
 80029d6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80029d8:	f7ff fa38 	bl	8001e4c <HAL_GetTick>
 80029dc:	0003      	movs	r3, r0
 80029de:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e2:	f7ff fa33 	bl	8001e4c <HAL_GetTick>
 80029e6:	0002      	movs	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e127      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029f4:	4b96      	ldr	r3, [pc, #600]	@ (8002c50 <HAL_RCC_OscConfig+0x61c>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	2380      	movs	r3, #128	@ 0x80
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	4013      	ands	r3, r2
 80029fe:	d0f0      	beq.n	80029e2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d106      	bne.n	8002a16 <HAL_RCC_OscConfig+0x3e2>
 8002a08:	4b90      	ldr	r3, [pc, #576]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002a0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a0c:	4b8f      	ldr	r3, [pc, #572]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002a0e:	2101      	movs	r1, #1
 8002a10:	430a      	orrs	r2, r1
 8002a12:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a14:	e01c      	b.n	8002a50 <HAL_RCC_OscConfig+0x41c>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2b05      	cmp	r3, #5
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCC_OscConfig+0x404>
 8002a1e:	4b8b      	ldr	r3, [pc, #556]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002a20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a22:	4b8a      	ldr	r3, [pc, #552]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002a24:	2104      	movs	r1, #4
 8002a26:	430a      	orrs	r2, r1
 8002a28:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a2a:	4b88      	ldr	r3, [pc, #544]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002a2c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a2e:	4b87      	ldr	r3, [pc, #540]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002a30:	2101      	movs	r1, #1
 8002a32:	430a      	orrs	r2, r1
 8002a34:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a36:	e00b      	b.n	8002a50 <HAL_RCC_OscConfig+0x41c>
 8002a38:	4b84      	ldr	r3, [pc, #528]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002a3a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a3c:	4b83      	ldr	r3, [pc, #524]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002a3e:	2101      	movs	r1, #1
 8002a40:	438a      	bics	r2, r1
 8002a42:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a44:	4b81      	ldr	r3, [pc, #516]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002a46:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a48:	4b80      	ldr	r3, [pc, #512]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002a4a:	2104      	movs	r1, #4
 8002a4c:	438a      	bics	r2, r1
 8002a4e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d014      	beq.n	8002a82 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a58:	f7ff f9f8 	bl	8001e4c <HAL_GetTick>
 8002a5c:	0003      	movs	r3, r0
 8002a5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a60:	e009      	b.n	8002a76 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a62:	f7ff f9f3 	bl	8001e4c <HAL_GetTick>
 8002a66:	0002      	movs	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	4a79      	ldr	r2, [pc, #484]	@ (8002c54 <HAL_RCC_OscConfig+0x620>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e0e6      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a76:	4b75      	ldr	r3, [pc, #468]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCC_OscConfig+0x42e>
 8002a80:	e013      	b.n	8002aaa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a82:	f7ff f9e3 	bl	8001e4c <HAL_GetTick>
 8002a86:	0003      	movs	r3, r0
 8002a88:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a8a:	e009      	b.n	8002aa0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8c:	f7ff f9de 	bl	8001e4c <HAL_GetTick>
 8002a90:	0002      	movs	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	4a6f      	ldr	r2, [pc, #444]	@ (8002c54 <HAL_RCC_OscConfig+0x620>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e0d1      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002aa0:	4b6a      	ldr	r3, [pc, #424]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002aaa:	231f      	movs	r3, #31
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d105      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002ab4:	4b65      	ldr	r3, [pc, #404]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002ab6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ab8:	4b64      	ldr	r3, [pc, #400]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002aba:	4967      	ldr	r1, [pc, #412]	@ (8002c58 <HAL_RCC_OscConfig+0x624>)
 8002abc:	400a      	ands	r2, r1
 8002abe:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d100      	bne.n	8002aca <HAL_RCC_OscConfig+0x496>
 8002ac8:	e0bb      	b.n	8002c42 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aca:	4b60      	ldr	r3, [pc, #384]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	2238      	movs	r2, #56	@ 0x38
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2b10      	cmp	r3, #16
 8002ad4:	d100      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x4a4>
 8002ad6:	e07b      	b.n	8002bd0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d156      	bne.n	8002b8e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae0:	4b5a      	ldr	r3, [pc, #360]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	4b59      	ldr	r3, [pc, #356]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002ae6:	495d      	ldr	r1, [pc, #372]	@ (8002c5c <HAL_RCC_OscConfig+0x628>)
 8002ae8:	400a      	ands	r2, r1
 8002aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7ff f9ae 	bl	8001e4c <HAL_GetTick>
 8002af0:	0003      	movs	r3, r0
 8002af2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af6:	f7ff f9a9 	bl	8001e4c <HAL_GetTick>
 8002afa:	0002      	movs	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e09d      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b08:	4b50      	ldr	r3, [pc, #320]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	2380      	movs	r3, #128	@ 0x80
 8002b0e:	049b      	lsls	r3, r3, #18
 8002b10:	4013      	ands	r3, r2
 8002b12:	d1f0      	bne.n	8002af6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b14:	4b4d      	ldr	r3, [pc, #308]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	4a51      	ldr	r2, [pc, #324]	@ (8002c60 <HAL_RCC_OscConfig+0x62c>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	0019      	movs	r1, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1a      	ldr	r2, [r3, #32]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2c:	021b      	lsls	r3, r3, #8
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b40:	431a      	orrs	r2, r3
 8002b42:	4b42      	ldr	r3, [pc, #264]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002b44:	430a      	orrs	r2, r1
 8002b46:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b48:	4b40      	ldr	r3, [pc, #256]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	4b3f      	ldr	r3, [pc, #252]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002b4e:	2180      	movs	r1, #128	@ 0x80
 8002b50:	0449      	lsls	r1, r1, #17
 8002b52:	430a      	orrs	r2, r1
 8002b54:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002b56:	4b3d      	ldr	r3, [pc, #244]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	4b3c      	ldr	r3, [pc, #240]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002b5c:	2180      	movs	r1, #128	@ 0x80
 8002b5e:	0549      	lsls	r1, r1, #21
 8002b60:	430a      	orrs	r2, r1
 8002b62:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b64:	f7ff f972 	bl	8001e4c <HAL_GetTick>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6e:	f7ff f96d 	bl	8001e4c <HAL_GetTick>
 8002b72:	0002      	movs	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e061      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b80:	4b32      	ldr	r3, [pc, #200]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	2380      	movs	r3, #128	@ 0x80
 8002b86:	049b      	lsls	r3, r3, #18
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0x53a>
 8002b8c:	e059      	b.n	8002c42 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	4b2e      	ldr	r3, [pc, #184]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002b94:	4931      	ldr	r1, [pc, #196]	@ (8002c5c <HAL_RCC_OscConfig+0x628>)
 8002b96:	400a      	ands	r2, r1
 8002b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9a:	f7ff f957 	bl	8001e4c <HAL_GetTick>
 8002b9e:	0003      	movs	r3, r0
 8002ba0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba4:	f7ff f952 	bl	8001e4c <HAL_GetTick>
 8002ba8:	0002      	movs	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e046      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb6:	4b25      	ldr	r3, [pc, #148]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	2380      	movs	r3, #128	@ 0x80
 8002bbc:	049b      	lsls	r3, r3, #18
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002bc2:	4b22      	ldr	r3, [pc, #136]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	4b21      	ldr	r3, [pc, #132]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002bc8:	4926      	ldr	r1, [pc, #152]	@ (8002c64 <HAL_RCC_OscConfig+0x630>)
 8002bca:	400a      	ands	r2, r1
 8002bcc:	60da      	str	r2, [r3, #12]
 8002bce:	e038      	b.n	8002c42 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e033      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c4c <HAL_RCC_OscConfig+0x618>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2203      	movs	r2, #3
 8002be6:	401a      	ands	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d126      	bne.n	8002c3e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	2270      	movs	r2, #112	@ 0x70
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d11f      	bne.n	8002c3e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	23fe      	movs	r3, #254	@ 0xfe
 8002c02:	01db      	lsls	r3, r3, #7
 8002c04:	401a      	ands	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c0a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d116      	bne.n	8002c3e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	23f8      	movs	r3, #248	@ 0xf8
 8002c14:	039b      	lsls	r3, r3, #14
 8002c16:	401a      	ands	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d10e      	bne.n	8002c3e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	23e0      	movs	r3, #224	@ 0xe0
 8002c24:	051b      	lsls	r3, r3, #20
 8002c26:	401a      	ands	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d106      	bne.n	8002c3e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	0f5b      	lsrs	r3, r3, #29
 8002c34:	075a      	lsls	r2, r3, #29
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d001      	beq.n	8002c42 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	0018      	movs	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b008      	add	sp, #32
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40007000 	.word	0x40007000
 8002c54:	00001388 	.word	0x00001388
 8002c58:	efffffff 	.word	0xefffffff
 8002c5c:	feffffff 	.word	0xfeffffff
 8002c60:	11c1808c 	.word	0x11c1808c
 8002c64:	eefefffc 	.word	0xeefefffc

08002c68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0e9      	b.n	8002e50 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c7c:	4b76      	ldr	r3, [pc, #472]	@ (8002e58 <HAL_RCC_ClockConfig+0x1f0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2207      	movs	r2, #7
 8002c82:	4013      	ands	r3, r2
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d91e      	bls.n	8002cc8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8a:	4b73      	ldr	r3, [pc, #460]	@ (8002e58 <HAL_RCC_ClockConfig+0x1f0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2207      	movs	r2, #7
 8002c90:	4393      	bics	r3, r2
 8002c92:	0019      	movs	r1, r3
 8002c94:	4b70      	ldr	r3, [pc, #448]	@ (8002e58 <HAL_RCC_ClockConfig+0x1f0>)
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c9c:	f7ff f8d6 	bl	8001e4c <HAL_GetTick>
 8002ca0:	0003      	movs	r3, r0
 8002ca2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ca4:	e009      	b.n	8002cba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca6:	f7ff f8d1 	bl	8001e4c <HAL_GetTick>
 8002caa:	0002      	movs	r2, r0
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	4a6a      	ldr	r2, [pc, #424]	@ (8002e5c <HAL_RCC_ClockConfig+0x1f4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e0ca      	b.n	8002e50 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002cba:	4b67      	ldr	r3, [pc, #412]	@ (8002e58 <HAL_RCC_ClockConfig+0x1f0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2207      	movs	r2, #7
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d1ee      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2202      	movs	r2, #2
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d015      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2204      	movs	r2, #4
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d006      	beq.n	8002cea <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002cdc:	4b60      	ldr	r3, [pc, #384]	@ (8002e60 <HAL_RCC_ClockConfig+0x1f8>)
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	4b5f      	ldr	r3, [pc, #380]	@ (8002e60 <HAL_RCC_ClockConfig+0x1f8>)
 8002ce2:	21e0      	movs	r1, #224	@ 0xe0
 8002ce4:	01c9      	lsls	r1, r1, #7
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cea:	4b5d      	ldr	r3, [pc, #372]	@ (8002e60 <HAL_RCC_ClockConfig+0x1f8>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	4a5d      	ldr	r2, [pc, #372]	@ (8002e64 <HAL_RCC_ClockConfig+0x1fc>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	0019      	movs	r1, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	4b59      	ldr	r3, [pc, #356]	@ (8002e60 <HAL_RCC_ClockConfig+0x1f8>)
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2201      	movs	r2, #1
 8002d04:	4013      	ands	r3, r2
 8002d06:	d057      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d107      	bne.n	8002d20 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d10:	4b53      	ldr	r3, [pc, #332]	@ (8002e60 <HAL_RCC_ClockConfig+0x1f8>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	2380      	movs	r3, #128	@ 0x80
 8002d16:	029b      	lsls	r3, r3, #10
 8002d18:	4013      	ands	r3, r2
 8002d1a:	d12b      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e097      	b.n	8002e50 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d107      	bne.n	8002d38 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d28:	4b4d      	ldr	r3, [pc, #308]	@ (8002e60 <HAL_RCC_ClockConfig+0x1f8>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	2380      	movs	r3, #128	@ 0x80
 8002d2e:	049b      	lsls	r3, r3, #18
 8002d30:	4013      	ands	r3, r2
 8002d32:	d11f      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e08b      	b.n	8002e50 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d107      	bne.n	8002d50 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d40:	4b47      	ldr	r3, [pc, #284]	@ (8002e60 <HAL_RCC_ClockConfig+0x1f8>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	2380      	movs	r3, #128	@ 0x80
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d113      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e07f      	b.n	8002e50 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d106      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d58:	4b41      	ldr	r3, [pc, #260]	@ (8002e60 <HAL_RCC_ClockConfig+0x1f8>)
 8002d5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d108      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e074      	b.n	8002e50 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d66:	4b3e      	ldr	r3, [pc, #248]	@ (8002e60 <HAL_RCC_ClockConfig+0x1f8>)
 8002d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d101      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e06d      	b.n	8002e50 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d74:	4b3a      	ldr	r3, [pc, #232]	@ (8002e60 <HAL_RCC_ClockConfig+0x1f8>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2207      	movs	r2, #7
 8002d7a:	4393      	bics	r3, r2
 8002d7c:	0019      	movs	r1, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	4b37      	ldr	r3, [pc, #220]	@ (8002e60 <HAL_RCC_ClockConfig+0x1f8>)
 8002d84:	430a      	orrs	r2, r1
 8002d86:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d88:	f7ff f860 	bl	8001e4c <HAL_GetTick>
 8002d8c:	0003      	movs	r3, r0
 8002d8e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d90:	e009      	b.n	8002da6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d92:	f7ff f85b 	bl	8001e4c <HAL_GetTick>
 8002d96:	0002      	movs	r2, r0
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	4a2f      	ldr	r2, [pc, #188]	@ (8002e5c <HAL_RCC_ClockConfig+0x1f4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e054      	b.n	8002e50 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da6:	4b2e      	ldr	r3, [pc, #184]	@ (8002e60 <HAL_RCC_ClockConfig+0x1f8>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2238      	movs	r2, #56	@ 0x38
 8002dac:	401a      	ands	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d1ec      	bne.n	8002d92 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002db8:	4b27      	ldr	r3, [pc, #156]	@ (8002e58 <HAL_RCC_ClockConfig+0x1f0>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2207      	movs	r2, #7
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d21e      	bcs.n	8002e04 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc6:	4b24      	ldr	r3, [pc, #144]	@ (8002e58 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2207      	movs	r2, #7
 8002dcc:	4393      	bics	r3, r2
 8002dce:	0019      	movs	r1, r3
 8002dd0:	4b21      	ldr	r3, [pc, #132]	@ (8002e58 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002dd8:	f7ff f838 	bl	8001e4c <HAL_GetTick>
 8002ddc:	0003      	movs	r3, r0
 8002dde:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002de0:	e009      	b.n	8002df6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de2:	f7ff f833 	bl	8001e4c <HAL_GetTick>
 8002de6:	0002      	movs	r2, r0
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	4a1b      	ldr	r2, [pc, #108]	@ (8002e5c <HAL_RCC_ClockConfig+0x1f4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e02c      	b.n	8002e50 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002df6:	4b18      	ldr	r3, [pc, #96]	@ (8002e58 <HAL_RCC_ClockConfig+0x1f0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2207      	movs	r2, #7
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d1ee      	bne.n	8002de2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2204      	movs	r2, #4
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d009      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002e0e:	4b14      	ldr	r3, [pc, #80]	@ (8002e60 <HAL_RCC_ClockConfig+0x1f8>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	4a15      	ldr	r2, [pc, #84]	@ (8002e68 <HAL_RCC_ClockConfig+0x200>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	0019      	movs	r1, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	4b10      	ldr	r3, [pc, #64]	@ (8002e60 <HAL_RCC_ClockConfig+0x1f8>)
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002e22:	f000 f829 	bl	8002e78 <HAL_RCC_GetSysClockFreq>
 8002e26:	0001      	movs	r1, r0
 8002e28:	4b0d      	ldr	r3, [pc, #52]	@ (8002e60 <HAL_RCC_ClockConfig+0x1f8>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	0a1b      	lsrs	r3, r3, #8
 8002e2e:	220f      	movs	r2, #15
 8002e30:	401a      	ands	r2, r3
 8002e32:	4b0e      	ldr	r3, [pc, #56]	@ (8002e6c <HAL_RCC_ClockConfig+0x204>)
 8002e34:	0092      	lsls	r2, r2, #2
 8002e36:	58d3      	ldr	r3, [r2, r3]
 8002e38:	221f      	movs	r2, #31
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	000a      	movs	r2, r1
 8002e3e:	40da      	lsrs	r2, r3
 8002e40:	4b0b      	ldr	r3, [pc, #44]	@ (8002e70 <HAL_RCC_ClockConfig+0x208>)
 8002e42:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002e44:	4b0b      	ldr	r3, [pc, #44]	@ (8002e74 <HAL_RCC_ClockConfig+0x20c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f7fe ffb5 	bl	8001db8 <HAL_InitTick>
 8002e4e:	0003      	movs	r3, r0
}
 8002e50:	0018      	movs	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b004      	add	sp, #16
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40022000 	.word	0x40022000
 8002e5c:	00001388 	.word	0x00001388
 8002e60:	40021000 	.word	0x40021000
 8002e64:	fffff0ff 	.word	0xfffff0ff
 8002e68:	ffff8fff 	.word	0xffff8fff
 8002e6c:	08006960 	.word	0x08006960
 8002e70:	20000018 	.word	0x20000018
 8002e74:	20000034 	.word	0x20000034

08002e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e7e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2238      	movs	r2, #56	@ 0x38
 8002e84:	4013      	ands	r3, r2
 8002e86:	d10f      	bne.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002e88:	4b39      	ldr	r3, [pc, #228]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	0adb      	lsrs	r3, r3, #11
 8002e8e:	2207      	movs	r2, #7
 8002e90:	4013      	ands	r3, r2
 8002e92:	2201      	movs	r2, #1
 8002e94:	409a      	lsls	r2, r3
 8002e96:	0013      	movs	r3, r2
 8002e98:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002e9a:	6839      	ldr	r1, [r7, #0]
 8002e9c:	4835      	ldr	r0, [pc, #212]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e9e:	f7fd f93b 	bl	8000118 <__udivsi3>
 8002ea2:	0003      	movs	r3, r0
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	e05d      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ea8:	4b31      	ldr	r3, [pc, #196]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2238      	movs	r2, #56	@ 0x38
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d102      	bne.n	8002eba <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002eb4:	4b30      	ldr	r3, [pc, #192]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0x100>)
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	e054      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eba:	4b2d      	ldr	r3, [pc, #180]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2238      	movs	r2, #56	@ 0x38
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b10      	cmp	r3, #16
 8002ec4:	d138      	bne.n	8002f38 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002ec6:	4b2a      	ldr	r3, [pc, #168]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	2203      	movs	r2, #3
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ed0:	4b27      	ldr	r3, [pc, #156]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	2207      	movs	r2, #7
 8002ed8:	4013      	ands	r3, r2
 8002eda:	3301      	adds	r3, #1
 8002edc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d10d      	bne.n	8002f00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	4824      	ldr	r0, [pc, #144]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0x100>)
 8002ee8:	f7fd f916 	bl	8000118 <__udivsi3>
 8002eec:	0003      	movs	r3, r0
 8002eee:	0019      	movs	r1, r3
 8002ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	0a1b      	lsrs	r3, r3, #8
 8002ef6:	227f      	movs	r2, #127	@ 0x7f
 8002ef8:	4013      	ands	r3, r2
 8002efa:	434b      	muls	r3, r1
 8002efc:	617b      	str	r3, [r7, #20]
        break;
 8002efe:	e00d      	b.n	8002f1c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002f00:	68b9      	ldr	r1, [r7, #8]
 8002f02:	481c      	ldr	r0, [pc, #112]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f04:	f7fd f908 	bl	8000118 <__udivsi3>
 8002f08:	0003      	movs	r3, r0
 8002f0a:	0019      	movs	r1, r3
 8002f0c:	4b18      	ldr	r3, [pc, #96]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	0a1b      	lsrs	r3, r3, #8
 8002f12:	227f      	movs	r2, #127	@ 0x7f
 8002f14:	4013      	ands	r3, r2
 8002f16:	434b      	muls	r3, r1
 8002f18:	617b      	str	r3, [r7, #20]
        break;
 8002f1a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002f1c:	4b14      	ldr	r3, [pc, #80]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	0f5b      	lsrs	r3, r3, #29
 8002f22:	2207      	movs	r2, #7
 8002f24:	4013      	ands	r3, r2
 8002f26:	3301      	adds	r3, #1
 8002f28:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	6978      	ldr	r0, [r7, #20]
 8002f2e:	f7fd f8f3 	bl	8000118 <__udivsi3>
 8002f32:	0003      	movs	r3, r0
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	e015      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002f38:	4b0d      	ldr	r3, [pc, #52]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2238      	movs	r2, #56	@ 0x38
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2b20      	cmp	r3, #32
 8002f42:	d103      	bne.n	8002f4c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002f44:	2380      	movs	r3, #128	@ 0x80
 8002f46:	021b      	lsls	r3, r3, #8
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	e00b      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002f4c:	4b08      	ldr	r3, [pc, #32]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2238      	movs	r2, #56	@ 0x38
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b18      	cmp	r3, #24
 8002f56:	d103      	bne.n	8002f60 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002f58:	23fa      	movs	r3, #250	@ 0xfa
 8002f5a:	01db      	lsls	r3, r3, #7
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	e001      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002f64:	693b      	ldr	r3, [r7, #16]
}
 8002f66:	0018      	movs	r0, r3
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	b006      	add	sp, #24
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	46c0      	nop			@ (mov r8, r8)
 8002f70:	40021000 	.word	0x40021000
 8002f74:	00f42400 	.word	0x00f42400
 8002f78:	007a1200 	.word	0x007a1200

08002f7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f80:	4b02      	ldr	r3, [pc, #8]	@ (8002f8c <HAL_RCC_GetHCLKFreq+0x10>)
 8002f82:	681b      	ldr	r3, [r3, #0]
}
 8002f84:	0018      	movs	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	46c0      	nop			@ (mov r8, r8)
 8002f8c:	20000018 	.word	0x20000018

08002f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f90:	b5b0      	push	{r4, r5, r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002f94:	f7ff fff2 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002f98:	0004      	movs	r4, r0
 8002f9a:	f7ff fb3f 	bl	800261c <LL_RCC_GetAPB1Prescaler>
 8002f9e:	0003      	movs	r3, r0
 8002fa0:	0b1a      	lsrs	r2, r3, #12
 8002fa2:	4b05      	ldr	r3, [pc, #20]	@ (8002fb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fa4:	0092      	lsls	r2, r2, #2
 8002fa6:	58d3      	ldr	r3, [r2, r3]
 8002fa8:	221f      	movs	r2, #31
 8002faa:	4013      	ands	r3, r2
 8002fac:	40dc      	lsrs	r4, r3
 8002fae:	0023      	movs	r3, r4
}
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8002fb6:	46c0      	nop			@ (mov r8, r8)
 8002fb8:	080069a0 	.word	0x080069a0

08002fbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002fc4:	2313      	movs	r3, #19
 8002fc6:	18fb      	adds	r3, r7, r3
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fcc:	2312      	movs	r3, #18
 8002fce:	18fb      	adds	r3, r7, r3
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	2380      	movs	r3, #128	@ 0x80
 8002fda:	029b      	lsls	r3, r3, #10
 8002fdc:	4013      	ands	r3, r2
 8002fde:	d100      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002fe0:	e0a3      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe2:	2011      	movs	r0, #17
 8002fe4:	183b      	adds	r3, r7, r0
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fea:	4bc3      	ldr	r3, [pc, #780]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fee:	2380      	movs	r3, #128	@ 0x80
 8002ff0:	055b      	lsls	r3, r3, #21
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d110      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff6:	4bc0      	ldr	r3, [pc, #768]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ff8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ffa:	4bbf      	ldr	r3, [pc, #764]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ffc:	2180      	movs	r1, #128	@ 0x80
 8002ffe:	0549      	lsls	r1, r1, #21
 8003000:	430a      	orrs	r2, r1
 8003002:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003004:	4bbc      	ldr	r3, [pc, #752]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003006:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003008:	2380      	movs	r3, #128	@ 0x80
 800300a:	055b      	lsls	r3, r3, #21
 800300c:	4013      	ands	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003012:	183b      	adds	r3, r7, r0
 8003014:	2201      	movs	r2, #1
 8003016:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003018:	4bb8      	ldr	r3, [pc, #736]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4bb7      	ldr	r3, [pc, #732]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800301e:	2180      	movs	r1, #128	@ 0x80
 8003020:	0049      	lsls	r1, r1, #1
 8003022:	430a      	orrs	r2, r1
 8003024:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003026:	f7fe ff11 	bl	8001e4c <HAL_GetTick>
 800302a:	0003      	movs	r3, r0
 800302c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800302e:	e00b      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003030:	f7fe ff0c 	bl	8001e4c <HAL_GetTick>
 8003034:	0002      	movs	r2, r0
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d904      	bls.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800303e:	2313      	movs	r3, #19
 8003040:	18fb      	adds	r3, r7, r3
 8003042:	2203      	movs	r2, #3
 8003044:	701a      	strb	r2, [r3, #0]
        break;
 8003046:	e005      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003048:	4bac      	ldr	r3, [pc, #688]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	2380      	movs	r3, #128	@ 0x80
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	4013      	ands	r3, r2
 8003052:	d0ed      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003054:	2313      	movs	r3, #19
 8003056:	18fb      	adds	r3, r7, r3
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d154      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800305e:	4ba6      	ldr	r3, [pc, #664]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003060:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003062:	23c0      	movs	r3, #192	@ 0xc0
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4013      	ands	r3, r2
 8003068:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d019      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	429a      	cmp	r2, r3
 8003078:	d014      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800307a:	4b9f      	ldr	r3, [pc, #636]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800307c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800307e:	4aa0      	ldr	r2, [pc, #640]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003080:	4013      	ands	r3, r2
 8003082:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003084:	4b9c      	ldr	r3, [pc, #624]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003086:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003088:	4b9b      	ldr	r3, [pc, #620]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800308a:	2180      	movs	r1, #128	@ 0x80
 800308c:	0249      	lsls	r1, r1, #9
 800308e:	430a      	orrs	r2, r1
 8003090:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003092:	4b99      	ldr	r3, [pc, #612]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003094:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003096:	4b98      	ldr	r3, [pc, #608]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003098:	499a      	ldr	r1, [pc, #616]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800309a:	400a      	ands	r2, r1
 800309c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800309e:	4b96      	ldr	r3, [pc, #600]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	2201      	movs	r2, #1
 80030a8:	4013      	ands	r3, r2
 80030aa:	d016      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7fe fece 	bl	8001e4c <HAL_GetTick>
 80030b0:	0003      	movs	r3, r0
 80030b2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030b4:	e00c      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b6:	f7fe fec9 	bl	8001e4c <HAL_GetTick>
 80030ba:	0002      	movs	r2, r0
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	4a91      	ldr	r2, [pc, #580]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d904      	bls.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80030c6:	2313      	movs	r3, #19
 80030c8:	18fb      	adds	r3, r7, r3
 80030ca:	2203      	movs	r2, #3
 80030cc:	701a      	strb	r2, [r3, #0]
            break;
 80030ce:	e004      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030d0:	4b89      	ldr	r3, [pc, #548]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d4:	2202      	movs	r2, #2
 80030d6:	4013      	ands	r3, r2
 80030d8:	d0ed      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80030da:	2313      	movs	r3, #19
 80030dc:	18fb      	adds	r3, r7, r3
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10a      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030e4:	4b84      	ldr	r3, [pc, #528]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e8:	4a85      	ldr	r2, [pc, #532]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	0019      	movs	r1, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030f2:	4b81      	ldr	r3, [pc, #516]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030f4:	430a      	orrs	r2, r1
 80030f6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80030f8:	e00c      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030fa:	2312      	movs	r3, #18
 80030fc:	18fb      	adds	r3, r7, r3
 80030fe:	2213      	movs	r2, #19
 8003100:	18ba      	adds	r2, r7, r2
 8003102:	7812      	ldrb	r2, [r2, #0]
 8003104:	701a      	strb	r2, [r3, #0]
 8003106:	e005      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003108:	2312      	movs	r3, #18
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	2213      	movs	r2, #19
 800310e:	18ba      	adds	r2, r7, r2
 8003110:	7812      	ldrb	r2, [r2, #0]
 8003112:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003114:	2311      	movs	r3, #17
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d105      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800311e:	4b76      	ldr	r3, [pc, #472]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003120:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003122:	4b75      	ldr	r3, [pc, #468]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003124:	4979      	ldr	r1, [pc, #484]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8003126:	400a      	ands	r2, r1
 8003128:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2201      	movs	r2, #1
 8003130:	4013      	ands	r3, r2
 8003132:	d009      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003134:	4b70      	ldr	r3, [pc, #448]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003138:	2203      	movs	r2, #3
 800313a:	4393      	bics	r3, r2
 800313c:	0019      	movs	r1, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	4b6d      	ldr	r3, [pc, #436]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003144:	430a      	orrs	r2, r1
 8003146:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2202      	movs	r2, #2
 800314e:	4013      	ands	r3, r2
 8003150:	d009      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003152:	4b69      	ldr	r3, [pc, #420]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003156:	220c      	movs	r2, #12
 8003158:	4393      	bics	r3, r2
 800315a:	0019      	movs	r1, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	4b65      	ldr	r3, [pc, #404]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003162:	430a      	orrs	r2, r1
 8003164:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2210      	movs	r2, #16
 800316c:	4013      	ands	r3, r2
 800316e:	d009      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003170:	4b61      	ldr	r3, [pc, #388]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003174:	4a66      	ldr	r2, [pc, #408]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003176:	4013      	ands	r3, r2
 8003178:	0019      	movs	r1, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68da      	ldr	r2, [r3, #12]
 800317e:	4b5e      	ldr	r3, [pc, #376]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003180:	430a      	orrs	r2, r1
 8003182:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	2380      	movs	r3, #128	@ 0x80
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4013      	ands	r3, r2
 800318e:	d009      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003190:	4b59      	ldr	r3, [pc, #356]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003194:	4a5f      	ldr	r2, [pc, #380]	@ (8003314 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003196:	4013      	ands	r3, r2
 8003198:	0019      	movs	r1, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	4b56      	ldr	r3, [pc, #344]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031a0:	430a      	orrs	r2, r1
 80031a2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	2380      	movs	r3, #128	@ 0x80
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	4013      	ands	r3, r2
 80031ae:	d009      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031b0:	4b51      	ldr	r3, [pc, #324]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b4:	4a58      	ldr	r2, [pc, #352]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	0019      	movs	r1, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69da      	ldr	r2, [r3, #28]
 80031be:	4b4e      	ldr	r3, [pc, #312]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031c0:	430a      	orrs	r2, r1
 80031c2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2220      	movs	r2, #32
 80031ca:	4013      	ands	r3, r2
 80031cc:	d009      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031ce:	4b4a      	ldr	r3, [pc, #296]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d2:	4a52      	ldr	r2, [pc, #328]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	0019      	movs	r1, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	4b46      	ldr	r3, [pc, #280]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031de:	430a      	orrs	r2, r1
 80031e0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	2380      	movs	r3, #128	@ 0x80
 80031e8:	01db      	lsls	r3, r3, #7
 80031ea:	4013      	ands	r3, r2
 80031ec:	d015      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031ee:	4b42      	ldr	r3, [pc, #264]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	0899      	lsrs	r1, r3, #2
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1a      	ldr	r2, [r3, #32]
 80031fa:	4b3f      	ldr	r3, [pc, #252]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031fc:	430a      	orrs	r2, r1
 80031fe:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1a      	ldr	r2, [r3, #32]
 8003204:	2380      	movs	r3, #128	@ 0x80
 8003206:	05db      	lsls	r3, r3, #23
 8003208:	429a      	cmp	r2, r3
 800320a:	d106      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800320c:	4b3a      	ldr	r3, [pc, #232]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	4b39      	ldr	r3, [pc, #228]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003212:	2180      	movs	r1, #128	@ 0x80
 8003214:	0249      	lsls	r1, r1, #9
 8003216:	430a      	orrs	r2, r1
 8003218:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	2380      	movs	r3, #128	@ 0x80
 8003220:	031b      	lsls	r3, r3, #12
 8003222:	4013      	ands	r3, r2
 8003224:	d009      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003226:	4b34      	ldr	r3, [pc, #208]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800322a:	2240      	movs	r2, #64	@ 0x40
 800322c:	4393      	bics	r3, r2
 800322e:	0019      	movs	r1, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003234:	4b30      	ldr	r3, [pc, #192]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003236:	430a      	orrs	r2, r1
 8003238:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	2380      	movs	r3, #128	@ 0x80
 8003240:	039b      	lsls	r3, r3, #14
 8003242:	4013      	ands	r3, r2
 8003244:	d016      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003246:	4b2c      	ldr	r3, [pc, #176]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800324a:	4a35      	ldr	r2, [pc, #212]	@ (8003320 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800324c:	4013      	ands	r3, r2
 800324e:	0019      	movs	r1, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003254:	4b28      	ldr	r3, [pc, #160]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003256:	430a      	orrs	r2, r1
 8003258:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800325e:	2380      	movs	r3, #128	@ 0x80
 8003260:	03db      	lsls	r3, r3, #15
 8003262:	429a      	cmp	r2, r3
 8003264:	d106      	bne.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003266:	4b24      	ldr	r3, [pc, #144]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	4b23      	ldr	r3, [pc, #140]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800326c:	2180      	movs	r1, #128	@ 0x80
 800326e:	0449      	lsls	r1, r1, #17
 8003270:	430a      	orrs	r2, r1
 8003272:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	2380      	movs	r3, #128	@ 0x80
 800327a:	03db      	lsls	r3, r3, #15
 800327c:	4013      	ands	r3, r2
 800327e:	d016      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003280:	4b1d      	ldr	r3, [pc, #116]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003284:	4a27      	ldr	r2, [pc, #156]	@ (8003324 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003286:	4013      	ands	r3, r2
 8003288:	0019      	movs	r1, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800328e:	4b1a      	ldr	r3, [pc, #104]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003290:	430a      	orrs	r2, r1
 8003292:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003298:	2380      	movs	r3, #128	@ 0x80
 800329a:	045b      	lsls	r3, r3, #17
 800329c:	429a      	cmp	r2, r3
 800329e:	d106      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80032a0:	4b15      	ldr	r3, [pc, #84]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	4b14      	ldr	r3, [pc, #80]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032a6:	2180      	movs	r1, #128	@ 0x80
 80032a8:	0449      	lsls	r1, r1, #17
 80032aa:	430a      	orrs	r2, r1
 80032ac:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	2380      	movs	r3, #128	@ 0x80
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	4013      	ands	r3, r2
 80032b8:	d016      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80032ba:	4b0f      	ldr	r3, [pc, #60]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032be:	4a1a      	ldr	r2, [pc, #104]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	0019      	movs	r1, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	695a      	ldr	r2, [r3, #20]
 80032c8:	4b0b      	ldr	r3, [pc, #44]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032ca:	430a      	orrs	r2, r1
 80032cc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	2380      	movs	r3, #128	@ 0x80
 80032d4:	01db      	lsls	r3, r3, #7
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d106      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80032da:	4b07      	ldr	r3, [pc, #28]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	4b06      	ldr	r3, [pc, #24]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032e0:	2180      	movs	r1, #128	@ 0x80
 80032e2:	0249      	lsls	r1, r1, #9
 80032e4:	430a      	orrs	r2, r1
 80032e6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80032e8:	2312      	movs	r3, #18
 80032ea:	18fb      	adds	r3, r7, r3
 80032ec:	781b      	ldrb	r3, [r3, #0]
}
 80032ee:	0018      	movs	r0, r3
 80032f0:	46bd      	mov	sp, r7
 80032f2:	b006      	add	sp, #24
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	46c0      	nop			@ (mov r8, r8)
 80032f8:	40021000 	.word	0x40021000
 80032fc:	40007000 	.word	0x40007000
 8003300:	fffffcff 	.word	0xfffffcff
 8003304:	fffeffff 	.word	0xfffeffff
 8003308:	00001388 	.word	0x00001388
 800330c:	efffffff 	.word	0xefffffff
 8003310:	fffff3ff 	.word	0xfffff3ff
 8003314:	fff3ffff 	.word	0xfff3ffff
 8003318:	ffcfffff 	.word	0xffcfffff
 800331c:	ffffcfff 	.word	0xffffcfff
 8003320:	ffbfffff 	.word	0xffbfffff
 8003324:	feffffff 	.word	0xfeffffff
 8003328:	ffff3fff 	.word	0xffff3fff

0800332c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800332c:	b5b0      	push	{r4, r5, r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003334:	230f      	movs	r3, #15
 8003336:	18fb      	adds	r3, r7, r3
 8003338:	2201      	movs	r2, #1
 800333a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d100      	bne.n	8003344 <HAL_RTC_Init+0x18>
 8003342:	e08c      	b.n	800345e <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2229      	movs	r2, #41	@ 0x29
 8003348:	5c9b      	ldrb	r3, [r3, r2]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10b      	bne.n	8003368 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2228      	movs	r2, #40	@ 0x28
 8003354:	2100      	movs	r1, #0
 8003356:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2288      	movs	r2, #136	@ 0x88
 800335c:	0212      	lsls	r2, r2, #8
 800335e:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	0018      	movs	r0, r3
 8003364:	f7fd fe4c 	bl	8001000 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2229      	movs	r2, #41	@ 0x29
 800336c:	2102      	movs	r1, #2
 800336e:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	2210      	movs	r2, #16
 8003378:	4013      	ands	r3, r2
 800337a:	2b10      	cmp	r3, #16
 800337c:	d062      	beq.n	8003444 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	22ca      	movs	r2, #202	@ 0xca
 8003384:	625a      	str	r2, [r3, #36]	@ 0x24
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2253      	movs	r2, #83	@ 0x53
 800338c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800338e:	250f      	movs	r5, #15
 8003390:	197c      	adds	r4, r7, r5
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	0018      	movs	r0, r3
 8003396:	f000 f891 	bl	80034bc <RTC_EnterInitMode>
 800339a:	0003      	movs	r3, r0
 800339c:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800339e:	0028      	movs	r0, r5
 80033a0:	183b      	adds	r3, r7, r0
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d12c      	bne.n	8003402 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699a      	ldr	r2, [r3, #24]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	492e      	ldr	r1, [pc, #184]	@ (800346c <HAL_RTC_Init+0x140>)
 80033b4:	400a      	ands	r2, r1
 80033b6:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6999      	ldr	r1, [r3, #24]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6912      	ldr	r2, [r2, #16]
 80033de:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6919      	ldr	r1, [r3, #16]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	041a      	lsls	r2, r3, #16
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80033f4:	183c      	adds	r4, r7, r0
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	0018      	movs	r0, r3
 80033fa:	f000 f8a1 	bl	8003540 <RTC_ExitInitMode>
 80033fe:	0003      	movs	r3, r0
 8003400:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8003402:	230f      	movs	r3, #15
 8003404:	18fb      	adds	r3, r7, r3
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d116      	bne.n	800343a <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699a      	ldr	r2, [r3, #24]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	00d2      	lsls	r2, r2, #3
 8003418:	08d2      	lsrs	r2, r2, #3
 800341a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6999      	ldr	r1, [r3, #24]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	431a      	orrs	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	22ff      	movs	r2, #255	@ 0xff
 8003440:	625a      	str	r2, [r3, #36]	@ 0x24
 8003442:	e003      	b.n	800344c <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8003444:	230f      	movs	r3, #15
 8003446:	18fb      	adds	r3, r7, r3
 8003448:	2200      	movs	r2, #0
 800344a:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800344c:	230f      	movs	r3, #15
 800344e:	18fb      	adds	r3, r7, r3
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d103      	bne.n	800345e <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2229      	movs	r2, #41	@ 0x29
 800345a:	2101      	movs	r1, #1
 800345c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800345e:	230f      	movs	r3, #15
 8003460:	18fb      	adds	r3, r7, r3
 8003462:	781b      	ldrb	r3, [r3, #0]
}
 8003464:	0018      	movs	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	b004      	add	sp, #16
 800346a:	bdb0      	pop	{r4, r5, r7, pc}
 800346c:	fb8fffbf 	.word	0xfb8fffbf

08003470 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a0e      	ldr	r2, [pc, #56]	@ (80034b8 <HAL_RTC_WaitForSynchro+0x48>)
 800347e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003480:	f7fe fce4 	bl	8001e4c <HAL_GetTick>
 8003484:	0003      	movs	r3, r0
 8003486:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003488:	e00a      	b.n	80034a0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800348a:	f7fe fcdf 	bl	8001e4c <HAL_GetTick>
 800348e:	0002      	movs	r2, r0
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	1ad2      	subs	r2, r2, r3
 8003494:	23fa      	movs	r3, #250	@ 0xfa
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	429a      	cmp	r2, r3
 800349a:	d901      	bls.n	80034a0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e006      	b.n	80034ae <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	2220      	movs	r2, #32
 80034a8:	4013      	ands	r3, r2
 80034aa:	d0ee      	beq.n	800348a <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	0018      	movs	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b004      	add	sp, #16
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	46c0      	nop			@ (mov r8, r8)
 80034b8:	0001005f 	.word	0x0001005f

080034bc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80034c4:	230f      	movs	r3, #15
 80034c6:	18fb      	adds	r3, r7, r3
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	2240      	movs	r2, #64	@ 0x40
 80034d4:	4013      	ands	r3, r2
 80034d6:	d12c      	bne.n	8003532 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2180      	movs	r1, #128	@ 0x80
 80034e4:	430a      	orrs	r2, r1
 80034e6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80034e8:	f7fe fcb0 	bl	8001e4c <HAL_GetTick>
 80034ec:	0003      	movs	r3, r0
 80034ee:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80034f0:	e014      	b.n	800351c <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80034f2:	f7fe fcab 	bl	8001e4c <HAL_GetTick>
 80034f6:	0002      	movs	r2, r0
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	1ad2      	subs	r2, r2, r3
 80034fc:	200f      	movs	r0, #15
 80034fe:	183b      	adds	r3, r7, r0
 8003500:	1839      	adds	r1, r7, r0
 8003502:	7809      	ldrb	r1, [r1, #0]
 8003504:	7019      	strb	r1, [r3, #0]
 8003506:	23fa      	movs	r3, #250	@ 0xfa
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	429a      	cmp	r2, r3
 800350c:	d906      	bls.n	800351c <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800350e:	183b      	adds	r3, r7, r0
 8003510:	2203      	movs	r2, #3
 8003512:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2229      	movs	r2, #41	@ 0x29
 8003518:	2103      	movs	r1, #3
 800351a:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	2240      	movs	r2, #64	@ 0x40
 8003524:	4013      	ands	r3, r2
 8003526:	d104      	bne.n	8003532 <RTC_EnterInitMode+0x76>
 8003528:	230f      	movs	r3, #15
 800352a:	18fb      	adds	r3, r7, r3
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b03      	cmp	r3, #3
 8003530:	d1df      	bne.n	80034f2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003532:	230f      	movs	r3, #15
 8003534:	18fb      	adds	r3, r7, r3
 8003536:	781b      	ldrb	r3, [r3, #0]
}
 8003538:	0018      	movs	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	b004      	add	sp, #16
 800353e:	bd80      	pop	{r7, pc}

08003540 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003540:	b590      	push	{r4, r7, lr}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003548:	240f      	movs	r4, #15
 800354a:	193b      	adds	r3, r7, r4
 800354c:	2200      	movs	r2, #0
 800354e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003550:	4b1c      	ldr	r3, [pc, #112]	@ (80035c4 <RTC_ExitInitMode+0x84>)
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	4b1b      	ldr	r3, [pc, #108]	@ (80035c4 <RTC_ExitInitMode+0x84>)
 8003556:	2180      	movs	r1, #128	@ 0x80
 8003558:	438a      	bics	r2, r1
 800355a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800355c:	4b19      	ldr	r3, [pc, #100]	@ (80035c4 <RTC_ExitInitMode+0x84>)
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	2220      	movs	r2, #32
 8003562:	4013      	ands	r3, r2
 8003564:	d10d      	bne.n	8003582 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	0018      	movs	r0, r3
 800356a:	f7ff ff81 	bl	8003470 <HAL_RTC_WaitForSynchro>
 800356e:	1e03      	subs	r3, r0, #0
 8003570:	d021      	beq.n	80035b6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2229      	movs	r2, #41	@ 0x29
 8003576:	2103      	movs	r1, #3
 8003578:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800357a:	193b      	adds	r3, r7, r4
 800357c:	2203      	movs	r2, #3
 800357e:	701a      	strb	r2, [r3, #0]
 8003580:	e019      	b.n	80035b6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003582:	4b10      	ldr	r3, [pc, #64]	@ (80035c4 <RTC_ExitInitMode+0x84>)
 8003584:	699a      	ldr	r2, [r3, #24]
 8003586:	4b0f      	ldr	r3, [pc, #60]	@ (80035c4 <RTC_ExitInitMode+0x84>)
 8003588:	2120      	movs	r1, #32
 800358a:	438a      	bics	r2, r1
 800358c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	0018      	movs	r0, r3
 8003592:	f7ff ff6d 	bl	8003470 <HAL_RTC_WaitForSynchro>
 8003596:	1e03      	subs	r3, r0, #0
 8003598:	d007      	beq.n	80035aa <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2229      	movs	r2, #41	@ 0x29
 800359e:	2103      	movs	r1, #3
 80035a0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80035a2:	230f      	movs	r3, #15
 80035a4:	18fb      	adds	r3, r7, r3
 80035a6:	2203      	movs	r2, #3
 80035a8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80035aa:	4b06      	ldr	r3, [pc, #24]	@ (80035c4 <RTC_ExitInitMode+0x84>)
 80035ac:	699a      	ldr	r2, [r3, #24]
 80035ae:	4b05      	ldr	r3, [pc, #20]	@ (80035c4 <RTC_ExitInitMode+0x84>)
 80035b0:	2120      	movs	r1, #32
 80035b2:	430a      	orrs	r2, r1
 80035b4:	619a      	str	r2, [r3, #24]
  }

  return status;
 80035b6:	230f      	movs	r3, #15
 80035b8:	18fb      	adds	r3, r7, r3
 80035ba:	781b      	ldrb	r3, [r3, #0]
}
 80035bc:	0018      	movs	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	b005      	add	sp, #20
 80035c2:	bd90      	pop	{r4, r7, pc}
 80035c4:	40002800 	.word	0x40002800

080035c8 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2228      	movs	r2, #40	@ 0x28
 80035d8:	5c9b      	ldrb	r3, [r3, r2]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d101      	bne.n	80035e2 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 80035de:	2302      	movs	r3, #2
 80035e0:	e066      	b.n	80036b0 <HAL_RTCEx_SetWakeUpTimer+0xe8>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2228      	movs	r2, #40	@ 0x28
 80035e6:	2101      	movs	r1, #1
 80035e8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2229      	movs	r2, #41	@ 0x29
 80035ee:	2102      	movs	r1, #2
 80035f0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	22ca      	movs	r2, #202	@ 0xca
 80035f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2253      	movs	r2, #83	@ 0x53
 8003600:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8003602:	4b2d      	ldr	r3, [pc, #180]	@ (80036b8 <HAL_RTCEx_SetWakeUpTimer+0xf0>)
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	4b2c      	ldr	r3, [pc, #176]	@ (80036b8 <HAL_RTCEx_SetWakeUpTimer+0xf0>)
 8003608:	492c      	ldr	r1, [pc, #176]	@ (80036bc <HAL_RTCEx_SetWakeUpTimer+0xf4>)
 800360a:	400a      	ands	r2, r1
 800360c:	619a      	str	r2, [r3, #24]

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800360e:	4b2a      	ldr	r3, [pc, #168]	@ (80036b8 <HAL_RTCEx_SetWakeUpTimer+0xf0>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	2240      	movs	r2, #64	@ 0x40
 8003614:	4013      	ands	r3, r2
 8003616:	d121      	bne.n	800365c <HAL_RTCEx_SetWakeUpTimer+0x94>
  {
    tickstart = HAL_GetTick();
 8003618:	f7fe fc18 	bl	8001e4c <HAL_GetTick>
 800361c:	0003      	movs	r3, r0
 800361e:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003620:	e016      	b.n	8003650 <HAL_RTCEx_SetWakeUpTimer+0x88>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003622:	f7fe fc13 	bl	8001e4c <HAL_GetTick>
 8003626:	0002      	movs	r2, r0
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	1ad2      	subs	r2, r2, r3
 800362c:	23fa      	movs	r3, #250	@ 0xfa
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	429a      	cmp	r2, r3
 8003632:	d90d      	bls.n	8003650 <HAL_RTCEx_SetWakeUpTimer+0x88>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	22ff      	movs	r2, #255	@ 0xff
 800363a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2229      	movs	r2, #41	@ 0x29
 8003640:	2103      	movs	r1, #3
 8003642:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2228      	movs	r2, #40	@ 0x28
 8003648:	2100      	movs	r1, #0
 800364a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e02f      	b.n	80036b0 <HAL_RTCEx_SetWakeUpTimer+0xe8>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	2204      	movs	r2, #4
 8003658:	4013      	ands	r3, r2
 800365a:	d0e2      	beq.n	8003622 <HAL_RTCEx_SetWakeUpTimer+0x5a>
      }
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	699a      	ldr	r2, [r3, #24]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2107      	movs	r1, #7
 8003668:	438a      	bics	r2, r1
 800366a:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6999      	ldr	r1, [r3, #24]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	430a      	orrs	r2, r1
 800367a:	619a      	str	r2, [r3, #24]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	615a      	str	r2, [r3, #20]

   /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	699a      	ldr	r2, [r3, #24]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2180      	movs	r1, #128	@ 0x80
 8003690:	00c9      	lsls	r1, r1, #3
 8003692:	430a      	orrs	r2, r1
 8003694:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	22ff      	movs	r2, #255	@ 0xff
 800369c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2229      	movs	r2, #41	@ 0x29
 80036a2:	2101      	movs	r1, #1
 80036a4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2228      	movs	r2, #40	@ 0x28
 80036aa:	2100      	movs	r1, #0
 80036ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	0018      	movs	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	b006      	add	sp, #24
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40002800 	.word	0x40002800
 80036bc:	fffffbff 	.word	0xfffffbff

080036c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e04a      	b.n	8003768 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	223d      	movs	r2, #61	@ 0x3d
 80036d6:	5c9b      	ldrb	r3, [r3, r2]
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d107      	bne.n	80036ee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	223c      	movs	r2, #60	@ 0x3c
 80036e2:	2100      	movs	r1, #0
 80036e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	0018      	movs	r0, r3
 80036ea:	f7fe f905 	bl	80018f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	223d      	movs	r2, #61	@ 0x3d
 80036f2:	2102      	movs	r1, #2
 80036f4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3304      	adds	r3, #4
 80036fe:	0019      	movs	r1, r3
 8003700:	0010      	movs	r0, r2
 8003702:	f000 fd3d 	bl	8004180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2248      	movs	r2, #72	@ 0x48
 800370a:	2101      	movs	r1, #1
 800370c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	223e      	movs	r2, #62	@ 0x3e
 8003712:	2101      	movs	r1, #1
 8003714:	5499      	strb	r1, [r3, r2]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	223f      	movs	r2, #63	@ 0x3f
 800371a:	2101      	movs	r1, #1
 800371c:	5499      	strb	r1, [r3, r2]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2240      	movs	r2, #64	@ 0x40
 8003722:	2101      	movs	r1, #1
 8003724:	5499      	strb	r1, [r3, r2]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2241      	movs	r2, #65	@ 0x41
 800372a:	2101      	movs	r1, #1
 800372c:	5499      	strb	r1, [r3, r2]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2242      	movs	r2, #66	@ 0x42
 8003732:	2101      	movs	r1, #1
 8003734:	5499      	strb	r1, [r3, r2]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2243      	movs	r2, #67	@ 0x43
 800373a:	2101      	movs	r1, #1
 800373c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2244      	movs	r2, #68	@ 0x44
 8003742:	2101      	movs	r1, #1
 8003744:	5499      	strb	r1, [r3, r2]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2245      	movs	r2, #69	@ 0x45
 800374a:	2101      	movs	r1, #1
 800374c:	5499      	strb	r1, [r3, r2]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2246      	movs	r2, #70	@ 0x46
 8003752:	2101      	movs	r1, #1
 8003754:	5499      	strb	r1, [r3, r2]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2247      	movs	r2, #71	@ 0x47
 800375a:	2101      	movs	r1, #1
 800375c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	223d      	movs	r2, #61	@ 0x3d
 8003762:	2101      	movs	r1, #1
 8003764:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	0018      	movs	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	b002      	add	sp, #8
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e04a      	b.n	8003818 <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	223d      	movs	r2, #61	@ 0x3d
 8003786:	5c9b      	ldrb	r3, [r3, r2]
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d107      	bne.n	800379e <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	223c      	movs	r2, #60	@ 0x3c
 8003792:	2100      	movs	r1, #0
 8003794:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	0018      	movs	r0, r3
 800379a:	f000 f841 	bl	8003820 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	223d      	movs	r2, #61	@ 0x3d
 80037a2:	2102      	movs	r1, #2
 80037a4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3304      	adds	r3, #4
 80037ae:	0019      	movs	r1, r3
 80037b0:	0010      	movs	r0, r2
 80037b2:	f000 fce5 	bl	8004180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2248      	movs	r2, #72	@ 0x48
 80037ba:	2101      	movs	r1, #1
 80037bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	223e      	movs	r2, #62	@ 0x3e
 80037c2:	2101      	movs	r1, #1
 80037c4:	5499      	strb	r1, [r3, r2]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	223f      	movs	r2, #63	@ 0x3f
 80037ca:	2101      	movs	r1, #1
 80037cc:	5499      	strb	r1, [r3, r2]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2240      	movs	r2, #64	@ 0x40
 80037d2:	2101      	movs	r1, #1
 80037d4:	5499      	strb	r1, [r3, r2]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2241      	movs	r2, #65	@ 0x41
 80037da:	2101      	movs	r1, #1
 80037dc:	5499      	strb	r1, [r3, r2]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2242      	movs	r2, #66	@ 0x42
 80037e2:	2101      	movs	r1, #1
 80037e4:	5499      	strb	r1, [r3, r2]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2243      	movs	r2, #67	@ 0x43
 80037ea:	2101      	movs	r1, #1
 80037ec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2244      	movs	r2, #68	@ 0x44
 80037f2:	2101      	movs	r1, #1
 80037f4:	5499      	strb	r1, [r3, r2]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2245      	movs	r2, #69	@ 0x45
 80037fa:	2101      	movs	r1, #1
 80037fc:	5499      	strb	r1, [r3, r2]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2246      	movs	r2, #70	@ 0x46
 8003802:	2101      	movs	r1, #1
 8003804:	5499      	strb	r1, [r3, r2]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2247      	movs	r2, #71	@ 0x47
 800380a:	2101      	movs	r1, #1
 800380c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	223d      	movs	r2, #61	@ 0x3d
 8003812:	2101      	movs	r1, #1
 8003814:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	0018      	movs	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	b002      	add	sp, #8
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003828:	46c0      	nop			@ (mov r8, r8)
 800382a:	46bd      	mov	sp, r7
 800382c:	b002      	add	sp, #8
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e04a      	b.n	80038d8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	223d      	movs	r2, #61	@ 0x3d
 8003846:	5c9b      	ldrb	r3, [r3, r2]
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d107      	bne.n	800385e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	223c      	movs	r2, #60	@ 0x3c
 8003852:	2100      	movs	r1, #0
 8003854:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	0018      	movs	r0, r3
 800385a:	f000 f841 	bl	80038e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	223d      	movs	r2, #61	@ 0x3d
 8003862:	2102      	movs	r1, #2
 8003864:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	3304      	adds	r3, #4
 800386e:	0019      	movs	r1, r3
 8003870:	0010      	movs	r0, r2
 8003872:	f000 fc85 	bl	8004180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2248      	movs	r2, #72	@ 0x48
 800387a:	2101      	movs	r1, #1
 800387c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	223e      	movs	r2, #62	@ 0x3e
 8003882:	2101      	movs	r1, #1
 8003884:	5499      	strb	r1, [r3, r2]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	223f      	movs	r2, #63	@ 0x3f
 800388a:	2101      	movs	r1, #1
 800388c:	5499      	strb	r1, [r3, r2]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2240      	movs	r2, #64	@ 0x40
 8003892:	2101      	movs	r1, #1
 8003894:	5499      	strb	r1, [r3, r2]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2241      	movs	r2, #65	@ 0x41
 800389a:	2101      	movs	r1, #1
 800389c:	5499      	strb	r1, [r3, r2]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2242      	movs	r2, #66	@ 0x42
 80038a2:	2101      	movs	r1, #1
 80038a4:	5499      	strb	r1, [r3, r2]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2243      	movs	r2, #67	@ 0x43
 80038aa:	2101      	movs	r1, #1
 80038ac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2244      	movs	r2, #68	@ 0x44
 80038b2:	2101      	movs	r1, #1
 80038b4:	5499      	strb	r1, [r3, r2]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2245      	movs	r2, #69	@ 0x45
 80038ba:	2101      	movs	r1, #1
 80038bc:	5499      	strb	r1, [r3, r2]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2246      	movs	r2, #70	@ 0x46
 80038c2:	2101      	movs	r1, #1
 80038c4:	5499      	strb	r1, [r3, r2]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2247      	movs	r2, #71	@ 0x47
 80038ca:	2101      	movs	r1, #1
 80038cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	223d      	movs	r2, #61	@ 0x3d
 80038d2:	2101      	movs	r1, #1
 80038d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	0018      	movs	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	b002      	add	sp, #8
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038e8:	46c0      	nop			@ (mov r8, r8)
 80038ea:	46bd      	mov	sp, r7
 80038ec:	b002      	add	sp, #8
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d108      	bne.n	8003912 <HAL_TIM_PWM_Start+0x22>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	223e      	movs	r2, #62	@ 0x3e
 8003904:	5c9b      	ldrb	r3, [r3, r2]
 8003906:	b2db      	uxtb	r3, r3
 8003908:	3b01      	subs	r3, #1
 800390a:	1e5a      	subs	r2, r3, #1
 800390c:	4193      	sbcs	r3, r2
 800390e:	b2db      	uxtb	r3, r3
 8003910:	e037      	b.n	8003982 <HAL_TIM_PWM_Start+0x92>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b04      	cmp	r3, #4
 8003916:	d108      	bne.n	800392a <HAL_TIM_PWM_Start+0x3a>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	223f      	movs	r2, #63	@ 0x3f
 800391c:	5c9b      	ldrb	r3, [r3, r2]
 800391e:	b2db      	uxtb	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	1e5a      	subs	r2, r3, #1
 8003924:	4193      	sbcs	r3, r2
 8003926:	b2db      	uxtb	r3, r3
 8003928:	e02b      	b.n	8003982 <HAL_TIM_PWM_Start+0x92>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b08      	cmp	r3, #8
 800392e:	d108      	bne.n	8003942 <HAL_TIM_PWM_Start+0x52>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2240      	movs	r2, #64	@ 0x40
 8003934:	5c9b      	ldrb	r3, [r3, r2]
 8003936:	b2db      	uxtb	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	1e5a      	subs	r2, r3, #1
 800393c:	4193      	sbcs	r3, r2
 800393e:	b2db      	uxtb	r3, r3
 8003940:	e01f      	b.n	8003982 <HAL_TIM_PWM_Start+0x92>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b0c      	cmp	r3, #12
 8003946:	d108      	bne.n	800395a <HAL_TIM_PWM_Start+0x6a>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2241      	movs	r2, #65	@ 0x41
 800394c:	5c9b      	ldrb	r3, [r3, r2]
 800394e:	b2db      	uxtb	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	1e5a      	subs	r2, r3, #1
 8003954:	4193      	sbcs	r3, r2
 8003956:	b2db      	uxtb	r3, r3
 8003958:	e013      	b.n	8003982 <HAL_TIM_PWM_Start+0x92>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b10      	cmp	r3, #16
 800395e:	d108      	bne.n	8003972 <HAL_TIM_PWM_Start+0x82>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2242      	movs	r2, #66	@ 0x42
 8003964:	5c9b      	ldrb	r3, [r3, r2]
 8003966:	b2db      	uxtb	r3, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	1e5a      	subs	r2, r3, #1
 800396c:	4193      	sbcs	r3, r2
 800396e:	b2db      	uxtb	r3, r3
 8003970:	e007      	b.n	8003982 <HAL_TIM_PWM_Start+0x92>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2243      	movs	r2, #67	@ 0x43
 8003976:	5c9b      	ldrb	r3, [r3, r2]
 8003978:	b2db      	uxtb	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	1e5a      	subs	r2, r3, #1
 800397e:	4193      	sbcs	r3, r2
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e08b      	b.n	8003aa2 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d104      	bne.n	800399a <HAL_TIM_PWM_Start+0xaa>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	223e      	movs	r2, #62	@ 0x3e
 8003994:	2102      	movs	r1, #2
 8003996:	5499      	strb	r1, [r3, r2]
 8003998:	e023      	b.n	80039e2 <HAL_TIM_PWM_Start+0xf2>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b04      	cmp	r3, #4
 800399e:	d104      	bne.n	80039aa <HAL_TIM_PWM_Start+0xba>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	223f      	movs	r2, #63	@ 0x3f
 80039a4:	2102      	movs	r1, #2
 80039a6:	5499      	strb	r1, [r3, r2]
 80039a8:	e01b      	b.n	80039e2 <HAL_TIM_PWM_Start+0xf2>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d104      	bne.n	80039ba <HAL_TIM_PWM_Start+0xca>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2240      	movs	r2, #64	@ 0x40
 80039b4:	2102      	movs	r1, #2
 80039b6:	5499      	strb	r1, [r3, r2]
 80039b8:	e013      	b.n	80039e2 <HAL_TIM_PWM_Start+0xf2>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b0c      	cmp	r3, #12
 80039be:	d104      	bne.n	80039ca <HAL_TIM_PWM_Start+0xda>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2241      	movs	r2, #65	@ 0x41
 80039c4:	2102      	movs	r1, #2
 80039c6:	5499      	strb	r1, [r3, r2]
 80039c8:	e00b      	b.n	80039e2 <HAL_TIM_PWM_Start+0xf2>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b10      	cmp	r3, #16
 80039ce:	d104      	bne.n	80039da <HAL_TIM_PWM_Start+0xea>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2242      	movs	r2, #66	@ 0x42
 80039d4:	2102      	movs	r1, #2
 80039d6:	5499      	strb	r1, [r3, r2]
 80039d8:	e003      	b.n	80039e2 <HAL_TIM_PWM_Start+0xf2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2243      	movs	r2, #67	@ 0x43
 80039de:	2102      	movs	r1, #2
 80039e0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6839      	ldr	r1, [r7, #0]
 80039e8:	2201      	movs	r2, #1
 80039ea:	0018      	movs	r0, r3
 80039ec:	f000 ffb6 	bl	800495c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a2d      	ldr	r2, [pc, #180]	@ (8003aac <HAL_TIM_PWM_Start+0x1bc>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00e      	beq.n	8003a18 <HAL_TIM_PWM_Start+0x128>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a2c      	ldr	r2, [pc, #176]	@ (8003ab0 <HAL_TIM_PWM_Start+0x1c0>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d009      	beq.n	8003a18 <HAL_TIM_PWM_Start+0x128>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a2a      	ldr	r2, [pc, #168]	@ (8003ab4 <HAL_TIM_PWM_Start+0x1c4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d004      	beq.n	8003a18 <HAL_TIM_PWM_Start+0x128>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a29      	ldr	r2, [pc, #164]	@ (8003ab8 <HAL_TIM_PWM_Start+0x1c8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d101      	bne.n	8003a1c <HAL_TIM_PWM_Start+0x12c>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e000      	b.n	8003a1e <HAL_TIM_PWM_Start+0x12e>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d008      	beq.n	8003a34 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2180      	movs	r1, #128	@ 0x80
 8003a2e:	0209      	lsls	r1, r1, #8
 8003a30:	430a      	orrs	r2, r1
 8003a32:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a1c      	ldr	r2, [pc, #112]	@ (8003aac <HAL_TIM_PWM_Start+0x1bc>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00f      	beq.n	8003a5e <HAL_TIM_PWM_Start+0x16e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	2380      	movs	r3, #128	@ 0x80
 8003a44:	05db      	lsls	r3, r3, #23
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d009      	beq.n	8003a5e <HAL_TIM_PWM_Start+0x16e>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a1b      	ldr	r2, [pc, #108]	@ (8003abc <HAL_TIM_PWM_Start+0x1cc>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d004      	beq.n	8003a5e <HAL_TIM_PWM_Start+0x16e>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a15      	ldr	r2, [pc, #84]	@ (8003ab0 <HAL_TIM_PWM_Start+0x1c0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d116      	bne.n	8003a8c <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	4a16      	ldr	r2, [pc, #88]	@ (8003ac0 <HAL_TIM_PWM_Start+0x1d0>)
 8003a66:	4013      	ands	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2b06      	cmp	r3, #6
 8003a6e:	d016      	beq.n	8003a9e <HAL_TIM_PWM_Start+0x1ae>
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	2380      	movs	r3, #128	@ 0x80
 8003a74:	025b      	lsls	r3, r3, #9
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d011      	beq.n	8003a9e <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2101      	movs	r1, #1
 8003a86:	430a      	orrs	r2, r1
 8003a88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a8a:	e008      	b.n	8003a9e <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2101      	movs	r1, #1
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	e000      	b.n	8003aa0 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	b004      	add	sp, #16
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	46c0      	nop			@ (mov r8, r8)
 8003aac:	40012c00 	.word	0x40012c00
 8003ab0:	40014000 	.word	0x40014000
 8003ab4:	40014400 	.word	0x40014400
 8003ab8:	40014800 	.word	0x40014800
 8003abc:	40000400 	.word	0x40000400
 8003ac0:	00010007 	.word	0x00010007

08003ac4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	d021      	beq.n	8003b28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	4013      	ands	r3, r2
 8003aea:	d01d      	beq.n	8003b28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2203      	movs	r2, #3
 8003af2:	4252      	negs	r2, r2
 8003af4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	2203      	movs	r2, #3
 8003b04:	4013      	ands	r3, r2
 8003b06:	d004      	beq.n	8003b12 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f000 fb20 	bl	8004150 <HAL_TIM_IC_CaptureCallback>
 8003b10:	e007      	b.n	8003b22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	0018      	movs	r0, r3
 8003b16:	f7fc ff7d 	bl	8000a14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f000 fb1f 	bl	8004160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2204      	movs	r2, #4
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d022      	beq.n	8003b76 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2204      	movs	r2, #4
 8003b34:	4013      	ands	r3, r2
 8003b36:	d01e      	beq.n	8003b76 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2205      	movs	r2, #5
 8003b3e:	4252      	negs	r2, r2
 8003b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2202      	movs	r2, #2
 8003b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699a      	ldr	r2, [r3, #24]
 8003b4e:	23c0      	movs	r3, #192	@ 0xc0
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4013      	ands	r3, r2
 8003b54:	d004      	beq.n	8003b60 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f000 faf9 	bl	8004150 <HAL_TIM_IC_CaptureCallback>
 8003b5e:	e007      	b.n	8003b70 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	0018      	movs	r0, r3
 8003b64:	f7fc ff56 	bl	8000a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f000 faf8 	bl	8004160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2208      	movs	r2, #8
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d021      	beq.n	8003bc2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2208      	movs	r2, #8
 8003b82:	4013      	ands	r3, r2
 8003b84:	d01d      	beq.n	8003bc2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2209      	movs	r2, #9
 8003b8c:	4252      	negs	r2, r2
 8003b8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2204      	movs	r2, #4
 8003b94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	2203      	movs	r2, #3
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	d004      	beq.n	8003bac <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f000 fad3 	bl	8004150 <HAL_TIM_IC_CaptureCallback>
 8003baa:	e007      	b.n	8003bbc <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f7fc ff30 	bl	8000a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f000 fad2 	bl	8004160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2210      	movs	r2, #16
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	d022      	beq.n	8003c10 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2210      	movs	r2, #16
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d01e      	beq.n	8003c10 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2211      	movs	r2, #17
 8003bd8:	4252      	negs	r2, r2
 8003bda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2208      	movs	r2, #8
 8003be0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69da      	ldr	r2, [r3, #28]
 8003be8:	23c0      	movs	r3, #192	@ 0xc0
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4013      	ands	r3, r2
 8003bee:	d004      	beq.n	8003bfa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f000 faac 	bl	8004150 <HAL_TIM_IC_CaptureCallback>
 8003bf8:	e007      	b.n	8003c0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f7fc ff09 	bl	8000a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	0018      	movs	r0, r3
 8003c06:	f000 faab 	bl	8004160 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2201      	movs	r2, #1
 8003c14:	4013      	ands	r3, r2
 8003c16:	d00c      	beq.n	8003c32 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	d008      	beq.n	8003c32 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2202      	movs	r2, #2
 8003c26:	4252      	negs	r2, r2
 8003c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f000 fa87 	bl	8004140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2280      	movs	r2, #128	@ 0x80
 8003c36:	4013      	ands	r3, r2
 8003c38:	d104      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	2380      	movs	r3, #128	@ 0x80
 8003c3e:	019b      	lsls	r3, r3, #6
 8003c40:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c42:	d00b      	beq.n	8003c5c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2280      	movs	r2, #128	@ 0x80
 8003c48:	4013      	ands	r3, r2
 8003c4a:	d007      	beq.n	8003c5c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a1e      	ldr	r2, [pc, #120]	@ (8003ccc <HAL_TIM_IRQHandler+0x208>)
 8003c52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	0018      	movs	r0, r3
 8003c58:	f001 f85a 	bl	8004d10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	2380      	movs	r3, #128	@ 0x80
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	4013      	ands	r3, r2
 8003c64:	d00b      	beq.n	8003c7e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2280      	movs	r2, #128	@ 0x80
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d007      	beq.n	8003c7e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a17      	ldr	r2, [pc, #92]	@ (8003cd0 <HAL_TIM_IRQHandler+0x20c>)
 8003c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f001 f851 	bl	8004d20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2240      	movs	r2, #64	@ 0x40
 8003c82:	4013      	ands	r3, r2
 8003c84:	d00c      	beq.n	8003ca0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2240      	movs	r2, #64	@ 0x40
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d008      	beq.n	8003ca0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2241      	movs	r2, #65	@ 0x41
 8003c94:	4252      	negs	r2, r2
 8003c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f000 fa68 	bl	8004170 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d00c      	beq.n	8003cc2 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2220      	movs	r2, #32
 8003cac:	4013      	ands	r3, r2
 8003cae:	d008      	beq.n	8003cc2 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2221      	movs	r2, #33	@ 0x21
 8003cb6:	4252      	negs	r2, r2
 8003cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	f001 f81f 	bl	8004d00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cc2:	46c0      	nop			@ (mov r8, r8)
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	b004      	add	sp, #16
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	46c0      	nop			@ (mov r8, r8)
 8003ccc:	ffffdf7f 	.word	0xffffdf7f
 8003cd0:	fffffeff 	.word	0xfffffeff

08003cd4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ce0:	2317      	movs	r3, #23
 8003ce2:	18fb      	adds	r3, r7, r3
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	223c      	movs	r2, #60	@ 0x3c
 8003cec:	5c9b      	ldrb	r3, [r3, r2]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d101      	bne.n	8003cf6 <HAL_TIM_OC_ConfigChannel+0x22>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e048      	b.n	8003d88 <HAL_TIM_OC_ConfigChannel+0xb4>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	223c      	movs	r2, #60	@ 0x3c
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b14      	cmp	r3, #20
 8003d02:	d835      	bhi.n	8003d70 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	009a      	lsls	r2, r3, #2
 8003d08:	4b21      	ldr	r3, [pc, #132]	@ (8003d90 <HAL_TIM_OC_ConfigChannel+0xbc>)
 8003d0a:	18d3      	adds	r3, r2, r3
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	0011      	movs	r1, r2
 8003d18:	0018      	movs	r0, r3
 8003d1a:	f000 fabf 	bl	800429c <TIM_OC1_SetConfig>
      break;
 8003d1e:	e02c      	b.n	8003d7a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	0011      	movs	r1, r2
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f000 fb41 	bl	80043b0 <TIM_OC2_SetConfig>
      break;
 8003d2e:	e024      	b.n	8003d7a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	0011      	movs	r1, r2
 8003d38:	0018      	movs	r0, r3
 8003d3a:	f000 fbbd 	bl	80044b8 <TIM_OC3_SetConfig>
      break;
 8003d3e:	e01c      	b.n	8003d7a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	0011      	movs	r1, r2
 8003d48:	0018      	movs	r0, r3
 8003d4a:	f000 fc3d 	bl	80045c8 <TIM_OC4_SetConfig>
      break;
 8003d4e:	e014      	b.n	8003d7a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	0011      	movs	r1, r2
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f000 fc9f 	bl	800469c <TIM_OC5_SetConfig>
      break;
 8003d5e:	e00c      	b.n	8003d7a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	0011      	movs	r1, r2
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f000 fcf7 	bl	800475c <TIM_OC6_SetConfig>
      break;
 8003d6e:	e004      	b.n	8003d7a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003d70:	2317      	movs	r3, #23
 8003d72:	18fb      	adds	r3, r7, r3
 8003d74:	2201      	movs	r2, #1
 8003d76:	701a      	strb	r2, [r3, #0]
      break;
 8003d78:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	223c      	movs	r2, #60	@ 0x3c
 8003d7e:	2100      	movs	r1, #0
 8003d80:	5499      	strb	r1, [r3, r2]

  return status;
 8003d82:	2317      	movs	r3, #23
 8003d84:	18fb      	adds	r3, r7, r3
 8003d86:	781b      	ldrb	r3, [r3, #0]
}
 8003d88:	0018      	movs	r0, r3
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	b006      	add	sp, #24
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	080069c0 	.word	0x080069c0

08003d94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003da0:	2317      	movs	r3, #23
 8003da2:	18fb      	adds	r3, r7, r3
 8003da4:	2200      	movs	r2, #0
 8003da6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	223c      	movs	r2, #60	@ 0x3c
 8003dac:	5c9b      	ldrb	r3, [r3, r2]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d101      	bne.n	8003db6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003db2:	2302      	movs	r3, #2
 8003db4:	e0e5      	b.n	8003f82 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	223c      	movs	r2, #60	@ 0x3c
 8003dba:	2101      	movs	r1, #1
 8003dbc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b14      	cmp	r3, #20
 8003dc2:	d900      	bls.n	8003dc6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003dc4:	e0d1      	b.n	8003f6a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	009a      	lsls	r2, r3, #2
 8003dca:	4b70      	ldr	r3, [pc, #448]	@ (8003f8c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003dcc:	18d3      	adds	r3, r2, r3
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	0011      	movs	r1, r2
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f000 fa5e 	bl	800429c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699a      	ldr	r2, [r3, #24]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2108      	movs	r1, #8
 8003dec:	430a      	orrs	r2, r1
 8003dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699a      	ldr	r2, [r3, #24]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2104      	movs	r1, #4
 8003dfc:	438a      	bics	r2, r1
 8003dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6999      	ldr	r1, [r3, #24]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	619a      	str	r2, [r3, #24]
      break;
 8003e12:	e0af      	b.n	8003f74 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	0011      	movs	r1, r2
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	f000 fac7 	bl	80043b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	699a      	ldr	r2, [r3, #24]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2180      	movs	r1, #128	@ 0x80
 8003e2e:	0109      	lsls	r1, r1, #4
 8003e30:	430a      	orrs	r2, r1
 8003e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699a      	ldr	r2, [r3, #24]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4954      	ldr	r1, [pc, #336]	@ (8003f90 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003e40:	400a      	ands	r2, r1
 8003e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6999      	ldr	r1, [r3, #24]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	021a      	lsls	r2, r3, #8
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	619a      	str	r2, [r3, #24]
      break;
 8003e58:	e08c      	b.n	8003f74 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	0011      	movs	r1, r2
 8003e62:	0018      	movs	r0, r3
 8003e64:	f000 fb28 	bl	80044b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	69da      	ldr	r2, [r3, #28]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2108      	movs	r1, #8
 8003e74:	430a      	orrs	r2, r1
 8003e76:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	69da      	ldr	r2, [r3, #28]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2104      	movs	r1, #4
 8003e84:	438a      	bics	r2, r1
 8003e86:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	69d9      	ldr	r1, [r3, #28]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	691a      	ldr	r2, [r3, #16]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	61da      	str	r2, [r3, #28]
      break;
 8003e9a:	e06b      	b.n	8003f74 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	0011      	movs	r1, r2
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f000 fb8f 	bl	80045c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69da      	ldr	r2, [r3, #28]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2180      	movs	r1, #128	@ 0x80
 8003eb6:	0109      	lsls	r1, r1, #4
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	69da      	ldr	r2, [r3, #28]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4932      	ldr	r1, [pc, #200]	@ (8003f90 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003ec8:	400a      	ands	r2, r1
 8003eca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	69d9      	ldr	r1, [r3, #28]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	021a      	lsls	r2, r3, #8
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	61da      	str	r2, [r3, #28]
      break;
 8003ee0:	e048      	b.n	8003f74 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	0011      	movs	r1, r2
 8003eea:	0018      	movs	r0, r3
 8003eec:	f000 fbd6 	bl	800469c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2108      	movs	r1, #8
 8003efc:	430a      	orrs	r2, r1
 8003efe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2104      	movs	r1, #4
 8003f0c:	438a      	bics	r2, r1
 8003f0e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	691a      	ldr	r2, [r3, #16]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003f22:	e027      	b.n	8003f74 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	0011      	movs	r1, r2
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f000 fc15 	bl	800475c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2180      	movs	r1, #128	@ 0x80
 8003f3e:	0109      	lsls	r1, r1, #4
 8003f40:	430a      	orrs	r2, r1
 8003f42:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4910      	ldr	r1, [pc, #64]	@ (8003f90 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003f50:	400a      	ands	r2, r1
 8003f52:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	021a      	lsls	r2, r3, #8
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003f68:	e004      	b.n	8003f74 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003f6a:	2317      	movs	r3, #23
 8003f6c:	18fb      	adds	r3, r7, r3
 8003f6e:	2201      	movs	r2, #1
 8003f70:	701a      	strb	r2, [r3, #0]
      break;
 8003f72:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	223c      	movs	r2, #60	@ 0x3c
 8003f78:	2100      	movs	r1, #0
 8003f7a:	5499      	strb	r1, [r3, r2]

  return status;
 8003f7c:	2317      	movs	r3, #23
 8003f7e:	18fb      	adds	r3, r7, r3
 8003f80:	781b      	ldrb	r3, [r3, #0]
}
 8003f82:	0018      	movs	r0, r3
 8003f84:	46bd      	mov	sp, r7
 8003f86:	b006      	add	sp, #24
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	46c0      	nop			@ (mov r8, r8)
 8003f8c:	08006a14 	.word	0x08006a14
 8003f90:	fffffbff 	.word	0xfffffbff

08003f94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f9e:	230f      	movs	r3, #15
 8003fa0:	18fb      	adds	r3, r7, r3
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	223c      	movs	r2, #60	@ 0x3c
 8003faa:	5c9b      	ldrb	r3, [r3, r2]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d101      	bne.n	8003fb4 <HAL_TIM_ConfigClockSource+0x20>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	e0bc      	b.n	800412e <HAL_TIM_ConfigClockSource+0x19a>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	223c      	movs	r2, #60	@ 0x3c
 8003fb8:	2101      	movs	r1, #1
 8003fba:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	223d      	movs	r2, #61	@ 0x3d
 8003fc0:	2102      	movs	r1, #2
 8003fc2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	4a5a      	ldr	r2, [pc, #360]	@ (8004138 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4a59      	ldr	r2, [pc, #356]	@ (800413c <HAL_TIM_ConfigClockSource+0x1a8>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2280      	movs	r2, #128	@ 0x80
 8003fea:	0192      	lsls	r2, r2, #6
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d040      	beq.n	8004072 <HAL_TIM_ConfigClockSource+0xde>
 8003ff0:	2280      	movs	r2, #128	@ 0x80
 8003ff2:	0192      	lsls	r2, r2, #6
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d900      	bls.n	8003ffa <HAL_TIM_ConfigClockSource+0x66>
 8003ff8:	e088      	b.n	800410c <HAL_TIM_ConfigClockSource+0x178>
 8003ffa:	2280      	movs	r2, #128	@ 0x80
 8003ffc:	0152      	lsls	r2, r2, #5
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d100      	bne.n	8004004 <HAL_TIM_ConfigClockSource+0x70>
 8004002:	e088      	b.n	8004116 <HAL_TIM_ConfigClockSource+0x182>
 8004004:	2280      	movs	r2, #128	@ 0x80
 8004006:	0152      	lsls	r2, r2, #5
 8004008:	4293      	cmp	r3, r2
 800400a:	d900      	bls.n	800400e <HAL_TIM_ConfigClockSource+0x7a>
 800400c:	e07e      	b.n	800410c <HAL_TIM_ConfigClockSource+0x178>
 800400e:	2b70      	cmp	r3, #112	@ 0x70
 8004010:	d018      	beq.n	8004044 <HAL_TIM_ConfigClockSource+0xb0>
 8004012:	d900      	bls.n	8004016 <HAL_TIM_ConfigClockSource+0x82>
 8004014:	e07a      	b.n	800410c <HAL_TIM_ConfigClockSource+0x178>
 8004016:	2b60      	cmp	r3, #96	@ 0x60
 8004018:	d04f      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x126>
 800401a:	d900      	bls.n	800401e <HAL_TIM_ConfigClockSource+0x8a>
 800401c:	e076      	b.n	800410c <HAL_TIM_ConfigClockSource+0x178>
 800401e:	2b50      	cmp	r3, #80	@ 0x50
 8004020:	d03b      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x106>
 8004022:	d900      	bls.n	8004026 <HAL_TIM_ConfigClockSource+0x92>
 8004024:	e072      	b.n	800410c <HAL_TIM_ConfigClockSource+0x178>
 8004026:	2b40      	cmp	r3, #64	@ 0x40
 8004028:	d057      	beq.n	80040da <HAL_TIM_ConfigClockSource+0x146>
 800402a:	d900      	bls.n	800402e <HAL_TIM_ConfigClockSource+0x9a>
 800402c:	e06e      	b.n	800410c <HAL_TIM_ConfigClockSource+0x178>
 800402e:	2b30      	cmp	r3, #48	@ 0x30
 8004030:	d063      	beq.n	80040fa <HAL_TIM_ConfigClockSource+0x166>
 8004032:	d86b      	bhi.n	800410c <HAL_TIM_ConfigClockSource+0x178>
 8004034:	2b20      	cmp	r3, #32
 8004036:	d060      	beq.n	80040fa <HAL_TIM_ConfigClockSource+0x166>
 8004038:	d868      	bhi.n	800410c <HAL_TIM_ConfigClockSource+0x178>
 800403a:	2b00      	cmp	r3, #0
 800403c:	d05d      	beq.n	80040fa <HAL_TIM_ConfigClockSource+0x166>
 800403e:	2b10      	cmp	r3, #16
 8004040:	d05b      	beq.n	80040fa <HAL_TIM_ConfigClockSource+0x166>
 8004042:	e063      	b.n	800410c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004054:	f000 fc62 	bl	800491c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2277      	movs	r2, #119	@ 0x77
 8004064:	4313      	orrs	r3, r2
 8004066:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	609a      	str	r2, [r3, #8]
      break;
 8004070:	e052      	b.n	8004118 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004082:	f000 fc4b 	bl	800491c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2180      	movs	r1, #128	@ 0x80
 8004092:	01c9      	lsls	r1, r1, #7
 8004094:	430a      	orrs	r2, r1
 8004096:	609a      	str	r2, [r3, #8]
      break;
 8004098:	e03e      	b.n	8004118 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040a6:	001a      	movs	r2, r3
 80040a8:	f000 fbbc 	bl	8004824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2150      	movs	r1, #80	@ 0x50
 80040b2:	0018      	movs	r0, r3
 80040b4:	f000 fc16 	bl	80048e4 <TIM_ITRx_SetConfig>
      break;
 80040b8:	e02e      	b.n	8004118 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040c6:	001a      	movs	r2, r3
 80040c8:	f000 fbda 	bl	8004880 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2160      	movs	r1, #96	@ 0x60
 80040d2:	0018      	movs	r0, r3
 80040d4:	f000 fc06 	bl	80048e4 <TIM_ITRx_SetConfig>
      break;
 80040d8:	e01e      	b.n	8004118 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040e6:	001a      	movs	r2, r3
 80040e8:	f000 fb9c 	bl	8004824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2140      	movs	r1, #64	@ 0x40
 80040f2:	0018      	movs	r0, r3
 80040f4:	f000 fbf6 	bl	80048e4 <TIM_ITRx_SetConfig>
      break;
 80040f8:	e00e      	b.n	8004118 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	0019      	movs	r1, r3
 8004104:	0010      	movs	r0, r2
 8004106:	f000 fbed 	bl	80048e4 <TIM_ITRx_SetConfig>
      break;
 800410a:	e005      	b.n	8004118 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800410c:	230f      	movs	r3, #15
 800410e:	18fb      	adds	r3, r7, r3
 8004110:	2201      	movs	r2, #1
 8004112:	701a      	strb	r2, [r3, #0]
      break;
 8004114:	e000      	b.n	8004118 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004116:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	223d      	movs	r2, #61	@ 0x3d
 800411c:	2101      	movs	r1, #1
 800411e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	223c      	movs	r2, #60	@ 0x3c
 8004124:	2100      	movs	r1, #0
 8004126:	5499      	strb	r1, [r3, r2]

  return status;
 8004128:	230f      	movs	r3, #15
 800412a:	18fb      	adds	r3, r7, r3
 800412c:	781b      	ldrb	r3, [r3, #0]
}
 800412e:	0018      	movs	r0, r3
 8004130:	46bd      	mov	sp, r7
 8004132:	b004      	add	sp, #16
 8004134:	bd80      	pop	{r7, pc}
 8004136:	46c0      	nop			@ (mov r8, r8)
 8004138:	ffceff88 	.word	0xffceff88
 800413c:	ffff00ff 	.word	0xffff00ff

08004140 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004148:	46c0      	nop			@ (mov r8, r8)
 800414a:	46bd      	mov	sp, r7
 800414c:	b002      	add	sp, #8
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004158:	46c0      	nop			@ (mov r8, r8)
 800415a:	46bd      	mov	sp, r7
 800415c:	b002      	add	sp, #8
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004168:	46c0      	nop			@ (mov r8, r8)
 800416a:	46bd      	mov	sp, r7
 800416c:	b002      	add	sp, #8
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004178:	46c0      	nop			@ (mov r8, r8)
 800417a:	46bd      	mov	sp, r7
 800417c:	b002      	add	sp, #8
 800417e:	bd80      	pop	{r7, pc}

08004180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a3b      	ldr	r2, [pc, #236]	@ (8004280 <TIM_Base_SetConfig+0x100>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d008      	beq.n	80041aa <TIM_Base_SetConfig+0x2a>
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	2380      	movs	r3, #128	@ 0x80
 800419c:	05db      	lsls	r3, r3, #23
 800419e:	429a      	cmp	r2, r3
 80041a0:	d003      	beq.n	80041aa <TIM_Base_SetConfig+0x2a>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a37      	ldr	r2, [pc, #220]	@ (8004284 <TIM_Base_SetConfig+0x104>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d108      	bne.n	80041bc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2270      	movs	r2, #112	@ 0x70
 80041ae:	4393      	bics	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a30      	ldr	r2, [pc, #192]	@ (8004280 <TIM_Base_SetConfig+0x100>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d018      	beq.n	80041f6 <TIM_Base_SetConfig+0x76>
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	2380      	movs	r3, #128	@ 0x80
 80041c8:	05db      	lsls	r3, r3, #23
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d013      	beq.n	80041f6 <TIM_Base_SetConfig+0x76>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a2c      	ldr	r2, [pc, #176]	@ (8004284 <TIM_Base_SetConfig+0x104>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d00f      	beq.n	80041f6 <TIM_Base_SetConfig+0x76>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a2b      	ldr	r2, [pc, #172]	@ (8004288 <TIM_Base_SetConfig+0x108>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00b      	beq.n	80041f6 <TIM_Base_SetConfig+0x76>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a2a      	ldr	r2, [pc, #168]	@ (800428c <TIM_Base_SetConfig+0x10c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d007      	beq.n	80041f6 <TIM_Base_SetConfig+0x76>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a29      	ldr	r2, [pc, #164]	@ (8004290 <TIM_Base_SetConfig+0x110>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d003      	beq.n	80041f6 <TIM_Base_SetConfig+0x76>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a28      	ldr	r2, [pc, #160]	@ (8004294 <TIM_Base_SetConfig+0x114>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d108      	bne.n	8004208 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4a27      	ldr	r2, [pc, #156]	@ (8004298 <TIM_Base_SetConfig+0x118>)
 80041fa:	4013      	ands	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	4313      	orrs	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2280      	movs	r2, #128	@ 0x80
 800420c:	4393      	bics	r3, r2
 800420e:	001a      	movs	r2, r3
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	4313      	orrs	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	689a      	ldr	r2, [r3, #8]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a13      	ldr	r2, [pc, #76]	@ (8004280 <TIM_Base_SetConfig+0x100>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00b      	beq.n	800424e <TIM_Base_SetConfig+0xce>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a14      	ldr	r2, [pc, #80]	@ (800428c <TIM_Base_SetConfig+0x10c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d007      	beq.n	800424e <TIM_Base_SetConfig+0xce>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a13      	ldr	r2, [pc, #76]	@ (8004290 <TIM_Base_SetConfig+0x110>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d003      	beq.n	800424e <TIM_Base_SetConfig+0xce>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a12      	ldr	r2, [pc, #72]	@ (8004294 <TIM_Base_SetConfig+0x114>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d103      	bne.n	8004256 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	691a      	ldr	r2, [r3, #16]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	2201      	movs	r2, #1
 8004262:	4013      	ands	r3, r2
 8004264:	2b01      	cmp	r3, #1
 8004266:	d106      	bne.n	8004276 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	2201      	movs	r2, #1
 800426e:	4393      	bics	r3, r2
 8004270:	001a      	movs	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	611a      	str	r2, [r3, #16]
  }
}
 8004276:	46c0      	nop			@ (mov r8, r8)
 8004278:	46bd      	mov	sp, r7
 800427a:	b004      	add	sp, #16
 800427c:	bd80      	pop	{r7, pc}
 800427e:	46c0      	nop			@ (mov r8, r8)
 8004280:	40012c00 	.word	0x40012c00
 8004284:	40000400 	.word	0x40000400
 8004288:	40002000 	.word	0x40002000
 800428c:	40014000 	.word	0x40014000
 8004290:	40014400 	.word	0x40014400
 8004294:	40014800 	.word	0x40014800
 8004298:	fffffcff 	.word	0xfffffcff

0800429c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	2201      	movs	r2, #1
 80042b2:	4393      	bics	r3, r2
 80042b4:	001a      	movs	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4a32      	ldr	r2, [pc, #200]	@ (8004394 <TIM_OC1_SetConfig+0xf8>)
 80042ca:	4013      	ands	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2203      	movs	r2, #3
 80042d2:	4393      	bics	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4313      	orrs	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2202      	movs	r2, #2
 80042e4:	4393      	bics	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a28      	ldr	r2, [pc, #160]	@ (8004398 <TIM_OC1_SetConfig+0xfc>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00b      	beq.n	8004312 <TIM_OC1_SetConfig+0x76>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a27      	ldr	r2, [pc, #156]	@ (800439c <TIM_OC1_SetConfig+0x100>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d007      	beq.n	8004312 <TIM_OC1_SetConfig+0x76>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a26      	ldr	r2, [pc, #152]	@ (80043a0 <TIM_OC1_SetConfig+0x104>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d003      	beq.n	8004312 <TIM_OC1_SetConfig+0x76>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a25      	ldr	r2, [pc, #148]	@ (80043a4 <TIM_OC1_SetConfig+0x108>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d10c      	bne.n	800432c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	2208      	movs	r2, #8
 8004316:	4393      	bics	r3, r2
 8004318:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	4313      	orrs	r3, r2
 8004322:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	2204      	movs	r2, #4
 8004328:	4393      	bics	r3, r2
 800432a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a1a      	ldr	r2, [pc, #104]	@ (8004398 <TIM_OC1_SetConfig+0xfc>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d00b      	beq.n	800434c <TIM_OC1_SetConfig+0xb0>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a19      	ldr	r2, [pc, #100]	@ (800439c <TIM_OC1_SetConfig+0x100>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d007      	beq.n	800434c <TIM_OC1_SetConfig+0xb0>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a18      	ldr	r2, [pc, #96]	@ (80043a0 <TIM_OC1_SetConfig+0x104>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d003      	beq.n	800434c <TIM_OC1_SetConfig+0xb0>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a17      	ldr	r2, [pc, #92]	@ (80043a4 <TIM_OC1_SetConfig+0x108>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d111      	bne.n	8004370 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	4a16      	ldr	r2, [pc, #88]	@ (80043a8 <TIM_OC1_SetConfig+0x10c>)
 8004350:	4013      	ands	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	4a15      	ldr	r2, [pc, #84]	@ (80043ac <TIM_OC1_SetConfig+0x110>)
 8004358:	4013      	ands	r3, r2
 800435a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	4313      	orrs	r3, r2
 800436e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	621a      	str	r2, [r3, #32]
}
 800438a:	46c0      	nop			@ (mov r8, r8)
 800438c:	46bd      	mov	sp, r7
 800438e:	b006      	add	sp, #24
 8004390:	bd80      	pop	{r7, pc}
 8004392:	46c0      	nop			@ (mov r8, r8)
 8004394:	fffeff8f 	.word	0xfffeff8f
 8004398:	40012c00 	.word	0x40012c00
 800439c:	40014000 	.word	0x40014000
 80043a0:	40014400 	.word	0x40014400
 80043a4:	40014800 	.word	0x40014800
 80043a8:	fffffeff 	.word	0xfffffeff
 80043ac:	fffffdff 	.word	0xfffffdff

080043b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	2210      	movs	r2, #16
 80043c6:	4393      	bics	r3, r2
 80043c8:	001a      	movs	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4a2e      	ldr	r2, [pc, #184]	@ (8004498 <TIM_OC2_SetConfig+0xe8>)
 80043de:	4013      	ands	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4a2d      	ldr	r2, [pc, #180]	@ (800449c <TIM_OC2_SetConfig+0xec>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	021b      	lsls	r3, r3, #8
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2220      	movs	r2, #32
 80043fa:	4393      	bics	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	4313      	orrs	r3, r2
 8004408:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a24      	ldr	r2, [pc, #144]	@ (80044a0 <TIM_OC2_SetConfig+0xf0>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d10d      	bne.n	800442e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2280      	movs	r2, #128	@ 0x80
 8004416:	4393      	bics	r3, r2
 8004418:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	4313      	orrs	r3, r2
 8004424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2240      	movs	r2, #64	@ 0x40
 800442a:	4393      	bics	r3, r2
 800442c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a1b      	ldr	r2, [pc, #108]	@ (80044a0 <TIM_OC2_SetConfig+0xf0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00b      	beq.n	800444e <TIM_OC2_SetConfig+0x9e>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a1a      	ldr	r2, [pc, #104]	@ (80044a4 <TIM_OC2_SetConfig+0xf4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d007      	beq.n	800444e <TIM_OC2_SetConfig+0x9e>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a19      	ldr	r2, [pc, #100]	@ (80044a8 <TIM_OC2_SetConfig+0xf8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d003      	beq.n	800444e <TIM_OC2_SetConfig+0x9e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a18      	ldr	r2, [pc, #96]	@ (80044ac <TIM_OC2_SetConfig+0xfc>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d113      	bne.n	8004476 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	4a17      	ldr	r2, [pc, #92]	@ (80044b0 <TIM_OC2_SetConfig+0x100>)
 8004452:	4013      	ands	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	4a16      	ldr	r2, [pc, #88]	@ (80044b4 <TIM_OC2_SetConfig+0x104>)
 800445a:	4013      	ands	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	4313      	orrs	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	621a      	str	r2, [r3, #32]
}
 8004490:	46c0      	nop			@ (mov r8, r8)
 8004492:	46bd      	mov	sp, r7
 8004494:	b006      	add	sp, #24
 8004496:	bd80      	pop	{r7, pc}
 8004498:	feff8fff 	.word	0xfeff8fff
 800449c:	fffffcff 	.word	0xfffffcff
 80044a0:	40012c00 	.word	0x40012c00
 80044a4:	40014000 	.word	0x40014000
 80044a8:	40014400 	.word	0x40014400
 80044ac:	40014800 	.word	0x40014800
 80044b0:	fffffbff 	.word	0xfffffbff
 80044b4:	fffff7ff 	.word	0xfffff7ff

080044b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	4a33      	ldr	r2, [pc, #204]	@ (800459c <TIM_OC3_SetConfig+0xe4>)
 80044ce:	401a      	ands	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4a2f      	ldr	r2, [pc, #188]	@ (80045a0 <TIM_OC3_SetConfig+0xe8>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2203      	movs	r2, #3
 80044ec:	4393      	bics	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	4a29      	ldr	r2, [pc, #164]	@ (80045a4 <TIM_OC3_SetConfig+0xec>)
 80044fe:	4013      	ands	r3, r2
 8004500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	021b      	lsls	r3, r3, #8
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	4313      	orrs	r3, r2
 800450c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a25      	ldr	r2, [pc, #148]	@ (80045a8 <TIM_OC3_SetConfig+0xf0>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d10d      	bne.n	8004532 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	4a24      	ldr	r2, [pc, #144]	@ (80045ac <TIM_OC3_SetConfig+0xf4>)
 800451a:	4013      	ands	r3, r2
 800451c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	021b      	lsls	r3, r3, #8
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	4313      	orrs	r3, r2
 8004528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	4a20      	ldr	r2, [pc, #128]	@ (80045b0 <TIM_OC3_SetConfig+0xf8>)
 800452e:	4013      	ands	r3, r2
 8004530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a1c      	ldr	r2, [pc, #112]	@ (80045a8 <TIM_OC3_SetConfig+0xf0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00b      	beq.n	8004552 <TIM_OC3_SetConfig+0x9a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a1d      	ldr	r2, [pc, #116]	@ (80045b4 <TIM_OC3_SetConfig+0xfc>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d007      	beq.n	8004552 <TIM_OC3_SetConfig+0x9a>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a1c      	ldr	r2, [pc, #112]	@ (80045b8 <TIM_OC3_SetConfig+0x100>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d003      	beq.n	8004552 <TIM_OC3_SetConfig+0x9a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a1b      	ldr	r2, [pc, #108]	@ (80045bc <TIM_OC3_SetConfig+0x104>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d113      	bne.n	800457a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	4a1a      	ldr	r2, [pc, #104]	@ (80045c0 <TIM_OC3_SetConfig+0x108>)
 8004556:	4013      	ands	r3, r2
 8004558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	4a19      	ldr	r2, [pc, #100]	@ (80045c4 <TIM_OC3_SetConfig+0x10c>)
 800455e:	4013      	ands	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4313      	orrs	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	621a      	str	r2, [r3, #32]
}
 8004594:	46c0      	nop			@ (mov r8, r8)
 8004596:	46bd      	mov	sp, r7
 8004598:	b006      	add	sp, #24
 800459a:	bd80      	pop	{r7, pc}
 800459c:	fffffeff 	.word	0xfffffeff
 80045a0:	fffeff8f 	.word	0xfffeff8f
 80045a4:	fffffdff 	.word	0xfffffdff
 80045a8:	40012c00 	.word	0x40012c00
 80045ac:	fffff7ff 	.word	0xfffff7ff
 80045b0:	fffffbff 	.word	0xfffffbff
 80045b4:	40014000 	.word	0x40014000
 80045b8:	40014400 	.word	0x40014400
 80045bc:	40014800 	.word	0x40014800
 80045c0:	ffffefff 	.word	0xffffefff
 80045c4:	ffffdfff 	.word	0xffffdfff

080045c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	4a26      	ldr	r2, [pc, #152]	@ (8004678 <TIM_OC4_SetConfig+0xb0>)
 80045de:	401a      	ands	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4a22      	ldr	r2, [pc, #136]	@ (800467c <TIM_OC4_SetConfig+0xb4>)
 80045f4:	4013      	ands	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4a21      	ldr	r2, [pc, #132]	@ (8004680 <TIM_OC4_SetConfig+0xb8>)
 80045fc:	4013      	ands	r3, r2
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	021b      	lsls	r3, r3, #8
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4313      	orrs	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	4a1d      	ldr	r2, [pc, #116]	@ (8004684 <TIM_OC4_SetConfig+0xbc>)
 8004610:	4013      	ands	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	031b      	lsls	r3, r3, #12
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a19      	ldr	r2, [pc, #100]	@ (8004688 <TIM_OC4_SetConfig+0xc0>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d00b      	beq.n	8004640 <TIM_OC4_SetConfig+0x78>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a18      	ldr	r2, [pc, #96]	@ (800468c <TIM_OC4_SetConfig+0xc4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d007      	beq.n	8004640 <TIM_OC4_SetConfig+0x78>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a17      	ldr	r2, [pc, #92]	@ (8004690 <TIM_OC4_SetConfig+0xc8>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d003      	beq.n	8004640 <TIM_OC4_SetConfig+0x78>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a16      	ldr	r2, [pc, #88]	@ (8004694 <TIM_OC4_SetConfig+0xcc>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d109      	bne.n	8004654 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	4a15      	ldr	r2, [pc, #84]	@ (8004698 <TIM_OC4_SetConfig+0xd0>)
 8004644:	4013      	ands	r3, r2
 8004646:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	019b      	lsls	r3, r3, #6
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	621a      	str	r2, [r3, #32]
}
 800466e:	46c0      	nop			@ (mov r8, r8)
 8004670:	46bd      	mov	sp, r7
 8004672:	b006      	add	sp, #24
 8004674:	bd80      	pop	{r7, pc}
 8004676:	46c0      	nop			@ (mov r8, r8)
 8004678:	ffffefff 	.word	0xffffefff
 800467c:	feff8fff 	.word	0xfeff8fff
 8004680:	fffffcff 	.word	0xfffffcff
 8004684:	ffffdfff 	.word	0xffffdfff
 8004688:	40012c00 	.word	0x40012c00
 800468c:	40014000 	.word	0x40014000
 8004690:	40014400 	.word	0x40014400
 8004694:	40014800 	.word	0x40014800
 8004698:	ffffbfff 	.word	0xffffbfff

0800469c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	4a23      	ldr	r2, [pc, #140]	@ (8004740 <TIM_OC5_SetConfig+0xa4>)
 80046b2:	401a      	ands	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4a1f      	ldr	r2, [pc, #124]	@ (8004744 <TIM_OC5_SetConfig+0xa8>)
 80046c8:	4013      	ands	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004748 <TIM_OC5_SetConfig+0xac>)
 80046da:	4013      	ands	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	041b      	lsls	r3, r3, #16
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a17      	ldr	r2, [pc, #92]	@ (800474c <TIM_OC5_SetConfig+0xb0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d00b      	beq.n	800470a <TIM_OC5_SetConfig+0x6e>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a16      	ldr	r2, [pc, #88]	@ (8004750 <TIM_OC5_SetConfig+0xb4>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d007      	beq.n	800470a <TIM_OC5_SetConfig+0x6e>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a15      	ldr	r2, [pc, #84]	@ (8004754 <TIM_OC5_SetConfig+0xb8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d003      	beq.n	800470a <TIM_OC5_SetConfig+0x6e>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a14      	ldr	r2, [pc, #80]	@ (8004758 <TIM_OC5_SetConfig+0xbc>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d109      	bne.n	800471e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	4a0c      	ldr	r2, [pc, #48]	@ (8004740 <TIM_OC5_SetConfig+0xa4>)
 800470e:	4013      	ands	r3, r2
 8004710:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	021b      	lsls	r3, r3, #8
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	4313      	orrs	r3, r2
 800471c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	621a      	str	r2, [r3, #32]
}
 8004738:	46c0      	nop			@ (mov r8, r8)
 800473a:	46bd      	mov	sp, r7
 800473c:	b006      	add	sp, #24
 800473e:	bd80      	pop	{r7, pc}
 8004740:	fffeffff 	.word	0xfffeffff
 8004744:	fffeff8f 	.word	0xfffeff8f
 8004748:	fffdffff 	.word	0xfffdffff
 800474c:	40012c00 	.word	0x40012c00
 8004750:	40014000 	.word	0x40014000
 8004754:	40014400 	.word	0x40014400
 8004758:	40014800 	.word	0x40014800

0800475c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	4a24      	ldr	r2, [pc, #144]	@ (8004804 <TIM_OC6_SetConfig+0xa8>)
 8004772:	401a      	ands	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4a20      	ldr	r2, [pc, #128]	@ (8004808 <TIM_OC6_SetConfig+0xac>)
 8004788:	4013      	ands	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	021b      	lsls	r3, r3, #8
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	4a1c      	ldr	r2, [pc, #112]	@ (800480c <TIM_OC6_SetConfig+0xb0>)
 800479c:	4013      	ands	r3, r2
 800479e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	051b      	lsls	r3, r3, #20
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a18      	ldr	r2, [pc, #96]	@ (8004810 <TIM_OC6_SetConfig+0xb4>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d00b      	beq.n	80047cc <TIM_OC6_SetConfig+0x70>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a17      	ldr	r2, [pc, #92]	@ (8004814 <TIM_OC6_SetConfig+0xb8>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d007      	beq.n	80047cc <TIM_OC6_SetConfig+0x70>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a16      	ldr	r2, [pc, #88]	@ (8004818 <TIM_OC6_SetConfig+0xbc>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d003      	beq.n	80047cc <TIM_OC6_SetConfig+0x70>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a15      	ldr	r2, [pc, #84]	@ (800481c <TIM_OC6_SetConfig+0xc0>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d109      	bne.n	80047e0 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	4a14      	ldr	r2, [pc, #80]	@ (8004820 <TIM_OC6_SetConfig+0xc4>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	029b      	lsls	r3, r3, #10
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	621a      	str	r2, [r3, #32]
}
 80047fa:	46c0      	nop			@ (mov r8, r8)
 80047fc:	46bd      	mov	sp, r7
 80047fe:	b006      	add	sp, #24
 8004800:	bd80      	pop	{r7, pc}
 8004802:	46c0      	nop			@ (mov r8, r8)
 8004804:	ffefffff 	.word	0xffefffff
 8004808:	feff8fff 	.word	0xfeff8fff
 800480c:	ffdfffff 	.word	0xffdfffff
 8004810:	40012c00 	.word	0x40012c00
 8004814:	40014000 	.word	0x40014000
 8004818:	40014400 	.word	0x40014400
 800481c:	40014800 	.word	0x40014800
 8004820:	fffbffff 	.word	0xfffbffff

08004824 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	2201      	movs	r2, #1
 800483c:	4393      	bics	r3, r2
 800483e:	001a      	movs	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	22f0      	movs	r2, #240	@ 0xf0
 800484e:	4393      	bics	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	4313      	orrs	r3, r2
 800485a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	220a      	movs	r2, #10
 8004860:	4393      	bics	r3, r2
 8004862:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	4313      	orrs	r3, r2
 800486a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	621a      	str	r2, [r3, #32]
}
 8004878:	46c0      	nop			@ (mov r8, r8)
 800487a:	46bd      	mov	sp, r7
 800487c:	b006      	add	sp, #24
 800487e:	bd80      	pop	{r7, pc}

08004880 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	2210      	movs	r2, #16
 8004898:	4393      	bics	r3, r2
 800489a:	001a      	movs	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	4a0d      	ldr	r2, [pc, #52]	@ (80048e0 <TIM_TI2_ConfigInputStage+0x60>)
 80048aa:	4013      	ands	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	031b      	lsls	r3, r3, #12
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	22a0      	movs	r2, #160	@ 0xa0
 80048bc:	4393      	bics	r3, r2
 80048be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	621a      	str	r2, [r3, #32]
}
 80048d6:	46c0      	nop			@ (mov r8, r8)
 80048d8:	46bd      	mov	sp, r7
 80048da:	b006      	add	sp, #24
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	46c0      	nop			@ (mov r8, r8)
 80048e0:	ffff0fff 	.word	0xffff0fff

080048e4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4a08      	ldr	r2, [pc, #32]	@ (8004918 <TIM_ITRx_SetConfig+0x34>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	4313      	orrs	r3, r2
 8004902:	2207      	movs	r2, #7
 8004904:	4313      	orrs	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	609a      	str	r2, [r3, #8]
}
 800490e:	46c0      	nop			@ (mov r8, r8)
 8004910:	46bd      	mov	sp, r7
 8004912:	b004      	add	sp, #16
 8004914:	bd80      	pop	{r7, pc}
 8004916:	46c0      	nop			@ (mov r8, r8)
 8004918:	ffcfff8f 	.word	0xffcfff8f

0800491c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	4a09      	ldr	r2, [pc, #36]	@ (8004958 <TIM_ETR_SetConfig+0x3c>)
 8004934:	4013      	ands	r3, r2
 8004936:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	021a      	lsls	r2, r3, #8
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	431a      	orrs	r2, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	4313      	orrs	r3, r2
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	4313      	orrs	r3, r2
 8004948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	609a      	str	r2, [r3, #8]
}
 8004950:	46c0      	nop			@ (mov r8, r8)
 8004952:	46bd      	mov	sp, r7
 8004954:	b006      	add	sp, #24
 8004956:	bd80      	pop	{r7, pc}
 8004958:	ffff00ff 	.word	0xffff00ff

0800495c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	221f      	movs	r2, #31
 800496c:	4013      	ands	r3, r2
 800496e:	2201      	movs	r2, #1
 8004970:	409a      	lsls	r2, r3
 8004972:	0013      	movs	r3, r2
 8004974:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	43d2      	mvns	r2, r2
 800497e:	401a      	ands	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a1a      	ldr	r2, [r3, #32]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	211f      	movs	r1, #31
 800498c:	400b      	ands	r3, r1
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	4099      	lsls	r1, r3
 8004992:	000b      	movs	r3, r1
 8004994:	431a      	orrs	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	621a      	str	r2, [r3, #32]
}
 800499a:	46c0      	nop			@ (mov r8, r8)
 800499c:	46bd      	mov	sp, r7
 800499e:	b006      	add	sp, #24
 80049a0:	bd80      	pop	{r7, pc}
	...

080049a4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d108      	bne.n	80049c6 <HAL_TIMEx_PWMN_Start+0x22>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2244      	movs	r2, #68	@ 0x44
 80049b8:	5c9b      	ldrb	r3, [r3, r2]
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	1e5a      	subs	r2, r3, #1
 80049c0:	4193      	sbcs	r3, r2
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	e01f      	b.n	8004a06 <HAL_TIMEx_PWMN_Start+0x62>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b04      	cmp	r3, #4
 80049ca:	d108      	bne.n	80049de <HAL_TIMEx_PWMN_Start+0x3a>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2245      	movs	r2, #69	@ 0x45
 80049d0:	5c9b      	ldrb	r3, [r3, r2]
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	3b01      	subs	r3, #1
 80049d6:	1e5a      	subs	r2, r3, #1
 80049d8:	4193      	sbcs	r3, r2
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	e013      	b.n	8004a06 <HAL_TIMEx_PWMN_Start+0x62>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d108      	bne.n	80049f6 <HAL_TIMEx_PWMN_Start+0x52>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2246      	movs	r2, #70	@ 0x46
 80049e8:	5c9b      	ldrb	r3, [r3, r2]
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	1e5a      	subs	r2, r3, #1
 80049f0:	4193      	sbcs	r3, r2
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	e007      	b.n	8004a06 <HAL_TIMEx_PWMN_Start+0x62>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2247      	movs	r2, #71	@ 0x47
 80049fa:	5c9b      	ldrb	r3, [r3, r2]
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	3b01      	subs	r3, #1
 8004a00:	1e5a      	subs	r2, r3, #1
 8004a02:	4193      	sbcs	r3, r2
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e062      	b.n	8004ad4 <HAL_TIMEx_PWMN_Start+0x130>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d104      	bne.n	8004a1e <HAL_TIMEx_PWMN_Start+0x7a>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2244      	movs	r2, #68	@ 0x44
 8004a18:	2102      	movs	r1, #2
 8004a1a:	5499      	strb	r1, [r3, r2]
 8004a1c:	e013      	b.n	8004a46 <HAL_TIMEx_PWMN_Start+0xa2>
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b04      	cmp	r3, #4
 8004a22:	d104      	bne.n	8004a2e <HAL_TIMEx_PWMN_Start+0x8a>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2245      	movs	r2, #69	@ 0x45
 8004a28:	2102      	movs	r1, #2
 8004a2a:	5499      	strb	r1, [r3, r2]
 8004a2c:	e00b      	b.n	8004a46 <HAL_TIMEx_PWMN_Start+0xa2>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d104      	bne.n	8004a3e <HAL_TIMEx_PWMN_Start+0x9a>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2246      	movs	r2, #70	@ 0x46
 8004a38:	2102      	movs	r1, #2
 8004a3a:	5499      	strb	r1, [r3, r2]
 8004a3c:	e003      	b.n	8004a46 <HAL_TIMEx_PWMN_Start+0xa2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2247      	movs	r2, #71	@ 0x47
 8004a42:	2102      	movs	r1, #2
 8004a44:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6839      	ldr	r1, [r7, #0]
 8004a4c:	2204      	movs	r2, #4
 8004a4e:	0018      	movs	r0, r3
 8004a50:	f000 f96e 	bl	8004d30 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2180      	movs	r1, #128	@ 0x80
 8004a60:	0209      	lsls	r1, r1, #8
 8004a62:	430a      	orrs	r2, r1
 8004a64:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8004adc <HAL_TIMEx_PWMN_Start+0x138>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d00f      	beq.n	8004a90 <HAL_TIMEx_PWMN_Start+0xec>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	2380      	movs	r3, #128	@ 0x80
 8004a76:	05db      	lsls	r3, r3, #23
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d009      	beq.n	8004a90 <HAL_TIMEx_PWMN_Start+0xec>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a17      	ldr	r2, [pc, #92]	@ (8004ae0 <HAL_TIMEx_PWMN_Start+0x13c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d004      	beq.n	8004a90 <HAL_TIMEx_PWMN_Start+0xec>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a16      	ldr	r2, [pc, #88]	@ (8004ae4 <HAL_TIMEx_PWMN_Start+0x140>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d116      	bne.n	8004abe <HAL_TIMEx_PWMN_Start+0x11a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	4a14      	ldr	r2, [pc, #80]	@ (8004ae8 <HAL_TIMEx_PWMN_Start+0x144>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2b06      	cmp	r3, #6
 8004aa0:	d016      	beq.n	8004ad0 <HAL_TIMEx_PWMN_Start+0x12c>
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	2380      	movs	r3, #128	@ 0x80
 8004aa6:	025b      	lsls	r3, r3, #9
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d011      	beq.n	8004ad0 <HAL_TIMEx_PWMN_Start+0x12c>
    {
      __HAL_TIM_ENABLE(htim);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004abc:	e008      	b.n	8004ad0 <HAL_TIMEx_PWMN_Start+0x12c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2101      	movs	r1, #1
 8004aca:	430a      	orrs	r2, r1
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	e000      	b.n	8004ad2 <HAL_TIMEx_PWMN_Start+0x12e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	b004      	add	sp, #16
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40012c00 	.word	0x40012c00
 8004ae0:	40000400 	.word	0x40000400
 8004ae4:	40014000 	.word	0x40014000
 8004ae8:	00010007 	.word	0x00010007

08004aec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	223c      	movs	r2, #60	@ 0x3c
 8004afa:	5c9b      	ldrb	r3, [r3, r2]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d101      	bne.n	8004b04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b00:	2302      	movs	r3, #2
 8004b02:	e055      	b.n	8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	223c      	movs	r2, #60	@ 0x3c
 8004b08:	2101      	movs	r1, #1
 8004b0a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	223d      	movs	r2, #61	@ 0x3d
 8004b10:	2102      	movs	r1, #2
 8004b12:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a23      	ldr	r2, [pc, #140]	@ (8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d108      	bne.n	8004b40 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4a22      	ldr	r2, [pc, #136]	@ (8004bbc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b32:	4013      	ands	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2270      	movs	r2, #112	@ 0x70
 8004b44:	4393      	bics	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a16      	ldr	r2, [pc, #88]	@ (8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00f      	beq.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	2380      	movs	r3, #128	@ 0x80
 8004b6a:	05db      	lsls	r3, r3, #23
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d009      	beq.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a12      	ldr	r2, [pc, #72]	@ (8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d004      	beq.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a11      	ldr	r2, [pc, #68]	@ (8004bc4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d10c      	bne.n	8004b9e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2280      	movs	r2, #128	@ 0x80
 8004b88:	4393      	bics	r3, r2
 8004b8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	223d      	movs	r2, #61	@ 0x3d
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	223c      	movs	r2, #60	@ 0x3c
 8004baa:	2100      	movs	r1, #0
 8004bac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	b004      	add	sp, #16
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40012c00 	.word	0x40012c00
 8004bbc:	ff0fffff 	.word	0xff0fffff
 8004bc0:	40000400 	.word	0x40000400
 8004bc4:	40014000 	.word	0x40014000

08004bc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	223c      	movs	r2, #60	@ 0x3c
 8004bda:	5c9b      	ldrb	r3, [r3, r2]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d101      	bne.n	8004be4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004be0:	2302      	movs	r3, #2
 8004be2:	e06f      	b.n	8004cc4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	223c      	movs	r2, #60	@ 0x3c
 8004be8:	2101      	movs	r1, #1
 8004bea:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	22ff      	movs	r2, #255	@ 0xff
 8004bf0:	4393      	bics	r3, r2
 8004bf2:	001a      	movs	r2, r3
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4a33      	ldr	r2, [pc, #204]	@ (8004ccc <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004c00:	401a      	ands	r2, r3
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	4a30      	ldr	r2, [pc, #192]	@ (8004cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004c0e:	401a      	ands	r2, r3
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4a2e      	ldr	r2, [pc, #184]	@ (8004cd4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8004c1c:	401a      	ands	r2, r3
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4a2b      	ldr	r2, [pc, #172]	@ (8004cd8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004c2a:	401a      	ands	r2, r3
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	4a29      	ldr	r2, [pc, #164]	@ (8004cdc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004c38:	401a      	ands	r2, r3
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4a26      	ldr	r2, [pc, #152]	@ (8004ce0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004c46:	401a      	ands	r2, r3
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4a24      	ldr	r2, [pc, #144]	@ (8004ce4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004c54:	401a      	ands	r2, r3
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	041b      	lsls	r3, r3, #16
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4a21      	ldr	r2, [pc, #132]	@ (8004ce8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004c64:	401a      	ands	r2, r3
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a1e      	ldr	r2, [pc, #120]	@ (8004cec <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d11c      	bne.n	8004cb2 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4a1d      	ldr	r2, [pc, #116]	@ (8004cf0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004c7c:	401a      	ands	r2, r3
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c82:	051b      	lsls	r3, r3, #20
 8004c84:	4313      	orrs	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4a1a      	ldr	r2, [pc, #104]	@ (8004cf4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004c8c:	401a      	ands	r2, r3
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4a17      	ldr	r2, [pc, #92]	@ (8004cf8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004c9a:	401a      	ands	r2, r3
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4a15      	ldr	r2, [pc, #84]	@ (8004cfc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004ca8:	401a      	ands	r2, r3
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	223c      	movs	r2, #60	@ 0x3c
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	b004      	add	sp, #16
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	fffffcff 	.word	0xfffffcff
 8004cd0:	fffffbff 	.word	0xfffffbff
 8004cd4:	fffff7ff 	.word	0xfffff7ff
 8004cd8:	ffffefff 	.word	0xffffefff
 8004cdc:	ffffdfff 	.word	0xffffdfff
 8004ce0:	ffffbfff 	.word	0xffffbfff
 8004ce4:	fff0ffff 	.word	0xfff0ffff
 8004ce8:	efffffff 	.word	0xefffffff
 8004cec:	40012c00 	.word	0x40012c00
 8004cf0:	ff0fffff 	.word	0xff0fffff
 8004cf4:	feffffff 	.word	0xfeffffff
 8004cf8:	fdffffff 	.word	0xfdffffff
 8004cfc:	dfffffff 	.word	0xdfffffff

08004d00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d08:	46c0      	nop			@ (mov r8, r8)
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	b002      	add	sp, #8
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d18:	46c0      	nop			@ (mov r8, r8)
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	b002      	add	sp, #8
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d28:	46c0      	nop			@ (mov r8, r8)
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	b002      	add	sp, #8
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	220f      	movs	r2, #15
 8004d40:	4013      	ands	r3, r2
 8004d42:	2204      	movs	r2, #4
 8004d44:	409a      	lsls	r2, r3
 8004d46:	0013      	movs	r3, r2
 8004d48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	43d2      	mvns	r2, r2
 8004d52:	401a      	ands	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a1a      	ldr	r2, [r3, #32]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	210f      	movs	r1, #15
 8004d60:	400b      	ands	r3, r1
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	4099      	lsls	r1, r3
 8004d66:	000b      	movs	r3, r1
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	621a      	str	r2, [r3, #32]
}
 8004d6e:	46c0      	nop			@ (mov r8, r8)
 8004d70:	46bd      	mov	sp, r7
 8004d72:	b006      	add	sp, #24
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e046      	b.n	8004e18 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2288      	movs	r2, #136	@ 0x88
 8004d8e:	589b      	ldr	r3, [r3, r2]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d107      	bne.n	8004da4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2284      	movs	r2, #132	@ 0x84
 8004d98:	2100      	movs	r1, #0
 8004d9a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	0018      	movs	r0, r3
 8004da0:	f7fc ff5e 	bl	8001c60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2288      	movs	r2, #136	@ 0x88
 8004da8:	2124      	movs	r1, #36	@ 0x24
 8004daa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2101      	movs	r1, #1
 8004db8:	438a      	bics	r2, r1
 8004dba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d003      	beq.n	8004dcc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	f000 faea 	bl	80053a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	0018      	movs	r0, r3
 8004dd0:	f000 f828 	bl	8004e24 <UART_SetConfig>
 8004dd4:	0003      	movs	r3, r0
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d101      	bne.n	8004dde <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e01c      	b.n	8004e18 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	490d      	ldr	r1, [pc, #52]	@ (8004e20 <HAL_UART_Init+0xa8>)
 8004dea:	400a      	ands	r2, r1
 8004dec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689a      	ldr	r2, [r3, #8]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	212a      	movs	r1, #42	@ 0x2a
 8004dfa:	438a      	bics	r2, r1
 8004dfc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2101      	movs	r1, #1
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	0018      	movs	r0, r3
 8004e12:	f000 fb79 	bl	8005508 <UART_CheckIdleState>
 8004e16:	0003      	movs	r3, r0
}
 8004e18:	0018      	movs	r0, r3
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	b002      	add	sp, #8
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	ffffb7ff 	.word	0xffffb7ff

08004e24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e24:	b5b0      	push	{r4, r5, r7, lr}
 8004e26:	b090      	sub	sp, #64	@ 0x40
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e2c:	231a      	movs	r3, #26
 8004e2e:	2220      	movs	r2, #32
 8004e30:	189b      	adds	r3, r3, r2
 8004e32:	19db      	adds	r3, r3, r7
 8004e34:	2200      	movs	r2, #0
 8004e36:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	431a      	orrs	r2, r3
 8004e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	431a      	orrs	r2, r3
 8004e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4aaf      	ldr	r2, [pc, #700]	@ (8005114 <UART_SetConfig+0x2f0>)
 8004e58:	4013      	ands	r3, r2
 8004e5a:	0019      	movs	r1, r3
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e62:	430b      	orrs	r3, r1
 8004e64:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	4aaa      	ldr	r2, [pc, #680]	@ (8005118 <UART_SetConfig+0x2f4>)
 8004e6e:	4013      	ands	r3, r2
 8004e70:	0018      	movs	r0, r3
 8004e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e74:	68d9      	ldr	r1, [r3, #12]
 8004e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	0003      	movs	r3, r0
 8004e7c:	430b      	orrs	r3, r1
 8004e7e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4aa4      	ldr	r2, [pc, #656]	@ (800511c <UART_SetConfig+0x2f8>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d004      	beq.n	8004e9a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004e96:	4313      	orrs	r3, r2
 8004e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	4a9f      	ldr	r2, [pc, #636]	@ (8005120 <UART_SetConfig+0x2fc>)
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	0019      	movs	r1, r3
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eac:	430b      	orrs	r3, r1
 8004eae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb6:	220f      	movs	r2, #15
 8004eb8:	4393      	bics	r3, r2
 8004eba:	0018      	movs	r0, r3
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	0003      	movs	r3, r0
 8004ec6:	430b      	orrs	r3, r1
 8004ec8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a95      	ldr	r2, [pc, #596]	@ (8005124 <UART_SetConfig+0x300>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d131      	bne.n	8004f38 <UART_SetConfig+0x114>
 8004ed4:	4b94      	ldr	r3, [pc, #592]	@ (8005128 <UART_SetConfig+0x304>)
 8004ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ed8:	2203      	movs	r2, #3
 8004eda:	4013      	ands	r3, r2
 8004edc:	2b03      	cmp	r3, #3
 8004ede:	d01d      	beq.n	8004f1c <UART_SetConfig+0xf8>
 8004ee0:	d823      	bhi.n	8004f2a <UART_SetConfig+0x106>
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d00c      	beq.n	8004f00 <UART_SetConfig+0xdc>
 8004ee6:	d820      	bhi.n	8004f2a <UART_SetConfig+0x106>
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d002      	beq.n	8004ef2 <UART_SetConfig+0xce>
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d00e      	beq.n	8004f0e <UART_SetConfig+0xea>
 8004ef0:	e01b      	b.n	8004f2a <UART_SetConfig+0x106>
 8004ef2:	231b      	movs	r3, #27
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	189b      	adds	r3, r3, r2
 8004ef8:	19db      	adds	r3, r3, r7
 8004efa:	2200      	movs	r2, #0
 8004efc:	701a      	strb	r2, [r3, #0]
 8004efe:	e0b4      	b.n	800506a <UART_SetConfig+0x246>
 8004f00:	231b      	movs	r3, #27
 8004f02:	2220      	movs	r2, #32
 8004f04:	189b      	adds	r3, r3, r2
 8004f06:	19db      	adds	r3, r3, r7
 8004f08:	2202      	movs	r2, #2
 8004f0a:	701a      	strb	r2, [r3, #0]
 8004f0c:	e0ad      	b.n	800506a <UART_SetConfig+0x246>
 8004f0e:	231b      	movs	r3, #27
 8004f10:	2220      	movs	r2, #32
 8004f12:	189b      	adds	r3, r3, r2
 8004f14:	19db      	adds	r3, r3, r7
 8004f16:	2204      	movs	r2, #4
 8004f18:	701a      	strb	r2, [r3, #0]
 8004f1a:	e0a6      	b.n	800506a <UART_SetConfig+0x246>
 8004f1c:	231b      	movs	r3, #27
 8004f1e:	2220      	movs	r2, #32
 8004f20:	189b      	adds	r3, r3, r2
 8004f22:	19db      	adds	r3, r3, r7
 8004f24:	2208      	movs	r2, #8
 8004f26:	701a      	strb	r2, [r3, #0]
 8004f28:	e09f      	b.n	800506a <UART_SetConfig+0x246>
 8004f2a:	231b      	movs	r3, #27
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	189b      	adds	r3, r3, r2
 8004f30:	19db      	adds	r3, r3, r7
 8004f32:	2210      	movs	r2, #16
 8004f34:	701a      	strb	r2, [r3, #0]
 8004f36:	e098      	b.n	800506a <UART_SetConfig+0x246>
 8004f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a7b      	ldr	r2, [pc, #492]	@ (800512c <UART_SetConfig+0x308>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d131      	bne.n	8004fa6 <UART_SetConfig+0x182>
 8004f42:	4b79      	ldr	r3, [pc, #484]	@ (8005128 <UART_SetConfig+0x304>)
 8004f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f46:	220c      	movs	r2, #12
 8004f48:	4013      	ands	r3, r2
 8004f4a:	2b0c      	cmp	r3, #12
 8004f4c:	d01d      	beq.n	8004f8a <UART_SetConfig+0x166>
 8004f4e:	d823      	bhi.n	8004f98 <UART_SetConfig+0x174>
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d00c      	beq.n	8004f6e <UART_SetConfig+0x14a>
 8004f54:	d820      	bhi.n	8004f98 <UART_SetConfig+0x174>
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <UART_SetConfig+0x13c>
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d00e      	beq.n	8004f7c <UART_SetConfig+0x158>
 8004f5e:	e01b      	b.n	8004f98 <UART_SetConfig+0x174>
 8004f60:	231b      	movs	r3, #27
 8004f62:	2220      	movs	r2, #32
 8004f64:	189b      	adds	r3, r3, r2
 8004f66:	19db      	adds	r3, r3, r7
 8004f68:	2200      	movs	r2, #0
 8004f6a:	701a      	strb	r2, [r3, #0]
 8004f6c:	e07d      	b.n	800506a <UART_SetConfig+0x246>
 8004f6e:	231b      	movs	r3, #27
 8004f70:	2220      	movs	r2, #32
 8004f72:	189b      	adds	r3, r3, r2
 8004f74:	19db      	adds	r3, r3, r7
 8004f76:	2202      	movs	r2, #2
 8004f78:	701a      	strb	r2, [r3, #0]
 8004f7a:	e076      	b.n	800506a <UART_SetConfig+0x246>
 8004f7c:	231b      	movs	r3, #27
 8004f7e:	2220      	movs	r2, #32
 8004f80:	189b      	adds	r3, r3, r2
 8004f82:	19db      	adds	r3, r3, r7
 8004f84:	2204      	movs	r2, #4
 8004f86:	701a      	strb	r2, [r3, #0]
 8004f88:	e06f      	b.n	800506a <UART_SetConfig+0x246>
 8004f8a:	231b      	movs	r3, #27
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	189b      	adds	r3, r3, r2
 8004f90:	19db      	adds	r3, r3, r7
 8004f92:	2208      	movs	r2, #8
 8004f94:	701a      	strb	r2, [r3, #0]
 8004f96:	e068      	b.n	800506a <UART_SetConfig+0x246>
 8004f98:	231b      	movs	r3, #27
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	189b      	adds	r3, r3, r2
 8004f9e:	19db      	adds	r3, r3, r7
 8004fa0:	2210      	movs	r2, #16
 8004fa2:	701a      	strb	r2, [r3, #0]
 8004fa4:	e061      	b.n	800506a <UART_SetConfig+0x246>
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a61      	ldr	r2, [pc, #388]	@ (8005130 <UART_SetConfig+0x30c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d106      	bne.n	8004fbe <UART_SetConfig+0x19a>
 8004fb0:	231b      	movs	r3, #27
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	189b      	adds	r3, r3, r2
 8004fb6:	19db      	adds	r3, r3, r7
 8004fb8:	2200      	movs	r2, #0
 8004fba:	701a      	strb	r2, [r3, #0]
 8004fbc:	e055      	b.n	800506a <UART_SetConfig+0x246>
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a5c      	ldr	r2, [pc, #368]	@ (8005134 <UART_SetConfig+0x310>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d106      	bne.n	8004fd6 <UART_SetConfig+0x1b2>
 8004fc8:	231b      	movs	r3, #27
 8004fca:	2220      	movs	r2, #32
 8004fcc:	189b      	adds	r3, r3, r2
 8004fce:	19db      	adds	r3, r3, r7
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	701a      	strb	r2, [r3, #0]
 8004fd4:	e049      	b.n	800506a <UART_SetConfig+0x246>
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a50      	ldr	r2, [pc, #320]	@ (800511c <UART_SetConfig+0x2f8>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d13e      	bne.n	800505e <UART_SetConfig+0x23a>
 8004fe0:	4b51      	ldr	r3, [pc, #324]	@ (8005128 <UART_SetConfig+0x304>)
 8004fe2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004fe4:	23c0      	movs	r3, #192	@ 0xc0
 8004fe6:	011b      	lsls	r3, r3, #4
 8004fe8:	4013      	ands	r3, r2
 8004fea:	22c0      	movs	r2, #192	@ 0xc0
 8004fec:	0112      	lsls	r2, r2, #4
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d027      	beq.n	8005042 <UART_SetConfig+0x21e>
 8004ff2:	22c0      	movs	r2, #192	@ 0xc0
 8004ff4:	0112      	lsls	r2, r2, #4
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d82a      	bhi.n	8005050 <UART_SetConfig+0x22c>
 8004ffa:	2280      	movs	r2, #128	@ 0x80
 8004ffc:	0112      	lsls	r2, r2, #4
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d011      	beq.n	8005026 <UART_SetConfig+0x202>
 8005002:	2280      	movs	r2, #128	@ 0x80
 8005004:	0112      	lsls	r2, r2, #4
 8005006:	4293      	cmp	r3, r2
 8005008:	d822      	bhi.n	8005050 <UART_SetConfig+0x22c>
 800500a:	2b00      	cmp	r3, #0
 800500c:	d004      	beq.n	8005018 <UART_SetConfig+0x1f4>
 800500e:	2280      	movs	r2, #128	@ 0x80
 8005010:	00d2      	lsls	r2, r2, #3
 8005012:	4293      	cmp	r3, r2
 8005014:	d00e      	beq.n	8005034 <UART_SetConfig+0x210>
 8005016:	e01b      	b.n	8005050 <UART_SetConfig+0x22c>
 8005018:	231b      	movs	r3, #27
 800501a:	2220      	movs	r2, #32
 800501c:	189b      	adds	r3, r3, r2
 800501e:	19db      	adds	r3, r3, r7
 8005020:	2200      	movs	r2, #0
 8005022:	701a      	strb	r2, [r3, #0]
 8005024:	e021      	b.n	800506a <UART_SetConfig+0x246>
 8005026:	231b      	movs	r3, #27
 8005028:	2220      	movs	r2, #32
 800502a:	189b      	adds	r3, r3, r2
 800502c:	19db      	adds	r3, r3, r7
 800502e:	2202      	movs	r2, #2
 8005030:	701a      	strb	r2, [r3, #0]
 8005032:	e01a      	b.n	800506a <UART_SetConfig+0x246>
 8005034:	231b      	movs	r3, #27
 8005036:	2220      	movs	r2, #32
 8005038:	189b      	adds	r3, r3, r2
 800503a:	19db      	adds	r3, r3, r7
 800503c:	2204      	movs	r2, #4
 800503e:	701a      	strb	r2, [r3, #0]
 8005040:	e013      	b.n	800506a <UART_SetConfig+0x246>
 8005042:	231b      	movs	r3, #27
 8005044:	2220      	movs	r2, #32
 8005046:	189b      	adds	r3, r3, r2
 8005048:	19db      	adds	r3, r3, r7
 800504a:	2208      	movs	r2, #8
 800504c:	701a      	strb	r2, [r3, #0]
 800504e:	e00c      	b.n	800506a <UART_SetConfig+0x246>
 8005050:	231b      	movs	r3, #27
 8005052:	2220      	movs	r2, #32
 8005054:	189b      	adds	r3, r3, r2
 8005056:	19db      	adds	r3, r3, r7
 8005058:	2210      	movs	r2, #16
 800505a:	701a      	strb	r2, [r3, #0]
 800505c:	e005      	b.n	800506a <UART_SetConfig+0x246>
 800505e:	231b      	movs	r3, #27
 8005060:	2220      	movs	r2, #32
 8005062:	189b      	adds	r3, r3, r2
 8005064:	19db      	adds	r3, r3, r7
 8005066:	2210      	movs	r2, #16
 8005068:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800506a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a2b      	ldr	r2, [pc, #172]	@ (800511c <UART_SetConfig+0x2f8>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d000      	beq.n	8005076 <UART_SetConfig+0x252>
 8005074:	e0a9      	b.n	80051ca <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005076:	231b      	movs	r3, #27
 8005078:	2220      	movs	r2, #32
 800507a:	189b      	adds	r3, r3, r2
 800507c:	19db      	adds	r3, r3, r7
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	2b08      	cmp	r3, #8
 8005082:	d015      	beq.n	80050b0 <UART_SetConfig+0x28c>
 8005084:	dc18      	bgt.n	80050b8 <UART_SetConfig+0x294>
 8005086:	2b04      	cmp	r3, #4
 8005088:	d00d      	beq.n	80050a6 <UART_SetConfig+0x282>
 800508a:	dc15      	bgt.n	80050b8 <UART_SetConfig+0x294>
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <UART_SetConfig+0x272>
 8005090:	2b02      	cmp	r3, #2
 8005092:	d005      	beq.n	80050a0 <UART_SetConfig+0x27c>
 8005094:	e010      	b.n	80050b8 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005096:	f7fd ff7b 	bl	8002f90 <HAL_RCC_GetPCLK1Freq>
 800509a:	0003      	movs	r3, r0
 800509c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800509e:	e014      	b.n	80050ca <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050a0:	4b25      	ldr	r3, [pc, #148]	@ (8005138 <UART_SetConfig+0x314>)
 80050a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80050a4:	e011      	b.n	80050ca <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050a6:	f7fd fee7 	bl	8002e78 <HAL_RCC_GetSysClockFreq>
 80050aa:	0003      	movs	r3, r0
 80050ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80050ae:	e00c      	b.n	80050ca <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050b0:	2380      	movs	r3, #128	@ 0x80
 80050b2:	021b      	lsls	r3, r3, #8
 80050b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80050b6:	e008      	b.n	80050ca <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80050bc:	231a      	movs	r3, #26
 80050be:	2220      	movs	r2, #32
 80050c0:	189b      	adds	r3, r3, r2
 80050c2:	19db      	adds	r3, r3, r7
 80050c4:	2201      	movs	r2, #1
 80050c6:	701a      	strb	r2, [r3, #0]
        break;
 80050c8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d100      	bne.n	80050d2 <UART_SetConfig+0x2ae>
 80050d0:	e14b      	b.n	800536a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80050d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050d6:	4b19      	ldr	r3, [pc, #100]	@ (800513c <UART_SetConfig+0x318>)
 80050d8:	0052      	lsls	r2, r2, #1
 80050da:	5ad3      	ldrh	r3, [r2, r3]
 80050dc:	0019      	movs	r1, r3
 80050de:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80050e0:	f7fb f81a 	bl	8000118 <__udivsi3>
 80050e4:	0003      	movs	r3, r0
 80050e6:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	0013      	movs	r3, r2
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	189b      	adds	r3, r3, r2
 80050f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d305      	bcc.n	8005104 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80050f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005100:	429a      	cmp	r2, r3
 8005102:	d91d      	bls.n	8005140 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005104:	231a      	movs	r3, #26
 8005106:	2220      	movs	r2, #32
 8005108:	189b      	adds	r3, r3, r2
 800510a:	19db      	adds	r3, r3, r7
 800510c:	2201      	movs	r2, #1
 800510e:	701a      	strb	r2, [r3, #0]
 8005110:	e12b      	b.n	800536a <UART_SetConfig+0x546>
 8005112:	46c0      	nop			@ (mov r8, r8)
 8005114:	cfff69f3 	.word	0xcfff69f3
 8005118:	ffffcfff 	.word	0xffffcfff
 800511c:	40008000 	.word	0x40008000
 8005120:	11fff4ff 	.word	0x11fff4ff
 8005124:	40013800 	.word	0x40013800
 8005128:	40021000 	.word	0x40021000
 800512c:	40004400 	.word	0x40004400
 8005130:	40004800 	.word	0x40004800
 8005134:	40004c00 	.word	0x40004c00
 8005138:	00f42400 	.word	0x00f42400
 800513c:	08006a68 	.word	0x08006a68
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005142:	61bb      	str	r3, [r7, #24]
 8005144:	2300      	movs	r3, #0
 8005146:	61fb      	str	r3, [r7, #28]
 8005148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800514c:	4b92      	ldr	r3, [pc, #584]	@ (8005398 <UART_SetConfig+0x574>)
 800514e:	0052      	lsls	r2, r2, #1
 8005150:	5ad3      	ldrh	r3, [r2, r3]
 8005152:	613b      	str	r3, [r7, #16]
 8005154:	2300      	movs	r3, #0
 8005156:	617b      	str	r3, [r7, #20]
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	69b8      	ldr	r0, [r7, #24]
 800515e:	69f9      	ldr	r1, [r7, #28]
 8005160:	f7fb f950 	bl	8000404 <__aeabi_uldivmod>
 8005164:	0002      	movs	r2, r0
 8005166:	000b      	movs	r3, r1
 8005168:	0e11      	lsrs	r1, r2, #24
 800516a:	021d      	lsls	r5, r3, #8
 800516c:	430d      	orrs	r5, r1
 800516e:	0214      	lsls	r4, r2, #8
 8005170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	085b      	lsrs	r3, r3, #1
 8005176:	60bb      	str	r3, [r7, #8]
 8005178:	2300      	movs	r3, #0
 800517a:	60fb      	str	r3, [r7, #12]
 800517c:	68b8      	ldr	r0, [r7, #8]
 800517e:	68f9      	ldr	r1, [r7, #12]
 8005180:	1900      	adds	r0, r0, r4
 8005182:	4169      	adcs	r1, r5
 8005184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	603b      	str	r3, [r7, #0]
 800518a:	2300      	movs	r3, #0
 800518c:	607b      	str	r3, [r7, #4]
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f7fb f937 	bl	8000404 <__aeabi_uldivmod>
 8005196:	0002      	movs	r2, r0
 8005198:	000b      	movs	r3, r1
 800519a:	0013      	movs	r3, r2
 800519c:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800519e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051a0:	23c0      	movs	r3, #192	@ 0xc0
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d309      	bcc.n	80051bc <UART_SetConfig+0x398>
 80051a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051aa:	2380      	movs	r3, #128	@ 0x80
 80051ac:	035b      	lsls	r3, r3, #13
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d204      	bcs.n	80051bc <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80051b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051b8:	60da      	str	r2, [r3, #12]
 80051ba:	e0d6      	b.n	800536a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80051bc:	231a      	movs	r3, #26
 80051be:	2220      	movs	r2, #32
 80051c0:	189b      	adds	r3, r3, r2
 80051c2:	19db      	adds	r3, r3, r7
 80051c4:	2201      	movs	r2, #1
 80051c6:	701a      	strb	r2, [r3, #0]
 80051c8:	e0cf      	b.n	800536a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051cc:	69da      	ldr	r2, [r3, #28]
 80051ce:	2380      	movs	r3, #128	@ 0x80
 80051d0:	021b      	lsls	r3, r3, #8
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d000      	beq.n	80051d8 <UART_SetConfig+0x3b4>
 80051d6:	e070      	b.n	80052ba <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80051d8:	231b      	movs	r3, #27
 80051da:	2220      	movs	r2, #32
 80051dc:	189b      	adds	r3, r3, r2
 80051de:	19db      	adds	r3, r3, r7
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	2b08      	cmp	r3, #8
 80051e4:	d015      	beq.n	8005212 <UART_SetConfig+0x3ee>
 80051e6:	dc18      	bgt.n	800521a <UART_SetConfig+0x3f6>
 80051e8:	2b04      	cmp	r3, #4
 80051ea:	d00d      	beq.n	8005208 <UART_SetConfig+0x3e4>
 80051ec:	dc15      	bgt.n	800521a <UART_SetConfig+0x3f6>
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <UART_SetConfig+0x3d4>
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d005      	beq.n	8005202 <UART_SetConfig+0x3de>
 80051f6:	e010      	b.n	800521a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051f8:	f7fd feca 	bl	8002f90 <HAL_RCC_GetPCLK1Freq>
 80051fc:	0003      	movs	r3, r0
 80051fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005200:	e014      	b.n	800522c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005202:	4b66      	ldr	r3, [pc, #408]	@ (800539c <UART_SetConfig+0x578>)
 8005204:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005206:	e011      	b.n	800522c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005208:	f7fd fe36 	bl	8002e78 <HAL_RCC_GetSysClockFreq>
 800520c:	0003      	movs	r3, r0
 800520e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005210:	e00c      	b.n	800522c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005212:	2380      	movs	r3, #128	@ 0x80
 8005214:	021b      	lsls	r3, r3, #8
 8005216:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005218:	e008      	b.n	800522c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800521a:	2300      	movs	r3, #0
 800521c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800521e:	231a      	movs	r3, #26
 8005220:	2220      	movs	r2, #32
 8005222:	189b      	adds	r3, r3, r2
 8005224:	19db      	adds	r3, r3, r7
 8005226:	2201      	movs	r2, #1
 8005228:	701a      	strb	r2, [r3, #0]
        break;
 800522a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800522c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800522e:	2b00      	cmp	r3, #0
 8005230:	d100      	bne.n	8005234 <UART_SetConfig+0x410>
 8005232:	e09a      	b.n	800536a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005236:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005238:	4b57      	ldr	r3, [pc, #348]	@ (8005398 <UART_SetConfig+0x574>)
 800523a:	0052      	lsls	r2, r2, #1
 800523c:	5ad3      	ldrh	r3, [r2, r3]
 800523e:	0019      	movs	r1, r3
 8005240:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005242:	f7fa ff69 	bl	8000118 <__udivsi3>
 8005246:	0003      	movs	r3, r0
 8005248:	005a      	lsls	r2, r3, #1
 800524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	085b      	lsrs	r3, r3, #1
 8005250:	18d2      	adds	r2, r2, r3
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	0019      	movs	r1, r3
 8005258:	0010      	movs	r0, r2
 800525a:	f7fa ff5d 	bl	8000118 <__udivsi3>
 800525e:	0003      	movs	r3, r0
 8005260:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005264:	2b0f      	cmp	r3, #15
 8005266:	d921      	bls.n	80052ac <UART_SetConfig+0x488>
 8005268:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800526a:	2380      	movs	r3, #128	@ 0x80
 800526c:	025b      	lsls	r3, r3, #9
 800526e:	429a      	cmp	r2, r3
 8005270:	d21c      	bcs.n	80052ac <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005274:	b29a      	uxth	r2, r3
 8005276:	200e      	movs	r0, #14
 8005278:	2420      	movs	r4, #32
 800527a:	1903      	adds	r3, r0, r4
 800527c:	19db      	adds	r3, r3, r7
 800527e:	210f      	movs	r1, #15
 8005280:	438a      	bics	r2, r1
 8005282:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005286:	085b      	lsrs	r3, r3, #1
 8005288:	b29b      	uxth	r3, r3
 800528a:	2207      	movs	r2, #7
 800528c:	4013      	ands	r3, r2
 800528e:	b299      	uxth	r1, r3
 8005290:	1903      	adds	r3, r0, r4
 8005292:	19db      	adds	r3, r3, r7
 8005294:	1902      	adds	r2, r0, r4
 8005296:	19d2      	adds	r2, r2, r7
 8005298:	8812      	ldrh	r2, [r2, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800529e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	1902      	adds	r2, r0, r4
 80052a4:	19d2      	adds	r2, r2, r7
 80052a6:	8812      	ldrh	r2, [r2, #0]
 80052a8:	60da      	str	r2, [r3, #12]
 80052aa:	e05e      	b.n	800536a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80052ac:	231a      	movs	r3, #26
 80052ae:	2220      	movs	r2, #32
 80052b0:	189b      	adds	r3, r3, r2
 80052b2:	19db      	adds	r3, r3, r7
 80052b4:	2201      	movs	r2, #1
 80052b6:	701a      	strb	r2, [r3, #0]
 80052b8:	e057      	b.n	800536a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052ba:	231b      	movs	r3, #27
 80052bc:	2220      	movs	r2, #32
 80052be:	189b      	adds	r3, r3, r2
 80052c0:	19db      	adds	r3, r3, r7
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	d015      	beq.n	80052f4 <UART_SetConfig+0x4d0>
 80052c8:	dc18      	bgt.n	80052fc <UART_SetConfig+0x4d8>
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d00d      	beq.n	80052ea <UART_SetConfig+0x4c6>
 80052ce:	dc15      	bgt.n	80052fc <UART_SetConfig+0x4d8>
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <UART_SetConfig+0x4b6>
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d005      	beq.n	80052e4 <UART_SetConfig+0x4c0>
 80052d8:	e010      	b.n	80052fc <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052da:	f7fd fe59 	bl	8002f90 <HAL_RCC_GetPCLK1Freq>
 80052de:	0003      	movs	r3, r0
 80052e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052e2:	e014      	b.n	800530e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052e4:	4b2d      	ldr	r3, [pc, #180]	@ (800539c <UART_SetConfig+0x578>)
 80052e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052e8:	e011      	b.n	800530e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ea:	f7fd fdc5 	bl	8002e78 <HAL_RCC_GetSysClockFreq>
 80052ee:	0003      	movs	r3, r0
 80052f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052f2:	e00c      	b.n	800530e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052f4:	2380      	movs	r3, #128	@ 0x80
 80052f6:	021b      	lsls	r3, r3, #8
 80052f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052fa:	e008      	b.n	800530e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005300:	231a      	movs	r3, #26
 8005302:	2220      	movs	r2, #32
 8005304:	189b      	adds	r3, r3, r2
 8005306:	19db      	adds	r3, r3, r7
 8005308:	2201      	movs	r2, #1
 800530a:	701a      	strb	r2, [r3, #0]
        break;
 800530c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800530e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005310:	2b00      	cmp	r3, #0
 8005312:	d02a      	beq.n	800536a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005316:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005318:	4b1f      	ldr	r3, [pc, #124]	@ (8005398 <UART_SetConfig+0x574>)
 800531a:	0052      	lsls	r2, r2, #1
 800531c:	5ad3      	ldrh	r3, [r2, r3]
 800531e:	0019      	movs	r1, r3
 8005320:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005322:	f7fa fef9 	bl	8000118 <__udivsi3>
 8005326:	0003      	movs	r3, r0
 8005328:	001a      	movs	r2, r3
 800532a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	085b      	lsrs	r3, r3, #1
 8005330:	18d2      	adds	r2, r2, r3
 8005332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	0019      	movs	r1, r3
 8005338:	0010      	movs	r0, r2
 800533a:	f7fa feed 	bl	8000118 <__udivsi3>
 800533e:	0003      	movs	r3, r0
 8005340:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005344:	2b0f      	cmp	r3, #15
 8005346:	d90a      	bls.n	800535e <UART_SetConfig+0x53a>
 8005348:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800534a:	2380      	movs	r3, #128	@ 0x80
 800534c:	025b      	lsls	r3, r3, #9
 800534e:	429a      	cmp	r2, r3
 8005350:	d205      	bcs.n	800535e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005354:	b29a      	uxth	r2, r3
 8005356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60da      	str	r2, [r3, #12]
 800535c:	e005      	b.n	800536a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800535e:	231a      	movs	r3, #26
 8005360:	2220      	movs	r2, #32
 8005362:	189b      	adds	r3, r3, r2
 8005364:	19db      	adds	r3, r3, r7
 8005366:	2201      	movs	r2, #1
 8005368:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800536a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536c:	226a      	movs	r2, #106	@ 0x6a
 800536e:	2101      	movs	r1, #1
 8005370:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005374:	2268      	movs	r2, #104	@ 0x68
 8005376:	2101      	movs	r1, #1
 8005378:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800537a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537c:	2200      	movs	r2, #0
 800537e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005382:	2200      	movs	r2, #0
 8005384:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005386:	231a      	movs	r3, #26
 8005388:	2220      	movs	r2, #32
 800538a:	189b      	adds	r3, r3, r2
 800538c:	19db      	adds	r3, r3, r7
 800538e:	781b      	ldrb	r3, [r3, #0]
}
 8005390:	0018      	movs	r0, r3
 8005392:	46bd      	mov	sp, r7
 8005394:	b010      	add	sp, #64	@ 0x40
 8005396:	bdb0      	pop	{r4, r5, r7, pc}
 8005398:	08006a68 	.word	0x08006a68
 800539c:	00f42400 	.word	0x00f42400

080053a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ac:	2208      	movs	r2, #8
 80053ae:	4013      	ands	r3, r2
 80053b0:	d00b      	beq.n	80053ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	4a4a      	ldr	r2, [pc, #296]	@ (80054e4 <UART_AdvFeatureConfig+0x144>)
 80053ba:	4013      	ands	r3, r2
 80053bc:	0019      	movs	r1, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ce:	2201      	movs	r2, #1
 80053d0:	4013      	ands	r3, r2
 80053d2:	d00b      	beq.n	80053ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	4a43      	ldr	r2, [pc, #268]	@ (80054e8 <UART_AdvFeatureConfig+0x148>)
 80053dc:	4013      	ands	r3, r2
 80053de:	0019      	movs	r1, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f0:	2202      	movs	r2, #2
 80053f2:	4013      	ands	r3, r2
 80053f4:	d00b      	beq.n	800540e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	4a3b      	ldr	r2, [pc, #236]	@ (80054ec <UART_AdvFeatureConfig+0x14c>)
 80053fe:	4013      	ands	r3, r2
 8005400:	0019      	movs	r1, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005412:	2204      	movs	r2, #4
 8005414:	4013      	ands	r3, r2
 8005416:	d00b      	beq.n	8005430 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	4a34      	ldr	r2, [pc, #208]	@ (80054f0 <UART_AdvFeatureConfig+0x150>)
 8005420:	4013      	ands	r3, r2
 8005422:	0019      	movs	r1, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005434:	2210      	movs	r2, #16
 8005436:	4013      	ands	r3, r2
 8005438:	d00b      	beq.n	8005452 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	4a2c      	ldr	r2, [pc, #176]	@ (80054f4 <UART_AdvFeatureConfig+0x154>)
 8005442:	4013      	ands	r3, r2
 8005444:	0019      	movs	r1, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005456:	2220      	movs	r2, #32
 8005458:	4013      	ands	r3, r2
 800545a:	d00b      	beq.n	8005474 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	4a25      	ldr	r2, [pc, #148]	@ (80054f8 <UART_AdvFeatureConfig+0x158>)
 8005464:	4013      	ands	r3, r2
 8005466:	0019      	movs	r1, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005478:	2240      	movs	r2, #64	@ 0x40
 800547a:	4013      	ands	r3, r2
 800547c:	d01d      	beq.n	80054ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	4a1d      	ldr	r2, [pc, #116]	@ (80054fc <UART_AdvFeatureConfig+0x15c>)
 8005486:	4013      	ands	r3, r2
 8005488:	0019      	movs	r1, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800549a:	2380      	movs	r3, #128	@ 0x80
 800549c:	035b      	lsls	r3, r3, #13
 800549e:	429a      	cmp	r2, r3
 80054a0:	d10b      	bne.n	80054ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	4a15      	ldr	r2, [pc, #84]	@ (8005500 <UART_AdvFeatureConfig+0x160>)
 80054aa:	4013      	ands	r3, r2
 80054ac:	0019      	movs	r1, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054be:	2280      	movs	r2, #128	@ 0x80
 80054c0:	4013      	ands	r3, r2
 80054c2:	d00b      	beq.n	80054dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	4a0e      	ldr	r2, [pc, #56]	@ (8005504 <UART_AdvFeatureConfig+0x164>)
 80054cc:	4013      	ands	r3, r2
 80054ce:	0019      	movs	r1, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	605a      	str	r2, [r3, #4]
  }
}
 80054dc:	46c0      	nop			@ (mov r8, r8)
 80054de:	46bd      	mov	sp, r7
 80054e0:	b002      	add	sp, #8
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	ffff7fff 	.word	0xffff7fff
 80054e8:	fffdffff 	.word	0xfffdffff
 80054ec:	fffeffff 	.word	0xfffeffff
 80054f0:	fffbffff 	.word	0xfffbffff
 80054f4:	ffffefff 	.word	0xffffefff
 80054f8:	ffffdfff 	.word	0xffffdfff
 80054fc:	ffefffff 	.word	0xffefffff
 8005500:	ff9fffff 	.word	0xff9fffff
 8005504:	fff7ffff 	.word	0xfff7ffff

08005508 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b092      	sub	sp, #72	@ 0x48
 800550c:	af02      	add	r7, sp, #8
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2290      	movs	r2, #144	@ 0x90
 8005514:	2100      	movs	r1, #0
 8005516:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005518:	f7fc fc98 	bl	8001e4c <HAL_GetTick>
 800551c:	0003      	movs	r3, r0
 800551e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2208      	movs	r2, #8
 8005528:	4013      	ands	r3, r2
 800552a:	2b08      	cmp	r3, #8
 800552c:	d12d      	bne.n	800558a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800552e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005530:	2280      	movs	r2, #128	@ 0x80
 8005532:	0391      	lsls	r1, r2, #14
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	4a47      	ldr	r2, [pc, #284]	@ (8005654 <UART_CheckIdleState+0x14c>)
 8005538:	9200      	str	r2, [sp, #0]
 800553a:	2200      	movs	r2, #0
 800553c:	f000 f88e 	bl	800565c <UART_WaitOnFlagUntilTimeout>
 8005540:	1e03      	subs	r3, r0, #0
 8005542:	d022      	beq.n	800558a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005544:	f3ef 8310 	mrs	r3, PRIMASK
 8005548:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800554a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800554c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800554e:	2301      	movs	r3, #1
 8005550:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005554:	f383 8810 	msr	PRIMASK, r3
}
 8005558:	46c0      	nop			@ (mov r8, r8)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2180      	movs	r1, #128	@ 0x80
 8005566:	438a      	bics	r2, r1
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800556e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005570:	f383 8810 	msr	PRIMASK, r3
}
 8005574:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2288      	movs	r2, #136	@ 0x88
 800557a:	2120      	movs	r1, #32
 800557c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2284      	movs	r2, #132	@ 0x84
 8005582:	2100      	movs	r1, #0
 8005584:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e060      	b.n	800564c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2204      	movs	r2, #4
 8005592:	4013      	ands	r3, r2
 8005594:	2b04      	cmp	r3, #4
 8005596:	d146      	bne.n	8005626 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800559a:	2280      	movs	r2, #128	@ 0x80
 800559c:	03d1      	lsls	r1, r2, #15
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	4a2c      	ldr	r2, [pc, #176]	@ (8005654 <UART_CheckIdleState+0x14c>)
 80055a2:	9200      	str	r2, [sp, #0]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f000 f859 	bl	800565c <UART_WaitOnFlagUntilTimeout>
 80055aa:	1e03      	subs	r3, r0, #0
 80055ac:	d03b      	beq.n	8005626 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ae:	f3ef 8310 	mrs	r3, PRIMASK
 80055b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80055b4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80055b8:	2301      	movs	r3, #1
 80055ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f383 8810 	msr	PRIMASK, r3
}
 80055c2:	46c0      	nop			@ (mov r8, r8)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4922      	ldr	r1, [pc, #136]	@ (8005658 <UART_CheckIdleState+0x150>)
 80055d0:	400a      	ands	r2, r1
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f383 8810 	msr	PRIMASK, r3
}
 80055de:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055e0:	f3ef 8310 	mrs	r3, PRIMASK
 80055e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80055e6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80055ea:	2301      	movs	r3, #1
 80055ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	f383 8810 	msr	PRIMASK, r3
}
 80055f4:	46c0      	nop			@ (mov r8, r8)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2101      	movs	r1, #1
 8005602:	438a      	bics	r2, r1
 8005604:	609a      	str	r2, [r3, #8]
 8005606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005608:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	f383 8810 	msr	PRIMASK, r3
}
 8005610:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	228c      	movs	r2, #140	@ 0x8c
 8005616:	2120      	movs	r1, #32
 8005618:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2284      	movs	r2, #132	@ 0x84
 800561e:	2100      	movs	r1, #0
 8005620:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e012      	b.n	800564c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2288      	movs	r2, #136	@ 0x88
 800562a:	2120      	movs	r1, #32
 800562c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	228c      	movs	r2, #140	@ 0x8c
 8005632:	2120      	movs	r1, #32
 8005634:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2284      	movs	r2, #132	@ 0x84
 8005646:	2100      	movs	r1, #0
 8005648:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	0018      	movs	r0, r3
 800564e:	46bd      	mov	sp, r7
 8005650:	b010      	add	sp, #64	@ 0x40
 8005652:	bd80      	pop	{r7, pc}
 8005654:	01ffffff 	.word	0x01ffffff
 8005658:	fffffedf 	.word	0xfffffedf

0800565c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	603b      	str	r3, [r7, #0]
 8005668:	1dfb      	adds	r3, r7, #7
 800566a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800566c:	e051      	b.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	3301      	adds	r3, #1
 8005672:	d04e      	beq.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005674:	f7fc fbea 	bl	8001e4c <HAL_GetTick>
 8005678:	0002      	movs	r2, r0
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	429a      	cmp	r2, r3
 8005682:	d302      	bcc.n	800568a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e051      	b.n	8005732 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2204      	movs	r2, #4
 8005696:	4013      	ands	r3, r2
 8005698:	d03b      	beq.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb6>
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	2b80      	cmp	r3, #128	@ 0x80
 800569e:	d038      	beq.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb6>
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	2b40      	cmp	r3, #64	@ 0x40
 80056a4:	d035      	beq.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	2208      	movs	r2, #8
 80056ae:	4013      	ands	r3, r2
 80056b0:	2b08      	cmp	r3, #8
 80056b2:	d111      	bne.n	80056d8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2208      	movs	r2, #8
 80056ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	0018      	movs	r0, r3
 80056c0:	f000 f83c 	bl	800573c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2290      	movs	r2, #144	@ 0x90
 80056c8:	2108      	movs	r1, #8
 80056ca:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2284      	movs	r2, #132	@ 0x84
 80056d0:	2100      	movs	r1, #0
 80056d2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e02c      	b.n	8005732 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	69da      	ldr	r2, [r3, #28]
 80056de:	2380      	movs	r3, #128	@ 0x80
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	401a      	ands	r2, r3
 80056e4:	2380      	movs	r3, #128	@ 0x80
 80056e6:	011b      	lsls	r3, r3, #4
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d112      	bne.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2280      	movs	r2, #128	@ 0x80
 80056f2:	0112      	lsls	r2, r2, #4
 80056f4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	0018      	movs	r0, r3
 80056fa:	f000 f81f 	bl	800573c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2290      	movs	r2, #144	@ 0x90
 8005702:	2120      	movs	r1, #32
 8005704:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2284      	movs	r2, #132	@ 0x84
 800570a:	2100      	movs	r1, #0
 800570c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e00f      	b.n	8005732 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	4013      	ands	r3, r2
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	425a      	negs	r2, r3
 8005722:	4153      	adcs	r3, r2
 8005724:	b2db      	uxtb	r3, r3
 8005726:	001a      	movs	r2, r3
 8005728:	1dfb      	adds	r3, r7, #7
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	429a      	cmp	r2, r3
 800572e:	d09e      	beq.n	800566e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	0018      	movs	r0, r3
 8005734:	46bd      	mov	sp, r7
 8005736:	b004      	add	sp, #16
 8005738:	bd80      	pop	{r7, pc}
	...

0800573c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b08e      	sub	sp, #56	@ 0x38
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005744:	f3ef 8310 	mrs	r3, PRIMASK
 8005748:	617b      	str	r3, [r7, #20]
  return(result);
 800574a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800574c:	637b      	str	r3, [r7, #52]	@ 0x34
 800574e:	2301      	movs	r3, #1
 8005750:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	f383 8810 	msr	PRIMASK, r3
}
 8005758:	46c0      	nop			@ (mov r8, r8)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4926      	ldr	r1, [pc, #152]	@ (8005800 <UART_EndRxTransfer+0xc4>)
 8005766:	400a      	ands	r2, r1
 8005768:	601a      	str	r2, [r3, #0]
 800576a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800576c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	f383 8810 	msr	PRIMASK, r3
}
 8005774:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005776:	f3ef 8310 	mrs	r3, PRIMASK
 800577a:	623b      	str	r3, [r7, #32]
  return(result);
 800577c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800577e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005780:	2301      	movs	r3, #1
 8005782:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005786:	f383 8810 	msr	PRIMASK, r3
}
 800578a:	46c0      	nop			@ (mov r8, r8)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	491b      	ldr	r1, [pc, #108]	@ (8005804 <UART_EndRxTransfer+0xc8>)
 8005798:	400a      	ands	r2, r1
 800579a:	609a      	str	r2, [r3, #8]
 800579c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a2:	f383 8810 	msr	PRIMASK, r3
}
 80057a6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d118      	bne.n	80057e2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057b0:	f3ef 8310 	mrs	r3, PRIMASK
 80057b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80057b6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057ba:	2301      	movs	r3, #1
 80057bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f383 8810 	msr	PRIMASK, r3
}
 80057c4:	46c0      	nop			@ (mov r8, r8)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2110      	movs	r1, #16
 80057d2:	438a      	bics	r2, r1
 80057d4:	601a      	str	r2, [r3, #0]
 80057d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	f383 8810 	msr	PRIMASK, r3
}
 80057e0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	228c      	movs	r2, #140	@ 0x8c
 80057e6:	2120      	movs	r1, #32
 80057e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80057f6:	46c0      	nop			@ (mov r8, r8)
 80057f8:	46bd      	mov	sp, r7
 80057fa:	b00e      	add	sp, #56	@ 0x38
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	46c0      	nop			@ (mov r8, r8)
 8005800:	fffffedf 	.word	0xfffffedf
 8005804:	effffffe 	.word	0xeffffffe

08005808 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2284      	movs	r2, #132	@ 0x84
 8005814:	5c9b      	ldrb	r3, [r3, r2]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d101      	bne.n	800581e <HAL_UARTEx_DisableFifoMode+0x16>
 800581a:	2302      	movs	r3, #2
 800581c:	e027      	b.n	800586e <HAL_UARTEx_DisableFifoMode+0x66>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2284      	movs	r2, #132	@ 0x84
 8005822:	2101      	movs	r1, #1
 8005824:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2288      	movs	r2, #136	@ 0x88
 800582a:	2124      	movs	r1, #36	@ 0x24
 800582c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2101      	movs	r1, #1
 8005842:	438a      	bics	r2, r1
 8005844:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	4a0b      	ldr	r2, [pc, #44]	@ (8005878 <HAL_UARTEx_DisableFifoMode+0x70>)
 800584a:	4013      	ands	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2288      	movs	r2, #136	@ 0x88
 8005860:	2120      	movs	r1, #32
 8005862:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2284      	movs	r2, #132	@ 0x84
 8005868:	2100      	movs	r1, #0
 800586a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	0018      	movs	r0, r3
 8005870:	46bd      	mov	sp, r7
 8005872:	b004      	add	sp, #16
 8005874:	bd80      	pop	{r7, pc}
 8005876:	46c0      	nop			@ (mov r8, r8)
 8005878:	dfffffff 	.word	0xdfffffff

0800587c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2284      	movs	r2, #132	@ 0x84
 800588a:	5c9b      	ldrb	r3, [r3, r2]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005890:	2302      	movs	r3, #2
 8005892:	e02e      	b.n	80058f2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2284      	movs	r2, #132	@ 0x84
 8005898:	2101      	movs	r1, #1
 800589a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2288      	movs	r2, #136	@ 0x88
 80058a0:	2124      	movs	r1, #36	@ 0x24
 80058a2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2101      	movs	r1, #1
 80058b8:	438a      	bics	r2, r1
 80058ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	08d9      	lsrs	r1, r3, #3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	0018      	movs	r0, r3
 80058d4:	f000 f854 	bl	8005980 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2288      	movs	r2, #136	@ 0x88
 80058e4:	2120      	movs	r1, #32
 80058e6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2284      	movs	r2, #132	@ 0x84
 80058ec:	2100      	movs	r1, #0
 80058ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	0018      	movs	r0, r3
 80058f4:	46bd      	mov	sp, r7
 80058f6:	b004      	add	sp, #16
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2284      	movs	r2, #132	@ 0x84
 800590a:	5c9b      	ldrb	r3, [r3, r2]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d101      	bne.n	8005914 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005910:	2302      	movs	r3, #2
 8005912:	e02f      	b.n	8005974 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2284      	movs	r2, #132	@ 0x84
 8005918:	2101      	movs	r1, #1
 800591a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2288      	movs	r2, #136	@ 0x88
 8005920:	2124      	movs	r1, #36	@ 0x24
 8005922:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2101      	movs	r1, #1
 8005938:	438a      	bics	r2, r1
 800593a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	4a0e      	ldr	r2, [pc, #56]	@ (800597c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005944:	4013      	ands	r3, r2
 8005946:	0019      	movs	r1, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	430a      	orrs	r2, r1
 8005950:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	0018      	movs	r0, r3
 8005956:	f000 f813 	bl	8005980 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2288      	movs	r2, #136	@ 0x88
 8005966:	2120      	movs	r1, #32
 8005968:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2284      	movs	r2, #132	@ 0x84
 800596e:	2100      	movs	r1, #0
 8005970:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	0018      	movs	r0, r3
 8005976:	46bd      	mov	sp, r7
 8005978:	b004      	add	sp, #16
 800597a:	bd80      	pop	{r7, pc}
 800597c:	f1ffffff 	.word	0xf1ffffff

08005980 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800598c:	2b00      	cmp	r3, #0
 800598e:	d108      	bne.n	80059a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	226a      	movs	r2, #106	@ 0x6a
 8005994:	2101      	movs	r1, #1
 8005996:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2268      	movs	r2, #104	@ 0x68
 800599c:	2101      	movs	r1, #1
 800599e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80059a0:	e043      	b.n	8005a2a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80059a2:	260f      	movs	r6, #15
 80059a4:	19bb      	adds	r3, r7, r6
 80059a6:	2208      	movs	r2, #8
 80059a8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80059aa:	200e      	movs	r0, #14
 80059ac:	183b      	adds	r3, r7, r0
 80059ae:	2208      	movs	r2, #8
 80059b0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	0e5b      	lsrs	r3, r3, #25
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	240d      	movs	r4, #13
 80059be:	193b      	adds	r3, r7, r4
 80059c0:	2107      	movs	r1, #7
 80059c2:	400a      	ands	r2, r1
 80059c4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	0f5b      	lsrs	r3, r3, #29
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	250c      	movs	r5, #12
 80059d2:	197b      	adds	r3, r7, r5
 80059d4:	2107      	movs	r1, #7
 80059d6:	400a      	ands	r2, r1
 80059d8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059da:	183b      	adds	r3, r7, r0
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	197a      	adds	r2, r7, r5
 80059e0:	7812      	ldrb	r2, [r2, #0]
 80059e2:	4914      	ldr	r1, [pc, #80]	@ (8005a34 <UARTEx_SetNbDataToProcess+0xb4>)
 80059e4:	5c8a      	ldrb	r2, [r1, r2]
 80059e6:	435a      	muls	r2, r3
 80059e8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80059ea:	197b      	adds	r3, r7, r5
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	4a12      	ldr	r2, [pc, #72]	@ (8005a38 <UARTEx_SetNbDataToProcess+0xb8>)
 80059f0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059f2:	0019      	movs	r1, r3
 80059f4:	f7fa fc1a 	bl	800022c <__divsi3>
 80059f8:	0003      	movs	r3, r0
 80059fa:	b299      	uxth	r1, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	226a      	movs	r2, #106	@ 0x6a
 8005a00:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a02:	19bb      	adds	r3, r7, r6
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	193a      	adds	r2, r7, r4
 8005a08:	7812      	ldrb	r2, [r2, #0]
 8005a0a:	490a      	ldr	r1, [pc, #40]	@ (8005a34 <UARTEx_SetNbDataToProcess+0xb4>)
 8005a0c:	5c8a      	ldrb	r2, [r1, r2]
 8005a0e:	435a      	muls	r2, r3
 8005a10:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005a12:	193b      	adds	r3, r7, r4
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	4a08      	ldr	r2, [pc, #32]	@ (8005a38 <UARTEx_SetNbDataToProcess+0xb8>)
 8005a18:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a1a:	0019      	movs	r1, r3
 8005a1c:	f7fa fc06 	bl	800022c <__divsi3>
 8005a20:	0003      	movs	r3, r0
 8005a22:	b299      	uxth	r1, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2268      	movs	r2, #104	@ 0x68
 8005a28:	5299      	strh	r1, [r3, r2]
}
 8005a2a:	46c0      	nop			@ (mov r8, r8)
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	b005      	add	sp, #20
 8005a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a32:	46c0      	nop			@ (mov r8, r8)
 8005a34:	08006a80 	.word	0x08006a80
 8005a38:	08006a88 	.word	0x08006a88

08005a3c <std>:
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	b510      	push	{r4, lr}
 8005a40:	0004      	movs	r4, r0
 8005a42:	6003      	str	r3, [r0, #0]
 8005a44:	6043      	str	r3, [r0, #4]
 8005a46:	6083      	str	r3, [r0, #8]
 8005a48:	8181      	strh	r1, [r0, #12]
 8005a4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a4c:	81c2      	strh	r2, [r0, #14]
 8005a4e:	6103      	str	r3, [r0, #16]
 8005a50:	6143      	str	r3, [r0, #20]
 8005a52:	6183      	str	r3, [r0, #24]
 8005a54:	0019      	movs	r1, r3
 8005a56:	2208      	movs	r2, #8
 8005a58:	305c      	adds	r0, #92	@ 0x5c
 8005a5a:	f000 f90f 	bl	8005c7c <memset>
 8005a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a8c <std+0x50>)
 8005a60:	6224      	str	r4, [r4, #32]
 8005a62:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a64:	4b0a      	ldr	r3, [pc, #40]	@ (8005a90 <std+0x54>)
 8005a66:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a68:	4b0a      	ldr	r3, [pc, #40]	@ (8005a94 <std+0x58>)
 8005a6a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a98 <std+0x5c>)
 8005a6e:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a70:	4b0a      	ldr	r3, [pc, #40]	@ (8005a9c <std+0x60>)
 8005a72:	429c      	cmp	r4, r3
 8005a74:	d005      	beq.n	8005a82 <std+0x46>
 8005a76:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa0 <std+0x64>)
 8005a78:	429c      	cmp	r4, r3
 8005a7a:	d002      	beq.n	8005a82 <std+0x46>
 8005a7c:	4b09      	ldr	r3, [pc, #36]	@ (8005aa4 <std+0x68>)
 8005a7e:	429c      	cmp	r4, r3
 8005a80:	d103      	bne.n	8005a8a <std+0x4e>
 8005a82:	0020      	movs	r0, r4
 8005a84:	3058      	adds	r0, #88	@ 0x58
 8005a86:	f000 f979 	bl	8005d7c <__retarget_lock_init_recursive>
 8005a8a:	bd10      	pop	{r4, pc}
 8005a8c:	08005be5 	.word	0x08005be5
 8005a90:	08005c0d 	.word	0x08005c0d
 8005a94:	08005c45 	.word	0x08005c45
 8005a98:	08005c71 	.word	0x08005c71
 8005a9c:	200003b4 	.word	0x200003b4
 8005aa0:	2000041c 	.word	0x2000041c
 8005aa4:	20000484 	.word	0x20000484

08005aa8 <stdio_exit_handler>:
 8005aa8:	b510      	push	{r4, lr}
 8005aaa:	4a03      	ldr	r2, [pc, #12]	@ (8005ab8 <stdio_exit_handler+0x10>)
 8005aac:	4903      	ldr	r1, [pc, #12]	@ (8005abc <stdio_exit_handler+0x14>)
 8005aae:	4804      	ldr	r0, [pc, #16]	@ (8005ac0 <stdio_exit_handler+0x18>)
 8005ab0:	f000 f86c 	bl	8005b8c <_fwalk_sglue>
 8005ab4:	bd10      	pop	{r4, pc}
 8005ab6:	46c0      	nop			@ (mov r8, r8)
 8005ab8:	2000003c 	.word	0x2000003c
 8005abc:	0800660d 	.word	0x0800660d
 8005ac0:	2000004c 	.word	0x2000004c

08005ac4 <cleanup_stdio>:
 8005ac4:	6841      	ldr	r1, [r0, #4]
 8005ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8005af4 <cleanup_stdio+0x30>)
 8005ac8:	b510      	push	{r4, lr}
 8005aca:	0004      	movs	r4, r0
 8005acc:	4299      	cmp	r1, r3
 8005ace:	d001      	beq.n	8005ad4 <cleanup_stdio+0x10>
 8005ad0:	f000 fd9c 	bl	800660c <_fflush_r>
 8005ad4:	68a1      	ldr	r1, [r4, #8]
 8005ad6:	4b08      	ldr	r3, [pc, #32]	@ (8005af8 <cleanup_stdio+0x34>)
 8005ad8:	4299      	cmp	r1, r3
 8005ada:	d002      	beq.n	8005ae2 <cleanup_stdio+0x1e>
 8005adc:	0020      	movs	r0, r4
 8005ade:	f000 fd95 	bl	800660c <_fflush_r>
 8005ae2:	68e1      	ldr	r1, [r4, #12]
 8005ae4:	4b05      	ldr	r3, [pc, #20]	@ (8005afc <cleanup_stdio+0x38>)
 8005ae6:	4299      	cmp	r1, r3
 8005ae8:	d002      	beq.n	8005af0 <cleanup_stdio+0x2c>
 8005aea:	0020      	movs	r0, r4
 8005aec:	f000 fd8e 	bl	800660c <_fflush_r>
 8005af0:	bd10      	pop	{r4, pc}
 8005af2:	46c0      	nop			@ (mov r8, r8)
 8005af4:	200003b4 	.word	0x200003b4
 8005af8:	2000041c 	.word	0x2000041c
 8005afc:	20000484 	.word	0x20000484

08005b00 <global_stdio_init.part.0>:
 8005b00:	b510      	push	{r4, lr}
 8005b02:	4b09      	ldr	r3, [pc, #36]	@ (8005b28 <global_stdio_init.part.0+0x28>)
 8005b04:	4a09      	ldr	r2, [pc, #36]	@ (8005b2c <global_stdio_init.part.0+0x2c>)
 8005b06:	2104      	movs	r1, #4
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	4809      	ldr	r0, [pc, #36]	@ (8005b30 <global_stdio_init.part.0+0x30>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f7ff ff95 	bl	8005a3c <std>
 8005b12:	2201      	movs	r2, #1
 8005b14:	2109      	movs	r1, #9
 8005b16:	4807      	ldr	r0, [pc, #28]	@ (8005b34 <global_stdio_init.part.0+0x34>)
 8005b18:	f7ff ff90 	bl	8005a3c <std>
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	2112      	movs	r1, #18
 8005b20:	4805      	ldr	r0, [pc, #20]	@ (8005b38 <global_stdio_init.part.0+0x38>)
 8005b22:	f7ff ff8b 	bl	8005a3c <std>
 8005b26:	bd10      	pop	{r4, pc}
 8005b28:	200004ec 	.word	0x200004ec
 8005b2c:	08005aa9 	.word	0x08005aa9
 8005b30:	200003b4 	.word	0x200003b4
 8005b34:	2000041c 	.word	0x2000041c
 8005b38:	20000484 	.word	0x20000484

08005b3c <__sfp_lock_acquire>:
 8005b3c:	b510      	push	{r4, lr}
 8005b3e:	4802      	ldr	r0, [pc, #8]	@ (8005b48 <__sfp_lock_acquire+0xc>)
 8005b40:	f000 f91d 	bl	8005d7e <__retarget_lock_acquire_recursive>
 8005b44:	bd10      	pop	{r4, pc}
 8005b46:	46c0      	nop			@ (mov r8, r8)
 8005b48:	200004f5 	.word	0x200004f5

08005b4c <__sfp_lock_release>:
 8005b4c:	b510      	push	{r4, lr}
 8005b4e:	4802      	ldr	r0, [pc, #8]	@ (8005b58 <__sfp_lock_release+0xc>)
 8005b50:	f000 f916 	bl	8005d80 <__retarget_lock_release_recursive>
 8005b54:	bd10      	pop	{r4, pc}
 8005b56:	46c0      	nop			@ (mov r8, r8)
 8005b58:	200004f5 	.word	0x200004f5

08005b5c <__sinit>:
 8005b5c:	b510      	push	{r4, lr}
 8005b5e:	0004      	movs	r4, r0
 8005b60:	f7ff ffec 	bl	8005b3c <__sfp_lock_acquire>
 8005b64:	6a23      	ldr	r3, [r4, #32]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d002      	beq.n	8005b70 <__sinit+0x14>
 8005b6a:	f7ff ffef 	bl	8005b4c <__sfp_lock_release>
 8005b6e:	bd10      	pop	{r4, pc}
 8005b70:	4b04      	ldr	r3, [pc, #16]	@ (8005b84 <__sinit+0x28>)
 8005b72:	6223      	str	r3, [r4, #32]
 8005b74:	4b04      	ldr	r3, [pc, #16]	@ (8005b88 <__sinit+0x2c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1f6      	bne.n	8005b6a <__sinit+0xe>
 8005b7c:	f7ff ffc0 	bl	8005b00 <global_stdio_init.part.0>
 8005b80:	e7f3      	b.n	8005b6a <__sinit+0xe>
 8005b82:	46c0      	nop			@ (mov r8, r8)
 8005b84:	08005ac5 	.word	0x08005ac5
 8005b88:	200004ec 	.word	0x200004ec

08005b8c <_fwalk_sglue>:
 8005b8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b8e:	0014      	movs	r4, r2
 8005b90:	2600      	movs	r6, #0
 8005b92:	9000      	str	r0, [sp, #0]
 8005b94:	9101      	str	r1, [sp, #4]
 8005b96:	68a5      	ldr	r5, [r4, #8]
 8005b98:	6867      	ldr	r7, [r4, #4]
 8005b9a:	3f01      	subs	r7, #1
 8005b9c:	d504      	bpl.n	8005ba8 <_fwalk_sglue+0x1c>
 8005b9e:	6824      	ldr	r4, [r4, #0]
 8005ba0:	2c00      	cmp	r4, #0
 8005ba2:	d1f8      	bne.n	8005b96 <_fwalk_sglue+0xa>
 8005ba4:	0030      	movs	r0, r6
 8005ba6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ba8:	89ab      	ldrh	r3, [r5, #12]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d908      	bls.n	8005bc0 <_fwalk_sglue+0x34>
 8005bae:	220e      	movs	r2, #14
 8005bb0:	5eab      	ldrsh	r3, [r5, r2]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	d004      	beq.n	8005bc0 <_fwalk_sglue+0x34>
 8005bb6:	0029      	movs	r1, r5
 8005bb8:	9800      	ldr	r0, [sp, #0]
 8005bba:	9b01      	ldr	r3, [sp, #4]
 8005bbc:	4798      	blx	r3
 8005bbe:	4306      	orrs	r6, r0
 8005bc0:	3568      	adds	r5, #104	@ 0x68
 8005bc2:	e7ea      	b.n	8005b9a <_fwalk_sglue+0xe>

08005bc4 <iprintf>:
 8005bc4:	b40f      	push	{r0, r1, r2, r3}
 8005bc6:	b507      	push	{r0, r1, r2, lr}
 8005bc8:	4905      	ldr	r1, [pc, #20]	@ (8005be0 <iprintf+0x1c>)
 8005bca:	ab04      	add	r3, sp, #16
 8005bcc:	6808      	ldr	r0, [r1, #0]
 8005bce:	cb04      	ldmia	r3!, {r2}
 8005bd0:	6881      	ldr	r1, [r0, #8]
 8005bd2:	9301      	str	r3, [sp, #4]
 8005bd4:	f000 f9fa 	bl	8005fcc <_vfiprintf_r>
 8005bd8:	b003      	add	sp, #12
 8005bda:	bc08      	pop	{r3}
 8005bdc:	b004      	add	sp, #16
 8005bde:	4718      	bx	r3
 8005be0:	20000048 	.word	0x20000048

08005be4 <__sread>:
 8005be4:	b570      	push	{r4, r5, r6, lr}
 8005be6:	000c      	movs	r4, r1
 8005be8:	250e      	movs	r5, #14
 8005bea:	5f49      	ldrsh	r1, [r1, r5]
 8005bec:	f000 f874 	bl	8005cd8 <_read_r>
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	db03      	blt.n	8005bfc <__sread+0x18>
 8005bf4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005bf6:	181b      	adds	r3, r3, r0
 8005bf8:	6563      	str	r3, [r4, #84]	@ 0x54
 8005bfa:	bd70      	pop	{r4, r5, r6, pc}
 8005bfc:	89a3      	ldrh	r3, [r4, #12]
 8005bfe:	4a02      	ldr	r2, [pc, #8]	@ (8005c08 <__sread+0x24>)
 8005c00:	4013      	ands	r3, r2
 8005c02:	81a3      	strh	r3, [r4, #12]
 8005c04:	e7f9      	b.n	8005bfa <__sread+0x16>
 8005c06:	46c0      	nop			@ (mov r8, r8)
 8005c08:	ffffefff 	.word	0xffffefff

08005c0c <__swrite>:
 8005c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0e:	001f      	movs	r7, r3
 8005c10:	898b      	ldrh	r3, [r1, #12]
 8005c12:	0005      	movs	r5, r0
 8005c14:	000c      	movs	r4, r1
 8005c16:	0016      	movs	r6, r2
 8005c18:	05db      	lsls	r3, r3, #23
 8005c1a:	d505      	bpl.n	8005c28 <__swrite+0x1c>
 8005c1c:	230e      	movs	r3, #14
 8005c1e:	5ec9      	ldrsh	r1, [r1, r3]
 8005c20:	2200      	movs	r2, #0
 8005c22:	2302      	movs	r3, #2
 8005c24:	f000 f844 	bl	8005cb0 <_lseek_r>
 8005c28:	89a3      	ldrh	r3, [r4, #12]
 8005c2a:	4a05      	ldr	r2, [pc, #20]	@ (8005c40 <__swrite+0x34>)
 8005c2c:	0028      	movs	r0, r5
 8005c2e:	4013      	ands	r3, r2
 8005c30:	81a3      	strh	r3, [r4, #12]
 8005c32:	0032      	movs	r2, r6
 8005c34:	230e      	movs	r3, #14
 8005c36:	5ee1      	ldrsh	r1, [r4, r3]
 8005c38:	003b      	movs	r3, r7
 8005c3a:	f000 f861 	bl	8005d00 <_write_r>
 8005c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c40:	ffffefff 	.word	0xffffefff

08005c44 <__sseek>:
 8005c44:	b570      	push	{r4, r5, r6, lr}
 8005c46:	000c      	movs	r4, r1
 8005c48:	250e      	movs	r5, #14
 8005c4a:	5f49      	ldrsh	r1, [r1, r5]
 8005c4c:	f000 f830 	bl	8005cb0 <_lseek_r>
 8005c50:	89a3      	ldrh	r3, [r4, #12]
 8005c52:	1c42      	adds	r2, r0, #1
 8005c54:	d103      	bne.n	8005c5e <__sseek+0x1a>
 8005c56:	4a05      	ldr	r2, [pc, #20]	@ (8005c6c <__sseek+0x28>)
 8005c58:	4013      	ands	r3, r2
 8005c5a:	81a3      	strh	r3, [r4, #12]
 8005c5c:	bd70      	pop	{r4, r5, r6, pc}
 8005c5e:	2280      	movs	r2, #128	@ 0x80
 8005c60:	0152      	lsls	r2, r2, #5
 8005c62:	4313      	orrs	r3, r2
 8005c64:	81a3      	strh	r3, [r4, #12]
 8005c66:	6560      	str	r0, [r4, #84]	@ 0x54
 8005c68:	e7f8      	b.n	8005c5c <__sseek+0x18>
 8005c6a:	46c0      	nop			@ (mov r8, r8)
 8005c6c:	ffffefff 	.word	0xffffefff

08005c70 <__sclose>:
 8005c70:	b510      	push	{r4, lr}
 8005c72:	230e      	movs	r3, #14
 8005c74:	5ec9      	ldrsh	r1, [r1, r3]
 8005c76:	f000 f809 	bl	8005c8c <_close_r>
 8005c7a:	bd10      	pop	{r4, pc}

08005c7c <memset>:
 8005c7c:	0003      	movs	r3, r0
 8005c7e:	1882      	adds	r2, r0, r2
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d100      	bne.n	8005c86 <memset+0xa>
 8005c84:	4770      	bx	lr
 8005c86:	7019      	strb	r1, [r3, #0]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	e7f9      	b.n	8005c80 <memset+0x4>

08005c8c <_close_r>:
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	b570      	push	{r4, r5, r6, lr}
 8005c90:	4d06      	ldr	r5, [pc, #24]	@ (8005cac <_close_r+0x20>)
 8005c92:	0004      	movs	r4, r0
 8005c94:	0008      	movs	r0, r1
 8005c96:	602b      	str	r3, [r5, #0]
 8005c98:	f7fb fa8b 	bl	80011b2 <_close>
 8005c9c:	1c43      	adds	r3, r0, #1
 8005c9e:	d103      	bne.n	8005ca8 <_close_r+0x1c>
 8005ca0:	682b      	ldr	r3, [r5, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d000      	beq.n	8005ca8 <_close_r+0x1c>
 8005ca6:	6023      	str	r3, [r4, #0]
 8005ca8:	bd70      	pop	{r4, r5, r6, pc}
 8005caa:	46c0      	nop			@ (mov r8, r8)
 8005cac:	200004f0 	.word	0x200004f0

08005cb0 <_lseek_r>:
 8005cb0:	b570      	push	{r4, r5, r6, lr}
 8005cb2:	0004      	movs	r4, r0
 8005cb4:	0008      	movs	r0, r1
 8005cb6:	0011      	movs	r1, r2
 8005cb8:	001a      	movs	r2, r3
 8005cba:	2300      	movs	r3, #0
 8005cbc:	4d05      	ldr	r5, [pc, #20]	@ (8005cd4 <_lseek_r+0x24>)
 8005cbe:	602b      	str	r3, [r5, #0]
 8005cc0:	f7fb fa98 	bl	80011f4 <_lseek>
 8005cc4:	1c43      	adds	r3, r0, #1
 8005cc6:	d103      	bne.n	8005cd0 <_lseek_r+0x20>
 8005cc8:	682b      	ldr	r3, [r5, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d000      	beq.n	8005cd0 <_lseek_r+0x20>
 8005cce:	6023      	str	r3, [r4, #0]
 8005cd0:	bd70      	pop	{r4, r5, r6, pc}
 8005cd2:	46c0      	nop			@ (mov r8, r8)
 8005cd4:	200004f0 	.word	0x200004f0

08005cd8 <_read_r>:
 8005cd8:	b570      	push	{r4, r5, r6, lr}
 8005cda:	0004      	movs	r4, r0
 8005cdc:	0008      	movs	r0, r1
 8005cde:	0011      	movs	r1, r2
 8005ce0:	001a      	movs	r2, r3
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	4d05      	ldr	r5, [pc, #20]	@ (8005cfc <_read_r+0x24>)
 8005ce6:	602b      	str	r3, [r5, #0]
 8005ce8:	f7fb fa2a 	bl	8001140 <_read>
 8005cec:	1c43      	adds	r3, r0, #1
 8005cee:	d103      	bne.n	8005cf8 <_read_r+0x20>
 8005cf0:	682b      	ldr	r3, [r5, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d000      	beq.n	8005cf8 <_read_r+0x20>
 8005cf6:	6023      	str	r3, [r4, #0]
 8005cf8:	bd70      	pop	{r4, r5, r6, pc}
 8005cfa:	46c0      	nop			@ (mov r8, r8)
 8005cfc:	200004f0 	.word	0x200004f0

08005d00 <_write_r>:
 8005d00:	b570      	push	{r4, r5, r6, lr}
 8005d02:	0004      	movs	r4, r0
 8005d04:	0008      	movs	r0, r1
 8005d06:	0011      	movs	r1, r2
 8005d08:	001a      	movs	r2, r3
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	4d05      	ldr	r5, [pc, #20]	@ (8005d24 <_write_r+0x24>)
 8005d0e:	602b      	str	r3, [r5, #0]
 8005d10:	f7fb fa33 	bl	800117a <_write>
 8005d14:	1c43      	adds	r3, r0, #1
 8005d16:	d103      	bne.n	8005d20 <_write_r+0x20>
 8005d18:	682b      	ldr	r3, [r5, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d000      	beq.n	8005d20 <_write_r+0x20>
 8005d1e:	6023      	str	r3, [r4, #0]
 8005d20:	bd70      	pop	{r4, r5, r6, pc}
 8005d22:	46c0      	nop			@ (mov r8, r8)
 8005d24:	200004f0 	.word	0x200004f0

08005d28 <__errno>:
 8005d28:	4b01      	ldr	r3, [pc, #4]	@ (8005d30 <__errno+0x8>)
 8005d2a:	6818      	ldr	r0, [r3, #0]
 8005d2c:	4770      	bx	lr
 8005d2e:	46c0      	nop			@ (mov r8, r8)
 8005d30:	20000048 	.word	0x20000048

08005d34 <__libc_init_array>:
 8005d34:	b570      	push	{r4, r5, r6, lr}
 8005d36:	2600      	movs	r6, #0
 8005d38:	4c0c      	ldr	r4, [pc, #48]	@ (8005d6c <__libc_init_array+0x38>)
 8005d3a:	4d0d      	ldr	r5, [pc, #52]	@ (8005d70 <__libc_init_array+0x3c>)
 8005d3c:	1b64      	subs	r4, r4, r5
 8005d3e:	10a4      	asrs	r4, r4, #2
 8005d40:	42a6      	cmp	r6, r4
 8005d42:	d109      	bne.n	8005d58 <__libc_init_array+0x24>
 8005d44:	2600      	movs	r6, #0
 8005d46:	f000 fddb 	bl	8006900 <_init>
 8005d4a:	4c0a      	ldr	r4, [pc, #40]	@ (8005d74 <__libc_init_array+0x40>)
 8005d4c:	4d0a      	ldr	r5, [pc, #40]	@ (8005d78 <__libc_init_array+0x44>)
 8005d4e:	1b64      	subs	r4, r4, r5
 8005d50:	10a4      	asrs	r4, r4, #2
 8005d52:	42a6      	cmp	r6, r4
 8005d54:	d105      	bne.n	8005d62 <__libc_init_array+0x2e>
 8005d56:	bd70      	pop	{r4, r5, r6, pc}
 8005d58:	00b3      	lsls	r3, r6, #2
 8005d5a:	58eb      	ldr	r3, [r5, r3]
 8005d5c:	4798      	blx	r3
 8005d5e:	3601      	adds	r6, #1
 8005d60:	e7ee      	b.n	8005d40 <__libc_init_array+0xc>
 8005d62:	00b3      	lsls	r3, r6, #2
 8005d64:	58eb      	ldr	r3, [r5, r3]
 8005d66:	4798      	blx	r3
 8005d68:	3601      	adds	r6, #1
 8005d6a:	e7f2      	b.n	8005d52 <__libc_init_array+0x1e>
 8005d6c:	08006acc 	.word	0x08006acc
 8005d70:	08006acc 	.word	0x08006acc
 8005d74:	08006ad0 	.word	0x08006ad0
 8005d78:	08006acc 	.word	0x08006acc

08005d7c <__retarget_lock_init_recursive>:
 8005d7c:	4770      	bx	lr

08005d7e <__retarget_lock_acquire_recursive>:
 8005d7e:	4770      	bx	lr

08005d80 <__retarget_lock_release_recursive>:
 8005d80:	4770      	bx	lr
	...

08005d84 <_free_r>:
 8005d84:	b570      	push	{r4, r5, r6, lr}
 8005d86:	0005      	movs	r5, r0
 8005d88:	1e0c      	subs	r4, r1, #0
 8005d8a:	d010      	beq.n	8005dae <_free_r+0x2a>
 8005d8c:	3c04      	subs	r4, #4
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	da00      	bge.n	8005d96 <_free_r+0x12>
 8005d94:	18e4      	adds	r4, r4, r3
 8005d96:	0028      	movs	r0, r5
 8005d98:	f000 f8e0 	bl	8005f5c <__malloc_lock>
 8005d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8005e14 <_free_r+0x90>)
 8005d9e:	6813      	ldr	r3, [r2, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d105      	bne.n	8005db0 <_free_r+0x2c>
 8005da4:	6063      	str	r3, [r4, #4]
 8005da6:	6014      	str	r4, [r2, #0]
 8005da8:	0028      	movs	r0, r5
 8005daa:	f000 f8df 	bl	8005f6c <__malloc_unlock>
 8005dae:	bd70      	pop	{r4, r5, r6, pc}
 8005db0:	42a3      	cmp	r3, r4
 8005db2:	d908      	bls.n	8005dc6 <_free_r+0x42>
 8005db4:	6820      	ldr	r0, [r4, #0]
 8005db6:	1821      	adds	r1, r4, r0
 8005db8:	428b      	cmp	r3, r1
 8005dba:	d1f3      	bne.n	8005da4 <_free_r+0x20>
 8005dbc:	6819      	ldr	r1, [r3, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	1809      	adds	r1, r1, r0
 8005dc2:	6021      	str	r1, [r4, #0]
 8005dc4:	e7ee      	b.n	8005da4 <_free_r+0x20>
 8005dc6:	001a      	movs	r2, r3
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <_free_r+0x4e>
 8005dce:	42a3      	cmp	r3, r4
 8005dd0:	d9f9      	bls.n	8005dc6 <_free_r+0x42>
 8005dd2:	6811      	ldr	r1, [r2, #0]
 8005dd4:	1850      	adds	r0, r2, r1
 8005dd6:	42a0      	cmp	r0, r4
 8005dd8:	d10b      	bne.n	8005df2 <_free_r+0x6e>
 8005dda:	6820      	ldr	r0, [r4, #0]
 8005ddc:	1809      	adds	r1, r1, r0
 8005dde:	1850      	adds	r0, r2, r1
 8005de0:	6011      	str	r1, [r2, #0]
 8005de2:	4283      	cmp	r3, r0
 8005de4:	d1e0      	bne.n	8005da8 <_free_r+0x24>
 8005de6:	6818      	ldr	r0, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	1841      	adds	r1, r0, r1
 8005dec:	6011      	str	r1, [r2, #0]
 8005dee:	6053      	str	r3, [r2, #4]
 8005df0:	e7da      	b.n	8005da8 <_free_r+0x24>
 8005df2:	42a0      	cmp	r0, r4
 8005df4:	d902      	bls.n	8005dfc <_free_r+0x78>
 8005df6:	230c      	movs	r3, #12
 8005df8:	602b      	str	r3, [r5, #0]
 8005dfa:	e7d5      	b.n	8005da8 <_free_r+0x24>
 8005dfc:	6820      	ldr	r0, [r4, #0]
 8005dfe:	1821      	adds	r1, r4, r0
 8005e00:	428b      	cmp	r3, r1
 8005e02:	d103      	bne.n	8005e0c <_free_r+0x88>
 8005e04:	6819      	ldr	r1, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	1809      	adds	r1, r1, r0
 8005e0a:	6021      	str	r1, [r4, #0]
 8005e0c:	6063      	str	r3, [r4, #4]
 8005e0e:	6054      	str	r4, [r2, #4]
 8005e10:	e7ca      	b.n	8005da8 <_free_r+0x24>
 8005e12:	46c0      	nop			@ (mov r8, r8)
 8005e14:	200004fc 	.word	0x200004fc

08005e18 <sbrk_aligned>:
 8005e18:	b570      	push	{r4, r5, r6, lr}
 8005e1a:	4e0f      	ldr	r6, [pc, #60]	@ (8005e58 <sbrk_aligned+0x40>)
 8005e1c:	000d      	movs	r5, r1
 8005e1e:	6831      	ldr	r1, [r6, #0]
 8005e20:	0004      	movs	r4, r0
 8005e22:	2900      	cmp	r1, #0
 8005e24:	d102      	bne.n	8005e2c <sbrk_aligned+0x14>
 8005e26:	f000 fcbd 	bl	80067a4 <_sbrk_r>
 8005e2a:	6030      	str	r0, [r6, #0]
 8005e2c:	0029      	movs	r1, r5
 8005e2e:	0020      	movs	r0, r4
 8005e30:	f000 fcb8 	bl	80067a4 <_sbrk_r>
 8005e34:	1c43      	adds	r3, r0, #1
 8005e36:	d103      	bne.n	8005e40 <sbrk_aligned+0x28>
 8005e38:	2501      	movs	r5, #1
 8005e3a:	426d      	negs	r5, r5
 8005e3c:	0028      	movs	r0, r5
 8005e3e:	bd70      	pop	{r4, r5, r6, pc}
 8005e40:	2303      	movs	r3, #3
 8005e42:	1cc5      	adds	r5, r0, #3
 8005e44:	439d      	bics	r5, r3
 8005e46:	42a8      	cmp	r0, r5
 8005e48:	d0f8      	beq.n	8005e3c <sbrk_aligned+0x24>
 8005e4a:	1a29      	subs	r1, r5, r0
 8005e4c:	0020      	movs	r0, r4
 8005e4e:	f000 fca9 	bl	80067a4 <_sbrk_r>
 8005e52:	3001      	adds	r0, #1
 8005e54:	d1f2      	bne.n	8005e3c <sbrk_aligned+0x24>
 8005e56:	e7ef      	b.n	8005e38 <sbrk_aligned+0x20>
 8005e58:	200004f8 	.word	0x200004f8

08005e5c <_malloc_r>:
 8005e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e5e:	2203      	movs	r2, #3
 8005e60:	1ccb      	adds	r3, r1, #3
 8005e62:	4393      	bics	r3, r2
 8005e64:	3308      	adds	r3, #8
 8005e66:	0005      	movs	r5, r0
 8005e68:	001f      	movs	r7, r3
 8005e6a:	2b0c      	cmp	r3, #12
 8005e6c:	d234      	bcs.n	8005ed8 <_malloc_r+0x7c>
 8005e6e:	270c      	movs	r7, #12
 8005e70:	42b9      	cmp	r1, r7
 8005e72:	d833      	bhi.n	8005edc <_malloc_r+0x80>
 8005e74:	0028      	movs	r0, r5
 8005e76:	f000 f871 	bl	8005f5c <__malloc_lock>
 8005e7a:	4e37      	ldr	r6, [pc, #220]	@ (8005f58 <_malloc_r+0xfc>)
 8005e7c:	6833      	ldr	r3, [r6, #0]
 8005e7e:	001c      	movs	r4, r3
 8005e80:	2c00      	cmp	r4, #0
 8005e82:	d12f      	bne.n	8005ee4 <_malloc_r+0x88>
 8005e84:	0039      	movs	r1, r7
 8005e86:	0028      	movs	r0, r5
 8005e88:	f7ff ffc6 	bl	8005e18 <sbrk_aligned>
 8005e8c:	0004      	movs	r4, r0
 8005e8e:	1c43      	adds	r3, r0, #1
 8005e90:	d15f      	bne.n	8005f52 <_malloc_r+0xf6>
 8005e92:	6834      	ldr	r4, [r6, #0]
 8005e94:	9400      	str	r4, [sp, #0]
 8005e96:	9b00      	ldr	r3, [sp, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d14a      	bne.n	8005f32 <_malloc_r+0xd6>
 8005e9c:	2c00      	cmp	r4, #0
 8005e9e:	d052      	beq.n	8005f46 <_malloc_r+0xea>
 8005ea0:	6823      	ldr	r3, [r4, #0]
 8005ea2:	0028      	movs	r0, r5
 8005ea4:	18e3      	adds	r3, r4, r3
 8005ea6:	9900      	ldr	r1, [sp, #0]
 8005ea8:	9301      	str	r3, [sp, #4]
 8005eaa:	f000 fc7b 	bl	80067a4 <_sbrk_r>
 8005eae:	9b01      	ldr	r3, [sp, #4]
 8005eb0:	4283      	cmp	r3, r0
 8005eb2:	d148      	bne.n	8005f46 <_malloc_r+0xea>
 8005eb4:	6823      	ldr	r3, [r4, #0]
 8005eb6:	0028      	movs	r0, r5
 8005eb8:	1aff      	subs	r7, r7, r3
 8005eba:	0039      	movs	r1, r7
 8005ebc:	f7ff ffac 	bl	8005e18 <sbrk_aligned>
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	d040      	beq.n	8005f46 <_malloc_r+0xea>
 8005ec4:	6823      	ldr	r3, [r4, #0]
 8005ec6:	19db      	adds	r3, r3, r7
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	6833      	ldr	r3, [r6, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	2a00      	cmp	r2, #0
 8005ed0:	d133      	bne.n	8005f3a <_malloc_r+0xde>
 8005ed2:	9b00      	ldr	r3, [sp, #0]
 8005ed4:	6033      	str	r3, [r6, #0]
 8005ed6:	e019      	b.n	8005f0c <_malloc_r+0xb0>
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	dac9      	bge.n	8005e70 <_malloc_r+0x14>
 8005edc:	230c      	movs	r3, #12
 8005ede:	602b      	str	r3, [r5, #0]
 8005ee0:	2000      	movs	r0, #0
 8005ee2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ee4:	6821      	ldr	r1, [r4, #0]
 8005ee6:	1bc9      	subs	r1, r1, r7
 8005ee8:	d420      	bmi.n	8005f2c <_malloc_r+0xd0>
 8005eea:	290b      	cmp	r1, #11
 8005eec:	d90a      	bls.n	8005f04 <_malloc_r+0xa8>
 8005eee:	19e2      	adds	r2, r4, r7
 8005ef0:	6027      	str	r7, [r4, #0]
 8005ef2:	42a3      	cmp	r3, r4
 8005ef4:	d104      	bne.n	8005f00 <_malloc_r+0xa4>
 8005ef6:	6032      	str	r2, [r6, #0]
 8005ef8:	6863      	ldr	r3, [r4, #4]
 8005efa:	6011      	str	r1, [r2, #0]
 8005efc:	6053      	str	r3, [r2, #4]
 8005efe:	e005      	b.n	8005f0c <_malloc_r+0xb0>
 8005f00:	605a      	str	r2, [r3, #4]
 8005f02:	e7f9      	b.n	8005ef8 <_malloc_r+0x9c>
 8005f04:	6862      	ldr	r2, [r4, #4]
 8005f06:	42a3      	cmp	r3, r4
 8005f08:	d10e      	bne.n	8005f28 <_malloc_r+0xcc>
 8005f0a:	6032      	str	r2, [r6, #0]
 8005f0c:	0028      	movs	r0, r5
 8005f0e:	f000 f82d 	bl	8005f6c <__malloc_unlock>
 8005f12:	0020      	movs	r0, r4
 8005f14:	2207      	movs	r2, #7
 8005f16:	300b      	adds	r0, #11
 8005f18:	1d23      	adds	r3, r4, #4
 8005f1a:	4390      	bics	r0, r2
 8005f1c:	1ac2      	subs	r2, r0, r3
 8005f1e:	4298      	cmp	r0, r3
 8005f20:	d0df      	beq.n	8005ee2 <_malloc_r+0x86>
 8005f22:	1a1b      	subs	r3, r3, r0
 8005f24:	50a3      	str	r3, [r4, r2]
 8005f26:	e7dc      	b.n	8005ee2 <_malloc_r+0x86>
 8005f28:	605a      	str	r2, [r3, #4]
 8005f2a:	e7ef      	b.n	8005f0c <_malloc_r+0xb0>
 8005f2c:	0023      	movs	r3, r4
 8005f2e:	6864      	ldr	r4, [r4, #4]
 8005f30:	e7a6      	b.n	8005e80 <_malloc_r+0x24>
 8005f32:	9c00      	ldr	r4, [sp, #0]
 8005f34:	6863      	ldr	r3, [r4, #4]
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	e7ad      	b.n	8005e96 <_malloc_r+0x3a>
 8005f3a:	001a      	movs	r2, r3
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	42a3      	cmp	r3, r4
 8005f40:	d1fb      	bne.n	8005f3a <_malloc_r+0xde>
 8005f42:	2300      	movs	r3, #0
 8005f44:	e7da      	b.n	8005efc <_malloc_r+0xa0>
 8005f46:	230c      	movs	r3, #12
 8005f48:	0028      	movs	r0, r5
 8005f4a:	602b      	str	r3, [r5, #0]
 8005f4c:	f000 f80e 	bl	8005f6c <__malloc_unlock>
 8005f50:	e7c6      	b.n	8005ee0 <_malloc_r+0x84>
 8005f52:	6007      	str	r7, [r0, #0]
 8005f54:	e7da      	b.n	8005f0c <_malloc_r+0xb0>
 8005f56:	46c0      	nop			@ (mov r8, r8)
 8005f58:	200004fc 	.word	0x200004fc

08005f5c <__malloc_lock>:
 8005f5c:	b510      	push	{r4, lr}
 8005f5e:	4802      	ldr	r0, [pc, #8]	@ (8005f68 <__malloc_lock+0xc>)
 8005f60:	f7ff ff0d 	bl	8005d7e <__retarget_lock_acquire_recursive>
 8005f64:	bd10      	pop	{r4, pc}
 8005f66:	46c0      	nop			@ (mov r8, r8)
 8005f68:	200004f4 	.word	0x200004f4

08005f6c <__malloc_unlock>:
 8005f6c:	b510      	push	{r4, lr}
 8005f6e:	4802      	ldr	r0, [pc, #8]	@ (8005f78 <__malloc_unlock+0xc>)
 8005f70:	f7ff ff06 	bl	8005d80 <__retarget_lock_release_recursive>
 8005f74:	bd10      	pop	{r4, pc}
 8005f76:	46c0      	nop			@ (mov r8, r8)
 8005f78:	200004f4 	.word	0x200004f4

08005f7c <__sfputc_r>:
 8005f7c:	6893      	ldr	r3, [r2, #8]
 8005f7e:	b510      	push	{r4, lr}
 8005f80:	3b01      	subs	r3, #1
 8005f82:	6093      	str	r3, [r2, #8]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	da04      	bge.n	8005f92 <__sfputc_r+0x16>
 8005f88:	6994      	ldr	r4, [r2, #24]
 8005f8a:	42a3      	cmp	r3, r4
 8005f8c:	db07      	blt.n	8005f9e <__sfputc_r+0x22>
 8005f8e:	290a      	cmp	r1, #10
 8005f90:	d005      	beq.n	8005f9e <__sfputc_r+0x22>
 8005f92:	6813      	ldr	r3, [r2, #0]
 8005f94:	1c58      	adds	r0, r3, #1
 8005f96:	6010      	str	r0, [r2, #0]
 8005f98:	7019      	strb	r1, [r3, #0]
 8005f9a:	0008      	movs	r0, r1
 8005f9c:	bd10      	pop	{r4, pc}
 8005f9e:	f000 fb60 	bl	8006662 <__swbuf_r>
 8005fa2:	0001      	movs	r1, r0
 8005fa4:	e7f9      	b.n	8005f9a <__sfputc_r+0x1e>

08005fa6 <__sfputs_r>:
 8005fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa8:	0006      	movs	r6, r0
 8005faa:	000f      	movs	r7, r1
 8005fac:	0014      	movs	r4, r2
 8005fae:	18d5      	adds	r5, r2, r3
 8005fb0:	42ac      	cmp	r4, r5
 8005fb2:	d101      	bne.n	8005fb8 <__sfputs_r+0x12>
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	e007      	b.n	8005fc8 <__sfputs_r+0x22>
 8005fb8:	7821      	ldrb	r1, [r4, #0]
 8005fba:	003a      	movs	r2, r7
 8005fbc:	0030      	movs	r0, r6
 8005fbe:	f7ff ffdd 	bl	8005f7c <__sfputc_r>
 8005fc2:	3401      	adds	r4, #1
 8005fc4:	1c43      	adds	r3, r0, #1
 8005fc6:	d1f3      	bne.n	8005fb0 <__sfputs_r+0xa>
 8005fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005fcc <_vfiprintf_r>:
 8005fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fce:	b0a1      	sub	sp, #132	@ 0x84
 8005fd0:	000f      	movs	r7, r1
 8005fd2:	0015      	movs	r5, r2
 8005fd4:	001e      	movs	r6, r3
 8005fd6:	9003      	str	r0, [sp, #12]
 8005fd8:	2800      	cmp	r0, #0
 8005fda:	d004      	beq.n	8005fe6 <_vfiprintf_r+0x1a>
 8005fdc:	6a03      	ldr	r3, [r0, #32]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <_vfiprintf_r+0x1a>
 8005fe2:	f7ff fdbb 	bl	8005b5c <__sinit>
 8005fe6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fe8:	07db      	lsls	r3, r3, #31
 8005fea:	d405      	bmi.n	8005ff8 <_vfiprintf_r+0x2c>
 8005fec:	89bb      	ldrh	r3, [r7, #12]
 8005fee:	059b      	lsls	r3, r3, #22
 8005ff0:	d402      	bmi.n	8005ff8 <_vfiprintf_r+0x2c>
 8005ff2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005ff4:	f7ff fec3 	bl	8005d7e <__retarget_lock_acquire_recursive>
 8005ff8:	89bb      	ldrh	r3, [r7, #12]
 8005ffa:	071b      	lsls	r3, r3, #28
 8005ffc:	d502      	bpl.n	8006004 <_vfiprintf_r+0x38>
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d113      	bne.n	800602c <_vfiprintf_r+0x60>
 8006004:	0039      	movs	r1, r7
 8006006:	9803      	ldr	r0, [sp, #12]
 8006008:	f000 fb6e 	bl	80066e8 <__swsetup_r>
 800600c:	2800      	cmp	r0, #0
 800600e:	d00d      	beq.n	800602c <_vfiprintf_r+0x60>
 8006010:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006012:	07db      	lsls	r3, r3, #31
 8006014:	d503      	bpl.n	800601e <_vfiprintf_r+0x52>
 8006016:	2001      	movs	r0, #1
 8006018:	4240      	negs	r0, r0
 800601a:	b021      	add	sp, #132	@ 0x84
 800601c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800601e:	89bb      	ldrh	r3, [r7, #12]
 8006020:	059b      	lsls	r3, r3, #22
 8006022:	d4f8      	bmi.n	8006016 <_vfiprintf_r+0x4a>
 8006024:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006026:	f7ff feab 	bl	8005d80 <__retarget_lock_release_recursive>
 800602a:	e7f4      	b.n	8006016 <_vfiprintf_r+0x4a>
 800602c:	2300      	movs	r3, #0
 800602e:	ac08      	add	r4, sp, #32
 8006030:	6163      	str	r3, [r4, #20]
 8006032:	3320      	adds	r3, #32
 8006034:	7663      	strb	r3, [r4, #25]
 8006036:	3310      	adds	r3, #16
 8006038:	76a3      	strb	r3, [r4, #26]
 800603a:	9607      	str	r6, [sp, #28]
 800603c:	002e      	movs	r6, r5
 800603e:	7833      	ldrb	r3, [r6, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <_vfiprintf_r+0x7c>
 8006044:	2b25      	cmp	r3, #37	@ 0x25
 8006046:	d148      	bne.n	80060da <_vfiprintf_r+0x10e>
 8006048:	1b73      	subs	r3, r6, r5
 800604a:	9305      	str	r3, [sp, #20]
 800604c:	42ae      	cmp	r6, r5
 800604e:	d00b      	beq.n	8006068 <_vfiprintf_r+0x9c>
 8006050:	002a      	movs	r2, r5
 8006052:	0039      	movs	r1, r7
 8006054:	9803      	ldr	r0, [sp, #12]
 8006056:	f7ff ffa6 	bl	8005fa6 <__sfputs_r>
 800605a:	3001      	adds	r0, #1
 800605c:	d100      	bne.n	8006060 <_vfiprintf_r+0x94>
 800605e:	e0ae      	b.n	80061be <_vfiprintf_r+0x1f2>
 8006060:	6963      	ldr	r3, [r4, #20]
 8006062:	9a05      	ldr	r2, [sp, #20]
 8006064:	189b      	adds	r3, r3, r2
 8006066:	6163      	str	r3, [r4, #20]
 8006068:	7833      	ldrb	r3, [r6, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d100      	bne.n	8006070 <_vfiprintf_r+0xa4>
 800606e:	e0a6      	b.n	80061be <_vfiprintf_r+0x1f2>
 8006070:	2201      	movs	r2, #1
 8006072:	2300      	movs	r3, #0
 8006074:	4252      	negs	r2, r2
 8006076:	6062      	str	r2, [r4, #4]
 8006078:	a904      	add	r1, sp, #16
 800607a:	3254      	adds	r2, #84	@ 0x54
 800607c:	1852      	adds	r2, r2, r1
 800607e:	1c75      	adds	r5, r6, #1
 8006080:	6023      	str	r3, [r4, #0]
 8006082:	60e3      	str	r3, [r4, #12]
 8006084:	60a3      	str	r3, [r4, #8]
 8006086:	7013      	strb	r3, [r2, #0]
 8006088:	65a3      	str	r3, [r4, #88]	@ 0x58
 800608a:	4b59      	ldr	r3, [pc, #356]	@ (80061f0 <_vfiprintf_r+0x224>)
 800608c:	2205      	movs	r2, #5
 800608e:	0018      	movs	r0, r3
 8006090:	7829      	ldrb	r1, [r5, #0]
 8006092:	9305      	str	r3, [sp, #20]
 8006094:	f000 fb98 	bl	80067c8 <memchr>
 8006098:	1c6e      	adds	r6, r5, #1
 800609a:	2800      	cmp	r0, #0
 800609c:	d11f      	bne.n	80060de <_vfiprintf_r+0x112>
 800609e:	6822      	ldr	r2, [r4, #0]
 80060a0:	06d3      	lsls	r3, r2, #27
 80060a2:	d504      	bpl.n	80060ae <_vfiprintf_r+0xe2>
 80060a4:	2353      	movs	r3, #83	@ 0x53
 80060a6:	a904      	add	r1, sp, #16
 80060a8:	185b      	adds	r3, r3, r1
 80060aa:	2120      	movs	r1, #32
 80060ac:	7019      	strb	r1, [r3, #0]
 80060ae:	0713      	lsls	r3, r2, #28
 80060b0:	d504      	bpl.n	80060bc <_vfiprintf_r+0xf0>
 80060b2:	2353      	movs	r3, #83	@ 0x53
 80060b4:	a904      	add	r1, sp, #16
 80060b6:	185b      	adds	r3, r3, r1
 80060b8:	212b      	movs	r1, #43	@ 0x2b
 80060ba:	7019      	strb	r1, [r3, #0]
 80060bc:	782b      	ldrb	r3, [r5, #0]
 80060be:	2b2a      	cmp	r3, #42	@ 0x2a
 80060c0:	d016      	beq.n	80060f0 <_vfiprintf_r+0x124>
 80060c2:	002e      	movs	r6, r5
 80060c4:	2100      	movs	r1, #0
 80060c6:	200a      	movs	r0, #10
 80060c8:	68e3      	ldr	r3, [r4, #12]
 80060ca:	7832      	ldrb	r2, [r6, #0]
 80060cc:	1c75      	adds	r5, r6, #1
 80060ce:	3a30      	subs	r2, #48	@ 0x30
 80060d0:	2a09      	cmp	r2, #9
 80060d2:	d950      	bls.n	8006176 <_vfiprintf_r+0x1aa>
 80060d4:	2900      	cmp	r1, #0
 80060d6:	d111      	bne.n	80060fc <_vfiprintf_r+0x130>
 80060d8:	e017      	b.n	800610a <_vfiprintf_r+0x13e>
 80060da:	3601      	adds	r6, #1
 80060dc:	e7af      	b.n	800603e <_vfiprintf_r+0x72>
 80060de:	9b05      	ldr	r3, [sp, #20]
 80060e0:	6822      	ldr	r2, [r4, #0]
 80060e2:	1ac0      	subs	r0, r0, r3
 80060e4:	2301      	movs	r3, #1
 80060e6:	4083      	lsls	r3, r0
 80060e8:	4313      	orrs	r3, r2
 80060ea:	0035      	movs	r5, r6
 80060ec:	6023      	str	r3, [r4, #0]
 80060ee:	e7cc      	b.n	800608a <_vfiprintf_r+0xbe>
 80060f0:	9b07      	ldr	r3, [sp, #28]
 80060f2:	1d19      	adds	r1, r3, #4
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	9107      	str	r1, [sp, #28]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	db01      	blt.n	8006100 <_vfiprintf_r+0x134>
 80060fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060fe:	e004      	b.n	800610a <_vfiprintf_r+0x13e>
 8006100:	425b      	negs	r3, r3
 8006102:	60e3      	str	r3, [r4, #12]
 8006104:	2302      	movs	r3, #2
 8006106:	4313      	orrs	r3, r2
 8006108:	6023      	str	r3, [r4, #0]
 800610a:	7833      	ldrb	r3, [r6, #0]
 800610c:	2b2e      	cmp	r3, #46	@ 0x2e
 800610e:	d10c      	bne.n	800612a <_vfiprintf_r+0x15e>
 8006110:	7873      	ldrb	r3, [r6, #1]
 8006112:	2b2a      	cmp	r3, #42	@ 0x2a
 8006114:	d134      	bne.n	8006180 <_vfiprintf_r+0x1b4>
 8006116:	9b07      	ldr	r3, [sp, #28]
 8006118:	3602      	adds	r6, #2
 800611a:	1d1a      	adds	r2, r3, #4
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	9207      	str	r2, [sp, #28]
 8006120:	2b00      	cmp	r3, #0
 8006122:	da01      	bge.n	8006128 <_vfiprintf_r+0x15c>
 8006124:	2301      	movs	r3, #1
 8006126:	425b      	negs	r3, r3
 8006128:	9309      	str	r3, [sp, #36]	@ 0x24
 800612a:	4d32      	ldr	r5, [pc, #200]	@ (80061f4 <_vfiprintf_r+0x228>)
 800612c:	2203      	movs	r2, #3
 800612e:	0028      	movs	r0, r5
 8006130:	7831      	ldrb	r1, [r6, #0]
 8006132:	f000 fb49 	bl	80067c8 <memchr>
 8006136:	2800      	cmp	r0, #0
 8006138:	d006      	beq.n	8006148 <_vfiprintf_r+0x17c>
 800613a:	2340      	movs	r3, #64	@ 0x40
 800613c:	1b40      	subs	r0, r0, r5
 800613e:	4083      	lsls	r3, r0
 8006140:	6822      	ldr	r2, [r4, #0]
 8006142:	3601      	adds	r6, #1
 8006144:	4313      	orrs	r3, r2
 8006146:	6023      	str	r3, [r4, #0]
 8006148:	7831      	ldrb	r1, [r6, #0]
 800614a:	2206      	movs	r2, #6
 800614c:	482a      	ldr	r0, [pc, #168]	@ (80061f8 <_vfiprintf_r+0x22c>)
 800614e:	1c75      	adds	r5, r6, #1
 8006150:	7621      	strb	r1, [r4, #24]
 8006152:	f000 fb39 	bl	80067c8 <memchr>
 8006156:	2800      	cmp	r0, #0
 8006158:	d040      	beq.n	80061dc <_vfiprintf_r+0x210>
 800615a:	4b28      	ldr	r3, [pc, #160]	@ (80061fc <_vfiprintf_r+0x230>)
 800615c:	2b00      	cmp	r3, #0
 800615e:	d122      	bne.n	80061a6 <_vfiprintf_r+0x1da>
 8006160:	2207      	movs	r2, #7
 8006162:	9b07      	ldr	r3, [sp, #28]
 8006164:	3307      	adds	r3, #7
 8006166:	4393      	bics	r3, r2
 8006168:	3308      	adds	r3, #8
 800616a:	9307      	str	r3, [sp, #28]
 800616c:	6963      	ldr	r3, [r4, #20]
 800616e:	9a04      	ldr	r2, [sp, #16]
 8006170:	189b      	adds	r3, r3, r2
 8006172:	6163      	str	r3, [r4, #20]
 8006174:	e762      	b.n	800603c <_vfiprintf_r+0x70>
 8006176:	4343      	muls	r3, r0
 8006178:	002e      	movs	r6, r5
 800617a:	2101      	movs	r1, #1
 800617c:	189b      	adds	r3, r3, r2
 800617e:	e7a4      	b.n	80060ca <_vfiprintf_r+0xfe>
 8006180:	2300      	movs	r3, #0
 8006182:	200a      	movs	r0, #10
 8006184:	0019      	movs	r1, r3
 8006186:	3601      	adds	r6, #1
 8006188:	6063      	str	r3, [r4, #4]
 800618a:	7832      	ldrb	r2, [r6, #0]
 800618c:	1c75      	adds	r5, r6, #1
 800618e:	3a30      	subs	r2, #48	@ 0x30
 8006190:	2a09      	cmp	r2, #9
 8006192:	d903      	bls.n	800619c <_vfiprintf_r+0x1d0>
 8006194:	2b00      	cmp	r3, #0
 8006196:	d0c8      	beq.n	800612a <_vfiprintf_r+0x15e>
 8006198:	9109      	str	r1, [sp, #36]	@ 0x24
 800619a:	e7c6      	b.n	800612a <_vfiprintf_r+0x15e>
 800619c:	4341      	muls	r1, r0
 800619e:	002e      	movs	r6, r5
 80061a0:	2301      	movs	r3, #1
 80061a2:	1889      	adds	r1, r1, r2
 80061a4:	e7f1      	b.n	800618a <_vfiprintf_r+0x1be>
 80061a6:	aa07      	add	r2, sp, #28
 80061a8:	9200      	str	r2, [sp, #0]
 80061aa:	0021      	movs	r1, r4
 80061ac:	003a      	movs	r2, r7
 80061ae:	4b14      	ldr	r3, [pc, #80]	@ (8006200 <_vfiprintf_r+0x234>)
 80061b0:	9803      	ldr	r0, [sp, #12]
 80061b2:	e000      	b.n	80061b6 <_vfiprintf_r+0x1ea>
 80061b4:	bf00      	nop
 80061b6:	9004      	str	r0, [sp, #16]
 80061b8:	9b04      	ldr	r3, [sp, #16]
 80061ba:	3301      	adds	r3, #1
 80061bc:	d1d6      	bne.n	800616c <_vfiprintf_r+0x1a0>
 80061be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061c0:	07db      	lsls	r3, r3, #31
 80061c2:	d405      	bmi.n	80061d0 <_vfiprintf_r+0x204>
 80061c4:	89bb      	ldrh	r3, [r7, #12]
 80061c6:	059b      	lsls	r3, r3, #22
 80061c8:	d402      	bmi.n	80061d0 <_vfiprintf_r+0x204>
 80061ca:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80061cc:	f7ff fdd8 	bl	8005d80 <__retarget_lock_release_recursive>
 80061d0:	89bb      	ldrh	r3, [r7, #12]
 80061d2:	065b      	lsls	r3, r3, #25
 80061d4:	d500      	bpl.n	80061d8 <_vfiprintf_r+0x20c>
 80061d6:	e71e      	b.n	8006016 <_vfiprintf_r+0x4a>
 80061d8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80061da:	e71e      	b.n	800601a <_vfiprintf_r+0x4e>
 80061dc:	aa07      	add	r2, sp, #28
 80061de:	9200      	str	r2, [sp, #0]
 80061e0:	0021      	movs	r1, r4
 80061e2:	003a      	movs	r2, r7
 80061e4:	4b06      	ldr	r3, [pc, #24]	@ (8006200 <_vfiprintf_r+0x234>)
 80061e6:	9803      	ldr	r0, [sp, #12]
 80061e8:	f000 f87c 	bl	80062e4 <_printf_i>
 80061ec:	e7e3      	b.n	80061b6 <_vfiprintf_r+0x1ea>
 80061ee:	46c0      	nop			@ (mov r8, r8)
 80061f0:	08006a90 	.word	0x08006a90
 80061f4:	08006a96 	.word	0x08006a96
 80061f8:	08006a9a 	.word	0x08006a9a
 80061fc:	00000000 	.word	0x00000000
 8006200:	08005fa7 	.word	0x08005fa7

08006204 <_printf_common>:
 8006204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006206:	0016      	movs	r6, r2
 8006208:	9301      	str	r3, [sp, #4]
 800620a:	688a      	ldr	r2, [r1, #8]
 800620c:	690b      	ldr	r3, [r1, #16]
 800620e:	000c      	movs	r4, r1
 8006210:	9000      	str	r0, [sp, #0]
 8006212:	4293      	cmp	r3, r2
 8006214:	da00      	bge.n	8006218 <_printf_common+0x14>
 8006216:	0013      	movs	r3, r2
 8006218:	0022      	movs	r2, r4
 800621a:	6033      	str	r3, [r6, #0]
 800621c:	3243      	adds	r2, #67	@ 0x43
 800621e:	7812      	ldrb	r2, [r2, #0]
 8006220:	2a00      	cmp	r2, #0
 8006222:	d001      	beq.n	8006228 <_printf_common+0x24>
 8006224:	3301      	adds	r3, #1
 8006226:	6033      	str	r3, [r6, #0]
 8006228:	6823      	ldr	r3, [r4, #0]
 800622a:	069b      	lsls	r3, r3, #26
 800622c:	d502      	bpl.n	8006234 <_printf_common+0x30>
 800622e:	6833      	ldr	r3, [r6, #0]
 8006230:	3302      	adds	r3, #2
 8006232:	6033      	str	r3, [r6, #0]
 8006234:	6822      	ldr	r2, [r4, #0]
 8006236:	2306      	movs	r3, #6
 8006238:	0015      	movs	r5, r2
 800623a:	401d      	ands	r5, r3
 800623c:	421a      	tst	r2, r3
 800623e:	d027      	beq.n	8006290 <_printf_common+0x8c>
 8006240:	0023      	movs	r3, r4
 8006242:	3343      	adds	r3, #67	@ 0x43
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	1e5a      	subs	r2, r3, #1
 8006248:	4193      	sbcs	r3, r2
 800624a:	6822      	ldr	r2, [r4, #0]
 800624c:	0692      	lsls	r2, r2, #26
 800624e:	d430      	bmi.n	80062b2 <_printf_common+0xae>
 8006250:	0022      	movs	r2, r4
 8006252:	9901      	ldr	r1, [sp, #4]
 8006254:	9800      	ldr	r0, [sp, #0]
 8006256:	9d08      	ldr	r5, [sp, #32]
 8006258:	3243      	adds	r2, #67	@ 0x43
 800625a:	47a8      	blx	r5
 800625c:	3001      	adds	r0, #1
 800625e:	d025      	beq.n	80062ac <_printf_common+0xa8>
 8006260:	2206      	movs	r2, #6
 8006262:	6823      	ldr	r3, [r4, #0]
 8006264:	2500      	movs	r5, #0
 8006266:	4013      	ands	r3, r2
 8006268:	2b04      	cmp	r3, #4
 800626a:	d105      	bne.n	8006278 <_printf_common+0x74>
 800626c:	6833      	ldr	r3, [r6, #0]
 800626e:	68e5      	ldr	r5, [r4, #12]
 8006270:	1aed      	subs	r5, r5, r3
 8006272:	43eb      	mvns	r3, r5
 8006274:	17db      	asrs	r3, r3, #31
 8006276:	401d      	ands	r5, r3
 8006278:	68a3      	ldr	r3, [r4, #8]
 800627a:	6922      	ldr	r2, [r4, #16]
 800627c:	4293      	cmp	r3, r2
 800627e:	dd01      	ble.n	8006284 <_printf_common+0x80>
 8006280:	1a9b      	subs	r3, r3, r2
 8006282:	18ed      	adds	r5, r5, r3
 8006284:	2600      	movs	r6, #0
 8006286:	42b5      	cmp	r5, r6
 8006288:	d120      	bne.n	80062cc <_printf_common+0xc8>
 800628a:	2000      	movs	r0, #0
 800628c:	e010      	b.n	80062b0 <_printf_common+0xac>
 800628e:	3501      	adds	r5, #1
 8006290:	68e3      	ldr	r3, [r4, #12]
 8006292:	6832      	ldr	r2, [r6, #0]
 8006294:	1a9b      	subs	r3, r3, r2
 8006296:	42ab      	cmp	r3, r5
 8006298:	ddd2      	ble.n	8006240 <_printf_common+0x3c>
 800629a:	0022      	movs	r2, r4
 800629c:	2301      	movs	r3, #1
 800629e:	9901      	ldr	r1, [sp, #4]
 80062a0:	9800      	ldr	r0, [sp, #0]
 80062a2:	9f08      	ldr	r7, [sp, #32]
 80062a4:	3219      	adds	r2, #25
 80062a6:	47b8      	blx	r7
 80062a8:	3001      	adds	r0, #1
 80062aa:	d1f0      	bne.n	800628e <_printf_common+0x8a>
 80062ac:	2001      	movs	r0, #1
 80062ae:	4240      	negs	r0, r0
 80062b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80062b2:	2030      	movs	r0, #48	@ 0x30
 80062b4:	18e1      	adds	r1, r4, r3
 80062b6:	3143      	adds	r1, #67	@ 0x43
 80062b8:	7008      	strb	r0, [r1, #0]
 80062ba:	0021      	movs	r1, r4
 80062bc:	1c5a      	adds	r2, r3, #1
 80062be:	3145      	adds	r1, #69	@ 0x45
 80062c0:	7809      	ldrb	r1, [r1, #0]
 80062c2:	18a2      	adds	r2, r4, r2
 80062c4:	3243      	adds	r2, #67	@ 0x43
 80062c6:	3302      	adds	r3, #2
 80062c8:	7011      	strb	r1, [r2, #0]
 80062ca:	e7c1      	b.n	8006250 <_printf_common+0x4c>
 80062cc:	0022      	movs	r2, r4
 80062ce:	2301      	movs	r3, #1
 80062d0:	9901      	ldr	r1, [sp, #4]
 80062d2:	9800      	ldr	r0, [sp, #0]
 80062d4:	9f08      	ldr	r7, [sp, #32]
 80062d6:	321a      	adds	r2, #26
 80062d8:	47b8      	blx	r7
 80062da:	3001      	adds	r0, #1
 80062dc:	d0e6      	beq.n	80062ac <_printf_common+0xa8>
 80062de:	3601      	adds	r6, #1
 80062e0:	e7d1      	b.n	8006286 <_printf_common+0x82>
	...

080062e4 <_printf_i>:
 80062e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062e6:	b08b      	sub	sp, #44	@ 0x2c
 80062e8:	9206      	str	r2, [sp, #24]
 80062ea:	000a      	movs	r2, r1
 80062ec:	3243      	adds	r2, #67	@ 0x43
 80062ee:	9307      	str	r3, [sp, #28]
 80062f0:	9005      	str	r0, [sp, #20]
 80062f2:	9203      	str	r2, [sp, #12]
 80062f4:	7e0a      	ldrb	r2, [r1, #24]
 80062f6:	000c      	movs	r4, r1
 80062f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80062fa:	2a78      	cmp	r2, #120	@ 0x78
 80062fc:	d809      	bhi.n	8006312 <_printf_i+0x2e>
 80062fe:	2a62      	cmp	r2, #98	@ 0x62
 8006300:	d80b      	bhi.n	800631a <_printf_i+0x36>
 8006302:	2a00      	cmp	r2, #0
 8006304:	d100      	bne.n	8006308 <_printf_i+0x24>
 8006306:	e0bc      	b.n	8006482 <_printf_i+0x19e>
 8006308:	497b      	ldr	r1, [pc, #492]	@ (80064f8 <_printf_i+0x214>)
 800630a:	9104      	str	r1, [sp, #16]
 800630c:	2a58      	cmp	r2, #88	@ 0x58
 800630e:	d100      	bne.n	8006312 <_printf_i+0x2e>
 8006310:	e090      	b.n	8006434 <_printf_i+0x150>
 8006312:	0025      	movs	r5, r4
 8006314:	3542      	adds	r5, #66	@ 0x42
 8006316:	702a      	strb	r2, [r5, #0]
 8006318:	e022      	b.n	8006360 <_printf_i+0x7c>
 800631a:	0010      	movs	r0, r2
 800631c:	3863      	subs	r0, #99	@ 0x63
 800631e:	2815      	cmp	r0, #21
 8006320:	d8f7      	bhi.n	8006312 <_printf_i+0x2e>
 8006322:	f7f9 feef 	bl	8000104 <__gnu_thumb1_case_shi>
 8006326:	0016      	.short	0x0016
 8006328:	fff6001f 	.word	0xfff6001f
 800632c:	fff6fff6 	.word	0xfff6fff6
 8006330:	001ffff6 	.word	0x001ffff6
 8006334:	fff6fff6 	.word	0xfff6fff6
 8006338:	fff6fff6 	.word	0xfff6fff6
 800633c:	003600a1 	.word	0x003600a1
 8006340:	fff60080 	.word	0xfff60080
 8006344:	00b2fff6 	.word	0x00b2fff6
 8006348:	0036fff6 	.word	0x0036fff6
 800634c:	fff6fff6 	.word	0xfff6fff6
 8006350:	0084      	.short	0x0084
 8006352:	0025      	movs	r5, r4
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	3542      	adds	r5, #66	@ 0x42
 8006358:	1d11      	adds	r1, r2, #4
 800635a:	6019      	str	r1, [r3, #0]
 800635c:	6813      	ldr	r3, [r2, #0]
 800635e:	702b      	strb	r3, [r5, #0]
 8006360:	2301      	movs	r3, #1
 8006362:	e0a0      	b.n	80064a6 <_printf_i+0x1c2>
 8006364:	6818      	ldr	r0, [r3, #0]
 8006366:	6809      	ldr	r1, [r1, #0]
 8006368:	1d02      	adds	r2, r0, #4
 800636a:	060d      	lsls	r5, r1, #24
 800636c:	d50b      	bpl.n	8006386 <_printf_i+0xa2>
 800636e:	6806      	ldr	r6, [r0, #0]
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	2e00      	cmp	r6, #0
 8006374:	da03      	bge.n	800637e <_printf_i+0x9a>
 8006376:	232d      	movs	r3, #45	@ 0x2d
 8006378:	9a03      	ldr	r2, [sp, #12]
 800637a:	4276      	negs	r6, r6
 800637c:	7013      	strb	r3, [r2, #0]
 800637e:	4b5e      	ldr	r3, [pc, #376]	@ (80064f8 <_printf_i+0x214>)
 8006380:	270a      	movs	r7, #10
 8006382:	9304      	str	r3, [sp, #16]
 8006384:	e018      	b.n	80063b8 <_printf_i+0xd4>
 8006386:	6806      	ldr	r6, [r0, #0]
 8006388:	601a      	str	r2, [r3, #0]
 800638a:	0649      	lsls	r1, r1, #25
 800638c:	d5f1      	bpl.n	8006372 <_printf_i+0x8e>
 800638e:	b236      	sxth	r6, r6
 8006390:	e7ef      	b.n	8006372 <_printf_i+0x8e>
 8006392:	6808      	ldr	r0, [r1, #0]
 8006394:	6819      	ldr	r1, [r3, #0]
 8006396:	c940      	ldmia	r1!, {r6}
 8006398:	0605      	lsls	r5, r0, #24
 800639a:	d402      	bmi.n	80063a2 <_printf_i+0xbe>
 800639c:	0640      	lsls	r0, r0, #25
 800639e:	d500      	bpl.n	80063a2 <_printf_i+0xbe>
 80063a0:	b2b6      	uxth	r6, r6
 80063a2:	6019      	str	r1, [r3, #0]
 80063a4:	4b54      	ldr	r3, [pc, #336]	@ (80064f8 <_printf_i+0x214>)
 80063a6:	270a      	movs	r7, #10
 80063a8:	9304      	str	r3, [sp, #16]
 80063aa:	2a6f      	cmp	r2, #111	@ 0x6f
 80063ac:	d100      	bne.n	80063b0 <_printf_i+0xcc>
 80063ae:	3f02      	subs	r7, #2
 80063b0:	0023      	movs	r3, r4
 80063b2:	2200      	movs	r2, #0
 80063b4:	3343      	adds	r3, #67	@ 0x43
 80063b6:	701a      	strb	r2, [r3, #0]
 80063b8:	6863      	ldr	r3, [r4, #4]
 80063ba:	60a3      	str	r3, [r4, #8]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	db03      	blt.n	80063c8 <_printf_i+0xe4>
 80063c0:	2104      	movs	r1, #4
 80063c2:	6822      	ldr	r2, [r4, #0]
 80063c4:	438a      	bics	r2, r1
 80063c6:	6022      	str	r2, [r4, #0]
 80063c8:	2e00      	cmp	r6, #0
 80063ca:	d102      	bne.n	80063d2 <_printf_i+0xee>
 80063cc:	9d03      	ldr	r5, [sp, #12]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00c      	beq.n	80063ec <_printf_i+0x108>
 80063d2:	9d03      	ldr	r5, [sp, #12]
 80063d4:	0030      	movs	r0, r6
 80063d6:	0039      	movs	r1, r7
 80063d8:	f7f9 ff24 	bl	8000224 <__aeabi_uidivmod>
 80063dc:	9b04      	ldr	r3, [sp, #16]
 80063de:	3d01      	subs	r5, #1
 80063e0:	5c5b      	ldrb	r3, [r3, r1]
 80063e2:	702b      	strb	r3, [r5, #0]
 80063e4:	0033      	movs	r3, r6
 80063e6:	0006      	movs	r6, r0
 80063e8:	429f      	cmp	r7, r3
 80063ea:	d9f3      	bls.n	80063d4 <_printf_i+0xf0>
 80063ec:	2f08      	cmp	r7, #8
 80063ee:	d109      	bne.n	8006404 <_printf_i+0x120>
 80063f0:	6823      	ldr	r3, [r4, #0]
 80063f2:	07db      	lsls	r3, r3, #31
 80063f4:	d506      	bpl.n	8006404 <_printf_i+0x120>
 80063f6:	6862      	ldr	r2, [r4, #4]
 80063f8:	6923      	ldr	r3, [r4, #16]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	dc02      	bgt.n	8006404 <_printf_i+0x120>
 80063fe:	2330      	movs	r3, #48	@ 0x30
 8006400:	3d01      	subs	r5, #1
 8006402:	702b      	strb	r3, [r5, #0]
 8006404:	9b03      	ldr	r3, [sp, #12]
 8006406:	1b5b      	subs	r3, r3, r5
 8006408:	6123      	str	r3, [r4, #16]
 800640a:	9b07      	ldr	r3, [sp, #28]
 800640c:	0021      	movs	r1, r4
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	9805      	ldr	r0, [sp, #20]
 8006412:	9b06      	ldr	r3, [sp, #24]
 8006414:	aa09      	add	r2, sp, #36	@ 0x24
 8006416:	f7ff fef5 	bl	8006204 <_printf_common>
 800641a:	3001      	adds	r0, #1
 800641c:	d148      	bne.n	80064b0 <_printf_i+0x1cc>
 800641e:	2001      	movs	r0, #1
 8006420:	4240      	negs	r0, r0
 8006422:	b00b      	add	sp, #44	@ 0x2c
 8006424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006426:	2220      	movs	r2, #32
 8006428:	6809      	ldr	r1, [r1, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	6022      	str	r2, [r4, #0]
 800642e:	2278      	movs	r2, #120	@ 0x78
 8006430:	4932      	ldr	r1, [pc, #200]	@ (80064fc <_printf_i+0x218>)
 8006432:	9104      	str	r1, [sp, #16]
 8006434:	0021      	movs	r1, r4
 8006436:	3145      	adds	r1, #69	@ 0x45
 8006438:	700a      	strb	r2, [r1, #0]
 800643a:	6819      	ldr	r1, [r3, #0]
 800643c:	6822      	ldr	r2, [r4, #0]
 800643e:	c940      	ldmia	r1!, {r6}
 8006440:	0610      	lsls	r0, r2, #24
 8006442:	d402      	bmi.n	800644a <_printf_i+0x166>
 8006444:	0650      	lsls	r0, r2, #25
 8006446:	d500      	bpl.n	800644a <_printf_i+0x166>
 8006448:	b2b6      	uxth	r6, r6
 800644a:	6019      	str	r1, [r3, #0]
 800644c:	07d3      	lsls	r3, r2, #31
 800644e:	d502      	bpl.n	8006456 <_printf_i+0x172>
 8006450:	2320      	movs	r3, #32
 8006452:	4313      	orrs	r3, r2
 8006454:	6023      	str	r3, [r4, #0]
 8006456:	2e00      	cmp	r6, #0
 8006458:	d001      	beq.n	800645e <_printf_i+0x17a>
 800645a:	2710      	movs	r7, #16
 800645c:	e7a8      	b.n	80063b0 <_printf_i+0xcc>
 800645e:	2220      	movs	r2, #32
 8006460:	6823      	ldr	r3, [r4, #0]
 8006462:	4393      	bics	r3, r2
 8006464:	6023      	str	r3, [r4, #0]
 8006466:	e7f8      	b.n	800645a <_printf_i+0x176>
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	680d      	ldr	r5, [r1, #0]
 800646c:	1d10      	adds	r0, r2, #4
 800646e:	6949      	ldr	r1, [r1, #20]
 8006470:	6018      	str	r0, [r3, #0]
 8006472:	6813      	ldr	r3, [r2, #0]
 8006474:	062e      	lsls	r6, r5, #24
 8006476:	d501      	bpl.n	800647c <_printf_i+0x198>
 8006478:	6019      	str	r1, [r3, #0]
 800647a:	e002      	b.n	8006482 <_printf_i+0x19e>
 800647c:	066d      	lsls	r5, r5, #25
 800647e:	d5fb      	bpl.n	8006478 <_printf_i+0x194>
 8006480:	8019      	strh	r1, [r3, #0]
 8006482:	2300      	movs	r3, #0
 8006484:	9d03      	ldr	r5, [sp, #12]
 8006486:	6123      	str	r3, [r4, #16]
 8006488:	e7bf      	b.n	800640a <_printf_i+0x126>
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	1d11      	adds	r1, r2, #4
 800648e:	6019      	str	r1, [r3, #0]
 8006490:	6815      	ldr	r5, [r2, #0]
 8006492:	2100      	movs	r1, #0
 8006494:	0028      	movs	r0, r5
 8006496:	6862      	ldr	r2, [r4, #4]
 8006498:	f000 f996 	bl	80067c8 <memchr>
 800649c:	2800      	cmp	r0, #0
 800649e:	d001      	beq.n	80064a4 <_printf_i+0x1c0>
 80064a0:	1b40      	subs	r0, r0, r5
 80064a2:	6060      	str	r0, [r4, #4]
 80064a4:	6863      	ldr	r3, [r4, #4]
 80064a6:	6123      	str	r3, [r4, #16]
 80064a8:	2300      	movs	r3, #0
 80064aa:	9a03      	ldr	r2, [sp, #12]
 80064ac:	7013      	strb	r3, [r2, #0]
 80064ae:	e7ac      	b.n	800640a <_printf_i+0x126>
 80064b0:	002a      	movs	r2, r5
 80064b2:	6923      	ldr	r3, [r4, #16]
 80064b4:	9906      	ldr	r1, [sp, #24]
 80064b6:	9805      	ldr	r0, [sp, #20]
 80064b8:	9d07      	ldr	r5, [sp, #28]
 80064ba:	47a8      	blx	r5
 80064bc:	3001      	adds	r0, #1
 80064be:	d0ae      	beq.n	800641e <_printf_i+0x13a>
 80064c0:	6823      	ldr	r3, [r4, #0]
 80064c2:	079b      	lsls	r3, r3, #30
 80064c4:	d415      	bmi.n	80064f2 <_printf_i+0x20e>
 80064c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064c8:	68e0      	ldr	r0, [r4, #12]
 80064ca:	4298      	cmp	r0, r3
 80064cc:	daa9      	bge.n	8006422 <_printf_i+0x13e>
 80064ce:	0018      	movs	r0, r3
 80064d0:	e7a7      	b.n	8006422 <_printf_i+0x13e>
 80064d2:	0022      	movs	r2, r4
 80064d4:	2301      	movs	r3, #1
 80064d6:	9906      	ldr	r1, [sp, #24]
 80064d8:	9805      	ldr	r0, [sp, #20]
 80064da:	9e07      	ldr	r6, [sp, #28]
 80064dc:	3219      	adds	r2, #25
 80064de:	47b0      	blx	r6
 80064e0:	3001      	adds	r0, #1
 80064e2:	d09c      	beq.n	800641e <_printf_i+0x13a>
 80064e4:	3501      	adds	r5, #1
 80064e6:	68e3      	ldr	r3, [r4, #12]
 80064e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064ea:	1a9b      	subs	r3, r3, r2
 80064ec:	42ab      	cmp	r3, r5
 80064ee:	dcf0      	bgt.n	80064d2 <_printf_i+0x1ee>
 80064f0:	e7e9      	b.n	80064c6 <_printf_i+0x1e2>
 80064f2:	2500      	movs	r5, #0
 80064f4:	e7f7      	b.n	80064e6 <_printf_i+0x202>
 80064f6:	46c0      	nop			@ (mov r8, r8)
 80064f8:	08006aa1 	.word	0x08006aa1
 80064fc:	08006ab2 	.word	0x08006ab2

08006500 <__sflush_r>:
 8006500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006502:	220c      	movs	r2, #12
 8006504:	5e8b      	ldrsh	r3, [r1, r2]
 8006506:	0005      	movs	r5, r0
 8006508:	000c      	movs	r4, r1
 800650a:	071a      	lsls	r2, r3, #28
 800650c:	d456      	bmi.n	80065bc <__sflush_r+0xbc>
 800650e:	684a      	ldr	r2, [r1, #4]
 8006510:	2a00      	cmp	r2, #0
 8006512:	dc02      	bgt.n	800651a <__sflush_r+0x1a>
 8006514:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8006516:	2a00      	cmp	r2, #0
 8006518:	dd4e      	ble.n	80065b8 <__sflush_r+0xb8>
 800651a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800651c:	2f00      	cmp	r7, #0
 800651e:	d04b      	beq.n	80065b8 <__sflush_r+0xb8>
 8006520:	2200      	movs	r2, #0
 8006522:	2080      	movs	r0, #128	@ 0x80
 8006524:	682e      	ldr	r6, [r5, #0]
 8006526:	602a      	str	r2, [r5, #0]
 8006528:	001a      	movs	r2, r3
 800652a:	0140      	lsls	r0, r0, #5
 800652c:	6a21      	ldr	r1, [r4, #32]
 800652e:	4002      	ands	r2, r0
 8006530:	4203      	tst	r3, r0
 8006532:	d033      	beq.n	800659c <__sflush_r+0x9c>
 8006534:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006536:	89a3      	ldrh	r3, [r4, #12]
 8006538:	075b      	lsls	r3, r3, #29
 800653a:	d506      	bpl.n	800654a <__sflush_r+0x4a>
 800653c:	6863      	ldr	r3, [r4, #4]
 800653e:	1ad2      	subs	r2, r2, r3
 8006540:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <__sflush_r+0x4a>
 8006546:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006548:	1ad2      	subs	r2, r2, r3
 800654a:	2300      	movs	r3, #0
 800654c:	0028      	movs	r0, r5
 800654e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006550:	6a21      	ldr	r1, [r4, #32]
 8006552:	47b8      	blx	r7
 8006554:	89a2      	ldrh	r2, [r4, #12]
 8006556:	1c43      	adds	r3, r0, #1
 8006558:	d106      	bne.n	8006568 <__sflush_r+0x68>
 800655a:	6829      	ldr	r1, [r5, #0]
 800655c:	291d      	cmp	r1, #29
 800655e:	d846      	bhi.n	80065ee <__sflush_r+0xee>
 8006560:	4b29      	ldr	r3, [pc, #164]	@ (8006608 <__sflush_r+0x108>)
 8006562:	410b      	asrs	r3, r1
 8006564:	07db      	lsls	r3, r3, #31
 8006566:	d442      	bmi.n	80065ee <__sflush_r+0xee>
 8006568:	2300      	movs	r3, #0
 800656a:	6063      	str	r3, [r4, #4]
 800656c:	6923      	ldr	r3, [r4, #16]
 800656e:	6023      	str	r3, [r4, #0]
 8006570:	04d2      	lsls	r2, r2, #19
 8006572:	d505      	bpl.n	8006580 <__sflush_r+0x80>
 8006574:	1c43      	adds	r3, r0, #1
 8006576:	d102      	bne.n	800657e <__sflush_r+0x7e>
 8006578:	682b      	ldr	r3, [r5, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d100      	bne.n	8006580 <__sflush_r+0x80>
 800657e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006580:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006582:	602e      	str	r6, [r5, #0]
 8006584:	2900      	cmp	r1, #0
 8006586:	d017      	beq.n	80065b8 <__sflush_r+0xb8>
 8006588:	0023      	movs	r3, r4
 800658a:	3344      	adds	r3, #68	@ 0x44
 800658c:	4299      	cmp	r1, r3
 800658e:	d002      	beq.n	8006596 <__sflush_r+0x96>
 8006590:	0028      	movs	r0, r5
 8006592:	f7ff fbf7 	bl	8005d84 <_free_r>
 8006596:	2300      	movs	r3, #0
 8006598:	6363      	str	r3, [r4, #52]	@ 0x34
 800659a:	e00d      	b.n	80065b8 <__sflush_r+0xb8>
 800659c:	2301      	movs	r3, #1
 800659e:	0028      	movs	r0, r5
 80065a0:	47b8      	blx	r7
 80065a2:	0002      	movs	r2, r0
 80065a4:	1c43      	adds	r3, r0, #1
 80065a6:	d1c6      	bne.n	8006536 <__sflush_r+0x36>
 80065a8:	682b      	ldr	r3, [r5, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d0c3      	beq.n	8006536 <__sflush_r+0x36>
 80065ae:	2b1d      	cmp	r3, #29
 80065b0:	d001      	beq.n	80065b6 <__sflush_r+0xb6>
 80065b2:	2b16      	cmp	r3, #22
 80065b4:	d11a      	bne.n	80065ec <__sflush_r+0xec>
 80065b6:	602e      	str	r6, [r5, #0]
 80065b8:	2000      	movs	r0, #0
 80065ba:	e01e      	b.n	80065fa <__sflush_r+0xfa>
 80065bc:	690e      	ldr	r6, [r1, #16]
 80065be:	2e00      	cmp	r6, #0
 80065c0:	d0fa      	beq.n	80065b8 <__sflush_r+0xb8>
 80065c2:	680f      	ldr	r7, [r1, #0]
 80065c4:	600e      	str	r6, [r1, #0]
 80065c6:	1bba      	subs	r2, r7, r6
 80065c8:	9201      	str	r2, [sp, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	079b      	lsls	r3, r3, #30
 80065ce:	d100      	bne.n	80065d2 <__sflush_r+0xd2>
 80065d0:	694a      	ldr	r2, [r1, #20]
 80065d2:	60a2      	str	r2, [r4, #8]
 80065d4:	9b01      	ldr	r3, [sp, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	ddee      	ble.n	80065b8 <__sflush_r+0xb8>
 80065da:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80065dc:	0032      	movs	r2, r6
 80065de:	001f      	movs	r7, r3
 80065e0:	0028      	movs	r0, r5
 80065e2:	9b01      	ldr	r3, [sp, #4]
 80065e4:	6a21      	ldr	r1, [r4, #32]
 80065e6:	47b8      	blx	r7
 80065e8:	2800      	cmp	r0, #0
 80065ea:	dc07      	bgt.n	80065fc <__sflush_r+0xfc>
 80065ec:	89a2      	ldrh	r2, [r4, #12]
 80065ee:	2340      	movs	r3, #64	@ 0x40
 80065f0:	2001      	movs	r0, #1
 80065f2:	4313      	orrs	r3, r2
 80065f4:	b21b      	sxth	r3, r3
 80065f6:	81a3      	strh	r3, [r4, #12]
 80065f8:	4240      	negs	r0, r0
 80065fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80065fc:	9b01      	ldr	r3, [sp, #4]
 80065fe:	1836      	adds	r6, r6, r0
 8006600:	1a1b      	subs	r3, r3, r0
 8006602:	9301      	str	r3, [sp, #4]
 8006604:	e7e6      	b.n	80065d4 <__sflush_r+0xd4>
 8006606:	46c0      	nop			@ (mov r8, r8)
 8006608:	dfbffffe 	.word	0xdfbffffe

0800660c <_fflush_r>:
 800660c:	690b      	ldr	r3, [r1, #16]
 800660e:	b570      	push	{r4, r5, r6, lr}
 8006610:	0005      	movs	r5, r0
 8006612:	000c      	movs	r4, r1
 8006614:	2b00      	cmp	r3, #0
 8006616:	d102      	bne.n	800661e <_fflush_r+0x12>
 8006618:	2500      	movs	r5, #0
 800661a:	0028      	movs	r0, r5
 800661c:	bd70      	pop	{r4, r5, r6, pc}
 800661e:	2800      	cmp	r0, #0
 8006620:	d004      	beq.n	800662c <_fflush_r+0x20>
 8006622:	6a03      	ldr	r3, [r0, #32]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <_fflush_r+0x20>
 8006628:	f7ff fa98 	bl	8005b5c <__sinit>
 800662c:	220c      	movs	r2, #12
 800662e:	5ea3      	ldrsh	r3, [r4, r2]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0f1      	beq.n	8006618 <_fflush_r+0xc>
 8006634:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006636:	07d2      	lsls	r2, r2, #31
 8006638:	d404      	bmi.n	8006644 <_fflush_r+0x38>
 800663a:	059b      	lsls	r3, r3, #22
 800663c:	d402      	bmi.n	8006644 <_fflush_r+0x38>
 800663e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006640:	f7ff fb9d 	bl	8005d7e <__retarget_lock_acquire_recursive>
 8006644:	0028      	movs	r0, r5
 8006646:	0021      	movs	r1, r4
 8006648:	f7ff ff5a 	bl	8006500 <__sflush_r>
 800664c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800664e:	0005      	movs	r5, r0
 8006650:	07db      	lsls	r3, r3, #31
 8006652:	d4e2      	bmi.n	800661a <_fflush_r+0xe>
 8006654:	89a3      	ldrh	r3, [r4, #12]
 8006656:	059b      	lsls	r3, r3, #22
 8006658:	d4df      	bmi.n	800661a <_fflush_r+0xe>
 800665a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800665c:	f7ff fb90 	bl	8005d80 <__retarget_lock_release_recursive>
 8006660:	e7db      	b.n	800661a <_fflush_r+0xe>

08006662 <__swbuf_r>:
 8006662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006664:	0006      	movs	r6, r0
 8006666:	000d      	movs	r5, r1
 8006668:	0014      	movs	r4, r2
 800666a:	2800      	cmp	r0, #0
 800666c:	d004      	beq.n	8006678 <__swbuf_r+0x16>
 800666e:	6a03      	ldr	r3, [r0, #32]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <__swbuf_r+0x16>
 8006674:	f7ff fa72 	bl	8005b5c <__sinit>
 8006678:	69a3      	ldr	r3, [r4, #24]
 800667a:	60a3      	str	r3, [r4, #8]
 800667c:	89a3      	ldrh	r3, [r4, #12]
 800667e:	071b      	lsls	r3, r3, #28
 8006680:	d502      	bpl.n	8006688 <__swbuf_r+0x26>
 8006682:	6923      	ldr	r3, [r4, #16]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d109      	bne.n	800669c <__swbuf_r+0x3a>
 8006688:	0021      	movs	r1, r4
 800668a:	0030      	movs	r0, r6
 800668c:	f000 f82c 	bl	80066e8 <__swsetup_r>
 8006690:	2800      	cmp	r0, #0
 8006692:	d003      	beq.n	800669c <__swbuf_r+0x3a>
 8006694:	2501      	movs	r5, #1
 8006696:	426d      	negs	r5, r5
 8006698:	0028      	movs	r0, r5
 800669a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800669c:	6923      	ldr	r3, [r4, #16]
 800669e:	6820      	ldr	r0, [r4, #0]
 80066a0:	b2ef      	uxtb	r7, r5
 80066a2:	1ac0      	subs	r0, r0, r3
 80066a4:	6963      	ldr	r3, [r4, #20]
 80066a6:	b2ed      	uxtb	r5, r5
 80066a8:	4283      	cmp	r3, r0
 80066aa:	dc05      	bgt.n	80066b8 <__swbuf_r+0x56>
 80066ac:	0021      	movs	r1, r4
 80066ae:	0030      	movs	r0, r6
 80066b0:	f7ff ffac 	bl	800660c <_fflush_r>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	d1ed      	bne.n	8006694 <__swbuf_r+0x32>
 80066b8:	68a3      	ldr	r3, [r4, #8]
 80066ba:	3001      	adds	r0, #1
 80066bc:	3b01      	subs	r3, #1
 80066be:	60a3      	str	r3, [r4, #8]
 80066c0:	6823      	ldr	r3, [r4, #0]
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	6022      	str	r2, [r4, #0]
 80066c6:	701f      	strb	r7, [r3, #0]
 80066c8:	6963      	ldr	r3, [r4, #20]
 80066ca:	4283      	cmp	r3, r0
 80066cc:	d004      	beq.n	80066d8 <__swbuf_r+0x76>
 80066ce:	89a3      	ldrh	r3, [r4, #12]
 80066d0:	07db      	lsls	r3, r3, #31
 80066d2:	d5e1      	bpl.n	8006698 <__swbuf_r+0x36>
 80066d4:	2d0a      	cmp	r5, #10
 80066d6:	d1df      	bne.n	8006698 <__swbuf_r+0x36>
 80066d8:	0021      	movs	r1, r4
 80066da:	0030      	movs	r0, r6
 80066dc:	f7ff ff96 	bl	800660c <_fflush_r>
 80066e0:	2800      	cmp	r0, #0
 80066e2:	d0d9      	beq.n	8006698 <__swbuf_r+0x36>
 80066e4:	e7d6      	b.n	8006694 <__swbuf_r+0x32>
	...

080066e8 <__swsetup_r>:
 80066e8:	4b2d      	ldr	r3, [pc, #180]	@ (80067a0 <__swsetup_r+0xb8>)
 80066ea:	b570      	push	{r4, r5, r6, lr}
 80066ec:	0005      	movs	r5, r0
 80066ee:	6818      	ldr	r0, [r3, #0]
 80066f0:	000c      	movs	r4, r1
 80066f2:	2800      	cmp	r0, #0
 80066f4:	d004      	beq.n	8006700 <__swsetup_r+0x18>
 80066f6:	6a03      	ldr	r3, [r0, #32]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <__swsetup_r+0x18>
 80066fc:	f7ff fa2e 	bl	8005b5c <__sinit>
 8006700:	230c      	movs	r3, #12
 8006702:	5ee2      	ldrsh	r2, [r4, r3]
 8006704:	0713      	lsls	r3, r2, #28
 8006706:	d423      	bmi.n	8006750 <__swsetup_r+0x68>
 8006708:	06d3      	lsls	r3, r2, #27
 800670a:	d407      	bmi.n	800671c <__swsetup_r+0x34>
 800670c:	2309      	movs	r3, #9
 800670e:	602b      	str	r3, [r5, #0]
 8006710:	2340      	movs	r3, #64	@ 0x40
 8006712:	2001      	movs	r0, #1
 8006714:	4313      	orrs	r3, r2
 8006716:	81a3      	strh	r3, [r4, #12]
 8006718:	4240      	negs	r0, r0
 800671a:	e03a      	b.n	8006792 <__swsetup_r+0xaa>
 800671c:	0752      	lsls	r2, r2, #29
 800671e:	d513      	bpl.n	8006748 <__swsetup_r+0x60>
 8006720:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006722:	2900      	cmp	r1, #0
 8006724:	d008      	beq.n	8006738 <__swsetup_r+0x50>
 8006726:	0023      	movs	r3, r4
 8006728:	3344      	adds	r3, #68	@ 0x44
 800672a:	4299      	cmp	r1, r3
 800672c:	d002      	beq.n	8006734 <__swsetup_r+0x4c>
 800672e:	0028      	movs	r0, r5
 8006730:	f7ff fb28 	bl	8005d84 <_free_r>
 8006734:	2300      	movs	r3, #0
 8006736:	6363      	str	r3, [r4, #52]	@ 0x34
 8006738:	2224      	movs	r2, #36	@ 0x24
 800673a:	89a3      	ldrh	r3, [r4, #12]
 800673c:	4393      	bics	r3, r2
 800673e:	81a3      	strh	r3, [r4, #12]
 8006740:	2300      	movs	r3, #0
 8006742:	6063      	str	r3, [r4, #4]
 8006744:	6923      	ldr	r3, [r4, #16]
 8006746:	6023      	str	r3, [r4, #0]
 8006748:	2308      	movs	r3, #8
 800674a:	89a2      	ldrh	r2, [r4, #12]
 800674c:	4313      	orrs	r3, r2
 800674e:	81a3      	strh	r3, [r4, #12]
 8006750:	6923      	ldr	r3, [r4, #16]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10b      	bne.n	800676e <__swsetup_r+0x86>
 8006756:	21a0      	movs	r1, #160	@ 0xa0
 8006758:	2280      	movs	r2, #128	@ 0x80
 800675a:	89a3      	ldrh	r3, [r4, #12]
 800675c:	0089      	lsls	r1, r1, #2
 800675e:	0092      	lsls	r2, r2, #2
 8006760:	400b      	ands	r3, r1
 8006762:	4293      	cmp	r3, r2
 8006764:	d003      	beq.n	800676e <__swsetup_r+0x86>
 8006766:	0021      	movs	r1, r4
 8006768:	0028      	movs	r0, r5
 800676a:	f000 f863 	bl	8006834 <__smakebuf_r>
 800676e:	230c      	movs	r3, #12
 8006770:	5ee2      	ldrsh	r2, [r4, r3]
 8006772:	2101      	movs	r1, #1
 8006774:	0013      	movs	r3, r2
 8006776:	400b      	ands	r3, r1
 8006778:	420a      	tst	r2, r1
 800677a:	d00b      	beq.n	8006794 <__swsetup_r+0xac>
 800677c:	2300      	movs	r3, #0
 800677e:	60a3      	str	r3, [r4, #8]
 8006780:	6963      	ldr	r3, [r4, #20]
 8006782:	425b      	negs	r3, r3
 8006784:	61a3      	str	r3, [r4, #24]
 8006786:	2000      	movs	r0, #0
 8006788:	6923      	ldr	r3, [r4, #16]
 800678a:	4283      	cmp	r3, r0
 800678c:	d101      	bne.n	8006792 <__swsetup_r+0xaa>
 800678e:	0613      	lsls	r3, r2, #24
 8006790:	d4be      	bmi.n	8006710 <__swsetup_r+0x28>
 8006792:	bd70      	pop	{r4, r5, r6, pc}
 8006794:	0791      	lsls	r1, r2, #30
 8006796:	d400      	bmi.n	800679a <__swsetup_r+0xb2>
 8006798:	6963      	ldr	r3, [r4, #20]
 800679a:	60a3      	str	r3, [r4, #8]
 800679c:	e7f3      	b.n	8006786 <__swsetup_r+0x9e>
 800679e:	46c0      	nop			@ (mov r8, r8)
 80067a0:	20000048 	.word	0x20000048

080067a4 <_sbrk_r>:
 80067a4:	2300      	movs	r3, #0
 80067a6:	b570      	push	{r4, r5, r6, lr}
 80067a8:	4d06      	ldr	r5, [pc, #24]	@ (80067c4 <_sbrk_r+0x20>)
 80067aa:	0004      	movs	r4, r0
 80067ac:	0008      	movs	r0, r1
 80067ae:	602b      	str	r3, [r5, #0]
 80067b0:	f7fa fd2c 	bl	800120c <_sbrk>
 80067b4:	1c43      	adds	r3, r0, #1
 80067b6:	d103      	bne.n	80067c0 <_sbrk_r+0x1c>
 80067b8:	682b      	ldr	r3, [r5, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d000      	beq.n	80067c0 <_sbrk_r+0x1c>
 80067be:	6023      	str	r3, [r4, #0]
 80067c0:	bd70      	pop	{r4, r5, r6, pc}
 80067c2:	46c0      	nop			@ (mov r8, r8)
 80067c4:	200004f0 	.word	0x200004f0

080067c8 <memchr>:
 80067c8:	b2c9      	uxtb	r1, r1
 80067ca:	1882      	adds	r2, r0, r2
 80067cc:	4290      	cmp	r0, r2
 80067ce:	d101      	bne.n	80067d4 <memchr+0xc>
 80067d0:	2000      	movs	r0, #0
 80067d2:	4770      	bx	lr
 80067d4:	7803      	ldrb	r3, [r0, #0]
 80067d6:	428b      	cmp	r3, r1
 80067d8:	d0fb      	beq.n	80067d2 <memchr+0xa>
 80067da:	3001      	adds	r0, #1
 80067dc:	e7f6      	b.n	80067cc <memchr+0x4>
	...

080067e0 <__swhatbuf_r>:
 80067e0:	b570      	push	{r4, r5, r6, lr}
 80067e2:	000e      	movs	r6, r1
 80067e4:	001d      	movs	r5, r3
 80067e6:	230e      	movs	r3, #14
 80067e8:	5ec9      	ldrsh	r1, [r1, r3]
 80067ea:	0014      	movs	r4, r2
 80067ec:	b096      	sub	sp, #88	@ 0x58
 80067ee:	2900      	cmp	r1, #0
 80067f0:	da0c      	bge.n	800680c <__swhatbuf_r+0x2c>
 80067f2:	89b2      	ldrh	r2, [r6, #12]
 80067f4:	2380      	movs	r3, #128	@ 0x80
 80067f6:	0011      	movs	r1, r2
 80067f8:	4019      	ands	r1, r3
 80067fa:	421a      	tst	r2, r3
 80067fc:	d114      	bne.n	8006828 <__swhatbuf_r+0x48>
 80067fe:	2380      	movs	r3, #128	@ 0x80
 8006800:	00db      	lsls	r3, r3, #3
 8006802:	2000      	movs	r0, #0
 8006804:	6029      	str	r1, [r5, #0]
 8006806:	6023      	str	r3, [r4, #0]
 8006808:	b016      	add	sp, #88	@ 0x58
 800680a:	bd70      	pop	{r4, r5, r6, pc}
 800680c:	466a      	mov	r2, sp
 800680e:	f000 f853 	bl	80068b8 <_fstat_r>
 8006812:	2800      	cmp	r0, #0
 8006814:	dbed      	blt.n	80067f2 <__swhatbuf_r+0x12>
 8006816:	23f0      	movs	r3, #240	@ 0xf0
 8006818:	9901      	ldr	r1, [sp, #4]
 800681a:	021b      	lsls	r3, r3, #8
 800681c:	4019      	ands	r1, r3
 800681e:	4b04      	ldr	r3, [pc, #16]	@ (8006830 <__swhatbuf_r+0x50>)
 8006820:	18c9      	adds	r1, r1, r3
 8006822:	424b      	negs	r3, r1
 8006824:	4159      	adcs	r1, r3
 8006826:	e7ea      	b.n	80067fe <__swhatbuf_r+0x1e>
 8006828:	2100      	movs	r1, #0
 800682a:	2340      	movs	r3, #64	@ 0x40
 800682c:	e7e9      	b.n	8006802 <__swhatbuf_r+0x22>
 800682e:	46c0      	nop			@ (mov r8, r8)
 8006830:	ffffe000 	.word	0xffffe000

08006834 <__smakebuf_r>:
 8006834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006836:	2602      	movs	r6, #2
 8006838:	898b      	ldrh	r3, [r1, #12]
 800683a:	0005      	movs	r5, r0
 800683c:	000c      	movs	r4, r1
 800683e:	b085      	sub	sp, #20
 8006840:	4233      	tst	r3, r6
 8006842:	d007      	beq.n	8006854 <__smakebuf_r+0x20>
 8006844:	0023      	movs	r3, r4
 8006846:	3347      	adds	r3, #71	@ 0x47
 8006848:	6023      	str	r3, [r4, #0]
 800684a:	6123      	str	r3, [r4, #16]
 800684c:	2301      	movs	r3, #1
 800684e:	6163      	str	r3, [r4, #20]
 8006850:	b005      	add	sp, #20
 8006852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006854:	ab03      	add	r3, sp, #12
 8006856:	aa02      	add	r2, sp, #8
 8006858:	f7ff ffc2 	bl	80067e0 <__swhatbuf_r>
 800685c:	9f02      	ldr	r7, [sp, #8]
 800685e:	9001      	str	r0, [sp, #4]
 8006860:	0039      	movs	r1, r7
 8006862:	0028      	movs	r0, r5
 8006864:	f7ff fafa 	bl	8005e5c <_malloc_r>
 8006868:	2800      	cmp	r0, #0
 800686a:	d108      	bne.n	800687e <__smakebuf_r+0x4a>
 800686c:	220c      	movs	r2, #12
 800686e:	5ea3      	ldrsh	r3, [r4, r2]
 8006870:	059a      	lsls	r2, r3, #22
 8006872:	d4ed      	bmi.n	8006850 <__smakebuf_r+0x1c>
 8006874:	2203      	movs	r2, #3
 8006876:	4393      	bics	r3, r2
 8006878:	431e      	orrs	r6, r3
 800687a:	81a6      	strh	r6, [r4, #12]
 800687c:	e7e2      	b.n	8006844 <__smakebuf_r+0x10>
 800687e:	2380      	movs	r3, #128	@ 0x80
 8006880:	89a2      	ldrh	r2, [r4, #12]
 8006882:	6020      	str	r0, [r4, #0]
 8006884:	4313      	orrs	r3, r2
 8006886:	81a3      	strh	r3, [r4, #12]
 8006888:	9b03      	ldr	r3, [sp, #12]
 800688a:	6120      	str	r0, [r4, #16]
 800688c:	6167      	str	r7, [r4, #20]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00c      	beq.n	80068ac <__smakebuf_r+0x78>
 8006892:	0028      	movs	r0, r5
 8006894:	230e      	movs	r3, #14
 8006896:	5ee1      	ldrsh	r1, [r4, r3]
 8006898:	f000 f820 	bl	80068dc <_isatty_r>
 800689c:	2800      	cmp	r0, #0
 800689e:	d005      	beq.n	80068ac <__smakebuf_r+0x78>
 80068a0:	2303      	movs	r3, #3
 80068a2:	89a2      	ldrh	r2, [r4, #12]
 80068a4:	439a      	bics	r2, r3
 80068a6:	3b02      	subs	r3, #2
 80068a8:	4313      	orrs	r3, r2
 80068aa:	81a3      	strh	r3, [r4, #12]
 80068ac:	89a3      	ldrh	r3, [r4, #12]
 80068ae:	9a01      	ldr	r2, [sp, #4]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	81a3      	strh	r3, [r4, #12]
 80068b4:	e7cc      	b.n	8006850 <__smakebuf_r+0x1c>
	...

080068b8 <_fstat_r>:
 80068b8:	2300      	movs	r3, #0
 80068ba:	b570      	push	{r4, r5, r6, lr}
 80068bc:	4d06      	ldr	r5, [pc, #24]	@ (80068d8 <_fstat_r+0x20>)
 80068be:	0004      	movs	r4, r0
 80068c0:	0008      	movs	r0, r1
 80068c2:	0011      	movs	r1, r2
 80068c4:	602b      	str	r3, [r5, #0]
 80068c6:	f7fa fc7e 	bl	80011c6 <_fstat>
 80068ca:	1c43      	adds	r3, r0, #1
 80068cc:	d103      	bne.n	80068d6 <_fstat_r+0x1e>
 80068ce:	682b      	ldr	r3, [r5, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d000      	beq.n	80068d6 <_fstat_r+0x1e>
 80068d4:	6023      	str	r3, [r4, #0]
 80068d6:	bd70      	pop	{r4, r5, r6, pc}
 80068d8:	200004f0 	.word	0x200004f0

080068dc <_isatty_r>:
 80068dc:	2300      	movs	r3, #0
 80068de:	b570      	push	{r4, r5, r6, lr}
 80068e0:	4d06      	ldr	r5, [pc, #24]	@ (80068fc <_isatty_r+0x20>)
 80068e2:	0004      	movs	r4, r0
 80068e4:	0008      	movs	r0, r1
 80068e6:	602b      	str	r3, [r5, #0]
 80068e8:	f7fa fc7b 	bl	80011e2 <_isatty>
 80068ec:	1c43      	adds	r3, r0, #1
 80068ee:	d103      	bne.n	80068f8 <_isatty_r+0x1c>
 80068f0:	682b      	ldr	r3, [r5, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d000      	beq.n	80068f8 <_isatty_r+0x1c>
 80068f6:	6023      	str	r3, [r4, #0]
 80068f8:	bd70      	pop	{r4, r5, r6, pc}
 80068fa:	46c0      	nop			@ (mov r8, r8)
 80068fc:	200004f0 	.word	0x200004f0

08006900 <_init>:
 8006900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006902:	46c0      	nop			@ (mov r8, r8)
 8006904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006906:	bc08      	pop	{r3}
 8006908:	469e      	mov	lr, r3
 800690a:	4770      	bx	lr

0800690c <_fini>:
 800690c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690e:	46c0      	nop			@ (mov r8, r8)
 8006910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006912:	bc08      	pop	{r3}
 8006914:	469e      	mov	lr, r3
 8006916:	4770      	bx	lr
