
Fan_control_12units.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006454  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08006510  08006510  00007510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800669c  0800669c  00008098  2**0
                  CONTENTS
  4 .ARM          00000008  0800669c  0800669c  0000769c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066a4  080066a4  00008098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066a4  080066a4  000076a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066a8  080066a8  000076a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  080066ac  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  20000098  08006744  00008098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  08006744  000084e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017367  00000000  00000000  000080c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000349a  00000000  00000000  0001f427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  000228c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001062  00000000  00000000  00023da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004a38  00000000  00000000  00024e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b4aa  00000000  00000000  00029842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad1f6  00000000  00000000  00044cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1ee2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052f8  00000000  00000000  000f1f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000f7220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000098 	.word	0x20000098
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080064f8 	.word	0x080064f8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000009c 	.word	0x2000009c
 8000100:	080064f8 	.word	0x080064f8

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	@ (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	@ (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	d434      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047a:	469b      	mov	fp, r3
 800047c:	4653      	mov	r3, sl
 800047e:	465a      	mov	r2, fp
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83b      	bhi.n	8000508 <__udivmoddi4+0xc4>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e079      	b.n	800058a <__udivmoddi4+0x146>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e076      	b.n	8000590 <__udivmoddi4+0x14c>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e029      	b.n	8000510 <__udivmoddi4+0xcc>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	469b      	mov	fp, r3
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	4652      	mov	r2, sl
 80004ee:	40da      	lsrs	r2, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0013      	movs	r3, r2
 80004f4:	464a      	mov	r2, r9
 80004f6:	408a      	lsls	r2, r1
 80004f8:	0017      	movs	r7, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	431f      	orrs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d9c3      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	4643      	mov	r3, r8
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0d8      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000516:	07fb      	lsls	r3, r7, #31
 8000518:	0872      	lsrs	r2, r6, #1
 800051a:	431a      	orrs	r2, r3
 800051c:	4646      	mov	r6, r8
 800051e:	087b      	lsrs	r3, r7, #1
 8000520:	e00e      	b.n	8000540 <__udivmoddi4+0xfc>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d101      	bne.n	800052a <__udivmoddi4+0xe6>
 8000526:	42a2      	cmp	r2, r4
 8000528:	d80c      	bhi.n	8000544 <__udivmoddi4+0x100>
 800052a:	1aa4      	subs	r4, r4, r2
 800052c:	419d      	sbcs	r5, r3
 800052e:	2001      	movs	r0, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2100      	movs	r1, #0
 8000536:	3e01      	subs	r6, #1
 8000538:	1824      	adds	r4, r4, r0
 800053a:	414d      	adcs	r5, r1
 800053c:	2e00      	cmp	r6, #0
 800053e:	d006      	beq.n	800054e <__udivmoddi4+0x10a>
 8000540:	42ab      	cmp	r3, r5
 8000542:	d9ee      	bls.n	8000522 <__udivmoddi4+0xde>
 8000544:	3e01      	subs	r6, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__udivmoddi4+0xfc>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	465b      	mov	r3, fp
 8000554:	1900      	adds	r0, r0, r4
 8000556:	4169      	adcs	r1, r5
 8000558:	2b00      	cmp	r3, #0
 800055a:	db24      	blt.n	80005a6 <__udivmoddi4+0x162>
 800055c:	002b      	movs	r3, r5
 800055e:	465a      	mov	r2, fp
 8000560:	4644      	mov	r4, r8
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	40e2      	lsrs	r2, r4
 8000568:	001c      	movs	r4, r3
 800056a:	465b      	mov	r3, fp
 800056c:	0015      	movs	r5, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	db2a      	blt.n	80005c8 <__udivmoddi4+0x184>
 8000572:	0026      	movs	r6, r4
 8000574:	409e      	lsls	r6, r3
 8000576:	0033      	movs	r3, r6
 8000578:	0026      	movs	r6, r4
 800057a:	4647      	mov	r7, r8
 800057c:	40be      	lsls	r6, r7
 800057e:	0032      	movs	r2, r6
 8000580:	1a80      	subs	r0, r0, r2
 8000582:	4199      	sbcs	r1, r3
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	9101      	str	r1, [sp, #4]
 8000588:	e79e      	b.n	80004c8 <__udivmoddi4+0x84>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d8bc      	bhi.n	8000508 <__udivmoddi4+0xc4>
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x52>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	2100      	movs	r1, #0
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	9100      	str	r1, [sp, #0]
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	e785      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4646      	mov	r6, r8
 80005b0:	409a      	lsls	r2, r3
 80005b2:	0023      	movs	r3, r4
 80005b4:	40f3      	lsrs	r3, r6
 80005b6:	4644      	mov	r4, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	465b      	mov	r3, fp
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad4      	bge.n	8000572 <__udivmoddi4+0x12e>
 80005c8:	4642      	mov	r2, r8
 80005ca:	002f      	movs	r7, r5
 80005cc:	2320      	movs	r3, #32
 80005ce:	0026      	movs	r6, r4
 80005d0:	4097      	lsls	r7, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	40de      	lsrs	r6, r3
 80005d6:	003b      	movs	r3, r7
 80005d8:	4333      	orrs	r3, r6
 80005da:	e7cd      	b.n	8000578 <__udivmoddi4+0x134>

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	@ (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000634:	4b1b      	ldr	r3, [pc, #108]	@ (80006a4 <MX_I2C2_Init+0x74>)
 8000636:	4a1c      	ldr	r2, [pc, #112]	@ (80006a8 <MX_I2C2_Init+0x78>)
 8000638:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10B17DB5;
 800063a:	4b1a      	ldr	r3, [pc, #104]	@ (80006a4 <MX_I2C2_Init+0x74>)
 800063c:	4a1b      	ldr	r2, [pc, #108]	@ (80006ac <MX_I2C2_Init+0x7c>)
 800063e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000640:	4b18      	ldr	r3, [pc, #96]	@ (80006a4 <MX_I2C2_Init+0x74>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000646:	4b17      	ldr	r3, [pc, #92]	@ (80006a4 <MX_I2C2_Init+0x74>)
 8000648:	2201      	movs	r2, #1
 800064a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800064c:	4b15      	ldr	r3, [pc, #84]	@ (80006a4 <MX_I2C2_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000652:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <MX_I2C2_Init+0x74>)
 8000654:	2200      	movs	r2, #0
 8000656:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000658:	4b12      	ldr	r3, [pc, #72]	@ (80006a4 <MX_I2C2_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065e:	4b11      	ldr	r3, [pc, #68]	@ (80006a4 <MX_I2C2_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000664:	4b0f      	ldr	r3, [pc, #60]	@ (80006a4 <MX_I2C2_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800066a:	4b0e      	ldr	r3, [pc, #56]	@ (80006a4 <MX_I2C2_Init+0x74>)
 800066c:	0018      	movs	r0, r3
 800066e:	f001 fc53 	bl	8001f18 <HAL_I2C_Init>
 8000672:	1e03      	subs	r3, r0, #0
 8000674:	d001      	beq.n	800067a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000676:	f000 fa80 	bl	8000b7a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800067a:	4b0a      	ldr	r3, [pc, #40]	@ (80006a4 <MX_I2C2_Init+0x74>)
 800067c:	2100      	movs	r1, #0
 800067e:	0018      	movs	r0, r3
 8000680:	f001 fcf0 	bl	8002064 <HAL_I2CEx_ConfigAnalogFilter>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d001      	beq.n	800068c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000688:	f000 fa77 	bl	8000b7a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800068c:	4b05      	ldr	r3, [pc, #20]	@ (80006a4 <MX_I2C2_Init+0x74>)
 800068e:	2100      	movs	r1, #0
 8000690:	0018      	movs	r0, r3
 8000692:	f001 fd33 	bl	80020fc <HAL_I2CEx_ConfigDigitalFilter>
 8000696:	1e03      	subs	r3, r0, #0
 8000698:	d001      	beq.n	800069e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800069a:	f000 fa6e 	bl	8000b7a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800069e:	46c0      	nop			@ (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200000b4 	.word	0x200000b4
 80006a8:	40005800 	.word	0x40005800
 80006ac:	10b17db5 	.word	0x10b17db5

080006b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b08b      	sub	sp, #44	@ 0x2c
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	2414      	movs	r4, #20
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	0018      	movs	r0, r3
 80006be:	2314      	movs	r3, #20
 80006c0:	001a      	movs	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f005 f8d6 	bl	8005874 <memset>
  if(i2cHandle->Instance==I2C2)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a1c      	ldr	r2, [pc, #112]	@ (8000740 <HAL_I2C_MspInit+0x90>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d131      	bne.n	8000736 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000744 <HAL_I2C_MspInit+0x94>)
 80006d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000744 <HAL_I2C_MspInit+0x94>)
 80006d8:	2101      	movs	r1, #1
 80006da:	430a      	orrs	r2, r1
 80006dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80006de:	4b19      	ldr	r3, [pc, #100]	@ (8000744 <HAL_I2C_MspInit+0x94>)
 80006e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006e2:	2201      	movs	r2, #1
 80006e4:	4013      	ands	r3, r2
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = MC_I2C_SCL_Pin|MC_I2C_SDA_Pin;
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	22c0      	movs	r2, #192	@ 0xc0
 80006ee:	0152      	lsls	r2, r2, #5
 80006f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006f2:	0021      	movs	r1, r4
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2212      	movs	r2, #18
 80006f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2206      	movs	r2, #6
 800070a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	187a      	adds	r2, r7, r1
 800070e:	23a0      	movs	r3, #160	@ 0xa0
 8000710:	05db      	lsls	r3, r3, #23
 8000712:	0011      	movs	r1, r2
 8000714:	0018      	movs	r0, r3
 8000716:	f001 fa7d 	bl	8001c14 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800071a:	4b0a      	ldr	r3, [pc, #40]	@ (8000744 <HAL_I2C_MspInit+0x94>)
 800071c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800071e:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <HAL_I2C_MspInit+0x94>)
 8000720:	2180      	movs	r1, #128	@ 0x80
 8000722:	03c9      	lsls	r1, r1, #15
 8000724:	430a      	orrs	r2, r1
 8000726:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000728:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <HAL_I2C_MspInit+0x94>)
 800072a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800072c:	2380      	movs	r3, #128	@ 0x80
 800072e:	03db      	lsls	r3, r3, #15
 8000730:	4013      	ands	r3, r2
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	b00b      	add	sp, #44	@ 0x2c
 800073c:	bd90      	pop	{r4, r7, pc}
 800073e:	46c0      	nop			@ (mov r8, r8)
 8000740:	40005800 	.word	0x40005800
 8000744:	40021000 	.word	0x40021000

08000748 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	USART2->TDR = ch;
 8000750:	4b06      	ldr	r3, [pc, #24]	@ (800076c <__io_putchar+0x24>)
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	629a      	str	r2, [r3, #40]	@ 0x28
	while ((USART2->ISR & USART_ISR_TC) == 0)
 8000756:	46c0      	nop			@ (mov r8, r8)
 8000758:	4b04      	ldr	r3, [pc, #16]	@ (800076c <__io_putchar+0x24>)
 800075a:	69db      	ldr	r3, [r3, #28]
 800075c:	2240      	movs	r2, #64	@ 0x40
 800075e:	4013      	ands	r3, r2
 8000760:	d0fa      	beq.n	8000758 <__io_putchar+0x10>
		;
	return ch;
 8000762:	687b      	ldr	r3, [r7, #4]
}
 8000764:	0018      	movs	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	b002      	add	sp, #8
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40004400 	.word	0x40004400

08000770 <__io_getchar>:
int __io_getchar(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	while ((USART2->ISR & USART_ISR_RXNE_RXFNE) == 0)
 8000774:	46c0      	nop			@ (mov r8, r8)
 8000776:	4b05      	ldr	r3, [pc, #20]	@ (800078c <__io_getchar+0x1c>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	2220      	movs	r2, #32
 800077c:	4013      	ands	r3, r2
 800077e:	d0fa      	beq.n	8000776 <__io_getchar+0x6>
		;
	return USART2->RDR;
 8000780:	4b02      	ldr	r3, [pc, #8]	@ (800078c <__io_getchar+0x1c>)
 8000782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8000784:	0018      	movs	r0, r3
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			@ (mov r8, r8)
 800078c:	40004400 	.word	0x40004400

08000790 <HAL_IncTick>:
       }
   }
}
uint16_t LedMask;
void HAL_IncTick(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	uwTick += (uint32_t) uwTickFreq;
 8000794:	4b19      	ldr	r3, [pc, #100]	@ (80007fc <HAL_IncTick+0x6c>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	001a      	movs	r2, r3
 800079a:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <HAL_IncTick+0x70>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	18d2      	adds	r2, r2, r3
 80007a0:	4b17      	ldr	r3, [pc, #92]	@ (8000800 <HAL_IncTick+0x70>)
 80007a2:	601a      	str	r2, [r3, #0]
//	if ((uwTick % 64) == 0)
	{
		if (LedMask & 1)
 80007a4:	4b17      	ldr	r3, [pc, #92]	@ (8000804 <HAL_IncTick+0x74>)
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	001a      	movs	r2, r3
 80007aa:	2301      	movs	r3, #1
 80007ac:	4013      	ands	r3, r2
 80007ae:	d014      	beq.n	80007da <HAL_IncTick+0x4a>
		{
			LedOn;
 80007b0:	23a0      	movs	r3, #160	@ 0xa0
 80007b2:	05db      	lsls	r3, r3, #23
 80007b4:	2201      	movs	r2, #1
 80007b6:	2120      	movs	r1, #32
 80007b8:	0018      	movs	r0, r3
 80007ba:	f001 fb8f 	bl	8001edc <HAL_GPIO_WritePin>
			LedMask >>= 1;
 80007be:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <HAL_IncTick+0x74>)
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	085b      	lsrs	r3, r3, #1
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <HAL_IncTick+0x74>)
 80007c8:	801a      	strh	r2, [r3, #0]
			LedMask |= (1 << 15);
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <HAL_IncTick+0x74>)
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000808 <HAL_IncTick+0x78>)
 80007d0:	4313      	orrs	r3, r2
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <HAL_IncTick+0x74>)
 80007d6:	801a      	strh	r2, [r3, #0]
		{
			LedOff;
			LedMask >>= 1;
		}
	}
}
 80007d8:	e00c      	b.n	80007f4 <HAL_IncTick+0x64>
			LedOff;
 80007da:	23a0      	movs	r3, #160	@ 0xa0
 80007dc:	05db      	lsls	r3, r3, #23
 80007de:	2200      	movs	r2, #0
 80007e0:	2120      	movs	r1, #32
 80007e2:	0018      	movs	r0, r3
 80007e4:	f001 fb7a 	bl	8001edc <HAL_GPIO_WritePin>
			LedMask >>= 1;
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <HAL_IncTick+0x74>)
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	4b04      	ldr	r3, [pc, #16]	@ (8000804 <HAL_IncTick+0x74>)
 80007f2:	801a      	strh	r2, [r3, #0]
}
 80007f4:	46c0      	nop			@ (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			@ (mov r8, r8)
 80007fc:	20000038 	.word	0x20000038
 8000800:	20000398 	.word	0x20000398
 8000804:	20000108 	.word	0x20000108
 8000808:	ffff8000 	.word	0xffff8000

0800080c <HAL_TIM_OC_DelayElapsedCallback>:
#define StopFan	60000
uint16_t timeB6_11[12] =
{ 40000, 40000, 40000, 40000, 40000, 40000, 40000, 40000, 40000, 40000, 40000,
		40000 };
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) // Обработчик таймера
{
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b089      	sub	sp, #36	@ 0x24
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	{
	    uint16_t period;

	    // Проверка флага прерывания и сброс флагов
	    if (htim->Instance == TIM1 || htim->Instance == TIM2)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a3d      	ldr	r2, [pc, #244]	@ (8000910 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d006      	beq.n	800082c <HAL_TIM_OC_DelayElapsedCallback+0x20>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	2380      	movs	r3, #128	@ 0x80
 8000824:	05db      	lsls	r3, r3, #23
 8000826:	429a      	cmp	r2, r3
 8000828:	d000      	beq.n	800082c <HAL_TIM_OC_DelayElapsedCallback+0x20>
 800082a:	e06d      	b.n	8000908 <HAL_TIM_OC_DelayElapsedCallback+0xfc>
	    {
	        int timerIndex = (htim->Instance == TIM1) ? 0 : 1;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a38      	ldr	r2, [pc, #224]	@ (8000914 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8000832:	4694      	mov	ip, r2
 8000834:	4463      	add	r3, ip
 8000836:	1e5a      	subs	r2, r3, #1
 8000838:	4193      	sbcs	r3, r2
 800083a:	b2db      	uxtb	r3, r3
 800083c:	61bb      	str	r3, [r7, #24]
	        TIM_TypeDef *timer = (htim->Instance == TIM1) ? TIM1 : TIM2;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a33      	ldr	r2, [pc, #204]	@ (8000910 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d101      	bne.n	800084c <HAL_TIM_OC_DelayElapsedCallback+0x40>
 8000848:	4b31      	ldr	r3, [pc, #196]	@ (8000910 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 800084a:	e001      	b.n	8000850 <HAL_TIM_OC_DelayElapsedCallback+0x44>
 800084c:	2380      	movs	r3, #128	@ 0x80
 800084e:	05db      	lsls	r3, r3, #23
 8000850:	617b      	str	r3, [r7, #20]
	        uint16_t *timeArray = (htim->Instance == TIM1) ? timeB6_11 : timeB6_11 + 10;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a2e      	ldr	r2, [pc, #184]	@ (8000910 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d101      	bne.n	8000860 <HAL_TIM_OC_DelayElapsedCallback+0x54>
 800085c:	4b2e      	ldr	r3, [pc, #184]	@ (8000918 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 800085e:	e000      	b.n	8000862 <HAL_TIM_OC_DelayElapsedCallback+0x56>
 8000860:	4b2e      	ldr	r3, [pc, #184]	@ (800091c <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8000862:	613b      	str	r3, [r7, #16]

	        // Получение и сброс флага прерывания
	        int isr = timer->SR;
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	691b      	ldr	r3, [r3, #16]
 8000868:	60fb      	str	r3, [r7, #12]
	        timer->SR = 0;
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]

	        printf("Timer%d %u %u\r\n", timerIndex + 1, timeArray[0], timeArray[1]);
 8000870:	69bb      	ldr	r3, [r7, #24]
 8000872:	1c59      	adds	r1, r3, #1
 8000874:	693b      	ldr	r3, [r7, #16]
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	001a      	movs	r2, r3
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	3302      	adds	r3, #2
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	4827      	ldr	r0, [pc, #156]	@ (8000920 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8000882:	f004 ff9b 	bl	80057bc <iprintf>

	        for (int i = 0; i < 4; i++) // Идём по первому и второму таймеру
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
 800088a:	e03a      	b.n	8000902 <HAL_TIM_OC_DelayElapsedCallback+0xf6>
	        {
	            if (isr & (1 << (i + 1))) // Проверка соответствующего флага
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	3301      	adds	r3, #1
 8000890:	68fa      	ldr	r2, [r7, #12]
 8000892:	411a      	asrs	r2, r3
 8000894:	0013      	movs	r3, r2
 8000896:	2201      	movs	r2, #1
 8000898:	4013      	ands	r3, r2
 800089a:	d02f      	beq.n	80008fc <HAL_TIM_OC_DelayElapsedCallback+0xf0>
	            {
	                period = (timeArray[i * 2] > timeArray[i * 2 + 1]) ? timeArray[i * 2] : timeArray[i * 2 + 1];
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	3302      	adds	r3, #2
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	18d3      	adds	r3, r2, r3
 80008a6:	8819      	ldrh	r1, [r3, #0]
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	693a      	ldr	r2, [r7, #16]
 80008ae:	18d3      	adds	r3, r2, r3
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	220a      	movs	r2, #10
 80008b4:	18ba      	adds	r2, r7, r2
 80008b6:	1c1c      	adds	r4, r3, #0
 80008b8:	1c0b      	adds	r3, r1, #0
 80008ba:	b298      	uxth	r0, r3
 80008bc:	b2a1      	uxth	r1, r4
 80008be:	4288      	cmp	r0, r1
 80008c0:	d200      	bcs.n	80008c4 <HAL_TIM_OC_DelayElapsedCallback+0xb8>
 80008c2:	1c23      	adds	r3, r4, #0
 80008c4:	8013      	strh	r3, [r2, #0]
	                if (period < StopFan)
 80008c6:	210a      	movs	r1, #10
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	4a15      	ldr	r2, [pc, #84]	@ (8000924 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d814      	bhi.n	80008fc <HAL_TIM_OC_DelayElapsedCallback+0xf0>
	                {
	                    timer->CCR1 += period; // Увеличение CCR
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	18d2      	adds	r2, r2, r3
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	635a      	str	r2, [r3, #52]	@ 0x34
	                    GPIOB->ODR ^= (1 << (i + 6 + (timerIndex * 4))); // Включение/выключение
 80008e0:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 80008e2:	695a      	ldr	r2, [r3, #20]
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	1d99      	adds	r1, r3, #6
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	18cb      	adds	r3, r1, r3
 80008ee:	2101      	movs	r1, #1
 80008f0:	4099      	lsls	r1, r3
 80008f2:	000b      	movs	r3, r1
 80008f4:	0019      	movs	r1, r3
 80008f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 80008f8:	404a      	eors	r2, r1
 80008fa:	615a      	str	r2, [r3, #20]
	        for (int i = 0; i < 4; i++) // Идём по первому и второму таймеру
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	3301      	adds	r3, #1
 8000900:	61fb      	str	r3, [r7, #28]
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	2b03      	cmp	r3, #3
 8000906:	ddc1      	ble.n	800088c <HAL_TIM_OC_DelayElapsedCallback+0x80>
	                }
	            }
	        }
	    }
	}
}
 8000908:	46c0      	nop			@ (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	b009      	add	sp, #36	@ 0x24
 800090e:	bd90      	pop	{r4, r7, pc}
 8000910:	40012c00 	.word	0x40012c00
 8000914:	bffed400 	.word	0xbffed400
 8000918:	20000000 	.word	0x20000000
 800091c:	20000014 	.word	0x20000014
 8000920:	08006528 	.word	0x08006528
 8000924:	0000ea5f 	.word	0x0000ea5f
 8000928:	50000400 	.word	0x50000400

0800092c <setup>:

void setup()
{
 800092c:	b590      	push	{r4, r7, lr}
 800092e:	b089      	sub	sp, #36	@ 0x24
 8000930:	af00      	add	r7, sp, #0
   // Инициализация HAL и конфигурация выводов


   // Конфигурирование GPIO (входа и выхода)
   __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	4b3d      	ldr	r3, [pc, #244]	@ (8000a28 <setup+0xfc>)
 8000934:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000936:	4b3c      	ldr	r3, [pc, #240]	@ (8000a28 <setup+0xfc>)
 8000938:	2104      	movs	r1, #4
 800093a:	430a      	orrs	r2, r1
 800093c:	635a      	str	r2, [r3, #52]	@ 0x34
 800093e:	4b3a      	ldr	r3, [pc, #232]	@ (8000a28 <setup+0xfc>)
 8000940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000942:	2204      	movs	r2, #4
 8000944:	4013      	ands	r3, r2
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
   __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	4b37      	ldr	r3, [pc, #220]	@ (8000a28 <setup+0xfc>)
 800094c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800094e:	4b36      	ldr	r3, [pc, #216]	@ (8000a28 <setup+0xfc>)
 8000950:	2102      	movs	r1, #2
 8000952:	430a      	orrs	r2, r1
 8000954:	635a      	str	r2, [r3, #52]	@ 0x34
 8000956:	4b34      	ldr	r3, [pc, #208]	@ (8000a28 <setup+0xfc>)
 8000958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800095a:	2202      	movs	r2, #2
 800095c:	4013      	ands	r3, r2
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]

   GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	2308      	movs	r3, #8
 8000964:	18fb      	adds	r3, r7, r3
 8000966:	0018      	movs	r0, r3
 8000968:	2314      	movs	r3, #20
 800096a:	001a      	movs	r2, r3
 800096c:	2100      	movs	r1, #0
 800096e:	f004 ff81 	bl	8005874 <memset>

   // Настройка тахометров на GPIOC
   for (uint16_t i = 0; i < NUM_TACHOMETERS; i++) {
 8000972:	231e      	movs	r3, #30
 8000974:	18fb      	adds	r3, r7, r3
 8000976:	2200      	movs	r2, #0
 8000978:	801a      	strh	r2, [r3, #0]
 800097a:	e01b      	b.n	80009b4 <setup+0x88>
       GPIO_InitStruct.Pin = (1 << i);
 800097c:	241e      	movs	r4, #30
 800097e:	193b      	adds	r3, r7, r4
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	2201      	movs	r2, #1
 8000984:	409a      	lsls	r2, r3
 8000986:	0013      	movs	r3, r2
 8000988:	001a      	movs	r2, r3
 800098a:	2108      	movs	r1, #8
 800098c:	187b      	adds	r3, r7, r1
 800098e:	601a      	str	r2, [r3, #0]
       GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; // Включаем прерывания по фронту
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2288      	movs	r2, #136	@ 0x88
 8000994:	0352      	lsls	r2, r2, #13
 8000996:	605a      	str	r2, [r3, #4]
       GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2201      	movs	r2, #1
 800099c:	609a      	str	r2, [r3, #8]
       HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	4a22      	ldr	r2, [pc, #136]	@ (8000a2c <setup+0x100>)
 80009a2:	0019      	movs	r1, r3
 80009a4:	0010      	movs	r0, r2
 80009a6:	f001 f935 	bl	8001c14 <HAL_GPIO_Init>
   for (uint16_t i = 0; i < NUM_TACHOMETERS; i++) {
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	881a      	ldrh	r2, [r3, #0]
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	3201      	adds	r2, #1
 80009b2:	801a      	strh	r2, [r3, #0]
 80009b4:	231e      	movs	r3, #30
 80009b6:	18fb      	adds	r3, r7, r3
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	2b0b      	cmp	r3, #11
 80009bc:	d9de      	bls.n	800097c <setup+0x50>
   }

   // Настройка выходов на GPIOB (выходные тахометры)
   for (uint16_t i = 0; i < OUTPUT_SIGNAL_COUNT; i++) {
 80009be:	231c      	movs	r3, #28
 80009c0:	18fb      	adds	r3, r7, r3
 80009c2:	2200      	movs	r2, #0
 80009c4:	801a      	strh	r2, [r3, #0]
 80009c6:	e01e      	b.n	8000a06 <setup+0xda>
       GPIO_InitStruct.Pin = (1 << (10 + i));
 80009c8:	241c      	movs	r4, #28
 80009ca:	193b      	adds	r3, r7, r4
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	330a      	adds	r3, #10
 80009d0:	2201      	movs	r2, #1
 80009d2:	409a      	lsls	r2, r3
 80009d4:	0013      	movs	r3, r2
 80009d6:	001a      	movs	r2, r3
 80009d8:	2108      	movs	r1, #8
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	601a      	str	r2, [r3, #0]
       GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2201      	movs	r2, #1
 80009e2:	605a      	str	r2, [r3, #4]
       GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
       GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2202      	movs	r2, #2
 80009ee:	60da      	str	r2, [r3, #12]
       HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a30 <setup+0x104>)
 80009f4:	0019      	movs	r1, r3
 80009f6:	0010      	movs	r0, r2
 80009f8:	f001 f90c 	bl	8001c14 <HAL_GPIO_Init>
   for (uint16_t i = 0; i < OUTPUT_SIGNAL_COUNT; i++) {
 80009fc:	193b      	adds	r3, r7, r4
 80009fe:	881a      	ldrh	r2, [r3, #0]
 8000a00:	193b      	adds	r3, r7, r4
 8000a02:	3201      	adds	r2, #1
 8000a04:	801a      	strh	r2, [r3, #0]
 8000a06:	231c      	movs	r3, #28
 8000a08:	18fb      	adds	r3, r7, r3
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	2b05      	cmp	r3, #5
 8000a0e:	d9db      	bls.n	80009c8 <setup+0x9c>
   }

   // Включаем прерывания для входных ПЛК на уровне NVIC
   HAL_NVIC_SetPriority(EXTI0_1_IRQn, 2, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2102      	movs	r1, #2
 8000a14:	2005      	movs	r0, #5
 8000a16:	f001 f8cb 	bl	8001bb0 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000a1a:	2005      	movs	r0, #5
 8000a1c:	f001 f8dd 	bl	8001bda <HAL_NVIC_EnableIRQ>
}
 8000a20:	46c0      	nop			@ (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b009      	add	sp, #36	@ 0x24
 8000a26:	bd90      	pop	{r4, r7, pc}
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	50000800 	.word	0x50000800
 8000a30:	50000400 	.word	0x50000400

08000a34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a38:	f000 ff9a 	bl	8001970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a3c:	f000 f83c 	bl	8000ab8 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_TIM3_Init();
 8000a40:	f000 fb88 	bl	8001154 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000a44:	f000 fa1a 	bl	8000e7c <MX_TIM1_Init>
  MX_TIM16_Init();
 8000a48:	f000 fc3e 	bl	80012c8 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000a4c:	f000 fcc6 	bl	80013dc <MX_TIM17_Init>
  MX_I2C2_Init();
 8000a50:	f7ff fdee 	bl	8000630 <MX_I2C2_Init>
  MX_RTC_Init();
 8000a54:	f000 f898 	bl	8000b88 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000a58:	f000 feaa 	bl	80017b0 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8000a5c:	f000 fc0e 	bl	800127c <MX_TIM14_Init>
  MX_TIM2_Init();
 8000a60:	f000 faec 	bl	800103c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // запуск PWM на необходимых каналах таймеров
 8000a64:	4b10      	ldr	r3, [pc, #64]	@ (8000aa8 <main+0x74>)
 8000a66:	2104      	movs	r1, #4
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f002 fd3d 	bl	80034e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <main+0x74>)
 8000a70:	2108      	movs	r1, #8
 8000a72:	0018      	movs	r0, r3
 8000a74:	f002 fd38 	bl	80034e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a78:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <main+0x78>)
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f002 fd33 	bl	80034e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000a82:	4b0a      	ldr	r3, [pc, #40]	@ (8000aac <main+0x78>)
 8000a84:	2104      	movs	r1, #4
 8000a86:	0018      	movs	r0, r3
 8000a88:	f002 fd2e 	bl	80034e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000a8c:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <main+0x7c>)
 8000a8e:	2100      	movs	r1, #0
 8000a90:	0018      	movs	r0, r3
 8000a92:	f002 fd29 	bl	80034e8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim17, TIM_CHANNEL_1);
 8000a96:	4b07      	ldr	r3, [pc, #28]	@ (8000ab4 <main+0x80>)
 8000a98:	2100      	movs	r1, #0
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f003 fd7e 	bl	800459c <HAL_TIMEx_PWMN_Start>

  setup();
 8000aa0:	f7ff ff44 	bl	800092c <setup>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aa4:	46c0      	nop			@ (mov r8, r8)
 8000aa6:	e7fd      	b.n	8000aa4 <main+0x70>
 8000aa8:	2000013c 	.word	0x2000013c
 8000aac:	200001d4 	.word	0x200001d4
 8000ab0:	2000026c 	.word	0x2000026c
 8000ab4:	200002b8 	.word	0x200002b8

08000ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b093      	sub	sp, #76	@ 0x4c
 8000abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000abe:	2410      	movs	r4, #16
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	2338      	movs	r3, #56	@ 0x38
 8000ac6:	001a      	movs	r2, r3
 8000ac8:	2100      	movs	r1, #0
 8000aca:	f004 fed3 	bl	8005874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ace:	003b      	movs	r3, r7
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	001a      	movs	r2, r3
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	f004 fecc 	bl	8005874 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000adc:	2380      	movs	r3, #128	@ 0x80
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f001 fb57 	bl	8002194 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000ae6:	193b      	adds	r3, r7, r4
 8000ae8:	220a      	movs	r2, #10
 8000aea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aec:	193b      	adds	r3, r7, r4
 8000aee:	2280      	movs	r2, #128	@ 0x80
 8000af0:	0052      	lsls	r2, r2, #1
 8000af2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000af4:	0021      	movs	r1, r4
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2240      	movs	r2, #64	@ 0x40
 8000b00:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	2201      	movs	r2, #1
 8000b06:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2202      	movs	r2, #2
 8000b12:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2200      	movs	r2, #0
 8000b18:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2208      	movs	r2, #8
 8000b1e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	2280      	movs	r2, #128	@ 0x80
 8000b24:	0292      	lsls	r2, r2, #10
 8000b26:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	22c0      	movs	r2, #192	@ 0xc0
 8000b2c:	04d2      	lsls	r2, r2, #19
 8000b2e:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	2280      	movs	r2, #128	@ 0x80
 8000b34:	0592      	lsls	r2, r2, #22
 8000b36:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f001 fb76 	bl	800222c <HAL_RCC_OscConfig>
 8000b40:	1e03      	subs	r3, r0, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000b44:	f000 f819 	bl	8000b7a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b48:	003b      	movs	r3, r7
 8000b4a:	2207      	movs	r2, #7
 8000b4c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4e:	003b      	movs	r3, r7
 8000b50:	2202      	movs	r2, #2
 8000b52:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b54:	003b      	movs	r3, r7
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b5a:	003b      	movs	r3, r7
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b60:	003b      	movs	r3, r7
 8000b62:	2102      	movs	r1, #2
 8000b64:	0018      	movs	r0, r3
 8000b66:	f001 fe7b 	bl	8002860 <HAL_RCC_ClockConfig>
 8000b6a:	1e03      	subs	r3, r0, #0
 8000b6c:	d001      	beq.n	8000b72 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000b6e:	f000 f804 	bl	8000b7a <Error_Handler>
  }
}
 8000b72:	46c0      	nop			@ (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b013      	add	sp, #76	@ 0x4c
 8000b78:	bd90      	pop	{r4, r7, pc}

08000b7a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7e:	b672      	cpsid	i
}
 8000b80:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */

  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b82:	46c0      	nop			@ (mov r8, r8)
 8000b84:	e7fd      	b.n	8000b82 <Error_Handler+0x8>
	...

08000b88 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b8c:	4b18      	ldr	r3, [pc, #96]	@ (8000bf0 <MX_RTC_Init+0x68>)
 8000b8e:	4a19      	ldr	r2, [pc, #100]	@ (8000bf4 <MX_RTC_Init+0x6c>)
 8000b90:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b92:	4b17      	ldr	r3, [pc, #92]	@ (8000bf0 <MX_RTC_Init+0x68>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000b98:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <MX_RTC_Init+0x68>)
 8000b9a:	227f      	movs	r2, #127	@ 0x7f
 8000b9c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000b9e:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <MX_RTC_Init+0x68>)
 8000ba0:	22ff      	movs	r2, #255	@ 0xff
 8000ba2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_WAKEUP;
 8000ba4:	4b12      	ldr	r3, [pc, #72]	@ (8000bf0 <MX_RTC_Init+0x68>)
 8000ba6:	22c0      	movs	r2, #192	@ 0xc0
 8000ba8:	03d2      	lsls	r2, r2, #15
 8000baa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000bac:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <MX_RTC_Init+0x68>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf0 <MX_RTC_Init+0x68>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf0 <MX_RTC_Init+0x68>)
 8000bba:	2280      	movs	r2, #128	@ 0x80
 8000bbc:	05d2      	lsls	r2, r2, #23
 8000bbe:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf0 <MX_RTC_Init+0x68>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf0 <MX_RTC_Init+0x68>)
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f002 f9ab 	bl	8002f24 <HAL_RTC_Init>
 8000bce:	1e03      	subs	r3, r0, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_RTC_Init+0x4e>
  {
    Error_Handler();
 8000bd2:	f7ff ffd2 	bl	8000b7a <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000bd6:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <MX_RTC_Init+0x68>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2100      	movs	r1, #0
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f002 faef 	bl	80031c0 <HAL_RTCEx_SetWakeUpTimer>
 8000be2:	1e03      	subs	r3, r0, #0
 8000be4:	d001      	beq.n	8000bea <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000be6:	f7ff ffc8 	bl	8000b7a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000bea:	46c0      	nop			@ (mov r8, r8)
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	2000010c 	.word	0x2000010c
 8000bf4:	40002800 	.word	0x40002800

08000bf8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b091      	sub	sp, #68	@ 0x44
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c00:	240c      	movs	r4, #12
 8000c02:	193b      	adds	r3, r7, r4
 8000c04:	0018      	movs	r0, r3
 8000c06:	2334      	movs	r3, #52	@ 0x34
 8000c08:	001a      	movs	r2, r3
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	f004 fe32 	bl	8005874 <memset>
  if(rtcHandle->Instance==RTC)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a15      	ldr	r2, [pc, #84]	@ (8000c6c <HAL_RTC_MspInit+0x74>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d124      	bne.n	8000c64 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c1a:	193b      	adds	r3, r7, r4
 8000c1c:	2280      	movs	r2, #128	@ 0x80
 8000c1e:	0292      	lsls	r2, r2, #10
 8000c20:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c22:	193b      	adds	r3, r7, r4
 8000c24:	2280      	movs	r2, #128	@ 0x80
 8000c26:	0092      	lsls	r2, r2, #2
 8000c28:	631a      	str	r2, [r3, #48]	@ 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c2a:	193b      	adds	r3, r7, r4
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f001 ffc1 	bl	8002bb4 <HAL_RCCEx_PeriphCLKConfig>
 8000c32:	1e03      	subs	r3, r0, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000c36:	f7ff ffa0 	bl	8000b7a <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c70 <HAL_RTC_MspInit+0x78>)
 8000c3c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <HAL_RTC_MspInit+0x78>)
 8000c40:	2180      	movs	r1, #128	@ 0x80
 8000c42:	0209      	lsls	r1, r1, #8
 8000c44:	430a      	orrs	r2, r1
 8000c46:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000c48:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <HAL_RTC_MspInit+0x78>)
 8000c4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c4c:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <HAL_RTC_MspInit+0x78>)
 8000c4e:	2180      	movs	r1, #128	@ 0x80
 8000c50:	00c9      	lsls	r1, r1, #3
 8000c52:	430a      	orrs	r2, r1
 8000c54:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c56:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <HAL_RTC_MspInit+0x78>)
 8000c58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c5a:	2380      	movs	r3, #128	@ 0x80
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	4013      	ands	r3, r2
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000c64:	46c0      	nop			@ (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b011      	add	sp, #68	@ 0x44
 8000c6a:	bd90      	pop	{r4, r7, pc}
 8000c6c:	40002800 	.word	0x40002800
 8000c70:	40021000 	.word	0x40021000

08000c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c80:	2101      	movs	r1, #1
 8000c82:	430a      	orrs	r2, r1
 8000c84:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c86:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c96:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c98:	2180      	movs	r1, #128	@ 0x80
 8000c9a:	0549      	lsls	r1, r1, #21
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ca0:	4b05      	ldr	r3, [pc, #20]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000ca2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ca4:	2380      	movs	r3, #128	@ 0x80
 8000ca6:	055b      	lsls	r3, r3, #21
 8000ca8:	4013      	ands	r3, r2
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b002      	add	sp, #8
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	40021000 	.word	0x40021000

08000cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cc0:	46c0      	nop			@ (mov r8, r8)
 8000cc2:	e7fd      	b.n	8000cc0 <NMI_Handler+0x4>

08000cc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc8:	46c0      	nop			@ (mov r8, r8)
 8000cca:	e7fd      	b.n	8000cc8 <HardFault_Handler+0x4>

08000ccc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cd0:	46c0      	nop			@ (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cda:	46c0      	nop			@ (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce4:	f7ff fd54 	bl	8000790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce8:	46c0      	nop			@ (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cf4:	4b03      	ldr	r3, [pc, #12]	@ (8000d04 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f002 fce0 	bl	80036bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000cfc:	46c0      	nop			@ (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			@ (mov r8, r8)
 8000d04:	2000013c 	.word	0x2000013c

08000d08 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d0c:	4b03      	ldr	r3, [pc, #12]	@ (8000d1c <TIM1_CC_IRQHandler+0x14>)
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f002 fcd4 	bl	80036bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000d14:	46c0      	nop			@ (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			@ (mov r8, r8)
 8000d1c:	2000013c 	.word	0x2000013c

08000d20 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000d24:	4b03      	ldr	r3, [pc, #12]	@ (8000d34 <TIM14_IRQHandler+0x14>)
 8000d26:	0018      	movs	r0, r3
 8000d28:	f002 fcc8 	bl	80036bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000d2c:	46c0      	nop			@ (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			@ (mov r8, r8)
 8000d34:	20000220 	.word	0x20000220

08000d38 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	e00a      	b.n	8000d60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d4a:	f7ff fd11 	bl	8000770 <__io_getchar>
 8000d4e:	0001      	movs	r1, r0
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	1c5a      	adds	r2, r3, #1
 8000d54:	60ba      	str	r2, [r7, #8]
 8000d56:	b2ca      	uxtb	r2, r1
 8000d58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	697a      	ldr	r2, [r7, #20]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	dbf0      	blt.n	8000d4a <_read+0x12>
  }

  return len;
 8000d68:	687b      	ldr	r3, [r7, #4]
}
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b006      	add	sp, #24
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b086      	sub	sp, #24
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	60f8      	str	r0, [r7, #12]
 8000d7a:	60b9      	str	r1, [r7, #8]
 8000d7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	e009      	b.n	8000d98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	1c5a      	adds	r2, r3, #1
 8000d88:	60ba      	str	r2, [r7, #8]
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f7ff fcdb 	bl	8000748 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	3301      	adds	r3, #1
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	dbf1      	blt.n	8000d84 <_write+0x12>
  }
  return len;
 8000da0:	687b      	ldr	r3, [r7, #4]
}
 8000da2:	0018      	movs	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b006      	add	sp, #24
 8000da8:	bd80      	pop	{r7, pc}

08000daa <_close>:

int _close(int file)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000db2:	2301      	movs	r3, #1
 8000db4:	425b      	negs	r3, r3
}
 8000db6:	0018      	movs	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b002      	add	sp, #8
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	2280      	movs	r2, #128	@ 0x80
 8000dcc:	0192      	lsls	r2, r2, #6
 8000dce:	605a      	str	r2, [r3, #4]
  return 0;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b002      	add	sp, #8
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <_isatty>:

int _isatty(int file)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000de2:	2301      	movs	r3, #1
}
 8000de4:	0018      	movs	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b002      	add	sp, #8
 8000dea:	bd80      	pop	{r7, pc}

08000dec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	b004      	add	sp, #16
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e0c:	4a14      	ldr	r2, [pc, #80]	@ (8000e60 <_sbrk+0x5c>)
 8000e0e:	4b15      	ldr	r3, [pc, #84]	@ (8000e64 <_sbrk+0x60>)
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e18:	4b13      	ldr	r3, [pc, #76]	@ (8000e68 <_sbrk+0x64>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d102      	bne.n	8000e26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e20:	4b11      	ldr	r3, [pc, #68]	@ (8000e68 <_sbrk+0x64>)
 8000e22:	4a12      	ldr	r2, [pc, #72]	@ (8000e6c <_sbrk+0x68>)
 8000e24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e26:	4b10      	ldr	r3, [pc, #64]	@ (8000e68 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	18d3      	adds	r3, r2, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d207      	bcs.n	8000e44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e34:	f004 fd74 	bl	8005920 <__errno>
 8000e38:	0003      	movs	r3, r0
 8000e3a:	220c      	movs	r2, #12
 8000e3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	425b      	negs	r3, r3
 8000e42:	e009      	b.n	8000e58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e44:	4b08      	ldr	r3, [pc, #32]	@ (8000e68 <_sbrk+0x64>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e4a:	4b07      	ldr	r3, [pc, #28]	@ (8000e68 <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	18d2      	adds	r2, r2, r3
 8000e52:	4b05      	ldr	r3, [pc, #20]	@ (8000e68 <_sbrk+0x64>)
 8000e54:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000e56:	68fb      	ldr	r3, [r7, #12]
}
 8000e58:	0018      	movs	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b006      	add	sp, #24
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20009000 	.word	0x20009000
 8000e64:	00000400 	.word	0x00000400
 8000e68:	20000138 	.word	0x20000138
 8000e6c:	200004e8 	.word	0x200004e8

08000e70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e74:	46c0      	nop			@ (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b09c      	sub	sp, #112	@ 0x70
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e82:	2360      	movs	r3, #96	@ 0x60
 8000e84:	18fb      	adds	r3, r7, r3
 8000e86:	0018      	movs	r0, r3
 8000e88:	2310      	movs	r3, #16
 8000e8a:	001a      	movs	r2, r3
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	f004 fcf1 	bl	8005874 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e92:	2354      	movs	r3, #84	@ 0x54
 8000e94:	18fb      	adds	r3, r7, r3
 8000e96:	0018      	movs	r0, r3
 8000e98:	230c      	movs	r3, #12
 8000e9a:	001a      	movs	r2, r3
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	f004 fce9 	bl	8005874 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ea2:	2338      	movs	r3, #56	@ 0x38
 8000ea4:	18fb      	adds	r3, r7, r3
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	231c      	movs	r3, #28
 8000eaa:	001a      	movs	r2, r3
 8000eac:	2100      	movs	r1, #0
 8000eae:	f004 fce1 	bl	8005874 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	2334      	movs	r3, #52	@ 0x34
 8000eb8:	001a      	movs	r2, r3
 8000eba:	2100      	movs	r1, #0
 8000ebc:	f004 fcda 	bl	8005874 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ec0:	4b5a      	ldr	r3, [pc, #360]	@ (800102c <MX_TIM1_Init+0x1b0>)
 8000ec2:	4a5b      	ldr	r2, [pc, #364]	@ (8001030 <MX_TIM1_Init+0x1b4>)
 8000ec4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 25;
 8000ec6:	4b59      	ldr	r3, [pc, #356]	@ (800102c <MX_TIM1_Init+0x1b0>)
 8000ec8:	2219      	movs	r2, #25
 8000eca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ecc:	4b57      	ldr	r3, [pc, #348]	@ (800102c <MX_TIM1_Init+0x1b0>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000ed2:	4b56      	ldr	r3, [pc, #344]	@ (800102c <MX_TIM1_Init+0x1b0>)
 8000ed4:	2263      	movs	r2, #99	@ 0x63
 8000ed6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed8:	4b54      	ldr	r3, [pc, #336]	@ (800102c <MX_TIM1_Init+0x1b0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ede:	4b53      	ldr	r3, [pc, #332]	@ (800102c <MX_TIM1_Init+0x1b0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee4:	4b51      	ldr	r3, [pc, #324]	@ (800102c <MX_TIM1_Init+0x1b0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000eea:	4b50      	ldr	r3, [pc, #320]	@ (800102c <MX_TIM1_Init+0x1b0>)
 8000eec:	0018      	movs	r0, r3
 8000eee:	f002 f9e3 	bl	80032b8 <HAL_TIM_Base_Init>
 8000ef2:	1e03      	subs	r3, r0, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000ef6:	f7ff fe40 	bl	8000b7a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000efa:	2160      	movs	r1, #96	@ 0x60
 8000efc:	187b      	adds	r3, r7, r1
 8000efe:	2280      	movs	r2, #128	@ 0x80
 8000f00:	0152      	lsls	r2, r2, #5
 8000f02:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f04:	187a      	adds	r2, r7, r1
 8000f06:	4b49      	ldr	r3, [pc, #292]	@ (800102c <MX_TIM1_Init+0x1b0>)
 8000f08:	0011      	movs	r1, r2
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f002 fe3e 	bl	8003b8c <HAL_TIM_ConfigClockSource>
 8000f10:	1e03      	subs	r3, r0, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000f14:	f7ff fe31 	bl	8000b7a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f18:	4b44      	ldr	r3, [pc, #272]	@ (800102c <MX_TIM1_Init+0x1b0>)
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f002 fa84 	bl	8003428 <HAL_TIM_PWM_Init>
 8000f20:	1e03      	subs	r3, r0, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000f24:	f7ff fe29 	bl	8000b7a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f28:	2154      	movs	r1, #84	@ 0x54
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	2200      	movs	r2, #0
 8000f34:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f3c:	187a      	adds	r2, r7, r1
 8000f3e:	4b3b      	ldr	r3, [pc, #236]	@ (800102c <MX_TIM1_Init+0x1b0>)
 8000f40:	0011      	movs	r1, r2
 8000f42:	0018      	movs	r0, r3
 8000f44:	f003 fbce 	bl	80046e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f48:	1e03      	subs	r3, r0, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000f4c:	f7ff fe15 	bl	8000b7a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f50:	2138      	movs	r1, #56	@ 0x38
 8000f52:	187b      	adds	r3, r7, r1
 8000f54:	2260      	movs	r2, #96	@ 0x60
 8000f56:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = pulse_width_MC_OUT_PWM_0;
 8000f58:	4b36      	ldr	r3, [pc, #216]	@ (8001034 <MX_TIM1_Init+0x1b8>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	001a      	movs	r2, r3
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f6e:	187b      	adds	r3, r7, r1
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	2200      	movs	r2, #0
 8000f78:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f80:	1879      	adds	r1, r7, r1
 8000f82:	4b2a      	ldr	r3, [pc, #168]	@ (800102c <MX_TIM1_Init+0x1b0>)
 8000f84:	2204      	movs	r2, #4
 8000f86:	0018      	movs	r0, r3
 8000f88:	f002 fd00 	bl	800398c <HAL_TIM_PWM_ConfigChannel>
 8000f8c:	1e03      	subs	r3, r0, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000f90:	f7ff fdf3 	bl	8000b7a <Error_Handler>
  }
  sConfigOC.Pulse = pulse_width_MC_OUT_PWM_3;
 8000f94:	4b28      	ldr	r3, [pc, #160]	@ (8001038 <MX_TIM1_Init+0x1bc>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	001a      	movs	r2, r3
 8000f9a:	2138      	movs	r1, #56	@ 0x38
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fa0:	1879      	adds	r1, r7, r1
 8000fa2:	4b22      	ldr	r3, [pc, #136]	@ (800102c <MX_TIM1_Init+0x1b0>)
 8000fa4:	2208      	movs	r2, #8
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f002 fcf0 	bl	800398c <HAL_TIM_PWM_ConfigChannel>
 8000fac:	1e03      	subs	r3, r0, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000fb0:	f7ff fde3 	bl	8000b7a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2200      	movs	r2, #0
 8000fca:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	2280      	movs	r2, #128	@ 0x80
 8000fd6:	0192      	lsls	r2, r2, #6
 8000fd8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	2200      	movs	r2, #0
 8000fea:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	2280      	movs	r2, #128	@ 0x80
 8000ff0:	0492      	lsls	r2, r2, #18
 8000ff2:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	2200      	movs	r2, #0
 8001004:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001006:	1d3a      	adds	r2, r7, #4
 8001008:	4b08      	ldr	r3, [pc, #32]	@ (800102c <MX_TIM1_Init+0x1b0>)
 800100a:	0011      	movs	r1, r2
 800100c:	0018      	movs	r0, r3
 800100e:	f003 fbd7 	bl	80047c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001012:	1e03      	subs	r3, r0, #0
 8001014:	d001      	beq.n	800101a <MX_TIM1_Init+0x19e>
  {
    Error_Handler();
 8001016:	f7ff fdb0 	bl	8000b7a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800101a:	4b04      	ldr	r3, [pc, #16]	@ (800102c <MX_TIM1_Init+0x1b0>)
 800101c:	0018      	movs	r0, r3
 800101e:	f000 fb0b 	bl	8001638 <HAL_TIM_MspPostInit>

}
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	46bd      	mov	sp, r7
 8001026:	b01c      	add	sp, #112	@ 0x70
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			@ (mov r8, r8)
 800102c:	2000013c 	.word	0x2000013c
 8001030:	40012c00 	.word	0x40012c00
 8001034:	2000001c 	.word	0x2000001c
 8001038:	20000028 	.word	0x20000028

0800103c <MX_TIM2_Init>:
/*TIM2 init function */
void MX_TIM2_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08e      	sub	sp, #56	@ 0x38
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001042:	2328      	movs	r3, #40	@ 0x28
 8001044:	18fb      	adds	r3, r7, r3
 8001046:	0018      	movs	r0, r3
 8001048:	2310      	movs	r3, #16
 800104a:	001a      	movs	r2, r3
 800104c:	2100      	movs	r1, #0
 800104e:	f004 fc11 	bl	8005874 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001052:	231c      	movs	r3, #28
 8001054:	18fb      	adds	r3, r7, r3
 8001056:	0018      	movs	r0, r3
 8001058:	230c      	movs	r3, #12
 800105a:	001a      	movs	r2, r3
 800105c:	2100      	movs	r1, #0
 800105e:	f004 fc09 	bl	8005874 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001062:	003b      	movs	r3, r7
 8001064:	0018      	movs	r0, r3
 8001066:	231c      	movs	r3, #28
 8001068:	001a      	movs	r2, r3
 800106a:	2100      	movs	r1, #0
 800106c:	f004 fc02 	bl	8005874 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001070:	4b35      	ldr	r3, [pc, #212]	@ (8001148 <MX_TIM2_Init+0x10c>)
 8001072:	2280      	movs	r2, #128	@ 0x80
 8001074:	05d2      	lsls	r2, r2, #23
 8001076:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8001078:	4b33      	ldr	r3, [pc, #204]	@ (8001148 <MX_TIM2_Init+0x10c>)
 800107a:	223f      	movs	r2, #63	@ 0x3f
 800107c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107e:	4b32      	ldr	r3, [pc, #200]	@ (8001148 <MX_TIM2_Init+0x10c>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001084:	4b30      	ldr	r3, [pc, #192]	@ (8001148 <MX_TIM2_Init+0x10c>)
 8001086:	2201      	movs	r2, #1
 8001088:	4252      	negs	r2, r2
 800108a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108c:	4b2e      	ldr	r3, [pc, #184]	@ (8001148 <MX_TIM2_Init+0x10c>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001092:	4b2d      	ldr	r3, [pc, #180]	@ (8001148 <MX_TIM2_Init+0x10c>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001098:	4b2b      	ldr	r3, [pc, #172]	@ (8001148 <MX_TIM2_Init+0x10c>)
 800109a:	0018      	movs	r0, r3
 800109c:	f002 f90c 	bl	80032b8 <HAL_TIM_Base_Init>
 80010a0:	1e03      	subs	r3, r0, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80010a4:	f7ff fd69 	bl	8000b7a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a8:	2128      	movs	r1, #40	@ 0x28
 80010aa:	187b      	adds	r3, r7, r1
 80010ac:	2280      	movs	r2, #128	@ 0x80
 80010ae:	0152      	lsls	r2, r2, #5
 80010b0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010b2:	187a      	adds	r2, r7, r1
 80010b4:	4b24      	ldr	r3, [pc, #144]	@ (8001148 <MX_TIM2_Init+0x10c>)
 80010b6:	0011      	movs	r1, r2
 80010b8:	0018      	movs	r0, r3
 80010ba:	f002 fd67 	bl	8003b8c <HAL_TIM_ConfigClockSource>
 80010be:	1e03      	subs	r3, r0, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80010c2:	f7ff fd5a 	bl	8000b7a <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80010c6:	4b20      	ldr	r3, [pc, #128]	@ (8001148 <MX_TIM2_Init+0x10c>)
 80010c8:	0018      	movs	r0, r3
 80010ca:	f002 f94d 	bl	8003368 <HAL_TIM_OC_Init>
 80010ce:	1e03      	subs	r3, r0, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80010d2:	f7ff fd52 	bl	8000b7a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d6:	211c      	movs	r1, #28
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010de:	187b      	adds	r3, r7, r1
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010e4:	187a      	adds	r2, r7, r1
 80010e6:	4b18      	ldr	r3, [pc, #96]	@ (8001148 <MX_TIM2_Init+0x10c>)
 80010e8:	0011      	movs	r1, r2
 80010ea:	0018      	movs	r0, r3
 80010ec:	f003 fafa 	bl	80046e4 <HAL_TIMEx_MasterConfigSynchronization>
 80010f0:	1e03      	subs	r3, r0, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80010f4:	f7ff fd41 	bl	8000b7a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80010f8:	003b      	movs	r3, r7
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 3000000;
 80010fe:	003b      	movs	r3, r7
 8001100:	4a12      	ldr	r2, [pc, #72]	@ (800114c <MX_TIM2_Init+0x110>)
 8001102:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001104:	003b      	movs	r3, r7
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800110a:	003b      	movs	r3, r7
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001110:	0039      	movs	r1, r7
 8001112:	4b0d      	ldr	r3, [pc, #52]	@ (8001148 <MX_TIM2_Init+0x10c>)
 8001114:	2200      	movs	r2, #0
 8001116:	0018      	movs	r0, r3
 8001118:	f002 fbd8 	bl	80038cc <HAL_TIM_OC_ConfigChannel>
 800111c:	1e03      	subs	r3, r0, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001120:	f7ff fd2b 	bl	8000b7a <Error_Handler>
  }
  sConfigOC.Pulse = 35000000;
 8001124:	003b      	movs	r3, r7
 8001126:	4a0a      	ldr	r2, [pc, #40]	@ (8001150 <MX_TIM2_Init+0x114>)
 8001128:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800112a:	0039      	movs	r1, r7
 800112c:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <MX_TIM2_Init+0x10c>)
 800112e:	2204      	movs	r2, #4
 8001130:	0018      	movs	r0, r3
 8001132:	f002 fbcb 	bl	80038cc <HAL_TIM_OC_ConfigChannel>
 8001136:	1e03      	subs	r3, r0, #0
 8001138:	d001      	beq.n	800113e <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 800113a:	f7ff fd1e 	bl	8000b7a <Error_Handler>
  }
}
 800113e:	46c0      	nop			@ (mov r8, r8)
 8001140:	46bd      	mov	sp, r7
 8001142:	b00e      	add	sp, #56	@ 0x38
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			@ (mov r8, r8)
 8001148:	20000188 	.word	0x20000188
 800114c:	002dc6c0 	.word	0x002dc6c0
 8001150:	02160ec0 	.word	0x02160ec0

08001154 <MX_TIM3_Init>:
/* TIM3 init function */

void MX_TIM3_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08e      	sub	sp, #56	@ 0x38
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115a:	2328      	movs	r3, #40	@ 0x28
 800115c:	18fb      	adds	r3, r7, r3
 800115e:	0018      	movs	r0, r3
 8001160:	2310      	movs	r3, #16
 8001162:	001a      	movs	r2, r3
 8001164:	2100      	movs	r1, #0
 8001166:	f004 fb85 	bl	8005874 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116a:	231c      	movs	r3, #28
 800116c:	18fb      	adds	r3, r7, r3
 800116e:	0018      	movs	r0, r3
 8001170:	230c      	movs	r3, #12
 8001172:	001a      	movs	r2, r3
 8001174:	2100      	movs	r1, #0
 8001176:	f004 fb7d 	bl	8005874 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800117a:	003b      	movs	r3, r7
 800117c:	0018      	movs	r0, r3
 800117e:	231c      	movs	r3, #28
 8001180:	001a      	movs	r2, r3
 8001182:	2100      	movs	r1, #0
 8001184:	f004 fb76 	bl	8005874 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001188:	4b38      	ldr	r3, [pc, #224]	@ (800126c <MX_TIM3_Init+0x118>)
 800118a:	4a39      	ldr	r2, [pc, #228]	@ (8001270 <MX_TIM3_Init+0x11c>)
 800118c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 25;
 800118e:	4b37      	ldr	r3, [pc, #220]	@ (800126c <MX_TIM3_Init+0x118>)
 8001190:	2219      	movs	r2, #25
 8001192:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001194:	4b35      	ldr	r3, [pc, #212]	@ (800126c <MX_TIM3_Init+0x118>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800119a:	4b34      	ldr	r3, [pc, #208]	@ (800126c <MX_TIM3_Init+0x118>)
 800119c:	2263      	movs	r2, #99	@ 0x63
 800119e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a0:	4b32      	ldr	r3, [pc, #200]	@ (800126c <MX_TIM3_Init+0x118>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a6:	4b31      	ldr	r3, [pc, #196]	@ (800126c <MX_TIM3_Init+0x118>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011ac:	4b2f      	ldr	r3, [pc, #188]	@ (800126c <MX_TIM3_Init+0x118>)
 80011ae:	0018      	movs	r0, r3
 80011b0:	f002 f882 	bl	80032b8 <HAL_TIM_Base_Init>
 80011b4:	1e03      	subs	r3, r0, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80011b8:	f7ff fcdf 	bl	8000b7a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011bc:	2128      	movs	r1, #40	@ 0x28
 80011be:	187b      	adds	r3, r7, r1
 80011c0:	2280      	movs	r2, #128	@ 0x80
 80011c2:	0152      	lsls	r2, r2, #5
 80011c4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011c6:	187a      	adds	r2, r7, r1
 80011c8:	4b28      	ldr	r3, [pc, #160]	@ (800126c <MX_TIM3_Init+0x118>)
 80011ca:	0011      	movs	r1, r2
 80011cc:	0018      	movs	r0, r3
 80011ce:	f002 fcdd 	bl	8003b8c <HAL_TIM_ConfigClockSource>
 80011d2:	1e03      	subs	r3, r0, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80011d6:	f7ff fcd0 	bl	8000b7a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011da:	4b24      	ldr	r3, [pc, #144]	@ (800126c <MX_TIM3_Init+0x118>)
 80011dc:	0018      	movs	r0, r3
 80011de:	f002 f923 	bl	8003428 <HAL_TIM_PWM_Init>
 80011e2:	1e03      	subs	r3, r0, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80011e6:	f7ff fcc8 	bl	8000b7a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ea:	211c      	movs	r1, #28
 80011ec:	187b      	adds	r3, r7, r1
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f2:	187b      	adds	r3, r7, r1
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011f8:	187a      	adds	r2, r7, r1
 80011fa:	4b1c      	ldr	r3, [pc, #112]	@ (800126c <MX_TIM3_Init+0x118>)
 80011fc:	0011      	movs	r1, r2
 80011fe:	0018      	movs	r0, r3
 8001200:	f003 fa70 	bl	80046e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001204:	1e03      	subs	r3, r0, #0
 8001206:	d001      	beq.n	800120c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8001208:	f7ff fcb7 	bl	8000b7a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800120c:	003b      	movs	r3, r7
 800120e:	2260      	movs	r2, #96	@ 0x60
 8001210:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = pulse_width_MC_OUT_PWM_1;
 8001212:	4b18      	ldr	r3, [pc, #96]	@ (8001274 <MX_TIM3_Init+0x120>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	001a      	movs	r2, r3
 8001218:	003b      	movs	r3, r7
 800121a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800121c:	003b      	movs	r3, r7
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001222:	003b      	movs	r3, r7
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001228:	0039      	movs	r1, r7
 800122a:	4b10      	ldr	r3, [pc, #64]	@ (800126c <MX_TIM3_Init+0x118>)
 800122c:	2200      	movs	r2, #0
 800122e:	0018      	movs	r0, r3
 8001230:	f002 fbac 	bl	800398c <HAL_TIM_PWM_ConfigChannel>
 8001234:	1e03      	subs	r3, r0, #0
 8001236:	d001      	beq.n	800123c <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 8001238:	f7ff fc9f 	bl	8000b7a <Error_Handler>
  }
  sConfigOC.Pulse = pulse_width_MC_OUT_PWM_2;
 800123c:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <MX_TIM3_Init+0x124>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	001a      	movs	r2, r3
 8001242:	003b      	movs	r3, r7
 8001244:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001246:	0039      	movs	r1, r7
 8001248:	4b08      	ldr	r3, [pc, #32]	@ (800126c <MX_TIM3_Init+0x118>)
 800124a:	2204      	movs	r2, #4
 800124c:	0018      	movs	r0, r3
 800124e:	f002 fb9d 	bl	800398c <HAL_TIM_PWM_ConfigChannel>
 8001252:	1e03      	subs	r3, r0, #0
 8001254:	d001      	beq.n	800125a <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8001256:	f7ff fc90 	bl	8000b7a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800125a:	4b04      	ldr	r3, [pc, #16]	@ (800126c <MX_TIM3_Init+0x118>)
 800125c:	0018      	movs	r0, r3
 800125e:	f000 f9eb 	bl	8001638 <HAL_TIM_MspPostInit>

}
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	46bd      	mov	sp, r7
 8001266:	b00e      	add	sp, #56	@ 0x38
 8001268:	bd80      	pop	{r7, pc}
 800126a:	46c0      	nop			@ (mov r8, r8)
 800126c:	200001d4 	.word	0x200001d4
 8001270:	40000400 	.word	0x40000400
 8001274:	20000020 	.word	0x20000020
 8001278:	20000024 	.word	0x20000024

0800127c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001280:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <MX_TIM14_Init+0x40>)
 8001282:	4a0f      	ldr	r2, [pc, #60]	@ (80012c0 <MX_TIM14_Init+0x44>)
 8001284:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 15999;
 8001286:	4b0d      	ldr	r3, [pc, #52]	@ (80012bc <MX_TIM14_Init+0x40>)
 8001288:	4a0e      	ldr	r2, [pc, #56]	@ (80012c4 <MX_TIM14_Init+0x48>)
 800128a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128c:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <MX_TIM14_Init+0x40>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 8001292:	4b0a      	ldr	r3, [pc, #40]	@ (80012bc <MX_TIM14_Init+0x40>)
 8001294:	2263      	movs	r2, #99	@ 0x63
 8001296:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001298:	4b08      	ldr	r3, [pc, #32]	@ (80012bc <MX_TIM14_Init+0x40>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129e:	4b07      	ldr	r3, [pc, #28]	@ (80012bc <MX_TIM14_Init+0x40>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80012a4:	4b05      	ldr	r3, [pc, #20]	@ (80012bc <MX_TIM14_Init+0x40>)
 80012a6:	0018      	movs	r0, r3
 80012a8:	f002 f806 	bl	80032b8 <HAL_TIM_Base_Init>
 80012ac:	1e03      	subs	r3, r0, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80012b0:	f7ff fc63 	bl	8000b7a <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80012b4:	46c0      	nop			@ (mov r8, r8)
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	46c0      	nop			@ (mov r8, r8)
 80012bc:	20000220 	.word	0x20000220
 80012c0:	40002000 	.word	0x40002000
 80012c4:	00003e7f 	.word	0x00003e7f

080012c8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b094      	sub	sp, #80	@ 0x50
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ce:	2334      	movs	r3, #52	@ 0x34
 80012d0:	18fb      	adds	r3, r7, r3
 80012d2:	0018      	movs	r0, r3
 80012d4:	231c      	movs	r3, #28
 80012d6:	001a      	movs	r2, r3
 80012d8:	2100      	movs	r1, #0
 80012da:	f004 facb 	bl	8005874 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012de:	003b      	movs	r3, r7
 80012e0:	0018      	movs	r0, r3
 80012e2:	2334      	movs	r3, #52	@ 0x34
 80012e4:	001a      	movs	r2, r3
 80012e6:	2100      	movs	r1, #0
 80012e8:	f004 fac4 	bl	8005874 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80012ec:	4b38      	ldr	r3, [pc, #224]	@ (80013d0 <MX_TIM16_Init+0x108>)
 80012ee:	4a39      	ldr	r2, [pc, #228]	@ (80013d4 <MX_TIM16_Init+0x10c>)
 80012f0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 25;
 80012f2:	4b37      	ldr	r3, [pc, #220]	@ (80013d0 <MX_TIM16_Init+0x108>)
 80012f4:	2219      	movs	r2, #25
 80012f6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f8:	4b35      	ldr	r3, [pc, #212]	@ (80013d0 <MX_TIM16_Init+0x108>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 99;
 80012fe:	4b34      	ldr	r3, [pc, #208]	@ (80013d0 <MX_TIM16_Init+0x108>)
 8001300:	2263      	movs	r2, #99	@ 0x63
 8001302:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001304:	4b32      	ldr	r3, [pc, #200]	@ (80013d0 <MX_TIM16_Init+0x108>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800130a:	4b31      	ldr	r3, [pc, #196]	@ (80013d0 <MX_TIM16_Init+0x108>)
 800130c:	2200      	movs	r2, #0
 800130e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001310:	4b2f      	ldr	r3, [pc, #188]	@ (80013d0 <MX_TIM16_Init+0x108>)
 8001312:	2200      	movs	r2, #0
 8001314:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001316:	4b2e      	ldr	r3, [pc, #184]	@ (80013d0 <MX_TIM16_Init+0x108>)
 8001318:	0018      	movs	r0, r3
 800131a:	f001 ffcd 	bl	80032b8 <HAL_TIM_Base_Init>
 800131e:	1e03      	subs	r3, r0, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8001322:	f7ff fc2a 	bl	8000b7a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001326:	4b2a      	ldr	r3, [pc, #168]	@ (80013d0 <MX_TIM16_Init+0x108>)
 8001328:	0018      	movs	r0, r3
 800132a:	f002 f87d 	bl	8003428 <HAL_TIM_PWM_Init>
 800132e:	1e03      	subs	r3, r0, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8001332:	f7ff fc22 	bl	8000b7a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001336:	2134      	movs	r1, #52	@ 0x34
 8001338:	187b      	adds	r3, r7, r1
 800133a:	2260      	movs	r2, #96	@ 0x60
 800133c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = pulse_width_MC_OUT_PWM_5;
 800133e:	4b26      	ldr	r3, [pc, #152]	@ (80013d8 <MX_TIM16_Init+0x110>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	001a      	movs	r2, r3
 8001344:	187b      	adds	r3, r7, r1
 8001346:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001348:	187b      	adds	r3, r7, r1
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800134e:	187b      	adds	r3, r7, r1
 8001350:	2200      	movs	r2, #0
 8001352:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001354:	187b      	adds	r3, r7, r1
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800135a:	187b      	adds	r3, r7, r1
 800135c:	2200      	movs	r2, #0
 800135e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001360:	187b      	adds	r3, r7, r1
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001366:	1879      	adds	r1, r7, r1
 8001368:	4b19      	ldr	r3, [pc, #100]	@ (80013d0 <MX_TIM16_Init+0x108>)
 800136a:	2200      	movs	r2, #0
 800136c:	0018      	movs	r0, r3
 800136e:	f002 fb0d 	bl	800398c <HAL_TIM_PWM_ConfigChannel>
 8001372:	1e03      	subs	r3, r0, #0
 8001374:	d001      	beq.n	800137a <MX_TIM16_Init+0xb2>
  {
    Error_Handler();
 8001376:	f7ff fc00 	bl	8000b7a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800137a:	003b      	movs	r3, r7
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001380:	003b      	movs	r3, r7
 8001382:	2200      	movs	r2, #0
 8001384:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001386:	003b      	movs	r3, r7
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800138c:	003b      	movs	r3, r7
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001392:	003b      	movs	r3, r7
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001398:	003b      	movs	r3, r7
 800139a:	2280      	movs	r2, #128	@ 0x80
 800139c:	0192      	lsls	r2, r2, #6
 800139e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013a0:	003b      	movs	r3, r7
 80013a2:	2200      	movs	r2, #0
 80013a4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013a6:	003b      	movs	r3, r7
 80013a8:	2200      	movs	r2, #0
 80013aa:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80013ac:	003a      	movs	r2, r7
 80013ae:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <MX_TIM16_Init+0x108>)
 80013b0:	0011      	movs	r1, r2
 80013b2:	0018      	movs	r0, r3
 80013b4:	f003 fa04 	bl	80047c0 <HAL_TIMEx_ConfigBreakDeadTime>
 80013b8:	1e03      	subs	r3, r0, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM16_Init+0xf8>
  {
    Error_Handler();
 80013bc:	f7ff fbdd 	bl	8000b7a <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80013c0:	4b03      	ldr	r3, [pc, #12]	@ (80013d0 <MX_TIM16_Init+0x108>)
 80013c2:	0018      	movs	r0, r3
 80013c4:	f000 f938 	bl	8001638 <HAL_TIM_MspPostInit>

}
 80013c8:	46c0      	nop			@ (mov r8, r8)
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b014      	add	sp, #80	@ 0x50
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	2000026c 	.word	0x2000026c
 80013d4:	40014400 	.word	0x40014400
 80013d8:	20000030 	.word	0x20000030

080013dc <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b094      	sub	sp, #80	@ 0x50
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80013e2:	2334      	movs	r3, #52	@ 0x34
 80013e4:	18fb      	adds	r3, r7, r3
 80013e6:	0018      	movs	r0, r3
 80013e8:	231c      	movs	r3, #28
 80013ea:	001a      	movs	r2, r3
 80013ec:	2100      	movs	r1, #0
 80013ee:	f004 fa41 	bl	8005874 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013f2:	003b      	movs	r3, r7
 80013f4:	0018      	movs	r0, r3
 80013f6:	2334      	movs	r3, #52	@ 0x34
 80013f8:	001a      	movs	r2, r3
 80013fa:	2100      	movs	r1, #0
 80013fc:	f004 fa3a 	bl	8005874 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001400:	4b38      	ldr	r3, [pc, #224]	@ (80014e4 <MX_TIM17_Init+0x108>)
 8001402:	4a39      	ldr	r2, [pc, #228]	@ (80014e8 <MX_TIM17_Init+0x10c>)
 8001404:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 25;
 8001406:	4b37      	ldr	r3, [pc, #220]	@ (80014e4 <MX_TIM17_Init+0x108>)
 8001408:	2219      	movs	r2, #25
 800140a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140c:	4b35      	ldr	r3, [pc, #212]	@ (80014e4 <MX_TIM17_Init+0x108>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 99;
 8001412:	4b34      	ldr	r3, [pc, #208]	@ (80014e4 <MX_TIM17_Init+0x108>)
 8001414:	2263      	movs	r2, #99	@ 0x63
 8001416:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001418:	4b32      	ldr	r3, [pc, #200]	@ (80014e4 <MX_TIM17_Init+0x108>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800141e:	4b31      	ldr	r3, [pc, #196]	@ (80014e4 <MX_TIM17_Init+0x108>)
 8001420:	2200      	movs	r2, #0
 8001422:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001424:	4b2f      	ldr	r3, [pc, #188]	@ (80014e4 <MX_TIM17_Init+0x108>)
 8001426:	2200      	movs	r2, #0
 8001428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800142a:	4b2e      	ldr	r3, [pc, #184]	@ (80014e4 <MX_TIM17_Init+0x108>)
 800142c:	0018      	movs	r0, r3
 800142e:	f001 ff43 	bl	80032b8 <HAL_TIM_Base_Init>
 8001432:	1e03      	subs	r3, r0, #0
 8001434:	d001      	beq.n	800143a <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8001436:	f7ff fba0 	bl	8000b7a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800143a:	4b2a      	ldr	r3, [pc, #168]	@ (80014e4 <MX_TIM17_Init+0x108>)
 800143c:	0018      	movs	r0, r3
 800143e:	f001 fff3 	bl	8003428 <HAL_TIM_PWM_Init>
 8001442:	1e03      	subs	r3, r0, #0
 8001444:	d001      	beq.n	800144a <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8001446:	f7ff fb98 	bl	8000b7a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800144a:	2134      	movs	r1, #52	@ 0x34
 800144c:	187b      	adds	r3, r7, r1
 800144e:	2260      	movs	r2, #96	@ 0x60
 8001450:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = pulse_width_MC_OUT_PWM_4;
 8001452:	4b26      	ldr	r3, [pc, #152]	@ (80014ec <MX_TIM17_Init+0x110>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	001a      	movs	r2, r3
 8001458:	187b      	adds	r3, r7, r1
 800145a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800145c:	187b      	adds	r3, r7, r1
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001462:	187b      	adds	r3, r7, r1
 8001464:	2200      	movs	r2, #0
 8001466:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001468:	187b      	adds	r3, r7, r1
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800146e:	187b      	adds	r3, r7, r1
 8001470:	2200      	movs	r2, #0
 8001472:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001474:	187b      	adds	r3, r7, r1
 8001476:	2200      	movs	r2, #0
 8001478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800147a:	1879      	adds	r1, r7, r1
 800147c:	4b19      	ldr	r3, [pc, #100]	@ (80014e4 <MX_TIM17_Init+0x108>)
 800147e:	2200      	movs	r2, #0
 8001480:	0018      	movs	r0, r3
 8001482:	f002 fa83 	bl	800398c <HAL_TIM_PWM_ConfigChannel>
 8001486:	1e03      	subs	r3, r0, #0
 8001488:	d001      	beq.n	800148e <MX_TIM17_Init+0xb2>
  {
    Error_Handler();
 800148a:	f7ff fb76 	bl	8000b7a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800148e:	003b      	movs	r3, r7
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001494:	003b      	movs	r3, r7
 8001496:	2200      	movs	r2, #0
 8001498:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800149a:	003b      	movs	r3, r7
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014a0:	003b      	movs	r3, r7
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014a6:	003b      	movs	r3, r7
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014ac:	003b      	movs	r3, r7
 80014ae:	2280      	movs	r2, #128	@ 0x80
 80014b0:	0192      	lsls	r2, r2, #6
 80014b2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014b4:	003b      	movs	r3, r7
 80014b6:	2200      	movs	r2, #0
 80014b8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014ba:	003b      	movs	r3, r7
 80014bc:	2200      	movs	r2, #0
 80014be:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80014c0:	003a      	movs	r2, r7
 80014c2:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <MX_TIM17_Init+0x108>)
 80014c4:	0011      	movs	r1, r2
 80014c6:	0018      	movs	r0, r3
 80014c8:	f003 f97a 	bl	80047c0 <HAL_TIMEx_ConfigBreakDeadTime>
 80014cc:	1e03      	subs	r3, r0, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM17_Init+0xf8>
  {
    Error_Handler();
 80014d0:	f7ff fb53 	bl	8000b7a <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80014d4:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <MX_TIM17_Init+0x108>)
 80014d6:	0018      	movs	r0, r3
 80014d8:	f000 f8ae 	bl	8001638 <HAL_TIM_MspPostInit>

}
 80014dc:	46c0      	nop			@ (mov r8, r8)
 80014de:	46bd      	mov	sp, r7
 80014e0:	b014      	add	sp, #80	@ 0x50
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200002b8 	.word	0x200002b8
 80014e8:	40014800 	.word	0x40014800
 80014ec:	2000002c 	.word	0x2000002c

080014f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b095      	sub	sp, #84	@ 0x54
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f8:	241c      	movs	r4, #28
 80014fa:	193b      	adds	r3, r7, r4
 80014fc:	0018      	movs	r0, r3
 80014fe:	2334      	movs	r3, #52	@ 0x34
 8001500:	001a      	movs	r2, r3
 8001502:	2100      	movs	r1, #0
 8001504:	f004 f9b6 	bl	8005874 <memset>
  if(tim_baseHandle->Instance==TIM1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a44      	ldr	r2, [pc, #272]	@ (8001620 <HAL_TIM_Base_MspInit+0x130>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d12d      	bne.n	800156e <HAL_TIM_Base_MspInit+0x7e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001512:	193b      	adds	r3, r7, r4
 8001514:	2280      	movs	r2, #128	@ 0x80
 8001516:	0392      	lsls	r2, r2, #14
 8001518:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800151a:	193b      	adds	r3, r7, r4
 800151c:	2200      	movs	r2, #0
 800151e:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001520:	193b      	adds	r3, r7, r4
 8001522:	0018      	movs	r0, r3
 8001524:	f001 fb46 	bl	8002bb4 <HAL_RCCEx_PeriphCLKConfig>
 8001528:	1e03      	subs	r3, r0, #0
 800152a:	d001      	beq.n	8001530 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 800152c:	f7ff fb25 	bl	8000b7a <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001530:	4b3c      	ldr	r3, [pc, #240]	@ (8001624 <HAL_TIM_Base_MspInit+0x134>)
 8001532:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001534:	4b3b      	ldr	r3, [pc, #236]	@ (8001624 <HAL_TIM_Base_MspInit+0x134>)
 8001536:	2180      	movs	r1, #128	@ 0x80
 8001538:	0109      	lsls	r1, r1, #4
 800153a:	430a      	orrs	r2, r1
 800153c:	641a      	str	r2, [r3, #64]	@ 0x40
 800153e:	4b39      	ldr	r3, [pc, #228]	@ (8001624 <HAL_TIM_Base_MspInit+0x134>)
 8001540:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001542:	2380      	movs	r3, #128	@ 0x80
 8001544:	011b      	lsls	r3, r3, #4
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
 800154a:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	2100      	movs	r1, #0
 8001550:	200d      	movs	r0, #13
 8001552:	f000 fb2d 	bl	8001bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001556:	200d      	movs	r0, #13
 8001558:	f000 fb3f 	bl	8001bda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800155c:	2200      	movs	r2, #0
 800155e:	2100      	movs	r1, #0
 8001560:	200e      	movs	r0, #14
 8001562:	f000 fb25 	bl	8001bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001566:	200e      	movs	r0, #14
 8001568:	f000 fb37 	bl	8001bda <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800156c:	e054      	b.n	8001618 <HAL_TIM_Base_MspInit+0x128>
  else if(tim_baseHandle->Instance==TIM3)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a2d      	ldr	r2, [pc, #180]	@ (8001628 <HAL_TIM_Base_MspInit+0x138>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d10c      	bne.n	8001592 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001578:	4b2a      	ldr	r3, [pc, #168]	@ (8001624 <HAL_TIM_Base_MspInit+0x134>)
 800157a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800157c:	4b29      	ldr	r3, [pc, #164]	@ (8001624 <HAL_TIM_Base_MspInit+0x134>)
 800157e:	2102      	movs	r1, #2
 8001580:	430a      	orrs	r2, r1
 8001582:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001584:	4b27      	ldr	r3, [pc, #156]	@ (8001624 <HAL_TIM_Base_MspInit+0x134>)
 8001586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001588:	2202      	movs	r2, #2
 800158a:	4013      	ands	r3, r2
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	697b      	ldr	r3, [r7, #20]
}
 8001590:	e042      	b.n	8001618 <HAL_TIM_Base_MspInit+0x128>
  else if(tim_baseHandle->Instance==TIM14)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a25      	ldr	r2, [pc, #148]	@ (800162c <HAL_TIM_Base_MspInit+0x13c>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d116      	bne.n	80015ca <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800159c:	4b21      	ldr	r3, [pc, #132]	@ (8001624 <HAL_TIM_Base_MspInit+0x134>)
 800159e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015a0:	4b20      	ldr	r3, [pc, #128]	@ (8001624 <HAL_TIM_Base_MspInit+0x134>)
 80015a2:	2180      	movs	r1, #128	@ 0x80
 80015a4:	0209      	lsls	r1, r1, #8
 80015a6:	430a      	orrs	r2, r1
 80015a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80015aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001624 <HAL_TIM_Base_MspInit+0x134>)
 80015ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015ae:	2380      	movs	r3, #128	@ 0x80
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2100      	movs	r1, #0
 80015bc:	2013      	movs	r0, #19
 80015be:	f000 faf7 	bl	8001bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80015c2:	2013      	movs	r0, #19
 80015c4:	f000 fb09 	bl	8001bda <HAL_NVIC_EnableIRQ>
}
 80015c8:	e026      	b.n	8001618 <HAL_TIM_Base_MspInit+0x128>
  else if(tim_baseHandle->Instance==TIM16)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a18      	ldr	r2, [pc, #96]	@ (8001630 <HAL_TIM_Base_MspInit+0x140>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d10e      	bne.n	80015f2 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80015d4:	4b13      	ldr	r3, [pc, #76]	@ (8001624 <HAL_TIM_Base_MspInit+0x134>)
 80015d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015d8:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <HAL_TIM_Base_MspInit+0x134>)
 80015da:	2180      	movs	r1, #128	@ 0x80
 80015dc:	0289      	lsls	r1, r1, #10
 80015de:	430a      	orrs	r2, r1
 80015e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80015e2:	4b10      	ldr	r3, [pc, #64]	@ (8001624 <HAL_TIM_Base_MspInit+0x134>)
 80015e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015e6:	2380      	movs	r3, #128	@ 0x80
 80015e8:	029b      	lsls	r3, r3, #10
 80015ea:	4013      	ands	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	e012      	b.n	8001618 <HAL_TIM_Base_MspInit+0x128>
  else if(tim_baseHandle->Instance==TIM17)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001634 <HAL_TIM_Base_MspInit+0x144>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d10d      	bne.n	8001618 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80015fc:	4b09      	ldr	r3, [pc, #36]	@ (8001624 <HAL_TIM_Base_MspInit+0x134>)
 80015fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001600:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <HAL_TIM_Base_MspInit+0x134>)
 8001602:	2180      	movs	r1, #128	@ 0x80
 8001604:	02c9      	lsls	r1, r1, #11
 8001606:	430a      	orrs	r2, r1
 8001608:	641a      	str	r2, [r3, #64]	@ 0x40
 800160a:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <HAL_TIM_Base_MspInit+0x134>)
 800160c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800160e:	2380      	movs	r3, #128	@ 0x80
 8001610:	02db      	lsls	r3, r3, #11
 8001612:	4013      	ands	r3, r2
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	68bb      	ldr	r3, [r7, #8]
}
 8001618:	46c0      	nop			@ (mov r8, r8)
 800161a:	46bd      	mov	sp, r7
 800161c:	b015      	add	sp, #84	@ 0x54
 800161e:	bd90      	pop	{r4, r7, pc}
 8001620:	40012c00 	.word	0x40012c00
 8001624:	40021000 	.word	0x40021000
 8001628:	40000400 	.word	0x40000400
 800162c:	40002000 	.word	0x40002000
 8001630:	40014400 	.word	0x40014400
 8001634:	40014800 	.word	0x40014800

08001638 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b08d      	sub	sp, #52	@ 0x34
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	241c      	movs	r4, #28
 8001642:	193b      	adds	r3, r7, r4
 8001644:	0018      	movs	r0, r3
 8001646:	2314      	movs	r3, #20
 8001648:	001a      	movs	r2, r3
 800164a:	2100      	movs	r1, #0
 800164c:	f004 f912 	bl	8005874 <memset>
  if(timHandle->Instance==TIM1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a50      	ldr	r2, [pc, #320]	@ (8001798 <HAL_TIM_MspPostInit+0x160>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d122      	bne.n	80016a0 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165a:	4b50      	ldr	r3, [pc, #320]	@ (800179c <HAL_TIM_MspPostInit+0x164>)
 800165c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800165e:	4b4f      	ldr	r3, [pc, #316]	@ (800179c <HAL_TIM_MspPostInit+0x164>)
 8001660:	2102      	movs	r1, #2
 8001662:	430a      	orrs	r2, r1
 8001664:	635a      	str	r2, [r3, #52]	@ 0x34
 8001666:	4b4d      	ldr	r3, [pc, #308]	@ (800179c <HAL_TIM_MspPostInit+0x164>)
 8001668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800166a:	2202      	movs	r2, #2
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
 8001670:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PB3     ------> TIM1_CH2
    PB6     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = MC_PWM_OUT_0_Pin|MC_PWM_OUT_3_Pin;
 8001672:	0021      	movs	r1, r4
 8001674:	187b      	adds	r3, r7, r1
 8001676:	2248      	movs	r2, #72	@ 0x48
 8001678:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	187b      	adds	r3, r7, r1
 800167c:	2202      	movs	r2, #2
 800167e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	187b      	adds	r3, r7, r1
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001686:	187b      	adds	r3, r7, r1
 8001688:	2202      	movs	r2, #2
 800168a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800168c:	187b      	adds	r3, r7, r1
 800168e:	2201      	movs	r2, #1
 8001690:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001692:	187b      	adds	r3, r7, r1
 8001694:	4a42      	ldr	r2, [pc, #264]	@ (80017a0 <HAL_TIM_MspPostInit+0x168>)
 8001696:	0019      	movs	r1, r3
 8001698:	0010      	movs	r0, r2
 800169a:	f000 fabb 	bl	8001c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800169e:	e077      	b.n	8001790 <HAL_TIM_MspPostInit+0x158>
  else if(timHandle->Instance==TIM3)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a3f      	ldr	r2, [pc, #252]	@ (80017a4 <HAL_TIM_MspPostInit+0x16c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d122      	bne.n	80016f0 <HAL_TIM_MspPostInit+0xb8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	4b3c      	ldr	r3, [pc, #240]	@ (800179c <HAL_TIM_MspPostInit+0x164>)
 80016ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016ae:	4b3b      	ldr	r3, [pc, #236]	@ (800179c <HAL_TIM_MspPostInit+0x164>)
 80016b0:	2102      	movs	r1, #2
 80016b2:	430a      	orrs	r2, r1
 80016b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80016b6:	4b39      	ldr	r3, [pc, #228]	@ (800179c <HAL_TIM_MspPostInit+0x164>)
 80016b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016ba:	2202      	movs	r2, #2
 80016bc:	4013      	ands	r3, r2
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MC_PWM_OUT_1_Pin|MC_PWM_OUT_2_Pin;
 80016c2:	211c      	movs	r1, #28
 80016c4:	187b      	adds	r3, r7, r1
 80016c6:	2230      	movs	r2, #48	@ 0x30
 80016c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	187b      	adds	r3, r7, r1
 80016cc:	2202      	movs	r2, #2
 80016ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	187b      	adds	r3, r7, r1
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d6:	187b      	adds	r3, r7, r1
 80016d8:	2202      	movs	r2, #2
 80016da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80016dc:	187b      	adds	r3, r7, r1
 80016de:	2201      	movs	r2, #1
 80016e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e2:	187b      	adds	r3, r7, r1
 80016e4:	4a2e      	ldr	r2, [pc, #184]	@ (80017a0 <HAL_TIM_MspPostInit+0x168>)
 80016e6:	0019      	movs	r1, r3
 80016e8:	0010      	movs	r0, r2
 80016ea:	f000 fa93 	bl	8001c14 <HAL_GPIO_Init>
}
 80016ee:	e04f      	b.n	8001790 <HAL_TIM_MspPostInit+0x158>
  else if(timHandle->Instance==TIM16)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a2c      	ldr	r2, [pc, #176]	@ (80017a8 <HAL_TIM_MspPostInit+0x170>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d123      	bne.n	8001742 <HAL_TIM_MspPostInit+0x10a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	4b28      	ldr	r3, [pc, #160]	@ (800179c <HAL_TIM_MspPostInit+0x164>)
 80016fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016fe:	4b27      	ldr	r3, [pc, #156]	@ (800179c <HAL_TIM_MspPostInit+0x164>)
 8001700:	2102      	movs	r1, #2
 8001702:	430a      	orrs	r2, r1
 8001704:	635a      	str	r2, [r3, #52]	@ 0x34
 8001706:	4b25      	ldr	r3, [pc, #148]	@ (800179c <HAL_TIM_MspPostInit+0x164>)
 8001708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800170a:	2202      	movs	r2, #2
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MC_PWM_OUT_5_Pin;
 8001712:	211c      	movs	r1, #28
 8001714:	187b      	adds	r3, r7, r1
 8001716:	2280      	movs	r2, #128	@ 0x80
 8001718:	0052      	lsls	r2, r2, #1
 800171a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	187b      	adds	r3, r7, r1
 800171e:	2202      	movs	r2, #2
 8001720:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	187b      	adds	r3, r7, r1
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001728:	187b      	adds	r3, r7, r1
 800172a:	2202      	movs	r2, #2
 800172c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 800172e:	187b      	adds	r3, r7, r1
 8001730:	2202      	movs	r2, #2
 8001732:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MC_PWM_OUT_5_GPIO_Port, &GPIO_InitStruct);
 8001734:	187b      	adds	r3, r7, r1
 8001736:	4a1a      	ldr	r2, [pc, #104]	@ (80017a0 <HAL_TIM_MspPostInit+0x168>)
 8001738:	0019      	movs	r1, r3
 800173a:	0010      	movs	r0, r2
 800173c:	f000 fa6a 	bl	8001c14 <HAL_GPIO_Init>
}
 8001740:	e026      	b.n	8001790 <HAL_TIM_MspPostInit+0x158>
  else if(timHandle->Instance==TIM17)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a19      	ldr	r2, [pc, #100]	@ (80017ac <HAL_TIM_MspPostInit+0x174>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d121      	bne.n	8001790 <HAL_TIM_MspPostInit+0x158>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174c:	4b13      	ldr	r3, [pc, #76]	@ (800179c <HAL_TIM_MspPostInit+0x164>)
 800174e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001750:	4b12      	ldr	r3, [pc, #72]	@ (800179c <HAL_TIM_MspPostInit+0x164>)
 8001752:	2102      	movs	r1, #2
 8001754:	430a      	orrs	r2, r1
 8001756:	635a      	str	r2, [r3, #52]	@ 0x34
 8001758:	4b10      	ldr	r3, [pc, #64]	@ (800179c <HAL_TIM_MspPostInit+0x164>)
 800175a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800175c:	2202      	movs	r2, #2
 800175e:	4013      	ands	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MC_PWM_OUT_4_Pin;
 8001764:	211c      	movs	r1, #28
 8001766:	187b      	adds	r3, r7, r1
 8001768:	2280      	movs	r2, #128	@ 0x80
 800176a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	187b      	adds	r3, r7, r1
 800176e:	2202      	movs	r2, #2
 8001770:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	187b      	adds	r3, r7, r1
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001778:	187b      	adds	r3, r7, r1
 800177a:	2202      	movs	r2, #2
 800177c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 800177e:	187b      	adds	r3, r7, r1
 8001780:	2202      	movs	r2, #2
 8001782:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MC_PWM_OUT_4_GPIO_Port, &GPIO_InitStruct);
 8001784:	187b      	adds	r3, r7, r1
 8001786:	4a06      	ldr	r2, [pc, #24]	@ (80017a0 <HAL_TIM_MspPostInit+0x168>)
 8001788:	0019      	movs	r1, r3
 800178a:	0010      	movs	r0, r2
 800178c:	f000 fa42 	bl	8001c14 <HAL_GPIO_Init>
}
 8001790:	46c0      	nop			@ (mov r8, r8)
 8001792:	46bd      	mov	sp, r7
 8001794:	b00d      	add	sp, #52	@ 0x34
 8001796:	bd90      	pop	{r4, r7, pc}
 8001798:	40012c00 	.word	0x40012c00
 800179c:	40021000 	.word	0x40021000
 80017a0:	50000400 	.word	0x50000400
 80017a4:	40000400 	.word	0x40000400
 80017a8:	40014400 	.word	0x40014400
 80017ac:	40014800 	.word	0x40014800

080017b0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017b4:	4b26      	ldr	r3, [pc, #152]	@ (8001850 <MX_USART1_UART_Init+0xa0>)
 80017b6:	4a27      	ldr	r2, [pc, #156]	@ (8001854 <MX_USART1_UART_Init+0xa4>)
 80017b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017ba:	4b25      	ldr	r3, [pc, #148]	@ (8001850 <MX_USART1_UART_Init+0xa0>)
 80017bc:	22e1      	movs	r2, #225	@ 0xe1
 80017be:	0252      	lsls	r2, r2, #9
 80017c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017c2:	4b23      	ldr	r3, [pc, #140]	@ (8001850 <MX_USART1_UART_Init+0xa0>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017c8:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <MX_USART1_UART_Init+0xa0>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017ce:	4b20      	ldr	r3, [pc, #128]	@ (8001850 <MX_USART1_UART_Init+0xa0>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001850 <MX_USART1_UART_Init+0xa0>)
 80017d6:	220c      	movs	r2, #12
 80017d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017da:	4b1d      	ldr	r3, [pc, #116]	@ (8001850 <MX_USART1_UART_Init+0xa0>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001850 <MX_USART1_UART_Init+0xa0>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001850 <MX_USART1_UART_Init+0xa0>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017ec:	4b18      	ldr	r3, [pc, #96]	@ (8001850 <MX_USART1_UART_Init+0xa0>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 80017f2:	4b17      	ldr	r3, [pc, #92]	@ (8001850 <MX_USART1_UART_Init+0xa0>)
 80017f4:	2240      	movs	r2, #64	@ 0x40
 80017f6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 80017f8:	4b15      	ldr	r3, [pc, #84]	@ (8001850 <MX_USART1_UART_Init+0xa0>)
 80017fa:	2280      	movs	r2, #128	@ 0x80
 80017fc:	0352      	lsls	r2, r2, #13
 80017fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 8001800:	4b13      	ldr	r3, [pc, #76]	@ (8001850 <MX_USART1_UART_Init+0xa0>)
 8001802:	2200      	movs	r2, #0
 8001804:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001806:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <MX_USART1_UART_Init+0xa0>)
 8001808:	0018      	movs	r0, r3
 800180a:	f003 f8b1 	bl	8004970 <HAL_UART_Init>
 800180e:	1e03      	subs	r3, r0, #0
 8001810:	d001      	beq.n	8001816 <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 8001812:	f7ff f9b2 	bl	8000b7a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001816:	4b0e      	ldr	r3, [pc, #56]	@ (8001850 <MX_USART1_UART_Init+0xa0>)
 8001818:	2100      	movs	r1, #0
 800181a:	0018      	movs	r0, r3
 800181c:	f003 fe2a 	bl	8005474 <HAL_UARTEx_SetTxFifoThreshold>
 8001820:	1e03      	subs	r3, r0, #0
 8001822:	d001      	beq.n	8001828 <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 8001824:	f7ff f9a9 	bl	8000b7a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001828:	4b09      	ldr	r3, [pc, #36]	@ (8001850 <MX_USART1_UART_Init+0xa0>)
 800182a:	2100      	movs	r1, #0
 800182c:	0018      	movs	r0, r3
 800182e:	f003 fe61 	bl	80054f4 <HAL_UARTEx_SetRxFifoThreshold>
 8001832:	1e03      	subs	r3, r0, #0
 8001834:	d001      	beq.n	800183a <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001836:	f7ff f9a0 	bl	8000b7a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800183a:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <MX_USART1_UART_Init+0xa0>)
 800183c:	0018      	movs	r0, r3
 800183e:	f003 fddf 	bl	8005400 <HAL_UARTEx_DisableFifoMode>
 8001842:	1e03      	subs	r3, r0, #0
 8001844:	d001      	beq.n	800184a <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 8001846:	f7ff f998 	bl	8000b7a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800184a:	46c0      	nop			@ (mov r8, r8)
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000304 	.word	0x20000304
 8001854:	40013800 	.word	0x40013800

08001858 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b097      	sub	sp, #92	@ 0x5c
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	2344      	movs	r3, #68	@ 0x44
 8001862:	18fb      	adds	r3, r7, r3
 8001864:	0018      	movs	r0, r3
 8001866:	2314      	movs	r3, #20
 8001868:	001a      	movs	r2, r3
 800186a:	2100      	movs	r1, #0
 800186c:	f004 f802 	bl	8005874 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001870:	2410      	movs	r4, #16
 8001872:	193b      	adds	r3, r7, r4
 8001874:	0018      	movs	r0, r3
 8001876:	2334      	movs	r3, #52	@ 0x34
 8001878:	001a      	movs	r2, r3
 800187a:	2100      	movs	r1, #0
 800187c:	f003 fffa 	bl	8005874 <memset>
  if(uartHandle->Instance==USART1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a23      	ldr	r2, [pc, #140]	@ (8001914 <HAL_UART_MspInit+0xbc>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d13f      	bne.n	800190a <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800188a:	193b      	adds	r3, r7, r4
 800188c:	2201      	movs	r2, #1
 800188e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001890:	193b      	adds	r3, r7, r4
 8001892:	2200      	movs	r2, #0
 8001894:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001896:	193b      	adds	r3, r7, r4
 8001898:	0018      	movs	r0, r3
 800189a:	f001 f98b 	bl	8002bb4 <HAL_RCCEx_PeriphCLKConfig>
 800189e:	1e03      	subs	r3, r0, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018a2:	f7ff f96a 	bl	8000b7a <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001918 <HAL_UART_MspInit+0xc0>)
 80018a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001918 <HAL_UART_MspInit+0xc0>)
 80018ac:	2180      	movs	r1, #128	@ 0x80
 80018ae:	01c9      	lsls	r1, r1, #7
 80018b0:	430a      	orrs	r2, r1
 80018b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80018b4:	4b18      	ldr	r3, [pc, #96]	@ (8001918 <HAL_UART_MspInit+0xc0>)
 80018b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018b8:	2380      	movs	r3, #128	@ 0x80
 80018ba:	01db      	lsls	r3, r3, #7
 80018bc:	4013      	ands	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c2:	4b15      	ldr	r3, [pc, #84]	@ (8001918 <HAL_UART_MspInit+0xc0>)
 80018c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018c6:	4b14      	ldr	r3, [pc, #80]	@ (8001918 <HAL_UART_MspInit+0xc0>)
 80018c8:	2101      	movs	r1, #1
 80018ca:	430a      	orrs	r2, r1
 80018cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80018ce:	4b12      	ldr	r3, [pc, #72]	@ (8001918 <HAL_UART_MspInit+0xc0>)
 80018d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018d2:	2201      	movs	r2, #1
 80018d4:	4013      	ands	r3, r2
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MC_UART_TX_Pin|MC_UART_RX_Pin;
 80018da:	2144      	movs	r1, #68	@ 0x44
 80018dc:	187b      	adds	r3, r7, r1
 80018de:	22c0      	movs	r2, #192	@ 0xc0
 80018e0:	00d2      	lsls	r2, r2, #3
 80018e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	187b      	adds	r3, r7, r1
 80018e6:	2202      	movs	r2, #2
 80018e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	187b      	adds	r3, r7, r1
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	187b      	adds	r3, r7, r1
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80018f6:	187b      	adds	r3, r7, r1
 80018f8:	2201      	movs	r2, #1
 80018fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fc:	187a      	adds	r2, r7, r1
 80018fe:	23a0      	movs	r3, #160	@ 0xa0
 8001900:	05db      	lsls	r3, r3, #23
 8001902:	0011      	movs	r1, r2
 8001904:	0018      	movs	r0, r3
 8001906:	f000 f985 	bl	8001c14 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800190a:	46c0      	nop			@ (mov r8, r8)
 800190c:	46bd      	mov	sp, r7
 800190e:	b017      	add	sp, #92	@ 0x5c
 8001910:	bd90      	pop	{r4, r7, pc}
 8001912:	46c0      	nop			@ (mov r8, r8)
 8001914:	40013800 	.word	0x40013800
 8001918:	40021000 	.word	0x40021000

0800191c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800191c:	480d      	ldr	r0, [pc, #52]	@ (8001954 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800191e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001920:	f7ff faa6 	bl	8000e70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001924:	480c      	ldr	r0, [pc, #48]	@ (8001958 <LoopForever+0x6>)
  ldr r1, =_edata
 8001926:	490d      	ldr	r1, [pc, #52]	@ (800195c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001928:	4a0d      	ldr	r2, [pc, #52]	@ (8001960 <LoopForever+0xe>)
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800192c:	e002      	b.n	8001934 <LoopCopyDataInit>

0800192e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001932:	3304      	adds	r3, #4

08001934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001938:	d3f9      	bcc.n	800192e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193a:	4a0a      	ldr	r2, [pc, #40]	@ (8001964 <LoopForever+0x12>)
  ldr r4, =_ebss
 800193c:	4c0a      	ldr	r4, [pc, #40]	@ (8001968 <LoopForever+0x16>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001940:	e001      	b.n	8001946 <LoopFillZerobss>

08001942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001944:	3204      	adds	r2, #4

08001946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001948:	d3fb      	bcc.n	8001942 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800194a:	f003 ffef 	bl	800592c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800194e:	f7ff f871 	bl	8000a34 <main>

08001952 <LoopForever>:

LoopForever:
  b LoopForever
 8001952:	e7fe      	b.n	8001952 <LoopForever>
  ldr   r0, =_estack
 8001954:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800195c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001960:	080066ac 	.word	0x080066ac
  ldr r2, =_sbss
 8001964:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001968:	200004e8 	.word	0x200004e8

0800196c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800196c:	e7fe      	b.n	800196c <ADC1_COMP_IRQHandler>
	...

08001970 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001976:	1dfb      	adds	r3, r7, #7
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800197c:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <HAL_Init+0x3c>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b0a      	ldr	r3, [pc, #40]	@ (80019ac <HAL_Init+0x3c>)
 8001982:	2180      	movs	r1, #128	@ 0x80
 8001984:	0049      	lsls	r1, r1, #1
 8001986:	430a      	orrs	r2, r1
 8001988:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800198a:	2003      	movs	r0, #3
 800198c:	f000 f810 	bl	80019b0 <HAL_InitTick>
 8001990:	1e03      	subs	r3, r0, #0
 8001992:	d003      	beq.n	800199c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001994:	1dfb      	adds	r3, r7, #7
 8001996:	2201      	movs	r2, #1
 8001998:	701a      	strb	r2, [r3, #0]
 800199a:	e001      	b.n	80019a0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800199c:	f7ff f96a 	bl	8000c74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019a0:	1dfb      	adds	r3, r7, #7
 80019a2:	781b      	ldrb	r3, [r3, #0]
}
 80019a4:	0018      	movs	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	b002      	add	sp, #8
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40022000 	.word	0x40022000

080019b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019b8:	230f      	movs	r3, #15
 80019ba:	18fb      	adds	r3, r7, r3
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80019c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a38 <HAL_InitTick+0x88>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d02b      	beq.n	8001a20 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80019c8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a3c <HAL_InitTick+0x8c>)
 80019ca:	681c      	ldr	r4, [r3, #0]
 80019cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a38 <HAL_InitTick+0x88>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	0019      	movs	r1, r3
 80019d2:	23fa      	movs	r3, #250	@ 0xfa
 80019d4:	0098      	lsls	r0, r3, #2
 80019d6:	f7fe fb9f 	bl	8000118 <__udivsi3>
 80019da:	0003      	movs	r3, r0
 80019dc:	0019      	movs	r1, r3
 80019de:	0020      	movs	r0, r4
 80019e0:	f7fe fb9a 	bl	8000118 <__udivsi3>
 80019e4:	0003      	movs	r3, r0
 80019e6:	0018      	movs	r0, r3
 80019e8:	f000 f907 	bl	8001bfa <HAL_SYSTICK_Config>
 80019ec:	1e03      	subs	r3, r0, #0
 80019ee:	d112      	bne.n	8001a16 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d80a      	bhi.n	8001a0c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	2301      	movs	r3, #1
 80019fa:	425b      	negs	r3, r3
 80019fc:	2200      	movs	r2, #0
 80019fe:	0018      	movs	r0, r3
 8001a00:	f000 f8d6 	bl	8001bb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a04:	4b0e      	ldr	r3, [pc, #56]	@ (8001a40 <HAL_InitTick+0x90>)
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	e00d      	b.n	8001a28 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001a0c:	230f      	movs	r3, #15
 8001a0e:	18fb      	adds	r3, r7, r3
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
 8001a14:	e008      	b.n	8001a28 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a16:	230f      	movs	r3, #15
 8001a18:	18fb      	adds	r3, r7, r3
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	701a      	strb	r2, [r3, #0]
 8001a1e:	e003      	b.n	8001a28 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a20:	230f      	movs	r3, #15
 8001a22:	18fb      	adds	r3, r7, r3
 8001a24:	2201      	movs	r2, #1
 8001a26:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001a28:	230f      	movs	r3, #15
 8001a2a:	18fb      	adds	r3, r7, r3
 8001a2c:	781b      	ldrb	r3, [r3, #0]
}
 8001a2e:	0018      	movs	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	b005      	add	sp, #20
 8001a34:	bd90      	pop	{r4, r7, pc}
 8001a36:	46c0      	nop			@ (mov r8, r8)
 8001a38:	20000038 	.word	0x20000038
 8001a3c:	20000018 	.word	0x20000018
 8001a40:	20000034 	.word	0x20000034

08001a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  return uwTick;
 8001a48:	4b02      	ldr	r3, [pc, #8]	@ (8001a54 <HAL_GetTick+0x10>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
}
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	46c0      	nop			@ (mov r8, r8)
 8001a54:	20000398 	.word	0x20000398

08001a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	0002      	movs	r2, r0
 8001a60:	1dfb      	adds	r3, r7, #7
 8001a62:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a64:	1dfb      	adds	r3, r7, #7
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a6a:	d809      	bhi.n	8001a80 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6c:	1dfb      	adds	r3, r7, #7
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	001a      	movs	r2, r3
 8001a72:	231f      	movs	r3, #31
 8001a74:	401a      	ands	r2, r3
 8001a76:	4b04      	ldr	r3, [pc, #16]	@ (8001a88 <__NVIC_EnableIRQ+0x30>)
 8001a78:	2101      	movs	r1, #1
 8001a7a:	4091      	lsls	r1, r2
 8001a7c:	000a      	movs	r2, r1
 8001a7e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001a80:	46c0      	nop			@ (mov r8, r8)
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b002      	add	sp, #8
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	e000e100 	.word	0xe000e100

08001a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	0002      	movs	r2, r0
 8001a94:	6039      	str	r1, [r7, #0]
 8001a96:	1dfb      	adds	r3, r7, #7
 8001a98:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a9a:	1dfb      	adds	r3, r7, #7
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001aa0:	d828      	bhi.n	8001af4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001aa2:	4a2f      	ldr	r2, [pc, #188]	@ (8001b60 <__NVIC_SetPriority+0xd4>)
 8001aa4:	1dfb      	adds	r3, r7, #7
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	b25b      	sxtb	r3, r3
 8001aaa:	089b      	lsrs	r3, r3, #2
 8001aac:	33c0      	adds	r3, #192	@ 0xc0
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	589b      	ldr	r3, [r3, r2]
 8001ab2:	1dfa      	adds	r2, r7, #7
 8001ab4:	7812      	ldrb	r2, [r2, #0]
 8001ab6:	0011      	movs	r1, r2
 8001ab8:	2203      	movs	r2, #3
 8001aba:	400a      	ands	r2, r1
 8001abc:	00d2      	lsls	r2, r2, #3
 8001abe:	21ff      	movs	r1, #255	@ 0xff
 8001ac0:	4091      	lsls	r1, r2
 8001ac2:	000a      	movs	r2, r1
 8001ac4:	43d2      	mvns	r2, r2
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	019b      	lsls	r3, r3, #6
 8001ace:	22ff      	movs	r2, #255	@ 0xff
 8001ad0:	401a      	ands	r2, r3
 8001ad2:	1dfb      	adds	r3, r7, #7
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	2303      	movs	r3, #3
 8001ada:	4003      	ands	r3, r0
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ae0:	481f      	ldr	r0, [pc, #124]	@ (8001b60 <__NVIC_SetPriority+0xd4>)
 8001ae2:	1dfb      	adds	r3, r7, #7
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	b25b      	sxtb	r3, r3
 8001ae8:	089b      	lsrs	r3, r3, #2
 8001aea:	430a      	orrs	r2, r1
 8001aec:	33c0      	adds	r3, #192	@ 0xc0
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001af2:	e031      	b.n	8001b58 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001af4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b64 <__NVIC_SetPriority+0xd8>)
 8001af6:	1dfb      	adds	r3, r7, #7
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	0019      	movs	r1, r3
 8001afc:	230f      	movs	r3, #15
 8001afe:	400b      	ands	r3, r1
 8001b00:	3b08      	subs	r3, #8
 8001b02:	089b      	lsrs	r3, r3, #2
 8001b04:	3306      	adds	r3, #6
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	18d3      	adds	r3, r2, r3
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	1dfa      	adds	r2, r7, #7
 8001b10:	7812      	ldrb	r2, [r2, #0]
 8001b12:	0011      	movs	r1, r2
 8001b14:	2203      	movs	r2, #3
 8001b16:	400a      	ands	r2, r1
 8001b18:	00d2      	lsls	r2, r2, #3
 8001b1a:	21ff      	movs	r1, #255	@ 0xff
 8001b1c:	4091      	lsls	r1, r2
 8001b1e:	000a      	movs	r2, r1
 8001b20:	43d2      	mvns	r2, r2
 8001b22:	401a      	ands	r2, r3
 8001b24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	019b      	lsls	r3, r3, #6
 8001b2a:	22ff      	movs	r2, #255	@ 0xff
 8001b2c:	401a      	ands	r2, r3
 8001b2e:	1dfb      	adds	r3, r7, #7
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	0018      	movs	r0, r3
 8001b34:	2303      	movs	r3, #3
 8001b36:	4003      	ands	r3, r0
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b3c:	4809      	ldr	r0, [pc, #36]	@ (8001b64 <__NVIC_SetPriority+0xd8>)
 8001b3e:	1dfb      	adds	r3, r7, #7
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	001c      	movs	r4, r3
 8001b44:	230f      	movs	r3, #15
 8001b46:	4023      	ands	r3, r4
 8001b48:	3b08      	subs	r3, #8
 8001b4a:	089b      	lsrs	r3, r3, #2
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	3306      	adds	r3, #6
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	18c3      	adds	r3, r0, r3
 8001b54:	3304      	adds	r3, #4
 8001b56:	601a      	str	r2, [r3, #0]
}
 8001b58:	46c0      	nop			@ (mov r8, r8)
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	b003      	add	sp, #12
 8001b5e:	bd90      	pop	{r4, r7, pc}
 8001b60:	e000e100 	.word	0xe000e100
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	1e5a      	subs	r2, r3, #1
 8001b74:	2380      	movs	r3, #128	@ 0x80
 8001b76:	045b      	lsls	r3, r3, #17
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d301      	bcc.n	8001b80 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e010      	b.n	8001ba2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b80:	4b0a      	ldr	r3, [pc, #40]	@ (8001bac <SysTick_Config+0x44>)
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	3a01      	subs	r2, #1
 8001b86:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b88:	2301      	movs	r3, #1
 8001b8a:	425b      	negs	r3, r3
 8001b8c:	2103      	movs	r1, #3
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f7ff ff7c 	bl	8001a8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b94:	4b05      	ldr	r3, [pc, #20]	@ (8001bac <SysTick_Config+0x44>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b9a:	4b04      	ldr	r3, [pc, #16]	@ (8001bac <SysTick_Config+0x44>)
 8001b9c:	2207      	movs	r2, #7
 8001b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	b002      	add	sp, #8
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	46c0      	nop			@ (mov r8, r8)
 8001bac:	e000e010 	.word	0xe000e010

08001bb0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	210f      	movs	r1, #15
 8001bbc:	187b      	adds	r3, r7, r1
 8001bbe:	1c02      	adds	r2, r0, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	187b      	adds	r3, r7, r1
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	b25b      	sxtb	r3, r3
 8001bca:	0011      	movs	r1, r2
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f7ff ff5d 	bl	8001a8c <__NVIC_SetPriority>
}
 8001bd2:	46c0      	nop			@ (mov r8, r8)
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	b004      	add	sp, #16
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	0002      	movs	r2, r0
 8001be2:	1dfb      	adds	r3, r7, #7
 8001be4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be6:	1dfb      	adds	r3, r7, #7
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	b25b      	sxtb	r3, r3
 8001bec:	0018      	movs	r0, r3
 8001bee:	f7ff ff33 	bl	8001a58 <__NVIC_EnableIRQ>
}
 8001bf2:	46c0      	nop			@ (mov r8, r8)
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	b002      	add	sp, #8
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	0018      	movs	r0, r3
 8001c06:	f7ff ffaf 	bl	8001b68 <SysTick_Config>
 8001c0a:	0003      	movs	r3, r0
}
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	b002      	add	sp, #8
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c22:	e147      	b.n	8001eb4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2101      	movs	r1, #1
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	4091      	lsls	r1, r2
 8001c2e:	000a      	movs	r2, r1
 8001c30:	4013      	ands	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d100      	bne.n	8001c3c <HAL_GPIO_Init+0x28>
 8001c3a:	e138      	b.n	8001eae <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2203      	movs	r2, #3
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d005      	beq.n	8001c54 <HAL_GPIO_Init+0x40>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d130      	bne.n	8001cb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	2203      	movs	r2, #3
 8001c60:	409a      	lsls	r2, r3
 8001c62:	0013      	movs	r3, r2
 8001c64:	43da      	mvns	r2, r3
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	68da      	ldr	r2, [r3, #12]
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	409a      	lsls	r2, r3
 8001c76:	0013      	movs	r3, r2
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	0013      	movs	r3, r2
 8001c92:	43da      	mvns	r2, r3
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4013      	ands	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	091b      	lsrs	r3, r3, #4
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	409a      	lsls	r2, r3
 8001ca8:	0013      	movs	r3, r2
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2203      	movs	r2, #3
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	d017      	beq.n	8001cf2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	2203      	movs	r2, #3
 8001cce:	409a      	lsls	r2, r3
 8001cd0:	0013      	movs	r3, r2
 8001cd2:	43da      	mvns	r2, r3
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	0013      	movs	r3, r2
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d123      	bne.n	8001d46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	08da      	lsrs	r2, r3, #3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3208      	adds	r2, #8
 8001d06:	0092      	lsls	r2, r2, #2
 8001d08:	58d3      	ldr	r3, [r2, r3]
 8001d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	2207      	movs	r2, #7
 8001d10:	4013      	ands	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	220f      	movs	r2, #15
 8001d16:	409a      	lsls	r2, r3
 8001d18:	0013      	movs	r3, r2
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	691a      	ldr	r2, [r3, #16]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	2107      	movs	r1, #7
 8001d2a:	400b      	ands	r3, r1
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	409a      	lsls	r2, r3
 8001d30:	0013      	movs	r3, r2
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	08da      	lsrs	r2, r3, #3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3208      	adds	r2, #8
 8001d40:	0092      	lsls	r2, r2, #2
 8001d42:	6939      	ldr	r1, [r7, #16]
 8001d44:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	2203      	movs	r2, #3
 8001d52:	409a      	lsls	r2, r3
 8001d54:	0013      	movs	r3, r2
 8001d56:	43da      	mvns	r2, r3
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2203      	movs	r2, #3
 8001d64:	401a      	ands	r2, r3
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	409a      	lsls	r2, r3
 8001d6c:	0013      	movs	r3, r2
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	23c0      	movs	r3, #192	@ 0xc0
 8001d80:	029b      	lsls	r3, r3, #10
 8001d82:	4013      	ands	r3, r2
 8001d84:	d100      	bne.n	8001d88 <HAL_GPIO_Init+0x174>
 8001d86:	e092      	b.n	8001eae <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001d88:	4a50      	ldr	r2, [pc, #320]	@ (8001ecc <HAL_GPIO_Init+0x2b8>)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	089b      	lsrs	r3, r3, #2
 8001d8e:	3318      	adds	r3, #24
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	589b      	ldr	r3, [r3, r2]
 8001d94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2203      	movs	r2, #3
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	220f      	movs	r2, #15
 8001da0:	409a      	lsls	r2, r3
 8001da2:	0013      	movs	r3, r2
 8001da4:	43da      	mvns	r2, r3
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	23a0      	movs	r3, #160	@ 0xa0
 8001db0:	05db      	lsls	r3, r3, #23
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d013      	beq.n	8001dde <HAL_GPIO_Init+0x1ca>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a45      	ldr	r2, [pc, #276]	@ (8001ed0 <HAL_GPIO_Init+0x2bc>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d00d      	beq.n	8001dda <HAL_GPIO_Init+0x1c6>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a44      	ldr	r2, [pc, #272]	@ (8001ed4 <HAL_GPIO_Init+0x2c0>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d007      	beq.n	8001dd6 <HAL_GPIO_Init+0x1c2>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a43      	ldr	r2, [pc, #268]	@ (8001ed8 <HAL_GPIO_Init+0x2c4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d101      	bne.n	8001dd2 <HAL_GPIO_Init+0x1be>
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e006      	b.n	8001de0 <HAL_GPIO_Init+0x1cc>
 8001dd2:	2305      	movs	r3, #5
 8001dd4:	e004      	b.n	8001de0 <HAL_GPIO_Init+0x1cc>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	e002      	b.n	8001de0 <HAL_GPIO_Init+0x1cc>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <HAL_GPIO_Init+0x1cc>
 8001dde:	2300      	movs	r3, #0
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	2103      	movs	r1, #3
 8001de4:	400a      	ands	r2, r1
 8001de6:	00d2      	lsls	r2, r2, #3
 8001de8:	4093      	lsls	r3, r2
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001df0:	4936      	ldr	r1, [pc, #216]	@ (8001ecc <HAL_GPIO_Init+0x2b8>)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	089b      	lsrs	r3, r3, #2
 8001df6:	3318      	adds	r3, #24
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dfe:	4b33      	ldr	r3, [pc, #204]	@ (8001ecc <HAL_GPIO_Init+0x2b8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	43da      	mvns	r2, r3
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	2380      	movs	r3, #128	@ 0x80
 8001e14:	035b      	lsls	r3, r3, #13
 8001e16:	4013      	ands	r3, r2
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e22:	4b2a      	ldr	r3, [pc, #168]	@ (8001ecc <HAL_GPIO_Init+0x2b8>)
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001e28:	4b28      	ldr	r3, [pc, #160]	@ (8001ecc <HAL_GPIO_Init+0x2b8>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	43da      	mvns	r2, r3
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	2380      	movs	r3, #128	@ 0x80
 8001e3e:	039b      	lsls	r3, r3, #14
 8001e40:	4013      	ands	r3, r2
 8001e42:	d003      	beq.n	8001e4c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ecc <HAL_GPIO_Init+0x2b8>)
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e52:	4a1e      	ldr	r2, [pc, #120]	@ (8001ecc <HAL_GPIO_Init+0x2b8>)
 8001e54:	2384      	movs	r3, #132	@ 0x84
 8001e56:	58d3      	ldr	r3, [r2, r3]
 8001e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	43da      	mvns	r2, r3
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	2380      	movs	r3, #128	@ 0x80
 8001e6a:	029b      	lsls	r3, r3, #10
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e78:	4914      	ldr	r1, [pc, #80]	@ (8001ecc <HAL_GPIO_Init+0x2b8>)
 8001e7a:	2284      	movs	r2, #132	@ 0x84
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001e80:	4a12      	ldr	r2, [pc, #72]	@ (8001ecc <HAL_GPIO_Init+0x2b8>)
 8001e82:	2380      	movs	r3, #128	@ 0x80
 8001e84:	58d3      	ldr	r3, [r2, r3]
 8001e86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	2380      	movs	r3, #128	@ 0x80
 8001e98:	025b      	lsls	r3, r3, #9
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ea6:	4909      	ldr	r1, [pc, #36]	@ (8001ecc <HAL_GPIO_Init+0x2b8>)
 8001ea8:	2280      	movs	r2, #128	@ 0x80
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	40da      	lsrs	r2, r3
 8001ebc:	1e13      	subs	r3, r2, #0
 8001ebe:	d000      	beq.n	8001ec2 <HAL_GPIO_Init+0x2ae>
 8001ec0:	e6b0      	b.n	8001c24 <HAL_GPIO_Init+0x10>
  }
}
 8001ec2:	46c0      	nop			@ (mov r8, r8)
 8001ec4:	46c0      	nop			@ (mov r8, r8)
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	b006      	add	sp, #24
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40021800 	.word	0x40021800
 8001ed0:	50000400 	.word	0x50000400
 8001ed4:	50000800 	.word	0x50000800
 8001ed8:	50000c00 	.word	0x50000c00

08001edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	0008      	movs	r0, r1
 8001ee6:	0011      	movs	r1, r2
 8001ee8:	1cbb      	adds	r3, r7, #2
 8001eea:	1c02      	adds	r2, r0, #0
 8001eec:	801a      	strh	r2, [r3, #0]
 8001eee:	1c7b      	adds	r3, r7, #1
 8001ef0:	1c0a      	adds	r2, r1, #0
 8001ef2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ef4:	1c7b      	adds	r3, r7, #1
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d004      	beq.n	8001f06 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001efc:	1cbb      	adds	r3, r7, #2
 8001efe:	881a      	ldrh	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f04:	e003      	b.n	8001f0e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f06:	1cbb      	adds	r3, r7, #2
 8001f08:	881a      	ldrh	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f0e:	46c0      	nop			@ (mov r8, r8)
 8001f10:	46bd      	mov	sp, r7
 8001f12:	b002      	add	sp, #8
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e08f      	b.n	800204a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2241      	movs	r2, #65	@ 0x41
 8001f2e:	5c9b      	ldrb	r3, [r3, r2]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d107      	bne.n	8001f46 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2240      	movs	r2, #64	@ 0x40
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	0018      	movs	r0, r3
 8001f42:	f7fe fbb5 	bl	80006b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2241      	movs	r2, #65	@ 0x41
 8001f4a:	2124      	movs	r1, #36	@ 0x24
 8001f4c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2101      	movs	r1, #1
 8001f5a:	438a      	bics	r2, r1
 8001f5c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	493b      	ldr	r1, [pc, #236]	@ (8002054 <HAL_I2C_Init+0x13c>)
 8001f68:	400a      	ands	r2, r1
 8001f6a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4938      	ldr	r1, [pc, #224]	@ (8002058 <HAL_I2C_Init+0x140>)
 8001f78:	400a      	ands	r2, r1
 8001f7a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d108      	bne.n	8001f96 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2180      	movs	r1, #128	@ 0x80
 8001f8e:	0209      	lsls	r1, r1, #8
 8001f90:	430a      	orrs	r2, r1
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	e007      	b.n	8001fa6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2184      	movs	r1, #132	@ 0x84
 8001fa0:	0209      	lsls	r1, r1, #8
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d109      	bne.n	8001fc2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2180      	movs	r1, #128	@ 0x80
 8001fba:	0109      	lsls	r1, r1, #4
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	605a      	str	r2, [r3, #4]
 8001fc0:	e007      	b.n	8001fd2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4923      	ldr	r1, [pc, #140]	@ (800205c <HAL_I2C_Init+0x144>)
 8001fce:	400a      	ands	r2, r1
 8001fd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4920      	ldr	r1, [pc, #128]	@ (8002060 <HAL_I2C_Init+0x148>)
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	491a      	ldr	r1, [pc, #104]	@ (8002058 <HAL_I2C_Init+0x140>)
 8001fee:	400a      	ands	r2, r1
 8001ff0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691a      	ldr	r2, [r3, #16]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69d9      	ldr	r1, [r3, #28]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1a      	ldr	r2, [r3, #32]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2101      	movs	r1, #1
 8002028:	430a      	orrs	r2, r1
 800202a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2241      	movs	r2, #65	@ 0x41
 8002036:	2120      	movs	r1, #32
 8002038:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2242      	movs	r2, #66	@ 0x42
 8002044:	2100      	movs	r1, #0
 8002046:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	0018      	movs	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	b002      	add	sp, #8
 8002050:	bd80      	pop	{r7, pc}
 8002052:	46c0      	nop			@ (mov r8, r8)
 8002054:	f0ffffff 	.word	0xf0ffffff
 8002058:	ffff7fff 	.word	0xffff7fff
 800205c:	fffff7ff 	.word	0xfffff7ff
 8002060:	02008000 	.word	0x02008000

08002064 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2241      	movs	r2, #65	@ 0x41
 8002072:	5c9b      	ldrb	r3, [r3, r2]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b20      	cmp	r3, #32
 8002078:	d138      	bne.n	80020ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2240      	movs	r2, #64	@ 0x40
 800207e:	5c9b      	ldrb	r3, [r3, r2]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002084:	2302      	movs	r3, #2
 8002086:	e032      	b.n	80020ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2240      	movs	r2, #64	@ 0x40
 800208c:	2101      	movs	r1, #1
 800208e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2241      	movs	r2, #65	@ 0x41
 8002094:	2124      	movs	r1, #36	@ 0x24
 8002096:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2101      	movs	r1, #1
 80020a4:	438a      	bics	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4911      	ldr	r1, [pc, #68]	@ (80020f8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80020b4:	400a      	ands	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6819      	ldr	r1, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2101      	movs	r1, #1
 80020d4:	430a      	orrs	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2241      	movs	r2, #65	@ 0x41
 80020dc:	2120      	movs	r1, #32
 80020de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2240      	movs	r2, #64	@ 0x40
 80020e4:	2100      	movs	r1, #0
 80020e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	e000      	b.n	80020ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020ec:	2302      	movs	r3, #2
  }
}
 80020ee:	0018      	movs	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b002      	add	sp, #8
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	46c0      	nop			@ (mov r8, r8)
 80020f8:	ffffefff 	.word	0xffffefff

080020fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2241      	movs	r2, #65	@ 0x41
 800210a:	5c9b      	ldrb	r3, [r3, r2]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b20      	cmp	r3, #32
 8002110:	d139      	bne.n	8002186 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2240      	movs	r2, #64	@ 0x40
 8002116:	5c9b      	ldrb	r3, [r3, r2]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800211c:	2302      	movs	r3, #2
 800211e:	e033      	b.n	8002188 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2240      	movs	r2, #64	@ 0x40
 8002124:	2101      	movs	r1, #1
 8002126:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2241      	movs	r2, #65	@ 0x41
 800212c:	2124      	movs	r1, #36	@ 0x24
 800212e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2101      	movs	r1, #1
 800213c:	438a      	bics	r2, r1
 800213e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4a11      	ldr	r2, [pc, #68]	@ (8002190 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800214c:	4013      	ands	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	021b      	lsls	r3, r3, #8
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	4313      	orrs	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2101      	movs	r1, #1
 800216e:	430a      	orrs	r2, r1
 8002170:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2241      	movs	r2, #65	@ 0x41
 8002176:	2120      	movs	r1, #32
 8002178:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2240      	movs	r2, #64	@ 0x40
 800217e:	2100      	movs	r1, #0
 8002180:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	e000      	b.n	8002188 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002186:	2302      	movs	r3, #2
  }
}
 8002188:	0018      	movs	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	b004      	add	sp, #16
 800218e:	bd80      	pop	{r7, pc}
 8002190:	fffff0ff 	.word	0xfffff0ff

08002194 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800219c:	4b19      	ldr	r3, [pc, #100]	@ (8002204 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a19      	ldr	r2, [pc, #100]	@ (8002208 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	0019      	movs	r1, r3
 80021a6:	4b17      	ldr	r3, [pc, #92]	@ (8002204 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	2380      	movs	r3, #128	@ 0x80
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d11f      	bne.n	80021f8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80021b8:	4b14      	ldr	r3, [pc, #80]	@ (800220c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	0013      	movs	r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	189b      	adds	r3, r3, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	4912      	ldr	r1, [pc, #72]	@ (8002210 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80021c6:	0018      	movs	r0, r3
 80021c8:	f7fd ffa6 	bl	8000118 <__udivsi3>
 80021cc:	0003      	movs	r3, r0
 80021ce:	3301      	adds	r3, #1
 80021d0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021d2:	e008      	b.n	80021e6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	3b01      	subs	r3, #1
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	e001      	b.n	80021e6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e009      	b.n	80021fa <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021e6:	4b07      	ldr	r3, [pc, #28]	@ (8002204 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021e8:	695a      	ldr	r2, [r3, #20]
 80021ea:	2380      	movs	r3, #128	@ 0x80
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	401a      	ands	r2, r3
 80021f0:	2380      	movs	r3, #128	@ 0x80
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d0ed      	beq.n	80021d4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	0018      	movs	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	b004      	add	sp, #16
 8002200:	bd80      	pop	{r7, pc}
 8002202:	46c0      	nop			@ (mov r8, r8)
 8002204:	40007000 	.word	0x40007000
 8002208:	fffff9ff 	.word	0xfffff9ff
 800220c:	20000018 	.word	0x20000018
 8002210:	000f4240 	.word	0x000f4240

08002214 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002218:	4b03      	ldr	r3, [pc, #12]	@ (8002228 <LL_RCC_GetAPB1Prescaler+0x14>)
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	23e0      	movs	r3, #224	@ 0xe0
 800221e:	01db      	lsls	r3, r3, #7
 8002220:	4013      	ands	r3, r2
}
 8002222:	0018      	movs	r0, r3
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40021000 	.word	0x40021000

0800222c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e2fe      	b.n	800283c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2201      	movs	r2, #1
 8002244:	4013      	ands	r3, r2
 8002246:	d100      	bne.n	800224a <HAL_RCC_OscConfig+0x1e>
 8002248:	e07c      	b.n	8002344 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800224a:	4bc3      	ldr	r3, [pc, #780]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2238      	movs	r2, #56	@ 0x38
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002254:	4bc0      	ldr	r3, [pc, #768]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	2203      	movs	r2, #3
 800225a:	4013      	ands	r3, r2
 800225c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	2b10      	cmp	r3, #16
 8002262:	d102      	bne.n	800226a <HAL_RCC_OscConfig+0x3e>
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	2b03      	cmp	r3, #3
 8002268:	d002      	beq.n	8002270 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	2b08      	cmp	r3, #8
 800226e:	d10b      	bne.n	8002288 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002270:	4bb9      	ldr	r3, [pc, #740]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	2380      	movs	r3, #128	@ 0x80
 8002276:	029b      	lsls	r3, r3, #10
 8002278:	4013      	ands	r3, r2
 800227a:	d062      	beq.n	8002342 <HAL_RCC_OscConfig+0x116>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d15e      	bne.n	8002342 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e2d9      	b.n	800283c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	2380      	movs	r3, #128	@ 0x80
 800228e:	025b      	lsls	r3, r3, #9
 8002290:	429a      	cmp	r2, r3
 8002292:	d107      	bne.n	80022a4 <HAL_RCC_OscConfig+0x78>
 8002294:	4bb0      	ldr	r3, [pc, #704]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4baf      	ldr	r3, [pc, #700]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 800229a:	2180      	movs	r1, #128	@ 0x80
 800229c:	0249      	lsls	r1, r1, #9
 800229e:	430a      	orrs	r2, r1
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	e020      	b.n	80022e6 <HAL_RCC_OscConfig+0xba>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	23a0      	movs	r3, #160	@ 0xa0
 80022aa:	02db      	lsls	r3, r3, #11
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d10e      	bne.n	80022ce <HAL_RCC_OscConfig+0xa2>
 80022b0:	4ba9      	ldr	r3, [pc, #676]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4ba8      	ldr	r3, [pc, #672]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 80022b6:	2180      	movs	r1, #128	@ 0x80
 80022b8:	02c9      	lsls	r1, r1, #11
 80022ba:	430a      	orrs	r2, r1
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	4ba6      	ldr	r3, [pc, #664]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	4ba5      	ldr	r3, [pc, #660]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 80022c4:	2180      	movs	r1, #128	@ 0x80
 80022c6:	0249      	lsls	r1, r1, #9
 80022c8:	430a      	orrs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	e00b      	b.n	80022e6 <HAL_RCC_OscConfig+0xba>
 80022ce:	4ba2      	ldr	r3, [pc, #648]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	4ba1      	ldr	r3, [pc, #644]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 80022d4:	49a1      	ldr	r1, [pc, #644]	@ (800255c <HAL_RCC_OscConfig+0x330>)
 80022d6:	400a      	ands	r2, r1
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	4b9f      	ldr	r3, [pc, #636]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4b9e      	ldr	r3, [pc, #632]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 80022e0:	499f      	ldr	r1, [pc, #636]	@ (8002560 <HAL_RCC_OscConfig+0x334>)
 80022e2:	400a      	ands	r2, r1
 80022e4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d014      	beq.n	8002318 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ee:	f7ff fba9 	bl	8001a44 <HAL_GetTick>
 80022f2:	0003      	movs	r3, r0
 80022f4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f8:	f7ff fba4 	bl	8001a44 <HAL_GetTick>
 80022fc:	0002      	movs	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	@ 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e298      	b.n	800283c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800230a:	4b93      	ldr	r3, [pc, #588]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	2380      	movs	r3, #128	@ 0x80
 8002310:	029b      	lsls	r3, r3, #10
 8002312:	4013      	ands	r3, r2
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCC_OscConfig+0xcc>
 8002316:	e015      	b.n	8002344 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7ff fb94 	bl	8001a44 <HAL_GetTick>
 800231c:	0003      	movs	r3, r0
 800231e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002322:	f7ff fb8f 	bl	8001a44 <HAL_GetTick>
 8002326:	0002      	movs	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b64      	cmp	r3, #100	@ 0x64
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e283      	b.n	800283c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002334:	4b88      	ldr	r3, [pc, #544]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	2380      	movs	r3, #128	@ 0x80
 800233a:	029b      	lsls	r3, r3, #10
 800233c:	4013      	ands	r3, r2
 800233e:	d1f0      	bne.n	8002322 <HAL_RCC_OscConfig+0xf6>
 8002340:	e000      	b.n	8002344 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002342:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2202      	movs	r2, #2
 800234a:	4013      	ands	r3, r2
 800234c:	d100      	bne.n	8002350 <HAL_RCC_OscConfig+0x124>
 800234e:	e099      	b.n	8002484 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002350:	4b81      	ldr	r3, [pc, #516]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	2238      	movs	r2, #56	@ 0x38
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800235a:	4b7f      	ldr	r3, [pc, #508]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	2203      	movs	r2, #3
 8002360:	4013      	ands	r3, r2
 8002362:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	2b10      	cmp	r3, #16
 8002368:	d102      	bne.n	8002370 <HAL_RCC_OscConfig+0x144>
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2b02      	cmp	r3, #2
 800236e:	d002      	beq.n	8002376 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d135      	bne.n	80023e2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002376:	4b78      	ldr	r3, [pc, #480]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	2380      	movs	r3, #128	@ 0x80
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	4013      	ands	r3, r2
 8002380:	d005      	beq.n	800238e <HAL_RCC_OscConfig+0x162>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e256      	b.n	800283c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238e:	4b72      	ldr	r3, [pc, #456]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	4a74      	ldr	r2, [pc, #464]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 8002394:	4013      	ands	r3, r2
 8002396:	0019      	movs	r1, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	021a      	lsls	r2, r3, #8
 800239e:	4b6e      	ldr	r3, [pc, #440]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 80023a0:	430a      	orrs	r2, r1
 80023a2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d112      	bne.n	80023d0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80023aa:	4b6b      	ldr	r3, [pc, #428]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a6e      	ldr	r2, [pc, #440]	@ (8002568 <HAL_RCC_OscConfig+0x33c>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	0019      	movs	r1, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	4b67      	ldr	r3, [pc, #412]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 80023ba:	430a      	orrs	r2, r1
 80023bc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80023be:	4b66      	ldr	r3, [pc, #408]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	0adb      	lsrs	r3, r3, #11
 80023c4:	2207      	movs	r2, #7
 80023c6:	4013      	ands	r3, r2
 80023c8:	4a68      	ldr	r2, [pc, #416]	@ (800256c <HAL_RCC_OscConfig+0x340>)
 80023ca:	40da      	lsrs	r2, r3
 80023cc:	4b68      	ldr	r3, [pc, #416]	@ (8002570 <HAL_RCC_OscConfig+0x344>)
 80023ce:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023d0:	4b68      	ldr	r3, [pc, #416]	@ (8002574 <HAL_RCC_OscConfig+0x348>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	0018      	movs	r0, r3
 80023d6:	f7ff faeb 	bl	80019b0 <HAL_InitTick>
 80023da:	1e03      	subs	r3, r0, #0
 80023dc:	d051      	beq.n	8002482 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e22c      	b.n	800283c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d030      	beq.n	800244c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80023ea:	4b5b      	ldr	r3, [pc, #364]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a5e      	ldr	r2, [pc, #376]	@ (8002568 <HAL_RCC_OscConfig+0x33c>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	0019      	movs	r1, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	4b57      	ldr	r3, [pc, #348]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 80023fa:	430a      	orrs	r2, r1
 80023fc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80023fe:	4b56      	ldr	r3, [pc, #344]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	4b55      	ldr	r3, [pc, #340]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 8002404:	2180      	movs	r1, #128	@ 0x80
 8002406:	0049      	lsls	r1, r1, #1
 8002408:	430a      	orrs	r2, r1
 800240a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240c:	f7ff fb1a 	bl	8001a44 <HAL_GetTick>
 8002410:	0003      	movs	r3, r0
 8002412:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002416:	f7ff fb15 	bl	8001a44 <HAL_GetTick>
 800241a:	0002      	movs	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e209      	b.n	800283c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002428:	4b4b      	ldr	r3, [pc, #300]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	2380      	movs	r3, #128	@ 0x80
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4013      	ands	r3, r2
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002434:	4b48      	ldr	r3, [pc, #288]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	4a4a      	ldr	r2, [pc, #296]	@ (8002564 <HAL_RCC_OscConfig+0x338>)
 800243a:	4013      	ands	r3, r2
 800243c:	0019      	movs	r1, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	021a      	lsls	r2, r3, #8
 8002444:	4b44      	ldr	r3, [pc, #272]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 8002446:	430a      	orrs	r2, r1
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	e01b      	b.n	8002484 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800244c:	4b42      	ldr	r3, [pc, #264]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4b41      	ldr	r3, [pc, #260]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 8002452:	4949      	ldr	r1, [pc, #292]	@ (8002578 <HAL_RCC_OscConfig+0x34c>)
 8002454:	400a      	ands	r2, r1
 8002456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002458:	f7ff faf4 	bl	8001a44 <HAL_GetTick>
 800245c:	0003      	movs	r3, r0
 800245e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002462:	f7ff faef 	bl	8001a44 <HAL_GetTick>
 8002466:	0002      	movs	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e1e3      	b.n	800283c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002474:	4b38      	ldr	r3, [pc, #224]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	2380      	movs	r3, #128	@ 0x80
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4013      	ands	r3, r2
 800247e:	d1f0      	bne.n	8002462 <HAL_RCC_OscConfig+0x236>
 8002480:	e000      	b.n	8002484 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002482:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2208      	movs	r2, #8
 800248a:	4013      	ands	r3, r2
 800248c:	d047      	beq.n	800251e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800248e:	4b32      	ldr	r3, [pc, #200]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2238      	movs	r2, #56	@ 0x38
 8002494:	4013      	ands	r3, r2
 8002496:	2b18      	cmp	r3, #24
 8002498:	d10a      	bne.n	80024b0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800249a:	4b2f      	ldr	r3, [pc, #188]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 800249c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800249e:	2202      	movs	r2, #2
 80024a0:	4013      	ands	r3, r2
 80024a2:	d03c      	beq.n	800251e <HAL_RCC_OscConfig+0x2f2>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d138      	bne.n	800251e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e1c5      	b.n	800283c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d019      	beq.n	80024ec <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80024b8:	4b27      	ldr	r3, [pc, #156]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 80024ba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80024bc:	4b26      	ldr	r3, [pc, #152]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 80024be:	2101      	movs	r1, #1
 80024c0:	430a      	orrs	r2, r1
 80024c2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c4:	f7ff fabe 	bl	8001a44 <HAL_GetTick>
 80024c8:	0003      	movs	r3, r0
 80024ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ce:	f7ff fab9 	bl	8001a44 <HAL_GetTick>
 80024d2:	0002      	movs	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e1ad      	b.n	800283c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 80024e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024e4:	2202      	movs	r2, #2
 80024e6:	4013      	ands	r3, r2
 80024e8:	d0f1      	beq.n	80024ce <HAL_RCC_OscConfig+0x2a2>
 80024ea:	e018      	b.n	800251e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80024ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 80024ee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80024f0:	4b19      	ldr	r3, [pc, #100]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 80024f2:	2101      	movs	r1, #1
 80024f4:	438a      	bics	r2, r1
 80024f6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7ff faa4 	bl	8001a44 <HAL_GetTick>
 80024fc:	0003      	movs	r3, r0
 80024fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002502:	f7ff fa9f 	bl	8001a44 <HAL_GetTick>
 8002506:	0002      	movs	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e193      	b.n	800283c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002514:	4b10      	ldr	r3, [pc, #64]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 8002516:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002518:	2202      	movs	r2, #2
 800251a:	4013      	ands	r3, r2
 800251c:	d1f1      	bne.n	8002502 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2204      	movs	r2, #4
 8002524:	4013      	ands	r3, r2
 8002526:	d100      	bne.n	800252a <HAL_RCC_OscConfig+0x2fe>
 8002528:	e0c6      	b.n	80026b8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800252a:	231f      	movs	r3, #31
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002532:	4b09      	ldr	r3, [pc, #36]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	2238      	movs	r2, #56	@ 0x38
 8002538:	4013      	ands	r3, r2
 800253a:	2b20      	cmp	r3, #32
 800253c:	d11e      	bne.n	800257c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800253e:	4b06      	ldr	r3, [pc, #24]	@ (8002558 <HAL_RCC_OscConfig+0x32c>)
 8002540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002542:	2202      	movs	r2, #2
 8002544:	4013      	ands	r3, r2
 8002546:	d100      	bne.n	800254a <HAL_RCC_OscConfig+0x31e>
 8002548:	e0b6      	b.n	80026b8 <HAL_RCC_OscConfig+0x48c>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d000      	beq.n	8002554 <HAL_RCC_OscConfig+0x328>
 8002552:	e0b1      	b.n	80026b8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e171      	b.n	800283c <HAL_RCC_OscConfig+0x610>
 8002558:	40021000 	.word	0x40021000
 800255c:	fffeffff 	.word	0xfffeffff
 8002560:	fffbffff 	.word	0xfffbffff
 8002564:	ffff80ff 	.word	0xffff80ff
 8002568:	ffffc7ff 	.word	0xffffc7ff
 800256c:	00f42400 	.word	0x00f42400
 8002570:	20000018 	.word	0x20000018
 8002574:	20000034 	.word	0x20000034
 8002578:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800257c:	4bb1      	ldr	r3, [pc, #708]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 800257e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002580:	2380      	movs	r3, #128	@ 0x80
 8002582:	055b      	lsls	r3, r3, #21
 8002584:	4013      	ands	r3, r2
 8002586:	d101      	bne.n	800258c <HAL_RCC_OscConfig+0x360>
 8002588:	2301      	movs	r3, #1
 800258a:	e000      	b.n	800258e <HAL_RCC_OscConfig+0x362>
 800258c:	2300      	movs	r3, #0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d011      	beq.n	80025b6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002592:	4bac      	ldr	r3, [pc, #688]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 8002594:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002596:	4bab      	ldr	r3, [pc, #684]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 8002598:	2180      	movs	r1, #128	@ 0x80
 800259a:	0549      	lsls	r1, r1, #21
 800259c:	430a      	orrs	r2, r1
 800259e:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025a0:	4ba8      	ldr	r3, [pc, #672]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 80025a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025a4:	2380      	movs	r3, #128	@ 0x80
 80025a6:	055b      	lsls	r3, r3, #21
 80025a8:	4013      	ands	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80025ae:	231f      	movs	r3, #31
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	2201      	movs	r2, #1
 80025b4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025b6:	4ba4      	ldr	r3, [pc, #656]	@ (8002848 <HAL_RCC_OscConfig+0x61c>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	2380      	movs	r3, #128	@ 0x80
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	4013      	ands	r3, r2
 80025c0:	d11a      	bne.n	80025f8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025c2:	4ba1      	ldr	r3, [pc, #644]	@ (8002848 <HAL_RCC_OscConfig+0x61c>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	4ba0      	ldr	r3, [pc, #640]	@ (8002848 <HAL_RCC_OscConfig+0x61c>)
 80025c8:	2180      	movs	r1, #128	@ 0x80
 80025ca:	0049      	lsls	r1, r1, #1
 80025cc:	430a      	orrs	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80025d0:	f7ff fa38 	bl	8001a44 <HAL_GetTick>
 80025d4:	0003      	movs	r3, r0
 80025d6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025da:	f7ff fa33 	bl	8001a44 <HAL_GetTick>
 80025de:	0002      	movs	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e127      	b.n	800283c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ec:	4b96      	ldr	r3, [pc, #600]	@ (8002848 <HAL_RCC_OscConfig+0x61c>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	2380      	movs	r3, #128	@ 0x80
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4013      	ands	r3, r2
 80025f6:	d0f0      	beq.n	80025da <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d106      	bne.n	800260e <HAL_RCC_OscConfig+0x3e2>
 8002600:	4b90      	ldr	r3, [pc, #576]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 8002602:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002604:	4b8f      	ldr	r3, [pc, #572]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 8002606:	2101      	movs	r1, #1
 8002608:	430a      	orrs	r2, r1
 800260a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800260c:	e01c      	b.n	8002648 <HAL_RCC_OscConfig+0x41c>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b05      	cmp	r3, #5
 8002614:	d10c      	bne.n	8002630 <HAL_RCC_OscConfig+0x404>
 8002616:	4b8b      	ldr	r3, [pc, #556]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 8002618:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800261a:	4b8a      	ldr	r3, [pc, #552]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 800261c:	2104      	movs	r1, #4
 800261e:	430a      	orrs	r2, r1
 8002620:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002622:	4b88      	ldr	r3, [pc, #544]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 8002624:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002626:	4b87      	ldr	r3, [pc, #540]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 8002628:	2101      	movs	r1, #1
 800262a:	430a      	orrs	r2, r1
 800262c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800262e:	e00b      	b.n	8002648 <HAL_RCC_OscConfig+0x41c>
 8002630:	4b84      	ldr	r3, [pc, #528]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 8002632:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002634:	4b83      	ldr	r3, [pc, #524]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 8002636:	2101      	movs	r1, #1
 8002638:	438a      	bics	r2, r1
 800263a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800263c:	4b81      	ldr	r3, [pc, #516]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 800263e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002640:	4b80      	ldr	r3, [pc, #512]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 8002642:	2104      	movs	r1, #4
 8002644:	438a      	bics	r2, r1
 8002646:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d014      	beq.n	800267a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002650:	f7ff f9f8 	bl	8001a44 <HAL_GetTick>
 8002654:	0003      	movs	r3, r0
 8002656:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002658:	e009      	b.n	800266e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265a:	f7ff f9f3 	bl	8001a44 <HAL_GetTick>
 800265e:	0002      	movs	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	4a79      	ldr	r2, [pc, #484]	@ (800284c <HAL_RCC_OscConfig+0x620>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e0e6      	b.n	800283c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800266e:	4b75      	ldr	r3, [pc, #468]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 8002670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002672:	2202      	movs	r2, #2
 8002674:	4013      	ands	r3, r2
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x42e>
 8002678:	e013      	b.n	80026a2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267a:	f7ff f9e3 	bl	8001a44 <HAL_GetTick>
 800267e:	0003      	movs	r3, r0
 8002680:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002682:	e009      	b.n	8002698 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002684:	f7ff f9de 	bl	8001a44 <HAL_GetTick>
 8002688:	0002      	movs	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	4a6f      	ldr	r2, [pc, #444]	@ (800284c <HAL_RCC_OscConfig+0x620>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e0d1      	b.n	800283c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002698:	4b6a      	ldr	r3, [pc, #424]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 800269a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269c:	2202      	movs	r2, #2
 800269e:	4013      	ands	r3, r2
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80026a2:	231f      	movs	r3, #31
 80026a4:	18fb      	adds	r3, r7, r3
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d105      	bne.n	80026b8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80026ac:	4b65      	ldr	r3, [pc, #404]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 80026ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026b0:	4b64      	ldr	r3, [pc, #400]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 80026b2:	4967      	ldr	r1, [pc, #412]	@ (8002850 <HAL_RCC_OscConfig+0x624>)
 80026b4:	400a      	ands	r2, r1
 80026b6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d100      	bne.n	80026c2 <HAL_RCC_OscConfig+0x496>
 80026c0:	e0bb      	b.n	800283a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026c2:	4b60      	ldr	r3, [pc, #384]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	2238      	movs	r2, #56	@ 0x38
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b10      	cmp	r3, #16
 80026cc:	d100      	bne.n	80026d0 <HAL_RCC_OscConfig+0x4a4>
 80026ce:	e07b      	b.n	80027c8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d156      	bne.n	8002786 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d8:	4b5a      	ldr	r3, [pc, #360]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4b59      	ldr	r3, [pc, #356]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 80026de:	495d      	ldr	r1, [pc, #372]	@ (8002854 <HAL_RCC_OscConfig+0x628>)
 80026e0:	400a      	ands	r2, r1
 80026e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e4:	f7ff f9ae 	bl	8001a44 <HAL_GetTick>
 80026e8:	0003      	movs	r3, r0
 80026ea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ee:	f7ff f9a9 	bl	8001a44 <HAL_GetTick>
 80026f2:	0002      	movs	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e09d      	b.n	800283c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002700:	4b50      	ldr	r3, [pc, #320]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	2380      	movs	r3, #128	@ 0x80
 8002706:	049b      	lsls	r3, r3, #18
 8002708:	4013      	ands	r3, r2
 800270a:	d1f0      	bne.n	80026ee <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800270c:	4b4d      	ldr	r3, [pc, #308]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	4a51      	ldr	r2, [pc, #324]	@ (8002858 <HAL_RCC_OscConfig+0x62c>)
 8002712:	4013      	ands	r3, r2
 8002714:	0019      	movs	r1, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a1a      	ldr	r2, [r3, #32]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002724:	021b      	lsls	r3, r3, #8
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002738:	431a      	orrs	r2, r3
 800273a:	4b42      	ldr	r3, [pc, #264]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 800273c:	430a      	orrs	r2, r1
 800273e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002740:	4b40      	ldr	r3, [pc, #256]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4b3f      	ldr	r3, [pc, #252]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 8002746:	2180      	movs	r1, #128	@ 0x80
 8002748:	0449      	lsls	r1, r1, #17
 800274a:	430a      	orrs	r2, r1
 800274c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800274e:	4b3d      	ldr	r3, [pc, #244]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	4b3c      	ldr	r3, [pc, #240]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 8002754:	2180      	movs	r1, #128	@ 0x80
 8002756:	0549      	lsls	r1, r1, #21
 8002758:	430a      	orrs	r2, r1
 800275a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7ff f972 	bl	8001a44 <HAL_GetTick>
 8002760:	0003      	movs	r3, r0
 8002762:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002766:	f7ff f96d 	bl	8001a44 <HAL_GetTick>
 800276a:	0002      	movs	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e061      	b.n	800283c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002778:	4b32      	ldr	r3, [pc, #200]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	2380      	movs	r3, #128	@ 0x80
 800277e:	049b      	lsls	r3, r3, #18
 8002780:	4013      	ands	r3, r2
 8002782:	d0f0      	beq.n	8002766 <HAL_RCC_OscConfig+0x53a>
 8002784:	e059      	b.n	800283a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002786:	4b2f      	ldr	r3, [pc, #188]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	4b2e      	ldr	r3, [pc, #184]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 800278c:	4931      	ldr	r1, [pc, #196]	@ (8002854 <HAL_RCC_OscConfig+0x628>)
 800278e:	400a      	ands	r2, r1
 8002790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002792:	f7ff f957 	bl	8001a44 <HAL_GetTick>
 8002796:	0003      	movs	r3, r0
 8002798:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279c:	f7ff f952 	bl	8001a44 <HAL_GetTick>
 80027a0:	0002      	movs	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e046      	b.n	800283c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ae:	4b25      	ldr	r3, [pc, #148]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	2380      	movs	r3, #128	@ 0x80
 80027b4:	049b      	lsls	r3, r3, #18
 80027b6:	4013      	ands	r3, r2
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80027ba:	4b22      	ldr	r3, [pc, #136]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	4b21      	ldr	r3, [pc, #132]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 80027c0:	4926      	ldr	r1, [pc, #152]	@ (800285c <HAL_RCC_OscConfig+0x630>)
 80027c2:	400a      	ands	r2, r1
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	e038      	b.n	800283a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e033      	b.n	800283c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80027d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002844 <HAL_RCC_OscConfig+0x618>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	2203      	movs	r2, #3
 80027de:	401a      	ands	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d126      	bne.n	8002836 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2270      	movs	r2, #112	@ 0x70
 80027ec:	401a      	ands	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d11f      	bne.n	8002836 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	23fe      	movs	r3, #254	@ 0xfe
 80027fa:	01db      	lsls	r3, r3, #7
 80027fc:	401a      	ands	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002802:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002804:	429a      	cmp	r2, r3
 8002806:	d116      	bne.n	8002836 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	23f8      	movs	r3, #248	@ 0xf8
 800280c:	039b      	lsls	r3, r3, #14
 800280e:	401a      	ands	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002814:	429a      	cmp	r2, r3
 8002816:	d10e      	bne.n	8002836 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	23e0      	movs	r3, #224	@ 0xe0
 800281c:	051b      	lsls	r3, r3, #20
 800281e:	401a      	ands	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002824:	429a      	cmp	r2, r3
 8002826:	d106      	bne.n	8002836 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	0f5b      	lsrs	r3, r3, #29
 800282c:	075a      	lsls	r2, r3, #29
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002832:	429a      	cmp	r2, r3
 8002834:	d001      	beq.n	800283a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	0018      	movs	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	b008      	add	sp, #32
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40021000 	.word	0x40021000
 8002848:	40007000 	.word	0x40007000
 800284c:	00001388 	.word	0x00001388
 8002850:	efffffff 	.word	0xefffffff
 8002854:	feffffff 	.word	0xfeffffff
 8002858:	11c1808c 	.word	0x11c1808c
 800285c:	eefefffc 	.word	0xeefefffc

08002860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e0e9      	b.n	8002a48 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002874:	4b76      	ldr	r3, [pc, #472]	@ (8002a50 <HAL_RCC_ClockConfig+0x1f0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2207      	movs	r2, #7
 800287a:	4013      	ands	r3, r2
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d91e      	bls.n	80028c0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002882:	4b73      	ldr	r3, [pc, #460]	@ (8002a50 <HAL_RCC_ClockConfig+0x1f0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2207      	movs	r2, #7
 8002888:	4393      	bics	r3, r2
 800288a:	0019      	movs	r1, r3
 800288c:	4b70      	ldr	r3, [pc, #448]	@ (8002a50 <HAL_RCC_ClockConfig+0x1f0>)
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002894:	f7ff f8d6 	bl	8001a44 <HAL_GetTick>
 8002898:	0003      	movs	r3, r0
 800289a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800289c:	e009      	b.n	80028b2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800289e:	f7ff f8d1 	bl	8001a44 <HAL_GetTick>
 80028a2:	0002      	movs	r2, r0
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	4a6a      	ldr	r2, [pc, #424]	@ (8002a54 <HAL_RCC_ClockConfig+0x1f4>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e0ca      	b.n	8002a48 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028b2:	4b67      	ldr	r3, [pc, #412]	@ (8002a50 <HAL_RCC_ClockConfig+0x1f0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2207      	movs	r2, #7
 80028b8:	4013      	ands	r3, r2
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d1ee      	bne.n	800289e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2202      	movs	r2, #2
 80028c6:	4013      	ands	r3, r2
 80028c8:	d015      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2204      	movs	r2, #4
 80028d0:	4013      	ands	r3, r2
 80028d2:	d006      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80028d4:	4b60      	ldr	r3, [pc, #384]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f8>)
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	4b5f      	ldr	r3, [pc, #380]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f8>)
 80028da:	21e0      	movs	r1, #224	@ 0xe0
 80028dc:	01c9      	lsls	r1, r1, #7
 80028de:	430a      	orrs	r2, r1
 80028e0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e2:	4b5d      	ldr	r3, [pc, #372]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f8>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	4a5d      	ldr	r2, [pc, #372]	@ (8002a5c <HAL_RCC_ClockConfig+0x1fc>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	0019      	movs	r1, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	4b59      	ldr	r3, [pc, #356]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f8>)
 80028f2:	430a      	orrs	r2, r1
 80028f4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2201      	movs	r2, #1
 80028fc:	4013      	ands	r3, r2
 80028fe:	d057      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d107      	bne.n	8002918 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002908:	4b53      	ldr	r3, [pc, #332]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f8>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	2380      	movs	r3, #128	@ 0x80
 800290e:	029b      	lsls	r3, r3, #10
 8002910:	4013      	ands	r3, r2
 8002912:	d12b      	bne.n	800296c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e097      	b.n	8002a48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b02      	cmp	r3, #2
 800291e:	d107      	bne.n	8002930 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002920:	4b4d      	ldr	r3, [pc, #308]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f8>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	2380      	movs	r3, #128	@ 0x80
 8002926:	049b      	lsls	r3, r3, #18
 8002928:	4013      	ands	r3, r2
 800292a:	d11f      	bne.n	800296c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e08b      	b.n	8002a48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d107      	bne.n	8002948 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002938:	4b47      	ldr	r3, [pc, #284]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f8>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	2380      	movs	r3, #128	@ 0x80
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4013      	ands	r3, r2
 8002942:	d113      	bne.n	800296c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e07f      	b.n	8002a48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b03      	cmp	r3, #3
 800294e:	d106      	bne.n	800295e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002950:	4b41      	ldr	r3, [pc, #260]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f8>)
 8002952:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002954:	2202      	movs	r2, #2
 8002956:	4013      	ands	r3, r2
 8002958:	d108      	bne.n	800296c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e074      	b.n	8002a48 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800295e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f8>)
 8002960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002962:	2202      	movs	r2, #2
 8002964:	4013      	ands	r3, r2
 8002966:	d101      	bne.n	800296c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e06d      	b.n	8002a48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800296c:	4b3a      	ldr	r3, [pc, #232]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f8>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2207      	movs	r2, #7
 8002972:	4393      	bics	r3, r2
 8002974:	0019      	movs	r1, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	4b37      	ldr	r3, [pc, #220]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f8>)
 800297c:	430a      	orrs	r2, r1
 800297e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002980:	f7ff f860 	bl	8001a44 <HAL_GetTick>
 8002984:	0003      	movs	r3, r0
 8002986:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002988:	e009      	b.n	800299e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800298a:	f7ff f85b 	bl	8001a44 <HAL_GetTick>
 800298e:	0002      	movs	r2, r0
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	4a2f      	ldr	r2, [pc, #188]	@ (8002a54 <HAL_RCC_ClockConfig+0x1f4>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d901      	bls.n	800299e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e054      	b.n	8002a48 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299e:	4b2e      	ldr	r3, [pc, #184]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f8>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	2238      	movs	r2, #56	@ 0x38
 80029a4:	401a      	ands	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d1ec      	bne.n	800298a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029b0:	4b27      	ldr	r3, [pc, #156]	@ (8002a50 <HAL_RCC_ClockConfig+0x1f0>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2207      	movs	r2, #7
 80029b6:	4013      	ands	r3, r2
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d21e      	bcs.n	80029fc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029be:	4b24      	ldr	r3, [pc, #144]	@ (8002a50 <HAL_RCC_ClockConfig+0x1f0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2207      	movs	r2, #7
 80029c4:	4393      	bics	r3, r2
 80029c6:	0019      	movs	r1, r3
 80029c8:	4b21      	ldr	r3, [pc, #132]	@ (8002a50 <HAL_RCC_ClockConfig+0x1f0>)
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029d0:	f7ff f838 	bl	8001a44 <HAL_GetTick>
 80029d4:	0003      	movs	r3, r0
 80029d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029d8:	e009      	b.n	80029ee <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029da:	f7ff f833 	bl	8001a44 <HAL_GetTick>
 80029de:	0002      	movs	r2, r0
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a54 <HAL_RCC_ClockConfig+0x1f4>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e02c      	b.n	8002a48 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029ee:	4b18      	ldr	r3, [pc, #96]	@ (8002a50 <HAL_RCC_ClockConfig+0x1f0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2207      	movs	r2, #7
 80029f4:	4013      	ands	r3, r2
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d1ee      	bne.n	80029da <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2204      	movs	r2, #4
 8002a02:	4013      	ands	r3, r2
 8002a04:	d009      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a06:	4b14      	ldr	r3, [pc, #80]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f8>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	4a15      	ldr	r2, [pc, #84]	@ (8002a60 <HAL_RCC_ClockConfig+0x200>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	0019      	movs	r1, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	4b10      	ldr	r3, [pc, #64]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f8>)
 8002a16:	430a      	orrs	r2, r1
 8002a18:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002a1a:	f000 f829 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 8002a1e:	0001      	movs	r1, r0
 8002a20:	4b0d      	ldr	r3, [pc, #52]	@ (8002a58 <HAL_RCC_ClockConfig+0x1f8>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	0a1b      	lsrs	r3, r3, #8
 8002a26:	220f      	movs	r2, #15
 8002a28:	401a      	ands	r2, r3
 8002a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a64 <HAL_RCC_ClockConfig+0x204>)
 8002a2c:	0092      	lsls	r2, r2, #2
 8002a2e:	58d3      	ldr	r3, [r2, r3]
 8002a30:	221f      	movs	r2, #31
 8002a32:	4013      	ands	r3, r2
 8002a34:	000a      	movs	r2, r1
 8002a36:	40da      	lsrs	r2, r3
 8002a38:	4b0b      	ldr	r3, [pc, #44]	@ (8002a68 <HAL_RCC_ClockConfig+0x208>)
 8002a3a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a6c <HAL_RCC_ClockConfig+0x20c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	0018      	movs	r0, r3
 8002a42:	f7fe ffb5 	bl	80019b0 <HAL_InitTick>
 8002a46:	0003      	movs	r3, r0
}
 8002a48:	0018      	movs	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b004      	add	sp, #16
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40022000 	.word	0x40022000
 8002a54:	00001388 	.word	0x00001388
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	fffff0ff 	.word	0xfffff0ff
 8002a60:	ffff8fff 	.word	0xffff8fff
 8002a64:	08006538 	.word	0x08006538
 8002a68:	20000018 	.word	0x20000018
 8002a6c:	20000034 	.word	0x20000034

08002a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a76:	4b3c      	ldr	r3, [pc, #240]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	2238      	movs	r2, #56	@ 0x38
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d10f      	bne.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002a80:	4b39      	ldr	r3, [pc, #228]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	0adb      	lsrs	r3, r3, #11
 8002a86:	2207      	movs	r2, #7
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	409a      	lsls	r2, r3
 8002a8e:	0013      	movs	r3, r2
 8002a90:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002a92:	6839      	ldr	r1, [r7, #0]
 8002a94:	4835      	ldr	r0, [pc, #212]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a96:	f7fd fb3f 	bl	8000118 <__udivsi3>
 8002a9a:	0003      	movs	r3, r0
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	e05d      	b.n	8002b5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aa0:	4b31      	ldr	r3, [pc, #196]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2238      	movs	r2, #56	@ 0x38
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d102      	bne.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002aac:	4b30      	ldr	r3, [pc, #192]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x100>)
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	e054      	b.n	8002b5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ab2:	4b2d      	ldr	r3, [pc, #180]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2238      	movs	r2, #56	@ 0x38
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b10      	cmp	r3, #16
 8002abc:	d138      	bne.n	8002b30 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002abe:	4b2a      	ldr	r3, [pc, #168]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ac8:	4b27      	ldr	r3, [pc, #156]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	091b      	lsrs	r3, r3, #4
 8002ace:	2207      	movs	r2, #7
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d10d      	bne.n	8002af8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002adc:	68b9      	ldr	r1, [r7, #8]
 8002ade:	4824      	ldr	r0, [pc, #144]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x100>)
 8002ae0:	f7fd fb1a 	bl	8000118 <__udivsi3>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	0019      	movs	r1, r3
 8002ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	0a1b      	lsrs	r3, r3, #8
 8002aee:	227f      	movs	r2, #127	@ 0x7f
 8002af0:	4013      	ands	r3, r2
 8002af2:	434b      	muls	r3, r1
 8002af4:	617b      	str	r3, [r7, #20]
        break;
 8002af6:	e00d      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002af8:	68b9      	ldr	r1, [r7, #8]
 8002afa:	481c      	ldr	r0, [pc, #112]	@ (8002b6c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002afc:	f7fd fb0c 	bl	8000118 <__udivsi3>
 8002b00:	0003      	movs	r3, r0
 8002b02:	0019      	movs	r1, r3
 8002b04:	4b18      	ldr	r3, [pc, #96]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	0a1b      	lsrs	r3, r3, #8
 8002b0a:	227f      	movs	r2, #127	@ 0x7f
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	434b      	muls	r3, r1
 8002b10:	617b      	str	r3, [r7, #20]
        break;
 8002b12:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002b14:	4b14      	ldr	r3, [pc, #80]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	0f5b      	lsrs	r3, r3, #29
 8002b1a:	2207      	movs	r2, #7
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	3301      	adds	r3, #1
 8002b20:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	6978      	ldr	r0, [r7, #20]
 8002b26:	f7fd faf7 	bl	8000118 <__udivsi3>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	e015      	b.n	8002b5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002b30:	4b0d      	ldr	r3, [pc, #52]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2238      	movs	r2, #56	@ 0x38
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d103      	bne.n	8002b44 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002b3c:	2380      	movs	r3, #128	@ 0x80
 8002b3e:	021b      	lsls	r3, r3, #8
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	e00b      	b.n	8002b5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b44:	4b08      	ldr	r3, [pc, #32]	@ (8002b68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2238      	movs	r2, #56	@ 0x38
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b18      	cmp	r3, #24
 8002b4e:	d103      	bne.n	8002b58 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002b50:	23fa      	movs	r3, #250	@ 0xfa
 8002b52:	01db      	lsls	r3, r3, #7
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	e001      	b.n	8002b5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b5c:	693b      	ldr	r3, [r7, #16]
}
 8002b5e:	0018      	movs	r0, r3
 8002b60:	46bd      	mov	sp, r7
 8002b62:	b006      	add	sp, #24
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	46c0      	nop			@ (mov r8, r8)
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	00f42400 	.word	0x00f42400
 8002b70:	007a1200 	.word	0x007a1200

08002b74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b78:	4b02      	ldr	r3, [pc, #8]	@ (8002b84 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
}
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	46c0      	nop			@ (mov r8, r8)
 8002b84:	20000018 	.word	0x20000018

08002b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b88:	b5b0      	push	{r4, r5, r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002b8c:	f7ff fff2 	bl	8002b74 <HAL_RCC_GetHCLKFreq>
 8002b90:	0004      	movs	r4, r0
 8002b92:	f7ff fb3f 	bl	8002214 <LL_RCC_GetAPB1Prescaler>
 8002b96:	0003      	movs	r3, r0
 8002b98:	0b1a      	lsrs	r2, r3, #12
 8002b9a:	4b05      	ldr	r3, [pc, #20]	@ (8002bb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b9c:	0092      	lsls	r2, r2, #2
 8002b9e:	58d3      	ldr	r3, [r2, r3]
 8002ba0:	221f      	movs	r2, #31
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	40dc      	lsrs	r4, r3
 8002ba6:	0023      	movs	r3, r4
}
 8002ba8:	0018      	movs	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bdb0      	pop	{r4, r5, r7, pc}
 8002bae:	46c0      	nop			@ (mov r8, r8)
 8002bb0:	08006578 	.word	0x08006578

08002bb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002bbc:	2313      	movs	r3, #19
 8002bbe:	18fb      	adds	r3, r7, r3
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bc4:	2312      	movs	r3, #18
 8002bc6:	18fb      	adds	r3, r7, r3
 8002bc8:	2200      	movs	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	2380      	movs	r3, #128	@ 0x80
 8002bd2:	029b      	lsls	r3, r3, #10
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	d100      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002bd8:	e0a3      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bda:	2011      	movs	r0, #17
 8002bdc:	183b      	adds	r3, r7, r0
 8002bde:	2200      	movs	r2, #0
 8002be0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be2:	4bc3      	ldr	r3, [pc, #780]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002be4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002be6:	2380      	movs	r3, #128	@ 0x80
 8002be8:	055b      	lsls	r3, r3, #21
 8002bea:	4013      	ands	r3, r2
 8002bec:	d110      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bee:	4bc0      	ldr	r3, [pc, #768]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bf0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bf2:	4bbf      	ldr	r3, [pc, #764]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bf4:	2180      	movs	r1, #128	@ 0x80
 8002bf6:	0549      	lsls	r1, r1, #21
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002bfc:	4bbc      	ldr	r3, [pc, #752]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c00:	2380      	movs	r3, #128	@ 0x80
 8002c02:	055b      	lsls	r3, r3, #21
 8002c04:	4013      	ands	r3, r2
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c0a:	183b      	adds	r3, r7, r0
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c10:	4bb8      	ldr	r3, [pc, #736]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	4bb7      	ldr	r3, [pc, #732]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002c16:	2180      	movs	r1, #128	@ 0x80
 8002c18:	0049      	lsls	r1, r1, #1
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c1e:	f7fe ff11 	bl	8001a44 <HAL_GetTick>
 8002c22:	0003      	movs	r3, r0
 8002c24:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c26:	e00b      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c28:	f7fe ff0c 	bl	8001a44 <HAL_GetTick>
 8002c2c:	0002      	movs	r2, r0
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d904      	bls.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002c36:	2313      	movs	r3, #19
 8002c38:	18fb      	adds	r3, r7, r3
 8002c3a:	2203      	movs	r2, #3
 8002c3c:	701a      	strb	r2, [r3, #0]
        break;
 8002c3e:	e005      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c40:	4bac      	ldr	r3, [pc, #688]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	2380      	movs	r3, #128	@ 0x80
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d0ed      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002c4c:	2313      	movs	r3, #19
 8002c4e:	18fb      	adds	r3, r7, r3
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d154      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c56:	4ba6      	ldr	r3, [pc, #664]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c5a:	23c0      	movs	r3, #192	@ 0xc0
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4013      	ands	r3, r2
 8002c60:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d019      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d014      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c72:	4b9f      	ldr	r3, [pc, #636]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c76:	4aa0      	ldr	r2, [pc, #640]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c7c:	4b9c      	ldr	r3, [pc, #624]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c7e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c80:	4b9b      	ldr	r3, [pc, #620]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c82:	2180      	movs	r1, #128	@ 0x80
 8002c84:	0249      	lsls	r1, r1, #9
 8002c86:	430a      	orrs	r2, r1
 8002c88:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c8a:	4b99      	ldr	r3, [pc, #612]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c8e:	4b98      	ldr	r3, [pc, #608]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c90:	499a      	ldr	r1, [pc, #616]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002c92:	400a      	ands	r2, r1
 8002c94:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c96:	4b96      	ldr	r3, [pc, #600]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d016      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca4:	f7fe fece 	bl	8001a44 <HAL_GetTick>
 8002ca8:	0003      	movs	r3, r0
 8002caa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cac:	e00c      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cae:	f7fe fec9 	bl	8001a44 <HAL_GetTick>
 8002cb2:	0002      	movs	r2, r0
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	4a91      	ldr	r2, [pc, #580]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d904      	bls.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002cbe:	2313      	movs	r3, #19
 8002cc0:	18fb      	adds	r3, r7, r3
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	701a      	strb	r2, [r3, #0]
            break;
 8002cc6:	e004      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cc8:	4b89      	ldr	r3, [pc, #548]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ccc:	2202      	movs	r2, #2
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d0ed      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002cd2:	2313      	movs	r3, #19
 8002cd4:	18fb      	adds	r3, r7, r3
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10a      	bne.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cdc:	4b84      	ldr	r3, [pc, #528]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce0:	4a85      	ldr	r2, [pc, #532]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	0019      	movs	r1, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cea:	4b81      	ldr	r3, [pc, #516]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cec:	430a      	orrs	r2, r1
 8002cee:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002cf0:	e00c      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cf2:	2312      	movs	r3, #18
 8002cf4:	18fb      	adds	r3, r7, r3
 8002cf6:	2213      	movs	r2, #19
 8002cf8:	18ba      	adds	r2, r7, r2
 8002cfa:	7812      	ldrb	r2, [r2, #0]
 8002cfc:	701a      	strb	r2, [r3, #0]
 8002cfe:	e005      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d00:	2312      	movs	r3, #18
 8002d02:	18fb      	adds	r3, r7, r3
 8002d04:	2213      	movs	r2, #19
 8002d06:	18ba      	adds	r2, r7, r2
 8002d08:	7812      	ldrb	r2, [r2, #0]
 8002d0a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d0c:	2311      	movs	r3, #17
 8002d0e:	18fb      	adds	r3, r7, r3
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d105      	bne.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d16:	4b76      	ldr	r3, [pc, #472]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d1a:	4b75      	ldr	r3, [pc, #468]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d1c:	4979      	ldr	r1, [pc, #484]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002d1e:	400a      	ands	r2, r1
 8002d20:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2201      	movs	r2, #1
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d009      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d2c:	4b70      	ldr	r3, [pc, #448]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d30:	2203      	movs	r2, #3
 8002d32:	4393      	bics	r3, r2
 8002d34:	0019      	movs	r1, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	4b6d      	ldr	r3, [pc, #436]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2202      	movs	r2, #2
 8002d46:	4013      	ands	r3, r2
 8002d48:	d009      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d4a:	4b69      	ldr	r3, [pc, #420]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d4e:	220c      	movs	r2, #12
 8002d50:	4393      	bics	r3, r2
 8002d52:	0019      	movs	r1, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	4b65      	ldr	r3, [pc, #404]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2210      	movs	r2, #16
 8002d64:	4013      	ands	r3, r2
 8002d66:	d009      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d68:	4b61      	ldr	r3, [pc, #388]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d6c:	4a66      	ldr	r2, [pc, #408]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	0019      	movs	r1, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	4b5e      	ldr	r3, [pc, #376]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	2380      	movs	r3, #128	@ 0x80
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4013      	ands	r3, r2
 8002d86:	d009      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d88:	4b59      	ldr	r3, [pc, #356]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d8c:	4a5f      	ldr	r2, [pc, #380]	@ (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	0019      	movs	r1, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699a      	ldr	r2, [r3, #24]
 8002d96:	4b56      	ldr	r3, [pc, #344]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	2380      	movs	r3, #128	@ 0x80
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4013      	ands	r3, r2
 8002da6:	d009      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002da8:	4b51      	ldr	r3, [pc, #324]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dac:	4a58      	ldr	r2, [pc, #352]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	0019      	movs	r1, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69da      	ldr	r2, [r3, #28]
 8002db6:	4b4e      	ldr	r3, [pc, #312]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002db8:	430a      	orrs	r2, r1
 8002dba:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d009      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dc6:	4b4a      	ldr	r3, [pc, #296]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dca:	4a52      	ldr	r2, [pc, #328]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	0019      	movs	r1, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	4b46      	ldr	r3, [pc, #280]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	2380      	movs	r3, #128	@ 0x80
 8002de0:	01db      	lsls	r3, r3, #7
 8002de2:	4013      	ands	r3, r2
 8002de4:	d015      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002de6:	4b42      	ldr	r3, [pc, #264]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	0899      	lsrs	r1, r3, #2
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1a      	ldr	r2, [r3, #32]
 8002df2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002df4:	430a      	orrs	r2, r1
 8002df6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1a      	ldr	r2, [r3, #32]
 8002dfc:	2380      	movs	r3, #128	@ 0x80
 8002dfe:	05db      	lsls	r3, r3, #23
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d106      	bne.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e04:	4b3a      	ldr	r3, [pc, #232]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	4b39      	ldr	r3, [pc, #228]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e0a:	2180      	movs	r1, #128	@ 0x80
 8002e0c:	0249      	lsls	r1, r1, #9
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	2380      	movs	r3, #128	@ 0x80
 8002e18:	031b      	lsls	r3, r3, #12
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d009      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e1e:	4b34      	ldr	r3, [pc, #208]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e22:	2240      	movs	r2, #64	@ 0x40
 8002e24:	4393      	bics	r3, r2
 8002e26:	0019      	movs	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e2c:	4b30      	ldr	r3, [pc, #192]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	2380      	movs	r3, #128	@ 0x80
 8002e38:	039b      	lsls	r3, r3, #14
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d016      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e3e:	4b2c      	ldr	r3, [pc, #176]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e42:	4a35      	ldr	r2, [pc, #212]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	0019      	movs	r1, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e4c:	4b28      	ldr	r3, [pc, #160]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e56:	2380      	movs	r3, #128	@ 0x80
 8002e58:	03db      	lsls	r3, r3, #15
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d106      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002e5e:	4b24      	ldr	r3, [pc, #144]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	4b23      	ldr	r3, [pc, #140]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e64:	2180      	movs	r1, #128	@ 0x80
 8002e66:	0449      	lsls	r1, r1, #17
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	2380      	movs	r3, #128	@ 0x80
 8002e72:	03db      	lsls	r3, r3, #15
 8002e74:	4013      	ands	r3, r2
 8002e76:	d016      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002e78:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e7c:	4a27      	ldr	r2, [pc, #156]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	0019      	movs	r1, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e86:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e90:	2380      	movs	r3, #128	@ 0x80
 8002e92:	045b      	lsls	r3, r3, #17
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d106      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002e98:	4b15      	ldr	r3, [pc, #84]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	4b14      	ldr	r3, [pc, #80]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e9e:	2180      	movs	r1, #128	@ 0x80
 8002ea0:	0449      	lsls	r1, r1, #17
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	2380      	movs	r3, #128	@ 0x80
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d016      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb6:	4a1a      	ldr	r2, [pc, #104]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	0019      	movs	r1, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	695a      	ldr	r2, [r3, #20]
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695a      	ldr	r2, [r3, #20]
 8002eca:	2380      	movs	r3, #128	@ 0x80
 8002ecc:	01db      	lsls	r3, r3, #7
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d106      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002ed2:	4b07      	ldr	r3, [pc, #28]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	4b06      	ldr	r3, [pc, #24]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ed8:	2180      	movs	r1, #128	@ 0x80
 8002eda:	0249      	lsls	r1, r1, #9
 8002edc:	430a      	orrs	r2, r1
 8002ede:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002ee0:	2312      	movs	r3, #18
 8002ee2:	18fb      	adds	r3, r7, r3
 8002ee4:	781b      	ldrb	r3, [r3, #0]
}
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	b006      	add	sp, #24
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	46c0      	nop			@ (mov r8, r8)
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	40007000 	.word	0x40007000
 8002ef8:	fffffcff 	.word	0xfffffcff
 8002efc:	fffeffff 	.word	0xfffeffff
 8002f00:	00001388 	.word	0x00001388
 8002f04:	efffffff 	.word	0xefffffff
 8002f08:	fffff3ff 	.word	0xfffff3ff
 8002f0c:	fff3ffff 	.word	0xfff3ffff
 8002f10:	ffcfffff 	.word	0xffcfffff
 8002f14:	ffffcfff 	.word	0xffffcfff
 8002f18:	ffbfffff 	.word	0xffbfffff
 8002f1c:	feffffff 	.word	0xfeffffff
 8002f20:	ffff3fff 	.word	0xffff3fff

08002f24 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002f24:	b5b0      	push	{r4, r5, r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f2c:	230f      	movs	r3, #15
 8002f2e:	18fb      	adds	r3, r7, r3
 8002f30:	2201      	movs	r2, #1
 8002f32:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d100      	bne.n	8002f3c <HAL_RTC_Init+0x18>
 8002f3a:	e08c      	b.n	8003056 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2229      	movs	r2, #41	@ 0x29
 8002f40:	5c9b      	ldrb	r3, [r3, r2]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10b      	bne.n	8002f60 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2228      	movs	r2, #40	@ 0x28
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2288      	movs	r2, #136	@ 0x88
 8002f54:	0212      	lsls	r2, r2, #8
 8002f56:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f7fd fe4c 	bl	8000bf8 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2229      	movs	r2, #41	@ 0x29
 8002f64:	2102      	movs	r1, #2
 8002f66:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	2210      	movs	r2, #16
 8002f70:	4013      	ands	r3, r2
 8002f72:	2b10      	cmp	r3, #16
 8002f74:	d062      	beq.n	800303c <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	22ca      	movs	r2, #202	@ 0xca
 8002f7c:	625a      	str	r2, [r3, #36]	@ 0x24
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2253      	movs	r2, #83	@ 0x53
 8002f84:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002f86:	250f      	movs	r5, #15
 8002f88:	197c      	adds	r4, r7, r5
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f000 f891 	bl	80030b4 <RTC_EnterInitMode>
 8002f92:	0003      	movs	r3, r0
 8002f94:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002f96:	0028      	movs	r0, r5
 8002f98:	183b      	adds	r3, r7, r0
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d12c      	bne.n	8002ffa <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	492e      	ldr	r1, [pc, #184]	@ (8003064 <HAL_RTC_Init+0x140>)
 8002fac:	400a      	ands	r2, r1
 8002fae:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6999      	ldr	r1, [r3, #24]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6912      	ldr	r2, [r2, #16]
 8002fd6:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6919      	ldr	r1, [r3, #16]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	041a      	lsls	r2, r3, #16
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002fec:	183c      	adds	r4, r7, r0
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f000 f8a1 	bl	8003138 <RTC_ExitInitMode>
 8002ff6:	0003      	movs	r3, r0
 8002ff8:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002ffa:	230f      	movs	r3, #15
 8002ffc:	18fb      	adds	r3, r7, r3
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d116      	bne.n	8003032 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	699a      	ldr	r2, [r3, #24]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	00d2      	lsls	r2, r2, #3
 8003010:	08d2      	lsrs	r2, r2, #3
 8003012:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6999      	ldr	r1, [r3, #24]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	22ff      	movs	r2, #255	@ 0xff
 8003038:	625a      	str	r2, [r3, #36]	@ 0x24
 800303a:	e003      	b.n	8003044 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800303c:	230f      	movs	r3, #15
 800303e:	18fb      	adds	r3, r7, r3
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8003044:	230f      	movs	r3, #15
 8003046:	18fb      	adds	r3, r7, r3
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d103      	bne.n	8003056 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2229      	movs	r2, #41	@ 0x29
 8003052:	2101      	movs	r1, #1
 8003054:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8003056:	230f      	movs	r3, #15
 8003058:	18fb      	adds	r3, r7, r3
 800305a:	781b      	ldrb	r3, [r3, #0]
}
 800305c:	0018      	movs	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	b004      	add	sp, #16
 8003062:	bdb0      	pop	{r4, r5, r7, pc}
 8003064:	fb8fffbf 	.word	0xfb8fffbf

08003068 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a0e      	ldr	r2, [pc, #56]	@ (80030b0 <HAL_RTC_WaitForSynchro+0x48>)
 8003076:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003078:	f7fe fce4 	bl	8001a44 <HAL_GetTick>
 800307c:	0003      	movs	r3, r0
 800307e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003080:	e00a      	b.n	8003098 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003082:	f7fe fcdf 	bl	8001a44 <HAL_GetTick>
 8003086:	0002      	movs	r2, r0
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	1ad2      	subs	r2, r2, r3
 800308c:	23fa      	movs	r3, #250	@ 0xfa
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	429a      	cmp	r2, r3
 8003092:	d901      	bls.n	8003098 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e006      	b.n	80030a6 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	2220      	movs	r2, #32
 80030a0:	4013      	ands	r3, r2
 80030a2:	d0ee      	beq.n	8003082 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	0018      	movs	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	b004      	add	sp, #16
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	46c0      	nop			@ (mov r8, r8)
 80030b0:	0001005f 	.word	0x0001005f

080030b4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80030bc:	230f      	movs	r3, #15
 80030be:	18fb      	adds	r3, r7, r3
 80030c0:	2200      	movs	r2, #0
 80030c2:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	2240      	movs	r2, #64	@ 0x40
 80030cc:	4013      	ands	r3, r2
 80030ce:	d12c      	bne.n	800312a <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2180      	movs	r1, #128	@ 0x80
 80030dc:	430a      	orrs	r2, r1
 80030de:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80030e0:	f7fe fcb0 	bl	8001a44 <HAL_GetTick>
 80030e4:	0003      	movs	r3, r0
 80030e6:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80030e8:	e014      	b.n	8003114 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80030ea:	f7fe fcab 	bl	8001a44 <HAL_GetTick>
 80030ee:	0002      	movs	r2, r0
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	1ad2      	subs	r2, r2, r3
 80030f4:	200f      	movs	r0, #15
 80030f6:	183b      	adds	r3, r7, r0
 80030f8:	1839      	adds	r1, r7, r0
 80030fa:	7809      	ldrb	r1, [r1, #0]
 80030fc:	7019      	strb	r1, [r3, #0]
 80030fe:	23fa      	movs	r3, #250	@ 0xfa
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	429a      	cmp	r2, r3
 8003104:	d906      	bls.n	8003114 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8003106:	183b      	adds	r3, r7, r0
 8003108:	2203      	movs	r2, #3
 800310a:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2229      	movs	r2, #41	@ 0x29
 8003110:	2103      	movs	r1, #3
 8003112:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	2240      	movs	r2, #64	@ 0x40
 800311c:	4013      	ands	r3, r2
 800311e:	d104      	bne.n	800312a <RTC_EnterInitMode+0x76>
 8003120:	230f      	movs	r3, #15
 8003122:	18fb      	adds	r3, r7, r3
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b03      	cmp	r3, #3
 8003128:	d1df      	bne.n	80030ea <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800312a:	230f      	movs	r3, #15
 800312c:	18fb      	adds	r3, r7, r3
 800312e:	781b      	ldrb	r3, [r3, #0]
}
 8003130:	0018      	movs	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	b004      	add	sp, #16
 8003136:	bd80      	pop	{r7, pc}

08003138 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003138:	b590      	push	{r4, r7, lr}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003140:	240f      	movs	r4, #15
 8003142:	193b      	adds	r3, r7, r4
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003148:	4b1c      	ldr	r3, [pc, #112]	@ (80031bc <RTC_ExitInitMode+0x84>)
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	4b1b      	ldr	r3, [pc, #108]	@ (80031bc <RTC_ExitInitMode+0x84>)
 800314e:	2180      	movs	r1, #128	@ 0x80
 8003150:	438a      	bics	r2, r1
 8003152:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003154:	4b19      	ldr	r3, [pc, #100]	@ (80031bc <RTC_ExitInitMode+0x84>)
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	2220      	movs	r2, #32
 800315a:	4013      	ands	r3, r2
 800315c:	d10d      	bne.n	800317a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	0018      	movs	r0, r3
 8003162:	f7ff ff81 	bl	8003068 <HAL_RTC_WaitForSynchro>
 8003166:	1e03      	subs	r3, r0, #0
 8003168:	d021      	beq.n	80031ae <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2229      	movs	r2, #41	@ 0x29
 800316e:	2103      	movs	r1, #3
 8003170:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003172:	193b      	adds	r3, r7, r4
 8003174:	2203      	movs	r2, #3
 8003176:	701a      	strb	r2, [r3, #0]
 8003178:	e019      	b.n	80031ae <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800317a:	4b10      	ldr	r3, [pc, #64]	@ (80031bc <RTC_ExitInitMode+0x84>)
 800317c:	699a      	ldr	r2, [r3, #24]
 800317e:	4b0f      	ldr	r3, [pc, #60]	@ (80031bc <RTC_ExitInitMode+0x84>)
 8003180:	2120      	movs	r1, #32
 8003182:	438a      	bics	r2, r1
 8003184:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	0018      	movs	r0, r3
 800318a:	f7ff ff6d 	bl	8003068 <HAL_RTC_WaitForSynchro>
 800318e:	1e03      	subs	r3, r0, #0
 8003190:	d007      	beq.n	80031a2 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2229      	movs	r2, #41	@ 0x29
 8003196:	2103      	movs	r1, #3
 8003198:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800319a:	230f      	movs	r3, #15
 800319c:	18fb      	adds	r3, r7, r3
 800319e:	2203      	movs	r2, #3
 80031a0:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80031a2:	4b06      	ldr	r3, [pc, #24]	@ (80031bc <RTC_ExitInitMode+0x84>)
 80031a4:	699a      	ldr	r2, [r3, #24]
 80031a6:	4b05      	ldr	r3, [pc, #20]	@ (80031bc <RTC_ExitInitMode+0x84>)
 80031a8:	2120      	movs	r1, #32
 80031aa:	430a      	orrs	r2, r1
 80031ac:	619a      	str	r2, [r3, #24]
  }

  return status;
 80031ae:	230f      	movs	r3, #15
 80031b0:	18fb      	adds	r3, r7, r3
 80031b2:	781b      	ldrb	r3, [r3, #0]
}
 80031b4:	0018      	movs	r0, r3
 80031b6:	46bd      	mov	sp, r7
 80031b8:	b005      	add	sp, #20
 80031ba:	bd90      	pop	{r4, r7, pc}
 80031bc:	40002800 	.word	0x40002800

080031c0 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2228      	movs	r2, #40	@ 0x28
 80031d0:	5c9b      	ldrb	r3, [r3, r2]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d101      	bne.n	80031da <HAL_RTCEx_SetWakeUpTimer+0x1a>
 80031d6:	2302      	movs	r3, #2
 80031d8:	e066      	b.n	80032a8 <HAL_RTCEx_SetWakeUpTimer+0xe8>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2228      	movs	r2, #40	@ 0x28
 80031de:	2101      	movs	r1, #1
 80031e0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2229      	movs	r2, #41	@ 0x29
 80031e6:	2102      	movs	r1, #2
 80031e8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	22ca      	movs	r2, #202	@ 0xca
 80031f0:	625a      	str	r2, [r3, #36]	@ 0x24
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2253      	movs	r2, #83	@ 0x53
 80031f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 80031fa:	4b2d      	ldr	r3, [pc, #180]	@ (80032b0 <HAL_RTCEx_SetWakeUpTimer+0xf0>)
 80031fc:	699a      	ldr	r2, [r3, #24]
 80031fe:	4b2c      	ldr	r3, [pc, #176]	@ (80032b0 <HAL_RTCEx_SetWakeUpTimer+0xf0>)
 8003200:	492c      	ldr	r1, [pc, #176]	@ (80032b4 <HAL_RTCEx_SetWakeUpTimer+0xf4>)
 8003202:	400a      	ands	r2, r1
 8003204:	619a      	str	r2, [r3, #24]

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003206:	4b2a      	ldr	r3, [pc, #168]	@ (80032b0 <HAL_RTCEx_SetWakeUpTimer+0xf0>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	2240      	movs	r2, #64	@ 0x40
 800320c:	4013      	ands	r3, r2
 800320e:	d121      	bne.n	8003254 <HAL_RTCEx_SetWakeUpTimer+0x94>
  {
    tickstart = HAL_GetTick();
 8003210:	f7fe fc18 	bl	8001a44 <HAL_GetTick>
 8003214:	0003      	movs	r3, r0
 8003216:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003218:	e016      	b.n	8003248 <HAL_RTCEx_SetWakeUpTimer+0x88>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800321a:	f7fe fc13 	bl	8001a44 <HAL_GetTick>
 800321e:	0002      	movs	r2, r0
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	1ad2      	subs	r2, r2, r3
 8003224:	23fa      	movs	r3, #250	@ 0xfa
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	429a      	cmp	r2, r3
 800322a:	d90d      	bls.n	8003248 <HAL_RTCEx_SetWakeUpTimer+0x88>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	22ff      	movs	r2, #255	@ 0xff
 8003232:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2229      	movs	r2, #41	@ 0x29
 8003238:	2103      	movs	r1, #3
 800323a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2228      	movs	r2, #40	@ 0x28
 8003240:	2100      	movs	r1, #0
 8003242:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e02f      	b.n	80032a8 <HAL_RTCEx_SetWakeUpTimer+0xe8>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	2204      	movs	r2, #4
 8003250:	4013      	ands	r3, r2
 8003252:	d0e2      	beq.n	800321a <HAL_RTCEx_SetWakeUpTimer+0x5a>
      }
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699a      	ldr	r2, [r3, #24]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2107      	movs	r1, #7
 8003260:	438a      	bics	r2, r1
 8003262:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6999      	ldr	r1, [r3, #24]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	430a      	orrs	r2, r1
 8003272:	619a      	str	r2, [r3, #24]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	615a      	str	r2, [r3, #20]

   /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2180      	movs	r1, #128	@ 0x80
 8003288:	00c9      	lsls	r1, r1, #3
 800328a:	430a      	orrs	r2, r1
 800328c:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	22ff      	movs	r2, #255	@ 0xff
 8003294:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2229      	movs	r2, #41	@ 0x29
 800329a:	2101      	movs	r1, #1
 800329c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2228      	movs	r2, #40	@ 0x28
 80032a2:	2100      	movs	r1, #0
 80032a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	0018      	movs	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b006      	add	sp, #24
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40002800 	.word	0x40002800
 80032b4:	fffffbff 	.word	0xfffffbff

080032b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e04a      	b.n	8003360 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	223d      	movs	r2, #61	@ 0x3d
 80032ce:	5c9b      	ldrb	r3, [r3, r2]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d107      	bne.n	80032e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	223c      	movs	r2, #60	@ 0x3c
 80032da:	2100      	movs	r1, #0
 80032dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	0018      	movs	r0, r3
 80032e2:	f7fe f905 	bl	80014f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	223d      	movs	r2, #61	@ 0x3d
 80032ea:	2102      	movs	r1, #2
 80032ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3304      	adds	r3, #4
 80032f6:	0019      	movs	r1, r3
 80032f8:	0010      	movs	r0, r2
 80032fa:	f000 fd3d 	bl	8003d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2248      	movs	r2, #72	@ 0x48
 8003302:	2101      	movs	r1, #1
 8003304:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	223e      	movs	r2, #62	@ 0x3e
 800330a:	2101      	movs	r1, #1
 800330c:	5499      	strb	r1, [r3, r2]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	223f      	movs	r2, #63	@ 0x3f
 8003312:	2101      	movs	r1, #1
 8003314:	5499      	strb	r1, [r3, r2]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2240      	movs	r2, #64	@ 0x40
 800331a:	2101      	movs	r1, #1
 800331c:	5499      	strb	r1, [r3, r2]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2241      	movs	r2, #65	@ 0x41
 8003322:	2101      	movs	r1, #1
 8003324:	5499      	strb	r1, [r3, r2]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2242      	movs	r2, #66	@ 0x42
 800332a:	2101      	movs	r1, #1
 800332c:	5499      	strb	r1, [r3, r2]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2243      	movs	r2, #67	@ 0x43
 8003332:	2101      	movs	r1, #1
 8003334:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2244      	movs	r2, #68	@ 0x44
 800333a:	2101      	movs	r1, #1
 800333c:	5499      	strb	r1, [r3, r2]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2245      	movs	r2, #69	@ 0x45
 8003342:	2101      	movs	r1, #1
 8003344:	5499      	strb	r1, [r3, r2]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2246      	movs	r2, #70	@ 0x46
 800334a:	2101      	movs	r1, #1
 800334c:	5499      	strb	r1, [r3, r2]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2247      	movs	r2, #71	@ 0x47
 8003352:	2101      	movs	r1, #1
 8003354:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	223d      	movs	r2, #61	@ 0x3d
 800335a:	2101      	movs	r1, #1
 800335c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	0018      	movs	r0, r3
 8003362:	46bd      	mov	sp, r7
 8003364:	b002      	add	sp, #8
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e04a      	b.n	8003410 <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	223d      	movs	r2, #61	@ 0x3d
 800337e:	5c9b      	ldrb	r3, [r3, r2]
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d107      	bne.n	8003396 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	223c      	movs	r2, #60	@ 0x3c
 800338a:	2100      	movs	r1, #0
 800338c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	0018      	movs	r0, r3
 8003392:	f000 f841 	bl	8003418 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	223d      	movs	r2, #61	@ 0x3d
 800339a:	2102      	movs	r1, #2
 800339c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3304      	adds	r3, #4
 80033a6:	0019      	movs	r1, r3
 80033a8:	0010      	movs	r0, r2
 80033aa:	f000 fce5 	bl	8003d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2248      	movs	r2, #72	@ 0x48
 80033b2:	2101      	movs	r1, #1
 80033b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	223e      	movs	r2, #62	@ 0x3e
 80033ba:	2101      	movs	r1, #1
 80033bc:	5499      	strb	r1, [r3, r2]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	223f      	movs	r2, #63	@ 0x3f
 80033c2:	2101      	movs	r1, #1
 80033c4:	5499      	strb	r1, [r3, r2]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2240      	movs	r2, #64	@ 0x40
 80033ca:	2101      	movs	r1, #1
 80033cc:	5499      	strb	r1, [r3, r2]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2241      	movs	r2, #65	@ 0x41
 80033d2:	2101      	movs	r1, #1
 80033d4:	5499      	strb	r1, [r3, r2]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2242      	movs	r2, #66	@ 0x42
 80033da:	2101      	movs	r1, #1
 80033dc:	5499      	strb	r1, [r3, r2]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2243      	movs	r2, #67	@ 0x43
 80033e2:	2101      	movs	r1, #1
 80033e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2244      	movs	r2, #68	@ 0x44
 80033ea:	2101      	movs	r1, #1
 80033ec:	5499      	strb	r1, [r3, r2]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2245      	movs	r2, #69	@ 0x45
 80033f2:	2101      	movs	r1, #1
 80033f4:	5499      	strb	r1, [r3, r2]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2246      	movs	r2, #70	@ 0x46
 80033fa:	2101      	movs	r1, #1
 80033fc:	5499      	strb	r1, [r3, r2]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2247      	movs	r2, #71	@ 0x47
 8003402:	2101      	movs	r1, #1
 8003404:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	223d      	movs	r2, #61	@ 0x3d
 800340a:	2101      	movs	r1, #1
 800340c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	0018      	movs	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	b002      	add	sp, #8
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003420:	46c0      	nop			@ (mov r8, r8)
 8003422:	46bd      	mov	sp, r7
 8003424:	b002      	add	sp, #8
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e04a      	b.n	80034d0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	223d      	movs	r2, #61	@ 0x3d
 800343e:	5c9b      	ldrb	r3, [r3, r2]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d107      	bne.n	8003456 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	223c      	movs	r2, #60	@ 0x3c
 800344a:	2100      	movs	r1, #0
 800344c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	0018      	movs	r0, r3
 8003452:	f000 f841 	bl	80034d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	223d      	movs	r2, #61	@ 0x3d
 800345a:	2102      	movs	r1, #2
 800345c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3304      	adds	r3, #4
 8003466:	0019      	movs	r1, r3
 8003468:	0010      	movs	r0, r2
 800346a:	f000 fc85 	bl	8003d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2248      	movs	r2, #72	@ 0x48
 8003472:	2101      	movs	r1, #1
 8003474:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	223e      	movs	r2, #62	@ 0x3e
 800347a:	2101      	movs	r1, #1
 800347c:	5499      	strb	r1, [r3, r2]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	223f      	movs	r2, #63	@ 0x3f
 8003482:	2101      	movs	r1, #1
 8003484:	5499      	strb	r1, [r3, r2]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2240      	movs	r2, #64	@ 0x40
 800348a:	2101      	movs	r1, #1
 800348c:	5499      	strb	r1, [r3, r2]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2241      	movs	r2, #65	@ 0x41
 8003492:	2101      	movs	r1, #1
 8003494:	5499      	strb	r1, [r3, r2]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2242      	movs	r2, #66	@ 0x42
 800349a:	2101      	movs	r1, #1
 800349c:	5499      	strb	r1, [r3, r2]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2243      	movs	r2, #67	@ 0x43
 80034a2:	2101      	movs	r1, #1
 80034a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2244      	movs	r2, #68	@ 0x44
 80034aa:	2101      	movs	r1, #1
 80034ac:	5499      	strb	r1, [r3, r2]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2245      	movs	r2, #69	@ 0x45
 80034b2:	2101      	movs	r1, #1
 80034b4:	5499      	strb	r1, [r3, r2]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2246      	movs	r2, #70	@ 0x46
 80034ba:	2101      	movs	r1, #1
 80034bc:	5499      	strb	r1, [r3, r2]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2247      	movs	r2, #71	@ 0x47
 80034c2:	2101      	movs	r1, #1
 80034c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	223d      	movs	r2, #61	@ 0x3d
 80034ca:	2101      	movs	r1, #1
 80034cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	0018      	movs	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b002      	add	sp, #8
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034e0:	46c0      	nop			@ (mov r8, r8)
 80034e2:	46bd      	mov	sp, r7
 80034e4:	b002      	add	sp, #8
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d108      	bne.n	800350a <HAL_TIM_PWM_Start+0x22>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	223e      	movs	r2, #62	@ 0x3e
 80034fc:	5c9b      	ldrb	r3, [r3, r2]
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	1e5a      	subs	r2, r3, #1
 8003504:	4193      	sbcs	r3, r2
 8003506:	b2db      	uxtb	r3, r3
 8003508:	e037      	b.n	800357a <HAL_TIM_PWM_Start+0x92>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b04      	cmp	r3, #4
 800350e:	d108      	bne.n	8003522 <HAL_TIM_PWM_Start+0x3a>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	223f      	movs	r2, #63	@ 0x3f
 8003514:	5c9b      	ldrb	r3, [r3, r2]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	3b01      	subs	r3, #1
 800351a:	1e5a      	subs	r2, r3, #1
 800351c:	4193      	sbcs	r3, r2
 800351e:	b2db      	uxtb	r3, r3
 8003520:	e02b      	b.n	800357a <HAL_TIM_PWM_Start+0x92>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b08      	cmp	r3, #8
 8003526:	d108      	bne.n	800353a <HAL_TIM_PWM_Start+0x52>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2240      	movs	r2, #64	@ 0x40
 800352c:	5c9b      	ldrb	r3, [r3, r2]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	1e5a      	subs	r2, r3, #1
 8003534:	4193      	sbcs	r3, r2
 8003536:	b2db      	uxtb	r3, r3
 8003538:	e01f      	b.n	800357a <HAL_TIM_PWM_Start+0x92>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2b0c      	cmp	r3, #12
 800353e:	d108      	bne.n	8003552 <HAL_TIM_PWM_Start+0x6a>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2241      	movs	r2, #65	@ 0x41
 8003544:	5c9b      	ldrb	r3, [r3, r2]
 8003546:	b2db      	uxtb	r3, r3
 8003548:	3b01      	subs	r3, #1
 800354a:	1e5a      	subs	r2, r3, #1
 800354c:	4193      	sbcs	r3, r2
 800354e:	b2db      	uxtb	r3, r3
 8003550:	e013      	b.n	800357a <HAL_TIM_PWM_Start+0x92>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b10      	cmp	r3, #16
 8003556:	d108      	bne.n	800356a <HAL_TIM_PWM_Start+0x82>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2242      	movs	r2, #66	@ 0x42
 800355c:	5c9b      	ldrb	r3, [r3, r2]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	3b01      	subs	r3, #1
 8003562:	1e5a      	subs	r2, r3, #1
 8003564:	4193      	sbcs	r3, r2
 8003566:	b2db      	uxtb	r3, r3
 8003568:	e007      	b.n	800357a <HAL_TIM_PWM_Start+0x92>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2243      	movs	r2, #67	@ 0x43
 800356e:	5c9b      	ldrb	r3, [r3, r2]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	3b01      	subs	r3, #1
 8003574:	1e5a      	subs	r2, r3, #1
 8003576:	4193      	sbcs	r3, r2
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e08b      	b.n	800369a <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d104      	bne.n	8003592 <HAL_TIM_PWM_Start+0xaa>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	223e      	movs	r2, #62	@ 0x3e
 800358c:	2102      	movs	r1, #2
 800358e:	5499      	strb	r1, [r3, r2]
 8003590:	e023      	b.n	80035da <HAL_TIM_PWM_Start+0xf2>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b04      	cmp	r3, #4
 8003596:	d104      	bne.n	80035a2 <HAL_TIM_PWM_Start+0xba>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	223f      	movs	r2, #63	@ 0x3f
 800359c:	2102      	movs	r1, #2
 800359e:	5499      	strb	r1, [r3, r2]
 80035a0:	e01b      	b.n	80035da <HAL_TIM_PWM_Start+0xf2>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d104      	bne.n	80035b2 <HAL_TIM_PWM_Start+0xca>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2240      	movs	r2, #64	@ 0x40
 80035ac:	2102      	movs	r1, #2
 80035ae:	5499      	strb	r1, [r3, r2]
 80035b0:	e013      	b.n	80035da <HAL_TIM_PWM_Start+0xf2>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b0c      	cmp	r3, #12
 80035b6:	d104      	bne.n	80035c2 <HAL_TIM_PWM_Start+0xda>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2241      	movs	r2, #65	@ 0x41
 80035bc:	2102      	movs	r1, #2
 80035be:	5499      	strb	r1, [r3, r2]
 80035c0:	e00b      	b.n	80035da <HAL_TIM_PWM_Start+0xf2>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b10      	cmp	r3, #16
 80035c6:	d104      	bne.n	80035d2 <HAL_TIM_PWM_Start+0xea>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2242      	movs	r2, #66	@ 0x42
 80035cc:	2102      	movs	r1, #2
 80035ce:	5499      	strb	r1, [r3, r2]
 80035d0:	e003      	b.n	80035da <HAL_TIM_PWM_Start+0xf2>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2243      	movs	r2, #67	@ 0x43
 80035d6:	2102      	movs	r1, #2
 80035d8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6839      	ldr	r1, [r7, #0]
 80035e0:	2201      	movs	r2, #1
 80035e2:	0018      	movs	r0, r3
 80035e4:	f000 ffb6 	bl	8004554 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a2d      	ldr	r2, [pc, #180]	@ (80036a4 <HAL_TIM_PWM_Start+0x1bc>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00e      	beq.n	8003610 <HAL_TIM_PWM_Start+0x128>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a2c      	ldr	r2, [pc, #176]	@ (80036a8 <HAL_TIM_PWM_Start+0x1c0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d009      	beq.n	8003610 <HAL_TIM_PWM_Start+0x128>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a2a      	ldr	r2, [pc, #168]	@ (80036ac <HAL_TIM_PWM_Start+0x1c4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d004      	beq.n	8003610 <HAL_TIM_PWM_Start+0x128>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a29      	ldr	r2, [pc, #164]	@ (80036b0 <HAL_TIM_PWM_Start+0x1c8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d101      	bne.n	8003614 <HAL_TIM_PWM_Start+0x12c>
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <HAL_TIM_PWM_Start+0x12e>
 8003614:	2300      	movs	r3, #0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d008      	beq.n	800362c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2180      	movs	r1, #128	@ 0x80
 8003626:	0209      	lsls	r1, r1, #8
 8003628:	430a      	orrs	r2, r1
 800362a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a1c      	ldr	r2, [pc, #112]	@ (80036a4 <HAL_TIM_PWM_Start+0x1bc>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00f      	beq.n	8003656 <HAL_TIM_PWM_Start+0x16e>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	2380      	movs	r3, #128	@ 0x80
 800363c:	05db      	lsls	r3, r3, #23
 800363e:	429a      	cmp	r2, r3
 8003640:	d009      	beq.n	8003656 <HAL_TIM_PWM_Start+0x16e>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a1b      	ldr	r2, [pc, #108]	@ (80036b4 <HAL_TIM_PWM_Start+0x1cc>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d004      	beq.n	8003656 <HAL_TIM_PWM_Start+0x16e>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a15      	ldr	r2, [pc, #84]	@ (80036a8 <HAL_TIM_PWM_Start+0x1c0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d116      	bne.n	8003684 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	4a16      	ldr	r2, [pc, #88]	@ (80036b8 <HAL_TIM_PWM_Start+0x1d0>)
 800365e:	4013      	ands	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2b06      	cmp	r3, #6
 8003666:	d016      	beq.n	8003696 <HAL_TIM_PWM_Start+0x1ae>
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	2380      	movs	r3, #128	@ 0x80
 800366c:	025b      	lsls	r3, r3, #9
 800366e:	429a      	cmp	r2, r3
 8003670:	d011      	beq.n	8003696 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2101      	movs	r1, #1
 800367e:	430a      	orrs	r2, r1
 8003680:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003682:	e008      	b.n	8003696 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2101      	movs	r1, #1
 8003690:	430a      	orrs	r2, r1
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	e000      	b.n	8003698 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003696:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	0018      	movs	r0, r3
 800369c:	46bd      	mov	sp, r7
 800369e:	b004      	add	sp, #16
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	46c0      	nop			@ (mov r8, r8)
 80036a4:	40012c00 	.word	0x40012c00
 80036a8:	40014000 	.word	0x40014000
 80036ac:	40014400 	.word	0x40014400
 80036b0:	40014800 	.word	0x40014800
 80036b4:	40000400 	.word	0x40000400
 80036b8:	00010007 	.word	0x00010007

080036bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2202      	movs	r2, #2
 80036d8:	4013      	ands	r3, r2
 80036da:	d021      	beq.n	8003720 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2202      	movs	r2, #2
 80036e0:	4013      	ands	r3, r2
 80036e2:	d01d      	beq.n	8003720 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2203      	movs	r2, #3
 80036ea:	4252      	negs	r2, r2
 80036ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	2203      	movs	r2, #3
 80036fc:	4013      	ands	r3, r2
 80036fe:	d004      	beq.n	800370a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	0018      	movs	r0, r3
 8003704:	f000 fb20 	bl	8003d48 <HAL_TIM_IC_CaptureCallback>
 8003708:	e007      	b.n	800371a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	0018      	movs	r0, r3
 800370e:	f7fd f87d 	bl	800080c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	0018      	movs	r0, r3
 8003716:	f000 fb1f 	bl	8003d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2204      	movs	r2, #4
 8003724:	4013      	ands	r3, r2
 8003726:	d022      	beq.n	800376e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2204      	movs	r2, #4
 800372c:	4013      	ands	r3, r2
 800372e:	d01e      	beq.n	800376e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2205      	movs	r2, #5
 8003736:	4252      	negs	r2, r2
 8003738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2202      	movs	r2, #2
 800373e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	23c0      	movs	r3, #192	@ 0xc0
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4013      	ands	r3, r2
 800374c:	d004      	beq.n	8003758 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	0018      	movs	r0, r3
 8003752:	f000 faf9 	bl	8003d48 <HAL_TIM_IC_CaptureCallback>
 8003756:	e007      	b.n	8003768 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	0018      	movs	r0, r3
 800375c:	f7fd f856 	bl	800080c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	0018      	movs	r0, r3
 8003764:	f000 faf8 	bl	8003d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2208      	movs	r2, #8
 8003772:	4013      	ands	r3, r2
 8003774:	d021      	beq.n	80037ba <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2208      	movs	r2, #8
 800377a:	4013      	ands	r3, r2
 800377c:	d01d      	beq.n	80037ba <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2209      	movs	r2, #9
 8003784:	4252      	negs	r2, r2
 8003786:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2204      	movs	r2, #4
 800378c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	2203      	movs	r2, #3
 8003796:	4013      	ands	r3, r2
 8003798:	d004      	beq.n	80037a4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	0018      	movs	r0, r3
 800379e:	f000 fad3 	bl	8003d48 <HAL_TIM_IC_CaptureCallback>
 80037a2:	e007      	b.n	80037b4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	0018      	movs	r0, r3
 80037a8:	f7fd f830 	bl	800080c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	0018      	movs	r0, r3
 80037b0:	f000 fad2 	bl	8003d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2210      	movs	r2, #16
 80037be:	4013      	ands	r3, r2
 80037c0:	d022      	beq.n	8003808 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2210      	movs	r2, #16
 80037c6:	4013      	ands	r3, r2
 80037c8:	d01e      	beq.n	8003808 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2211      	movs	r2, #17
 80037d0:	4252      	negs	r2, r2
 80037d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2208      	movs	r2, #8
 80037d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	69da      	ldr	r2, [r3, #28]
 80037e0:	23c0      	movs	r3, #192	@ 0xc0
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4013      	ands	r3, r2
 80037e6:	d004      	beq.n	80037f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	0018      	movs	r0, r3
 80037ec:	f000 faac 	bl	8003d48 <HAL_TIM_IC_CaptureCallback>
 80037f0:	e007      	b.n	8003802 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	0018      	movs	r0, r3
 80037f6:	f7fd f809 	bl	800080c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	0018      	movs	r0, r3
 80037fe:	f000 faab 	bl	8003d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2201      	movs	r2, #1
 800380c:	4013      	ands	r3, r2
 800380e:	d00c      	beq.n	800382a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2201      	movs	r2, #1
 8003814:	4013      	ands	r3, r2
 8003816:	d008      	beq.n	800382a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2202      	movs	r2, #2
 800381e:	4252      	negs	r2, r2
 8003820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	0018      	movs	r0, r3
 8003826:	f000 fa87 	bl	8003d38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2280      	movs	r2, #128	@ 0x80
 800382e:	4013      	ands	r3, r2
 8003830:	d104      	bne.n	800383c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	2380      	movs	r3, #128	@ 0x80
 8003836:	019b      	lsls	r3, r3, #6
 8003838:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800383a:	d00b      	beq.n	8003854 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2280      	movs	r2, #128	@ 0x80
 8003840:	4013      	ands	r3, r2
 8003842:	d007      	beq.n	8003854 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a1e      	ldr	r2, [pc, #120]	@ (80038c4 <HAL_TIM_IRQHandler+0x208>)
 800384a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	0018      	movs	r0, r3
 8003850:	f001 f85a 	bl	8004908 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	2380      	movs	r3, #128	@ 0x80
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4013      	ands	r3, r2
 800385c:	d00b      	beq.n	8003876 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2280      	movs	r2, #128	@ 0x80
 8003862:	4013      	ands	r3, r2
 8003864:	d007      	beq.n	8003876 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a17      	ldr	r2, [pc, #92]	@ (80038c8 <HAL_TIM_IRQHandler+0x20c>)
 800386c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	0018      	movs	r0, r3
 8003872:	f001 f851 	bl	8004918 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2240      	movs	r2, #64	@ 0x40
 800387a:	4013      	ands	r3, r2
 800387c:	d00c      	beq.n	8003898 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2240      	movs	r2, #64	@ 0x40
 8003882:	4013      	ands	r3, r2
 8003884:	d008      	beq.n	8003898 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2241      	movs	r2, #65	@ 0x41
 800388c:	4252      	negs	r2, r2
 800388e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	0018      	movs	r0, r3
 8003894:	f000 fa68 	bl	8003d68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	2220      	movs	r2, #32
 800389c:	4013      	ands	r3, r2
 800389e:	d00c      	beq.n	80038ba <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2220      	movs	r2, #32
 80038a4:	4013      	ands	r3, r2
 80038a6:	d008      	beq.n	80038ba <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2221      	movs	r2, #33	@ 0x21
 80038ae:	4252      	negs	r2, r2
 80038b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	0018      	movs	r0, r3
 80038b6:	f001 f81f 	bl	80048f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038ba:	46c0      	nop			@ (mov r8, r8)
 80038bc:	46bd      	mov	sp, r7
 80038be:	b004      	add	sp, #16
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	46c0      	nop			@ (mov r8, r8)
 80038c4:	ffffdf7f 	.word	0xffffdf7f
 80038c8:	fffffeff 	.word	0xfffffeff

080038cc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d8:	2317      	movs	r3, #23
 80038da:	18fb      	adds	r3, r7, r3
 80038dc:	2200      	movs	r2, #0
 80038de:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	223c      	movs	r2, #60	@ 0x3c
 80038e4:	5c9b      	ldrb	r3, [r3, r2]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_TIM_OC_ConfigChannel+0x22>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e048      	b.n	8003980 <HAL_TIM_OC_ConfigChannel+0xb4>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	223c      	movs	r2, #60	@ 0x3c
 80038f2:	2101      	movs	r1, #1
 80038f4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b14      	cmp	r3, #20
 80038fa:	d835      	bhi.n	8003968 <HAL_TIM_OC_ConfigChannel+0x9c>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	009a      	lsls	r2, r3, #2
 8003900:	4b21      	ldr	r3, [pc, #132]	@ (8003988 <HAL_TIM_OC_ConfigChannel+0xbc>)
 8003902:	18d3      	adds	r3, r2, r3
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	0011      	movs	r1, r2
 8003910:	0018      	movs	r0, r3
 8003912:	f000 fabf 	bl	8003e94 <TIM_OC1_SetConfig>
      break;
 8003916:	e02c      	b.n	8003972 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	0011      	movs	r1, r2
 8003920:	0018      	movs	r0, r3
 8003922:	f000 fb41 	bl	8003fa8 <TIM_OC2_SetConfig>
      break;
 8003926:	e024      	b.n	8003972 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	0011      	movs	r1, r2
 8003930:	0018      	movs	r0, r3
 8003932:	f000 fbbd 	bl	80040b0 <TIM_OC3_SetConfig>
      break;
 8003936:	e01c      	b.n	8003972 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	0011      	movs	r1, r2
 8003940:	0018      	movs	r0, r3
 8003942:	f000 fc3d 	bl	80041c0 <TIM_OC4_SetConfig>
      break;
 8003946:	e014      	b.n	8003972 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	0011      	movs	r1, r2
 8003950:	0018      	movs	r0, r3
 8003952:	f000 fc9f 	bl	8004294 <TIM_OC5_SetConfig>
      break;
 8003956:	e00c      	b.n	8003972 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	0011      	movs	r1, r2
 8003960:	0018      	movs	r0, r3
 8003962:	f000 fcf7 	bl	8004354 <TIM_OC6_SetConfig>
      break;
 8003966:	e004      	b.n	8003972 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003968:	2317      	movs	r3, #23
 800396a:	18fb      	adds	r3, r7, r3
 800396c:	2201      	movs	r2, #1
 800396e:	701a      	strb	r2, [r3, #0]
      break;
 8003970:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	223c      	movs	r2, #60	@ 0x3c
 8003976:	2100      	movs	r1, #0
 8003978:	5499      	strb	r1, [r3, r2]

  return status;
 800397a:	2317      	movs	r3, #23
 800397c:	18fb      	adds	r3, r7, r3
 800397e:	781b      	ldrb	r3, [r3, #0]
}
 8003980:	0018      	movs	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	b006      	add	sp, #24
 8003986:	bd80      	pop	{r7, pc}
 8003988:	08006598 	.word	0x08006598

0800398c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003998:	2317      	movs	r3, #23
 800399a:	18fb      	adds	r3, r7, r3
 800399c:	2200      	movs	r2, #0
 800399e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	223c      	movs	r2, #60	@ 0x3c
 80039a4:	5c9b      	ldrb	r3, [r3, r2]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d101      	bne.n	80039ae <HAL_TIM_PWM_ConfigChannel+0x22>
 80039aa:	2302      	movs	r3, #2
 80039ac:	e0e5      	b.n	8003b7a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	223c      	movs	r2, #60	@ 0x3c
 80039b2:	2101      	movs	r1, #1
 80039b4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b14      	cmp	r3, #20
 80039ba:	d900      	bls.n	80039be <HAL_TIM_PWM_ConfigChannel+0x32>
 80039bc:	e0d1      	b.n	8003b62 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	009a      	lsls	r2, r3, #2
 80039c2:	4b70      	ldr	r3, [pc, #448]	@ (8003b84 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80039c4:	18d3      	adds	r3, r2, r3
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	0011      	movs	r1, r2
 80039d2:	0018      	movs	r0, r3
 80039d4:	f000 fa5e 	bl	8003e94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	699a      	ldr	r2, [r3, #24]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2108      	movs	r1, #8
 80039e4:	430a      	orrs	r2, r1
 80039e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699a      	ldr	r2, [r3, #24]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2104      	movs	r1, #4
 80039f4:	438a      	bics	r2, r1
 80039f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6999      	ldr	r1, [r3, #24]
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	619a      	str	r2, [r3, #24]
      break;
 8003a0a:	e0af      	b.n	8003b6c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	0011      	movs	r1, r2
 8003a14:	0018      	movs	r0, r3
 8003a16:	f000 fac7 	bl	8003fa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	699a      	ldr	r2, [r3, #24]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2180      	movs	r1, #128	@ 0x80
 8003a26:	0109      	lsls	r1, r1, #4
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	699a      	ldr	r2, [r3, #24]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4954      	ldr	r1, [pc, #336]	@ (8003b88 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003a38:	400a      	ands	r2, r1
 8003a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6999      	ldr	r1, [r3, #24]
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	021a      	lsls	r2, r3, #8
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	619a      	str	r2, [r3, #24]
      break;
 8003a50:	e08c      	b.n	8003b6c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	0011      	movs	r1, r2
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f000 fb28 	bl	80040b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	69da      	ldr	r2, [r3, #28]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2108      	movs	r1, #8
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	69da      	ldr	r2, [r3, #28]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2104      	movs	r1, #4
 8003a7c:	438a      	bics	r2, r1
 8003a7e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	69d9      	ldr	r1, [r3, #28]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	61da      	str	r2, [r3, #28]
      break;
 8003a92:	e06b      	b.n	8003b6c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	0011      	movs	r1, r2
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f000 fb8f 	bl	80041c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69da      	ldr	r2, [r3, #28]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2180      	movs	r1, #128	@ 0x80
 8003aae:	0109      	lsls	r1, r1, #4
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	69da      	ldr	r2, [r3, #28]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4932      	ldr	r1, [pc, #200]	@ (8003b88 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003ac0:	400a      	ands	r2, r1
 8003ac2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	69d9      	ldr	r1, [r3, #28]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	021a      	lsls	r2, r3, #8
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	61da      	str	r2, [r3, #28]
      break;
 8003ad8:	e048      	b.n	8003b6c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	0011      	movs	r1, r2
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f000 fbd6 	bl	8004294 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2108      	movs	r1, #8
 8003af4:	430a      	orrs	r2, r1
 8003af6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2104      	movs	r1, #4
 8003b04:	438a      	bics	r2, r1
 8003b06:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003b1a:	e027      	b.n	8003b6c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	0011      	movs	r1, r2
 8003b24:	0018      	movs	r0, r3
 8003b26:	f000 fc15 	bl	8004354 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2180      	movs	r1, #128	@ 0x80
 8003b36:	0109      	lsls	r1, r1, #4
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4910      	ldr	r1, [pc, #64]	@ (8003b88 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003b48:	400a      	ands	r2, r1
 8003b4a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	021a      	lsls	r2, r3, #8
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003b60:	e004      	b.n	8003b6c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003b62:	2317      	movs	r3, #23
 8003b64:	18fb      	adds	r3, r7, r3
 8003b66:	2201      	movs	r2, #1
 8003b68:	701a      	strb	r2, [r3, #0]
      break;
 8003b6a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	223c      	movs	r2, #60	@ 0x3c
 8003b70:	2100      	movs	r1, #0
 8003b72:	5499      	strb	r1, [r3, r2]

  return status;
 8003b74:	2317      	movs	r3, #23
 8003b76:	18fb      	adds	r3, r7, r3
 8003b78:	781b      	ldrb	r3, [r3, #0]
}
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	b006      	add	sp, #24
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	46c0      	nop			@ (mov r8, r8)
 8003b84:	080065ec 	.word	0x080065ec
 8003b88:	fffffbff 	.word	0xfffffbff

08003b8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b96:	230f      	movs	r3, #15
 8003b98:	18fb      	adds	r3, r7, r3
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	223c      	movs	r2, #60	@ 0x3c
 8003ba2:	5c9b      	ldrb	r3, [r3, r2]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_TIM_ConfigClockSource+0x20>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e0bc      	b.n	8003d26 <HAL_TIM_ConfigClockSource+0x19a>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	223c      	movs	r2, #60	@ 0x3c
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	223d      	movs	r2, #61	@ 0x3d
 8003bb8:	2102      	movs	r1, #2
 8003bba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4a5a      	ldr	r2, [pc, #360]	@ (8003d30 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	4a59      	ldr	r2, [pc, #356]	@ (8003d34 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2280      	movs	r2, #128	@ 0x80
 8003be2:	0192      	lsls	r2, r2, #6
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d040      	beq.n	8003c6a <HAL_TIM_ConfigClockSource+0xde>
 8003be8:	2280      	movs	r2, #128	@ 0x80
 8003bea:	0192      	lsls	r2, r2, #6
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d900      	bls.n	8003bf2 <HAL_TIM_ConfigClockSource+0x66>
 8003bf0:	e088      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x178>
 8003bf2:	2280      	movs	r2, #128	@ 0x80
 8003bf4:	0152      	lsls	r2, r2, #5
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d100      	bne.n	8003bfc <HAL_TIM_ConfigClockSource+0x70>
 8003bfa:	e088      	b.n	8003d0e <HAL_TIM_ConfigClockSource+0x182>
 8003bfc:	2280      	movs	r2, #128	@ 0x80
 8003bfe:	0152      	lsls	r2, r2, #5
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d900      	bls.n	8003c06 <HAL_TIM_ConfigClockSource+0x7a>
 8003c04:	e07e      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x178>
 8003c06:	2b70      	cmp	r3, #112	@ 0x70
 8003c08:	d018      	beq.n	8003c3c <HAL_TIM_ConfigClockSource+0xb0>
 8003c0a:	d900      	bls.n	8003c0e <HAL_TIM_ConfigClockSource+0x82>
 8003c0c:	e07a      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x178>
 8003c0e:	2b60      	cmp	r3, #96	@ 0x60
 8003c10:	d04f      	beq.n	8003cb2 <HAL_TIM_ConfigClockSource+0x126>
 8003c12:	d900      	bls.n	8003c16 <HAL_TIM_ConfigClockSource+0x8a>
 8003c14:	e076      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x178>
 8003c16:	2b50      	cmp	r3, #80	@ 0x50
 8003c18:	d03b      	beq.n	8003c92 <HAL_TIM_ConfigClockSource+0x106>
 8003c1a:	d900      	bls.n	8003c1e <HAL_TIM_ConfigClockSource+0x92>
 8003c1c:	e072      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x178>
 8003c1e:	2b40      	cmp	r3, #64	@ 0x40
 8003c20:	d057      	beq.n	8003cd2 <HAL_TIM_ConfigClockSource+0x146>
 8003c22:	d900      	bls.n	8003c26 <HAL_TIM_ConfigClockSource+0x9a>
 8003c24:	e06e      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x178>
 8003c26:	2b30      	cmp	r3, #48	@ 0x30
 8003c28:	d063      	beq.n	8003cf2 <HAL_TIM_ConfigClockSource+0x166>
 8003c2a:	d86b      	bhi.n	8003d04 <HAL_TIM_ConfigClockSource+0x178>
 8003c2c:	2b20      	cmp	r3, #32
 8003c2e:	d060      	beq.n	8003cf2 <HAL_TIM_ConfigClockSource+0x166>
 8003c30:	d868      	bhi.n	8003d04 <HAL_TIM_ConfigClockSource+0x178>
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d05d      	beq.n	8003cf2 <HAL_TIM_ConfigClockSource+0x166>
 8003c36:	2b10      	cmp	r3, #16
 8003c38:	d05b      	beq.n	8003cf2 <HAL_TIM_ConfigClockSource+0x166>
 8003c3a:	e063      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c4c:	f000 fc62 	bl	8004514 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2277      	movs	r2, #119	@ 0x77
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	609a      	str	r2, [r3, #8]
      break;
 8003c68:	e052      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c7a:	f000 fc4b 	bl	8004514 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2180      	movs	r1, #128	@ 0x80
 8003c8a:	01c9      	lsls	r1, r1, #7
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	609a      	str	r2, [r3, #8]
      break;
 8003c90:	e03e      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c9e:	001a      	movs	r2, r3
 8003ca0:	f000 fbbc 	bl	800441c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2150      	movs	r1, #80	@ 0x50
 8003caa:	0018      	movs	r0, r3
 8003cac:	f000 fc16 	bl	80044dc <TIM_ITRx_SetConfig>
      break;
 8003cb0:	e02e      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cbe:	001a      	movs	r2, r3
 8003cc0:	f000 fbda 	bl	8004478 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2160      	movs	r1, #96	@ 0x60
 8003cca:	0018      	movs	r0, r3
 8003ccc:	f000 fc06 	bl	80044dc <TIM_ITRx_SetConfig>
      break;
 8003cd0:	e01e      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cde:	001a      	movs	r2, r3
 8003ce0:	f000 fb9c 	bl	800441c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2140      	movs	r1, #64	@ 0x40
 8003cea:	0018      	movs	r0, r3
 8003cec:	f000 fbf6 	bl	80044dc <TIM_ITRx_SetConfig>
      break;
 8003cf0:	e00e      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	0019      	movs	r1, r3
 8003cfc:	0010      	movs	r0, r2
 8003cfe:	f000 fbed 	bl	80044dc <TIM_ITRx_SetConfig>
      break;
 8003d02:	e005      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003d04:	230f      	movs	r3, #15
 8003d06:	18fb      	adds	r3, r7, r3
 8003d08:	2201      	movs	r2, #1
 8003d0a:	701a      	strb	r2, [r3, #0]
      break;
 8003d0c:	e000      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003d0e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	223d      	movs	r2, #61	@ 0x3d
 8003d14:	2101      	movs	r1, #1
 8003d16:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	223c      	movs	r2, #60	@ 0x3c
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	5499      	strb	r1, [r3, r2]

  return status;
 8003d20:	230f      	movs	r3, #15
 8003d22:	18fb      	adds	r3, r7, r3
 8003d24:	781b      	ldrb	r3, [r3, #0]
}
 8003d26:	0018      	movs	r0, r3
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	b004      	add	sp, #16
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	46c0      	nop			@ (mov r8, r8)
 8003d30:	ffceff88 	.word	0xffceff88
 8003d34:	ffff00ff 	.word	0xffff00ff

08003d38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d40:	46c0      	nop			@ (mov r8, r8)
 8003d42:	46bd      	mov	sp, r7
 8003d44:	b002      	add	sp, #8
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d50:	46c0      	nop			@ (mov r8, r8)
 8003d52:	46bd      	mov	sp, r7
 8003d54:	b002      	add	sp, #8
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d60:	46c0      	nop			@ (mov r8, r8)
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b002      	add	sp, #8
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d70:	46c0      	nop			@ (mov r8, r8)
 8003d72:	46bd      	mov	sp, r7
 8003d74:	b002      	add	sp, #8
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a3b      	ldr	r2, [pc, #236]	@ (8003e78 <TIM_Base_SetConfig+0x100>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d008      	beq.n	8003da2 <TIM_Base_SetConfig+0x2a>
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	2380      	movs	r3, #128	@ 0x80
 8003d94:	05db      	lsls	r3, r3, #23
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d003      	beq.n	8003da2 <TIM_Base_SetConfig+0x2a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a37      	ldr	r2, [pc, #220]	@ (8003e7c <TIM_Base_SetConfig+0x104>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d108      	bne.n	8003db4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2270      	movs	r2, #112	@ 0x70
 8003da6:	4393      	bics	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a30      	ldr	r2, [pc, #192]	@ (8003e78 <TIM_Base_SetConfig+0x100>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d018      	beq.n	8003dee <TIM_Base_SetConfig+0x76>
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	2380      	movs	r3, #128	@ 0x80
 8003dc0:	05db      	lsls	r3, r3, #23
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d013      	beq.n	8003dee <TIM_Base_SetConfig+0x76>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a2c      	ldr	r2, [pc, #176]	@ (8003e7c <TIM_Base_SetConfig+0x104>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d00f      	beq.n	8003dee <TIM_Base_SetConfig+0x76>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a2b      	ldr	r2, [pc, #172]	@ (8003e80 <TIM_Base_SetConfig+0x108>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d00b      	beq.n	8003dee <TIM_Base_SetConfig+0x76>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a2a      	ldr	r2, [pc, #168]	@ (8003e84 <TIM_Base_SetConfig+0x10c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d007      	beq.n	8003dee <TIM_Base_SetConfig+0x76>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a29      	ldr	r2, [pc, #164]	@ (8003e88 <TIM_Base_SetConfig+0x110>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d003      	beq.n	8003dee <TIM_Base_SetConfig+0x76>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a28      	ldr	r2, [pc, #160]	@ (8003e8c <TIM_Base_SetConfig+0x114>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d108      	bne.n	8003e00 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4a27      	ldr	r2, [pc, #156]	@ (8003e90 <TIM_Base_SetConfig+0x118>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2280      	movs	r2, #128	@ 0x80
 8003e04:	4393      	bics	r3, r2
 8003e06:	001a      	movs	r2, r3
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a13      	ldr	r2, [pc, #76]	@ (8003e78 <TIM_Base_SetConfig+0x100>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d00b      	beq.n	8003e46 <TIM_Base_SetConfig+0xce>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a14      	ldr	r2, [pc, #80]	@ (8003e84 <TIM_Base_SetConfig+0x10c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d007      	beq.n	8003e46 <TIM_Base_SetConfig+0xce>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a13      	ldr	r2, [pc, #76]	@ (8003e88 <TIM_Base_SetConfig+0x110>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d003      	beq.n	8003e46 <TIM_Base_SetConfig+0xce>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a12      	ldr	r2, [pc, #72]	@ (8003e8c <TIM_Base_SetConfig+0x114>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d103      	bne.n	8003e4e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	691a      	ldr	r2, [r3, #16]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d106      	bne.n	8003e6e <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	2201      	movs	r2, #1
 8003e66:	4393      	bics	r3, r2
 8003e68:	001a      	movs	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	611a      	str	r2, [r3, #16]
  }
}
 8003e6e:	46c0      	nop			@ (mov r8, r8)
 8003e70:	46bd      	mov	sp, r7
 8003e72:	b004      	add	sp, #16
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	46c0      	nop			@ (mov r8, r8)
 8003e78:	40012c00 	.word	0x40012c00
 8003e7c:	40000400 	.word	0x40000400
 8003e80:	40002000 	.word	0x40002000
 8003e84:	40014000 	.word	0x40014000
 8003e88:	40014400 	.word	0x40014400
 8003e8c:	40014800 	.word	0x40014800
 8003e90:	fffffcff 	.word	0xfffffcff

08003e94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	4393      	bics	r3, r2
 8003eac:	001a      	movs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4a32      	ldr	r2, [pc, #200]	@ (8003f8c <TIM_OC1_SetConfig+0xf8>)
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2203      	movs	r2, #3
 8003eca:	4393      	bics	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	2202      	movs	r2, #2
 8003edc:	4393      	bics	r3, r2
 8003ede:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a28      	ldr	r2, [pc, #160]	@ (8003f90 <TIM_OC1_SetConfig+0xfc>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d00b      	beq.n	8003f0a <TIM_OC1_SetConfig+0x76>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a27      	ldr	r2, [pc, #156]	@ (8003f94 <TIM_OC1_SetConfig+0x100>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d007      	beq.n	8003f0a <TIM_OC1_SetConfig+0x76>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a26      	ldr	r2, [pc, #152]	@ (8003f98 <TIM_OC1_SetConfig+0x104>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d003      	beq.n	8003f0a <TIM_OC1_SetConfig+0x76>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a25      	ldr	r2, [pc, #148]	@ (8003f9c <TIM_OC1_SetConfig+0x108>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d10c      	bne.n	8003f24 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2208      	movs	r2, #8
 8003f0e:	4393      	bics	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2204      	movs	r2, #4
 8003f20:	4393      	bics	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a1a      	ldr	r2, [pc, #104]	@ (8003f90 <TIM_OC1_SetConfig+0xfc>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d00b      	beq.n	8003f44 <TIM_OC1_SetConfig+0xb0>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a19      	ldr	r2, [pc, #100]	@ (8003f94 <TIM_OC1_SetConfig+0x100>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d007      	beq.n	8003f44 <TIM_OC1_SetConfig+0xb0>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a18      	ldr	r2, [pc, #96]	@ (8003f98 <TIM_OC1_SetConfig+0x104>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d003      	beq.n	8003f44 <TIM_OC1_SetConfig+0xb0>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a17      	ldr	r2, [pc, #92]	@ (8003f9c <TIM_OC1_SetConfig+0x108>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d111      	bne.n	8003f68 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	4a16      	ldr	r2, [pc, #88]	@ (8003fa0 <TIM_OC1_SetConfig+0x10c>)
 8003f48:	4013      	ands	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	4a15      	ldr	r2, [pc, #84]	@ (8003fa4 <TIM_OC1_SetConfig+0x110>)
 8003f50:	4013      	ands	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	621a      	str	r2, [r3, #32]
}
 8003f82:	46c0      	nop			@ (mov r8, r8)
 8003f84:	46bd      	mov	sp, r7
 8003f86:	b006      	add	sp, #24
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	46c0      	nop			@ (mov r8, r8)
 8003f8c:	fffeff8f 	.word	0xfffeff8f
 8003f90:	40012c00 	.word	0x40012c00
 8003f94:	40014000 	.word	0x40014000
 8003f98:	40014400 	.word	0x40014400
 8003f9c:	40014800 	.word	0x40014800
 8003fa0:	fffffeff 	.word	0xfffffeff
 8003fa4:	fffffdff 	.word	0xfffffdff

08003fa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	2210      	movs	r2, #16
 8003fbe:	4393      	bics	r3, r2
 8003fc0:	001a      	movs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4a2e      	ldr	r2, [pc, #184]	@ (8004090 <TIM_OC2_SetConfig+0xe8>)
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4a2d      	ldr	r2, [pc, #180]	@ (8004094 <TIM_OC2_SetConfig+0xec>)
 8003fde:	4013      	ands	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	021b      	lsls	r3, r3, #8
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	4393      	bics	r3, r2
 8003ff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	011b      	lsls	r3, r3, #4
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a24      	ldr	r2, [pc, #144]	@ (8004098 <TIM_OC2_SetConfig+0xf0>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d10d      	bne.n	8004026 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	2280      	movs	r2, #128	@ 0x80
 800400e:	4393      	bics	r3, r2
 8004010:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	4313      	orrs	r3, r2
 800401c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2240      	movs	r2, #64	@ 0x40
 8004022:	4393      	bics	r3, r2
 8004024:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a1b      	ldr	r2, [pc, #108]	@ (8004098 <TIM_OC2_SetConfig+0xf0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d00b      	beq.n	8004046 <TIM_OC2_SetConfig+0x9e>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a1a      	ldr	r2, [pc, #104]	@ (800409c <TIM_OC2_SetConfig+0xf4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d007      	beq.n	8004046 <TIM_OC2_SetConfig+0x9e>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a19      	ldr	r2, [pc, #100]	@ (80040a0 <TIM_OC2_SetConfig+0xf8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d003      	beq.n	8004046 <TIM_OC2_SetConfig+0x9e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a18      	ldr	r2, [pc, #96]	@ (80040a4 <TIM_OC2_SetConfig+0xfc>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d113      	bne.n	800406e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	4a17      	ldr	r2, [pc, #92]	@ (80040a8 <TIM_OC2_SetConfig+0x100>)
 800404a:	4013      	ands	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	4a16      	ldr	r2, [pc, #88]	@ (80040ac <TIM_OC2_SetConfig+0x104>)
 8004052:	4013      	ands	r3, r2
 8004054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4313      	orrs	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	621a      	str	r2, [r3, #32]
}
 8004088:	46c0      	nop			@ (mov r8, r8)
 800408a:	46bd      	mov	sp, r7
 800408c:	b006      	add	sp, #24
 800408e:	bd80      	pop	{r7, pc}
 8004090:	feff8fff 	.word	0xfeff8fff
 8004094:	fffffcff 	.word	0xfffffcff
 8004098:	40012c00 	.word	0x40012c00
 800409c:	40014000 	.word	0x40014000
 80040a0:	40014400 	.word	0x40014400
 80040a4:	40014800 	.word	0x40014800
 80040a8:	fffffbff 	.word	0xfffffbff
 80040ac:	fffff7ff 	.word	0xfffff7ff

080040b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	4a33      	ldr	r2, [pc, #204]	@ (8004194 <TIM_OC3_SetConfig+0xe4>)
 80040c6:	401a      	ands	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4a2f      	ldr	r2, [pc, #188]	@ (8004198 <TIM_OC3_SetConfig+0xe8>)
 80040dc:	4013      	ands	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2203      	movs	r2, #3
 80040e4:	4393      	bics	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	4a29      	ldr	r2, [pc, #164]	@ (800419c <TIM_OC3_SetConfig+0xec>)
 80040f6:	4013      	ands	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	021b      	lsls	r3, r3, #8
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	4313      	orrs	r3, r2
 8004104:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a25      	ldr	r2, [pc, #148]	@ (80041a0 <TIM_OC3_SetConfig+0xf0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d10d      	bne.n	800412a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	4a24      	ldr	r2, [pc, #144]	@ (80041a4 <TIM_OC3_SetConfig+0xf4>)
 8004112:	4013      	ands	r3, r2
 8004114:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	021b      	lsls	r3, r3, #8
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	4313      	orrs	r3, r2
 8004120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	4a20      	ldr	r2, [pc, #128]	@ (80041a8 <TIM_OC3_SetConfig+0xf8>)
 8004126:	4013      	ands	r3, r2
 8004128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a1c      	ldr	r2, [pc, #112]	@ (80041a0 <TIM_OC3_SetConfig+0xf0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d00b      	beq.n	800414a <TIM_OC3_SetConfig+0x9a>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a1d      	ldr	r2, [pc, #116]	@ (80041ac <TIM_OC3_SetConfig+0xfc>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d007      	beq.n	800414a <TIM_OC3_SetConfig+0x9a>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a1c      	ldr	r2, [pc, #112]	@ (80041b0 <TIM_OC3_SetConfig+0x100>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d003      	beq.n	800414a <TIM_OC3_SetConfig+0x9a>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a1b      	ldr	r2, [pc, #108]	@ (80041b4 <TIM_OC3_SetConfig+0x104>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d113      	bne.n	8004172 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	4a1a      	ldr	r2, [pc, #104]	@ (80041b8 <TIM_OC3_SetConfig+0x108>)
 800414e:	4013      	ands	r3, r2
 8004150:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	4a19      	ldr	r2, [pc, #100]	@ (80041bc <TIM_OC3_SetConfig+0x10c>)
 8004156:	4013      	ands	r3, r2
 8004158:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	4313      	orrs	r3, r2
 8004164:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	621a      	str	r2, [r3, #32]
}
 800418c:	46c0      	nop			@ (mov r8, r8)
 800418e:	46bd      	mov	sp, r7
 8004190:	b006      	add	sp, #24
 8004192:	bd80      	pop	{r7, pc}
 8004194:	fffffeff 	.word	0xfffffeff
 8004198:	fffeff8f 	.word	0xfffeff8f
 800419c:	fffffdff 	.word	0xfffffdff
 80041a0:	40012c00 	.word	0x40012c00
 80041a4:	fffff7ff 	.word	0xfffff7ff
 80041a8:	fffffbff 	.word	0xfffffbff
 80041ac:	40014000 	.word	0x40014000
 80041b0:	40014400 	.word	0x40014400
 80041b4:	40014800 	.word	0x40014800
 80041b8:	ffffefff 	.word	0xffffefff
 80041bc:	ffffdfff 	.word	0xffffdfff

080041c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	4a26      	ldr	r2, [pc, #152]	@ (8004270 <TIM_OC4_SetConfig+0xb0>)
 80041d6:	401a      	ands	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4a22      	ldr	r2, [pc, #136]	@ (8004274 <TIM_OC4_SetConfig+0xb4>)
 80041ec:	4013      	ands	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4a21      	ldr	r2, [pc, #132]	@ (8004278 <TIM_OC4_SetConfig+0xb8>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	021b      	lsls	r3, r3, #8
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4313      	orrs	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	4a1d      	ldr	r2, [pc, #116]	@ (800427c <TIM_OC4_SetConfig+0xbc>)
 8004208:	4013      	ands	r3, r2
 800420a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	031b      	lsls	r3, r3, #12
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	4313      	orrs	r3, r2
 8004216:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a19      	ldr	r2, [pc, #100]	@ (8004280 <TIM_OC4_SetConfig+0xc0>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00b      	beq.n	8004238 <TIM_OC4_SetConfig+0x78>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a18      	ldr	r2, [pc, #96]	@ (8004284 <TIM_OC4_SetConfig+0xc4>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d007      	beq.n	8004238 <TIM_OC4_SetConfig+0x78>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a17      	ldr	r2, [pc, #92]	@ (8004288 <TIM_OC4_SetConfig+0xc8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d003      	beq.n	8004238 <TIM_OC4_SetConfig+0x78>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a16      	ldr	r2, [pc, #88]	@ (800428c <TIM_OC4_SetConfig+0xcc>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d109      	bne.n	800424c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	4a15      	ldr	r2, [pc, #84]	@ (8004290 <TIM_OC4_SetConfig+0xd0>)
 800423c:	4013      	ands	r3, r2
 800423e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	019b      	lsls	r3, r3, #6
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	4313      	orrs	r3, r2
 800424a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	621a      	str	r2, [r3, #32]
}
 8004266:	46c0      	nop			@ (mov r8, r8)
 8004268:	46bd      	mov	sp, r7
 800426a:	b006      	add	sp, #24
 800426c:	bd80      	pop	{r7, pc}
 800426e:	46c0      	nop			@ (mov r8, r8)
 8004270:	ffffefff 	.word	0xffffefff
 8004274:	feff8fff 	.word	0xfeff8fff
 8004278:	fffffcff 	.word	0xfffffcff
 800427c:	ffffdfff 	.word	0xffffdfff
 8004280:	40012c00 	.word	0x40012c00
 8004284:	40014000 	.word	0x40014000
 8004288:	40014400 	.word	0x40014400
 800428c:	40014800 	.word	0x40014800
 8004290:	ffffbfff 	.word	0xffffbfff

08004294 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	4a23      	ldr	r2, [pc, #140]	@ (8004338 <TIM_OC5_SetConfig+0xa4>)
 80042aa:	401a      	ands	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4a1f      	ldr	r2, [pc, #124]	@ (800433c <TIM_OC5_SetConfig+0xa8>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004340 <TIM_OC5_SetConfig+0xac>)
 80042d2:	4013      	ands	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	041b      	lsls	r3, r3, #16
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	4313      	orrs	r3, r2
 80042e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a17      	ldr	r2, [pc, #92]	@ (8004344 <TIM_OC5_SetConfig+0xb0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d00b      	beq.n	8004302 <TIM_OC5_SetConfig+0x6e>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a16      	ldr	r2, [pc, #88]	@ (8004348 <TIM_OC5_SetConfig+0xb4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d007      	beq.n	8004302 <TIM_OC5_SetConfig+0x6e>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a15      	ldr	r2, [pc, #84]	@ (800434c <TIM_OC5_SetConfig+0xb8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d003      	beq.n	8004302 <TIM_OC5_SetConfig+0x6e>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a14      	ldr	r2, [pc, #80]	@ (8004350 <TIM_OC5_SetConfig+0xbc>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d109      	bne.n	8004316 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	4a0c      	ldr	r2, [pc, #48]	@ (8004338 <TIM_OC5_SetConfig+0xa4>)
 8004306:	4013      	ands	r3, r2
 8004308:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	4313      	orrs	r3, r2
 8004314:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	621a      	str	r2, [r3, #32]
}
 8004330:	46c0      	nop			@ (mov r8, r8)
 8004332:	46bd      	mov	sp, r7
 8004334:	b006      	add	sp, #24
 8004336:	bd80      	pop	{r7, pc}
 8004338:	fffeffff 	.word	0xfffeffff
 800433c:	fffeff8f 	.word	0xfffeff8f
 8004340:	fffdffff 	.word	0xfffdffff
 8004344:	40012c00 	.word	0x40012c00
 8004348:	40014000 	.word	0x40014000
 800434c:	40014400 	.word	0x40014400
 8004350:	40014800 	.word	0x40014800

08004354 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	4a24      	ldr	r2, [pc, #144]	@ (80043fc <TIM_OC6_SetConfig+0xa8>)
 800436a:	401a      	ands	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800437a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4a20      	ldr	r2, [pc, #128]	@ (8004400 <TIM_OC6_SetConfig+0xac>)
 8004380:	4013      	ands	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	021b      	lsls	r3, r3, #8
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	4a1c      	ldr	r2, [pc, #112]	@ (8004404 <TIM_OC6_SetConfig+0xb0>)
 8004394:	4013      	ands	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	051b      	lsls	r3, r3, #20
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a18      	ldr	r2, [pc, #96]	@ (8004408 <TIM_OC6_SetConfig+0xb4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d00b      	beq.n	80043c4 <TIM_OC6_SetConfig+0x70>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a17      	ldr	r2, [pc, #92]	@ (800440c <TIM_OC6_SetConfig+0xb8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d007      	beq.n	80043c4 <TIM_OC6_SetConfig+0x70>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a16      	ldr	r2, [pc, #88]	@ (8004410 <TIM_OC6_SetConfig+0xbc>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d003      	beq.n	80043c4 <TIM_OC6_SetConfig+0x70>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a15      	ldr	r2, [pc, #84]	@ (8004414 <TIM_OC6_SetConfig+0xc0>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d109      	bne.n	80043d8 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	4a14      	ldr	r2, [pc, #80]	@ (8004418 <TIM_OC6_SetConfig+0xc4>)
 80043c8:	4013      	ands	r3, r2
 80043ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	029b      	lsls	r3, r3, #10
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	621a      	str	r2, [r3, #32]
}
 80043f2:	46c0      	nop			@ (mov r8, r8)
 80043f4:	46bd      	mov	sp, r7
 80043f6:	b006      	add	sp, #24
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	46c0      	nop			@ (mov r8, r8)
 80043fc:	ffefffff 	.word	0xffefffff
 8004400:	feff8fff 	.word	0xfeff8fff
 8004404:	ffdfffff 	.word	0xffdfffff
 8004408:	40012c00 	.word	0x40012c00
 800440c:	40014000 	.word	0x40014000
 8004410:	40014400 	.word	0x40014400
 8004414:	40014800 	.word	0x40014800
 8004418:	fffbffff 	.word	0xfffbffff

0800441c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	2201      	movs	r2, #1
 8004434:	4393      	bics	r3, r2
 8004436:	001a      	movs	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	22f0      	movs	r2, #240	@ 0xf0
 8004446:	4393      	bics	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	220a      	movs	r2, #10
 8004458:	4393      	bics	r3, r2
 800445a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	4313      	orrs	r3, r2
 8004462:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	621a      	str	r2, [r3, #32]
}
 8004470:	46c0      	nop			@ (mov r8, r8)
 8004472:	46bd      	mov	sp, r7
 8004474:	b006      	add	sp, #24
 8004476:	bd80      	pop	{r7, pc}

08004478 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	2210      	movs	r2, #16
 8004490:	4393      	bics	r3, r2
 8004492:	001a      	movs	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	4a0d      	ldr	r2, [pc, #52]	@ (80044d8 <TIM_TI2_ConfigInputStage+0x60>)
 80044a2:	4013      	ands	r3, r2
 80044a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	031b      	lsls	r3, r3, #12
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	22a0      	movs	r2, #160	@ 0xa0
 80044b4:	4393      	bics	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	4313      	orrs	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	621a      	str	r2, [r3, #32]
}
 80044ce:	46c0      	nop			@ (mov r8, r8)
 80044d0:	46bd      	mov	sp, r7
 80044d2:	b006      	add	sp, #24
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	46c0      	nop			@ (mov r8, r8)
 80044d8:	ffff0fff 	.word	0xffff0fff

080044dc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4a08      	ldr	r2, [pc, #32]	@ (8004510 <TIM_ITRx_SetConfig+0x34>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	2207      	movs	r2, #7
 80044fc:	4313      	orrs	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	609a      	str	r2, [r3, #8]
}
 8004506:	46c0      	nop			@ (mov r8, r8)
 8004508:	46bd      	mov	sp, r7
 800450a:	b004      	add	sp, #16
 800450c:	bd80      	pop	{r7, pc}
 800450e:	46c0      	nop			@ (mov r8, r8)
 8004510:	ffcfff8f 	.word	0xffcfff8f

08004514 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
 8004520:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	4a09      	ldr	r2, [pc, #36]	@ (8004550 <TIM_ETR_SetConfig+0x3c>)
 800452c:	4013      	ands	r3, r2
 800452e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	021a      	lsls	r2, r3, #8
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	431a      	orrs	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	4313      	orrs	r3, r2
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	4313      	orrs	r3, r2
 8004540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	609a      	str	r2, [r3, #8]
}
 8004548:	46c0      	nop			@ (mov r8, r8)
 800454a:	46bd      	mov	sp, r7
 800454c:	b006      	add	sp, #24
 800454e:	bd80      	pop	{r7, pc}
 8004550:	ffff00ff 	.word	0xffff00ff

08004554 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	221f      	movs	r2, #31
 8004564:	4013      	ands	r3, r2
 8004566:	2201      	movs	r2, #1
 8004568:	409a      	lsls	r2, r3
 800456a:	0013      	movs	r3, r2
 800456c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	43d2      	mvns	r2, r2
 8004576:	401a      	ands	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a1a      	ldr	r2, [r3, #32]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	211f      	movs	r1, #31
 8004584:	400b      	ands	r3, r1
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	4099      	lsls	r1, r3
 800458a:	000b      	movs	r3, r1
 800458c:	431a      	orrs	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	621a      	str	r2, [r3, #32]
}
 8004592:	46c0      	nop			@ (mov r8, r8)
 8004594:	46bd      	mov	sp, r7
 8004596:	b006      	add	sp, #24
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d108      	bne.n	80045be <HAL_TIMEx_PWMN_Start+0x22>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2244      	movs	r2, #68	@ 0x44
 80045b0:	5c9b      	ldrb	r3, [r3, r2]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	3b01      	subs	r3, #1
 80045b6:	1e5a      	subs	r2, r3, #1
 80045b8:	4193      	sbcs	r3, r2
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	e01f      	b.n	80045fe <HAL_TIMEx_PWMN_Start+0x62>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b04      	cmp	r3, #4
 80045c2:	d108      	bne.n	80045d6 <HAL_TIMEx_PWMN_Start+0x3a>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2245      	movs	r2, #69	@ 0x45
 80045c8:	5c9b      	ldrb	r3, [r3, r2]
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	3b01      	subs	r3, #1
 80045ce:	1e5a      	subs	r2, r3, #1
 80045d0:	4193      	sbcs	r3, r2
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	e013      	b.n	80045fe <HAL_TIMEx_PWMN_Start+0x62>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d108      	bne.n	80045ee <HAL_TIMEx_PWMN_Start+0x52>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2246      	movs	r2, #70	@ 0x46
 80045e0:	5c9b      	ldrb	r3, [r3, r2]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	1e5a      	subs	r2, r3, #1
 80045e8:	4193      	sbcs	r3, r2
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	e007      	b.n	80045fe <HAL_TIMEx_PWMN_Start+0x62>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2247      	movs	r2, #71	@ 0x47
 80045f2:	5c9b      	ldrb	r3, [r3, r2]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	3b01      	subs	r3, #1
 80045f8:	1e5a      	subs	r2, r3, #1
 80045fa:	4193      	sbcs	r3, r2
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e062      	b.n	80046cc <HAL_TIMEx_PWMN_Start+0x130>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d104      	bne.n	8004616 <HAL_TIMEx_PWMN_Start+0x7a>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2244      	movs	r2, #68	@ 0x44
 8004610:	2102      	movs	r1, #2
 8004612:	5499      	strb	r1, [r3, r2]
 8004614:	e013      	b.n	800463e <HAL_TIMEx_PWMN_Start+0xa2>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2b04      	cmp	r3, #4
 800461a:	d104      	bne.n	8004626 <HAL_TIMEx_PWMN_Start+0x8a>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2245      	movs	r2, #69	@ 0x45
 8004620:	2102      	movs	r1, #2
 8004622:	5499      	strb	r1, [r3, r2]
 8004624:	e00b      	b.n	800463e <HAL_TIMEx_PWMN_Start+0xa2>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b08      	cmp	r3, #8
 800462a:	d104      	bne.n	8004636 <HAL_TIMEx_PWMN_Start+0x9a>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2246      	movs	r2, #70	@ 0x46
 8004630:	2102      	movs	r1, #2
 8004632:	5499      	strb	r1, [r3, r2]
 8004634:	e003      	b.n	800463e <HAL_TIMEx_PWMN_Start+0xa2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2247      	movs	r2, #71	@ 0x47
 800463a:	2102      	movs	r1, #2
 800463c:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6839      	ldr	r1, [r7, #0]
 8004644:	2204      	movs	r2, #4
 8004646:	0018      	movs	r0, r3
 8004648:	f000 f96e 	bl	8004928 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2180      	movs	r1, #128	@ 0x80
 8004658:	0209      	lsls	r1, r1, #8
 800465a:	430a      	orrs	r2, r1
 800465c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a1c      	ldr	r2, [pc, #112]	@ (80046d4 <HAL_TIMEx_PWMN_Start+0x138>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d00f      	beq.n	8004688 <HAL_TIMEx_PWMN_Start+0xec>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	2380      	movs	r3, #128	@ 0x80
 800466e:	05db      	lsls	r3, r3, #23
 8004670:	429a      	cmp	r2, r3
 8004672:	d009      	beq.n	8004688 <HAL_TIMEx_PWMN_Start+0xec>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a17      	ldr	r2, [pc, #92]	@ (80046d8 <HAL_TIMEx_PWMN_Start+0x13c>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d004      	beq.n	8004688 <HAL_TIMEx_PWMN_Start+0xec>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a16      	ldr	r2, [pc, #88]	@ (80046dc <HAL_TIMEx_PWMN_Start+0x140>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d116      	bne.n	80046b6 <HAL_TIMEx_PWMN_Start+0x11a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	4a14      	ldr	r2, [pc, #80]	@ (80046e0 <HAL_TIMEx_PWMN_Start+0x144>)
 8004690:	4013      	ands	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b06      	cmp	r3, #6
 8004698:	d016      	beq.n	80046c8 <HAL_TIMEx_PWMN_Start+0x12c>
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	2380      	movs	r3, #128	@ 0x80
 800469e:	025b      	lsls	r3, r3, #9
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d011      	beq.n	80046c8 <HAL_TIMEx_PWMN_Start+0x12c>
    {
      __HAL_TIM_ENABLE(htim);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2101      	movs	r1, #1
 80046b0:	430a      	orrs	r2, r1
 80046b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b4:	e008      	b.n	80046c8 <HAL_TIMEx_PWMN_Start+0x12c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2101      	movs	r1, #1
 80046c2:	430a      	orrs	r2, r1
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	e000      	b.n	80046ca <HAL_TIMEx_PWMN_Start+0x12e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	0018      	movs	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b004      	add	sp, #16
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40012c00 	.word	0x40012c00
 80046d8:	40000400 	.word	0x40000400
 80046dc:	40014000 	.word	0x40014000
 80046e0:	00010007 	.word	0x00010007

080046e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	223c      	movs	r2, #60	@ 0x3c
 80046f2:	5c9b      	ldrb	r3, [r3, r2]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d101      	bne.n	80046fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046f8:	2302      	movs	r3, #2
 80046fa:	e055      	b.n	80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	223c      	movs	r2, #60	@ 0x3c
 8004700:	2101      	movs	r1, #1
 8004702:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	223d      	movs	r2, #61	@ 0x3d
 8004708:	2102      	movs	r1, #2
 800470a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a23      	ldr	r2, [pc, #140]	@ (80047b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d108      	bne.n	8004738 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4a22      	ldr	r2, [pc, #136]	@ (80047b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800472a:	4013      	ands	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4313      	orrs	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2270      	movs	r2, #112	@ 0x70
 800473c:	4393      	bics	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a16      	ldr	r2, [pc, #88]	@ (80047b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d00f      	beq.n	800477c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	2380      	movs	r3, #128	@ 0x80
 8004762:	05db      	lsls	r3, r3, #23
 8004764:	429a      	cmp	r2, r3
 8004766:	d009      	beq.n	800477c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a12      	ldr	r2, [pc, #72]	@ (80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d004      	beq.n	800477c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a11      	ldr	r2, [pc, #68]	@ (80047bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d10c      	bne.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2280      	movs	r2, #128	@ 0x80
 8004780:	4393      	bics	r3, r2
 8004782:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	4313      	orrs	r3, r2
 800478c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	223d      	movs	r2, #61	@ 0x3d
 800479a:	2101      	movs	r1, #1
 800479c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	223c      	movs	r2, #60	@ 0x3c
 80047a2:	2100      	movs	r1, #0
 80047a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	0018      	movs	r0, r3
 80047aa:	46bd      	mov	sp, r7
 80047ac:	b004      	add	sp, #16
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40012c00 	.word	0x40012c00
 80047b4:	ff0fffff 	.word	0xff0fffff
 80047b8:	40000400 	.word	0x40000400
 80047bc:	40014000 	.word	0x40014000

080047c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	223c      	movs	r2, #60	@ 0x3c
 80047d2:	5c9b      	ldrb	r3, [r3, r2]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047d8:	2302      	movs	r3, #2
 80047da:	e06f      	b.n	80048bc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	223c      	movs	r2, #60	@ 0x3c
 80047e0:	2101      	movs	r1, #1
 80047e2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	22ff      	movs	r2, #255	@ 0xff
 80047e8:	4393      	bics	r3, r2
 80047ea:	001a      	movs	r2, r3
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4a33      	ldr	r2, [pc, #204]	@ (80048c4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80047f8:	401a      	ands	r2, r3
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	4313      	orrs	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4a30      	ldr	r2, [pc, #192]	@ (80048c8 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004806:	401a      	ands	r2, r3
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	4313      	orrs	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4a2e      	ldr	r2, [pc, #184]	@ (80048cc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8004814:	401a      	ands	r2, r3
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4313      	orrs	r3, r2
 800481c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4a2b      	ldr	r2, [pc, #172]	@ (80048d0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004822:	401a      	ands	r2, r3
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	4313      	orrs	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4a29      	ldr	r2, [pc, #164]	@ (80048d4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004830:	401a      	ands	r2, r3
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4a26      	ldr	r2, [pc, #152]	@ (80048d8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800483e:	401a      	ands	r2, r3
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004844:	4313      	orrs	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4a24      	ldr	r2, [pc, #144]	@ (80048dc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800484c:	401a      	ands	r2, r3
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	041b      	lsls	r3, r3, #16
 8004854:	4313      	orrs	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4a21      	ldr	r2, [pc, #132]	@ (80048e0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800485c:	401a      	ands	r2, r3
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	4313      	orrs	r3, r2
 8004864:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a1e      	ldr	r2, [pc, #120]	@ (80048e4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d11c      	bne.n	80048aa <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4a1d      	ldr	r2, [pc, #116]	@ (80048e8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004874:	401a      	ands	r2, r3
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487a:	051b      	lsls	r3, r3, #20
 800487c:	4313      	orrs	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4a1a      	ldr	r2, [pc, #104]	@ (80048ec <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004884:	401a      	ands	r2, r3
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4a17      	ldr	r2, [pc, #92]	@ (80048f0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004892:	401a      	ands	r2, r3
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004898:	4313      	orrs	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4a15      	ldr	r2, [pc, #84]	@ (80048f4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80048a0:	401a      	ands	r2, r3
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a6:	4313      	orrs	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	223c      	movs	r2, #60	@ 0x3c
 80048b6:	2100      	movs	r1, #0
 80048b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	0018      	movs	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	b004      	add	sp, #16
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	fffffcff 	.word	0xfffffcff
 80048c8:	fffffbff 	.word	0xfffffbff
 80048cc:	fffff7ff 	.word	0xfffff7ff
 80048d0:	ffffefff 	.word	0xffffefff
 80048d4:	ffffdfff 	.word	0xffffdfff
 80048d8:	ffffbfff 	.word	0xffffbfff
 80048dc:	fff0ffff 	.word	0xfff0ffff
 80048e0:	efffffff 	.word	0xefffffff
 80048e4:	40012c00 	.word	0x40012c00
 80048e8:	ff0fffff 	.word	0xff0fffff
 80048ec:	feffffff 	.word	0xfeffffff
 80048f0:	fdffffff 	.word	0xfdffffff
 80048f4:	dfffffff 	.word	0xdfffffff

080048f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004900:	46c0      	nop			@ (mov r8, r8)
 8004902:	46bd      	mov	sp, r7
 8004904:	b002      	add	sp, #8
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004910:	46c0      	nop			@ (mov r8, r8)
 8004912:	46bd      	mov	sp, r7
 8004914:	b002      	add	sp, #8
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004920:	46c0      	nop			@ (mov r8, r8)
 8004922:	46bd      	mov	sp, r7
 8004924:	b002      	add	sp, #8
 8004926:	bd80      	pop	{r7, pc}

08004928 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	220f      	movs	r2, #15
 8004938:	4013      	ands	r3, r2
 800493a:	2204      	movs	r2, #4
 800493c:	409a      	lsls	r2, r3
 800493e:	0013      	movs	r3, r2
 8004940:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	43d2      	mvns	r2, r2
 800494a:	401a      	ands	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a1a      	ldr	r2, [r3, #32]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	210f      	movs	r1, #15
 8004958:	400b      	ands	r3, r1
 800495a:	6879      	ldr	r1, [r7, #4]
 800495c:	4099      	lsls	r1, r3
 800495e:	000b      	movs	r3, r1
 8004960:	431a      	orrs	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	621a      	str	r2, [r3, #32]
}
 8004966:	46c0      	nop			@ (mov r8, r8)
 8004968:	46bd      	mov	sp, r7
 800496a:	b006      	add	sp, #24
 800496c:	bd80      	pop	{r7, pc}
	...

08004970 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e046      	b.n	8004a10 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2288      	movs	r2, #136	@ 0x88
 8004986:	589b      	ldr	r3, [r3, r2]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d107      	bne.n	800499c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2284      	movs	r2, #132	@ 0x84
 8004990:	2100      	movs	r1, #0
 8004992:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	0018      	movs	r0, r3
 8004998:	f7fc ff5e 	bl	8001858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2288      	movs	r2, #136	@ 0x88
 80049a0:	2124      	movs	r1, #36	@ 0x24
 80049a2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2101      	movs	r1, #1
 80049b0:	438a      	bics	r2, r1
 80049b2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	0018      	movs	r0, r3
 80049c0:	f000 faea 	bl	8004f98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	0018      	movs	r0, r3
 80049c8:	f000 f828 	bl	8004a1c <UART_SetConfig>
 80049cc:	0003      	movs	r3, r0
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d101      	bne.n	80049d6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e01c      	b.n	8004a10 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	490d      	ldr	r1, [pc, #52]	@ (8004a18 <HAL_UART_Init+0xa8>)
 80049e2:	400a      	ands	r2, r1
 80049e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	212a      	movs	r1, #42	@ 0x2a
 80049f2:	438a      	bics	r2, r1
 80049f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2101      	movs	r1, #1
 8004a02:	430a      	orrs	r2, r1
 8004a04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	0018      	movs	r0, r3
 8004a0a:	f000 fb79 	bl	8005100 <UART_CheckIdleState>
 8004a0e:	0003      	movs	r3, r0
}
 8004a10:	0018      	movs	r0, r3
 8004a12:	46bd      	mov	sp, r7
 8004a14:	b002      	add	sp, #8
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	ffffb7ff 	.word	0xffffb7ff

08004a1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a1c:	b5b0      	push	{r4, r5, r7, lr}
 8004a1e:	b090      	sub	sp, #64	@ 0x40
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a24:	231a      	movs	r3, #26
 8004a26:	2220      	movs	r2, #32
 8004a28:	189b      	adds	r3, r3, r2
 8004a2a:	19db      	adds	r3, r3, r7
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4aaf      	ldr	r2, [pc, #700]	@ (8004d0c <UART_SetConfig+0x2f0>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	0019      	movs	r1, r3
 8004a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a5a:	430b      	orrs	r3, r1
 8004a5c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	4aaa      	ldr	r2, [pc, #680]	@ (8004d10 <UART_SetConfig+0x2f4>)
 8004a66:	4013      	ands	r3, r2
 8004a68:	0018      	movs	r0, r3
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6c:	68d9      	ldr	r1, [r3, #12]
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	0003      	movs	r3, r0
 8004a74:	430b      	orrs	r3, r1
 8004a76:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4aa4      	ldr	r2, [pc, #656]	@ (8004d14 <UART_SetConfig+0x2f8>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d004      	beq.n	8004a92 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	4a9f      	ldr	r2, [pc, #636]	@ (8004d18 <UART_SetConfig+0x2fc>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	0019      	movs	r1, r3
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aa4:	430b      	orrs	r3, r1
 8004aa6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aae:	220f      	movs	r2, #15
 8004ab0:	4393      	bics	r3, r2
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	0003      	movs	r3, r0
 8004abe:	430b      	orrs	r3, r1
 8004ac0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a95      	ldr	r2, [pc, #596]	@ (8004d1c <UART_SetConfig+0x300>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d131      	bne.n	8004b30 <UART_SetConfig+0x114>
 8004acc:	4b94      	ldr	r3, [pc, #592]	@ (8004d20 <UART_SetConfig+0x304>)
 8004ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad0:	2203      	movs	r2, #3
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	2b03      	cmp	r3, #3
 8004ad6:	d01d      	beq.n	8004b14 <UART_SetConfig+0xf8>
 8004ad8:	d823      	bhi.n	8004b22 <UART_SetConfig+0x106>
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d00c      	beq.n	8004af8 <UART_SetConfig+0xdc>
 8004ade:	d820      	bhi.n	8004b22 <UART_SetConfig+0x106>
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <UART_SetConfig+0xce>
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d00e      	beq.n	8004b06 <UART_SetConfig+0xea>
 8004ae8:	e01b      	b.n	8004b22 <UART_SetConfig+0x106>
 8004aea:	231b      	movs	r3, #27
 8004aec:	2220      	movs	r2, #32
 8004aee:	189b      	adds	r3, r3, r2
 8004af0:	19db      	adds	r3, r3, r7
 8004af2:	2200      	movs	r2, #0
 8004af4:	701a      	strb	r2, [r3, #0]
 8004af6:	e0b4      	b.n	8004c62 <UART_SetConfig+0x246>
 8004af8:	231b      	movs	r3, #27
 8004afa:	2220      	movs	r2, #32
 8004afc:	189b      	adds	r3, r3, r2
 8004afe:	19db      	adds	r3, r3, r7
 8004b00:	2202      	movs	r2, #2
 8004b02:	701a      	strb	r2, [r3, #0]
 8004b04:	e0ad      	b.n	8004c62 <UART_SetConfig+0x246>
 8004b06:	231b      	movs	r3, #27
 8004b08:	2220      	movs	r2, #32
 8004b0a:	189b      	adds	r3, r3, r2
 8004b0c:	19db      	adds	r3, r3, r7
 8004b0e:	2204      	movs	r2, #4
 8004b10:	701a      	strb	r2, [r3, #0]
 8004b12:	e0a6      	b.n	8004c62 <UART_SetConfig+0x246>
 8004b14:	231b      	movs	r3, #27
 8004b16:	2220      	movs	r2, #32
 8004b18:	189b      	adds	r3, r3, r2
 8004b1a:	19db      	adds	r3, r3, r7
 8004b1c:	2208      	movs	r2, #8
 8004b1e:	701a      	strb	r2, [r3, #0]
 8004b20:	e09f      	b.n	8004c62 <UART_SetConfig+0x246>
 8004b22:	231b      	movs	r3, #27
 8004b24:	2220      	movs	r2, #32
 8004b26:	189b      	adds	r3, r3, r2
 8004b28:	19db      	adds	r3, r3, r7
 8004b2a:	2210      	movs	r2, #16
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	e098      	b.n	8004c62 <UART_SetConfig+0x246>
 8004b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a7b      	ldr	r2, [pc, #492]	@ (8004d24 <UART_SetConfig+0x308>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d131      	bne.n	8004b9e <UART_SetConfig+0x182>
 8004b3a:	4b79      	ldr	r3, [pc, #484]	@ (8004d20 <UART_SetConfig+0x304>)
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b3e:	220c      	movs	r2, #12
 8004b40:	4013      	ands	r3, r2
 8004b42:	2b0c      	cmp	r3, #12
 8004b44:	d01d      	beq.n	8004b82 <UART_SetConfig+0x166>
 8004b46:	d823      	bhi.n	8004b90 <UART_SetConfig+0x174>
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d00c      	beq.n	8004b66 <UART_SetConfig+0x14a>
 8004b4c:	d820      	bhi.n	8004b90 <UART_SetConfig+0x174>
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <UART_SetConfig+0x13c>
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d00e      	beq.n	8004b74 <UART_SetConfig+0x158>
 8004b56:	e01b      	b.n	8004b90 <UART_SetConfig+0x174>
 8004b58:	231b      	movs	r3, #27
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	189b      	adds	r3, r3, r2
 8004b5e:	19db      	adds	r3, r3, r7
 8004b60:	2200      	movs	r2, #0
 8004b62:	701a      	strb	r2, [r3, #0]
 8004b64:	e07d      	b.n	8004c62 <UART_SetConfig+0x246>
 8004b66:	231b      	movs	r3, #27
 8004b68:	2220      	movs	r2, #32
 8004b6a:	189b      	adds	r3, r3, r2
 8004b6c:	19db      	adds	r3, r3, r7
 8004b6e:	2202      	movs	r2, #2
 8004b70:	701a      	strb	r2, [r3, #0]
 8004b72:	e076      	b.n	8004c62 <UART_SetConfig+0x246>
 8004b74:	231b      	movs	r3, #27
 8004b76:	2220      	movs	r2, #32
 8004b78:	189b      	adds	r3, r3, r2
 8004b7a:	19db      	adds	r3, r3, r7
 8004b7c:	2204      	movs	r2, #4
 8004b7e:	701a      	strb	r2, [r3, #0]
 8004b80:	e06f      	b.n	8004c62 <UART_SetConfig+0x246>
 8004b82:	231b      	movs	r3, #27
 8004b84:	2220      	movs	r2, #32
 8004b86:	189b      	adds	r3, r3, r2
 8004b88:	19db      	adds	r3, r3, r7
 8004b8a:	2208      	movs	r2, #8
 8004b8c:	701a      	strb	r2, [r3, #0]
 8004b8e:	e068      	b.n	8004c62 <UART_SetConfig+0x246>
 8004b90:	231b      	movs	r3, #27
 8004b92:	2220      	movs	r2, #32
 8004b94:	189b      	adds	r3, r3, r2
 8004b96:	19db      	adds	r3, r3, r7
 8004b98:	2210      	movs	r2, #16
 8004b9a:	701a      	strb	r2, [r3, #0]
 8004b9c:	e061      	b.n	8004c62 <UART_SetConfig+0x246>
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a61      	ldr	r2, [pc, #388]	@ (8004d28 <UART_SetConfig+0x30c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d106      	bne.n	8004bb6 <UART_SetConfig+0x19a>
 8004ba8:	231b      	movs	r3, #27
 8004baa:	2220      	movs	r2, #32
 8004bac:	189b      	adds	r3, r3, r2
 8004bae:	19db      	adds	r3, r3, r7
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]
 8004bb4:	e055      	b.n	8004c62 <UART_SetConfig+0x246>
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a5c      	ldr	r2, [pc, #368]	@ (8004d2c <UART_SetConfig+0x310>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d106      	bne.n	8004bce <UART_SetConfig+0x1b2>
 8004bc0:	231b      	movs	r3, #27
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	189b      	adds	r3, r3, r2
 8004bc6:	19db      	adds	r3, r3, r7
 8004bc8:	2200      	movs	r2, #0
 8004bca:	701a      	strb	r2, [r3, #0]
 8004bcc:	e049      	b.n	8004c62 <UART_SetConfig+0x246>
 8004bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a50      	ldr	r2, [pc, #320]	@ (8004d14 <UART_SetConfig+0x2f8>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d13e      	bne.n	8004c56 <UART_SetConfig+0x23a>
 8004bd8:	4b51      	ldr	r3, [pc, #324]	@ (8004d20 <UART_SetConfig+0x304>)
 8004bda:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004bdc:	23c0      	movs	r3, #192	@ 0xc0
 8004bde:	011b      	lsls	r3, r3, #4
 8004be0:	4013      	ands	r3, r2
 8004be2:	22c0      	movs	r2, #192	@ 0xc0
 8004be4:	0112      	lsls	r2, r2, #4
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d027      	beq.n	8004c3a <UART_SetConfig+0x21e>
 8004bea:	22c0      	movs	r2, #192	@ 0xc0
 8004bec:	0112      	lsls	r2, r2, #4
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d82a      	bhi.n	8004c48 <UART_SetConfig+0x22c>
 8004bf2:	2280      	movs	r2, #128	@ 0x80
 8004bf4:	0112      	lsls	r2, r2, #4
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d011      	beq.n	8004c1e <UART_SetConfig+0x202>
 8004bfa:	2280      	movs	r2, #128	@ 0x80
 8004bfc:	0112      	lsls	r2, r2, #4
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d822      	bhi.n	8004c48 <UART_SetConfig+0x22c>
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d004      	beq.n	8004c10 <UART_SetConfig+0x1f4>
 8004c06:	2280      	movs	r2, #128	@ 0x80
 8004c08:	00d2      	lsls	r2, r2, #3
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00e      	beq.n	8004c2c <UART_SetConfig+0x210>
 8004c0e:	e01b      	b.n	8004c48 <UART_SetConfig+0x22c>
 8004c10:	231b      	movs	r3, #27
 8004c12:	2220      	movs	r2, #32
 8004c14:	189b      	adds	r3, r3, r2
 8004c16:	19db      	adds	r3, r3, r7
 8004c18:	2200      	movs	r2, #0
 8004c1a:	701a      	strb	r2, [r3, #0]
 8004c1c:	e021      	b.n	8004c62 <UART_SetConfig+0x246>
 8004c1e:	231b      	movs	r3, #27
 8004c20:	2220      	movs	r2, #32
 8004c22:	189b      	adds	r3, r3, r2
 8004c24:	19db      	adds	r3, r3, r7
 8004c26:	2202      	movs	r2, #2
 8004c28:	701a      	strb	r2, [r3, #0]
 8004c2a:	e01a      	b.n	8004c62 <UART_SetConfig+0x246>
 8004c2c:	231b      	movs	r3, #27
 8004c2e:	2220      	movs	r2, #32
 8004c30:	189b      	adds	r3, r3, r2
 8004c32:	19db      	adds	r3, r3, r7
 8004c34:	2204      	movs	r2, #4
 8004c36:	701a      	strb	r2, [r3, #0]
 8004c38:	e013      	b.n	8004c62 <UART_SetConfig+0x246>
 8004c3a:	231b      	movs	r3, #27
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	189b      	adds	r3, r3, r2
 8004c40:	19db      	adds	r3, r3, r7
 8004c42:	2208      	movs	r2, #8
 8004c44:	701a      	strb	r2, [r3, #0]
 8004c46:	e00c      	b.n	8004c62 <UART_SetConfig+0x246>
 8004c48:	231b      	movs	r3, #27
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	189b      	adds	r3, r3, r2
 8004c4e:	19db      	adds	r3, r3, r7
 8004c50:	2210      	movs	r2, #16
 8004c52:	701a      	strb	r2, [r3, #0]
 8004c54:	e005      	b.n	8004c62 <UART_SetConfig+0x246>
 8004c56:	231b      	movs	r3, #27
 8004c58:	2220      	movs	r2, #32
 8004c5a:	189b      	adds	r3, r3, r2
 8004c5c:	19db      	adds	r3, r3, r7
 8004c5e:	2210      	movs	r2, #16
 8004c60:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a2b      	ldr	r2, [pc, #172]	@ (8004d14 <UART_SetConfig+0x2f8>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d000      	beq.n	8004c6e <UART_SetConfig+0x252>
 8004c6c:	e0a9      	b.n	8004dc2 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c6e:	231b      	movs	r3, #27
 8004c70:	2220      	movs	r2, #32
 8004c72:	189b      	adds	r3, r3, r2
 8004c74:	19db      	adds	r3, r3, r7
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d015      	beq.n	8004ca8 <UART_SetConfig+0x28c>
 8004c7c:	dc18      	bgt.n	8004cb0 <UART_SetConfig+0x294>
 8004c7e:	2b04      	cmp	r3, #4
 8004c80:	d00d      	beq.n	8004c9e <UART_SetConfig+0x282>
 8004c82:	dc15      	bgt.n	8004cb0 <UART_SetConfig+0x294>
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d002      	beq.n	8004c8e <UART_SetConfig+0x272>
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d005      	beq.n	8004c98 <UART_SetConfig+0x27c>
 8004c8c:	e010      	b.n	8004cb0 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c8e:	f7fd ff7b 	bl	8002b88 <HAL_RCC_GetPCLK1Freq>
 8004c92:	0003      	movs	r3, r0
 8004c94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c96:	e014      	b.n	8004cc2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c98:	4b25      	ldr	r3, [pc, #148]	@ (8004d30 <UART_SetConfig+0x314>)
 8004c9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c9c:	e011      	b.n	8004cc2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c9e:	f7fd fee7 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 8004ca2:	0003      	movs	r3, r0
 8004ca4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ca6:	e00c      	b.n	8004cc2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ca8:	2380      	movs	r3, #128	@ 0x80
 8004caa:	021b      	lsls	r3, r3, #8
 8004cac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cae:	e008      	b.n	8004cc2 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004cb4:	231a      	movs	r3, #26
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	189b      	adds	r3, r3, r2
 8004cba:	19db      	adds	r3, r3, r7
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	701a      	strb	r2, [r3, #0]
        break;
 8004cc0:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d100      	bne.n	8004cca <UART_SetConfig+0x2ae>
 8004cc8:	e14b      	b.n	8004f62 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ccc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cce:	4b19      	ldr	r3, [pc, #100]	@ (8004d34 <UART_SetConfig+0x318>)
 8004cd0:	0052      	lsls	r2, r2, #1
 8004cd2:	5ad3      	ldrh	r3, [r2, r3]
 8004cd4:	0019      	movs	r1, r3
 8004cd6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004cd8:	f7fb fa1e 	bl	8000118 <__udivsi3>
 8004cdc:	0003      	movs	r3, r0
 8004cde:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	0013      	movs	r3, r2
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	189b      	adds	r3, r3, r2
 8004cea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d305      	bcc.n	8004cfc <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cf6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d91d      	bls.n	8004d38 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004cfc:	231a      	movs	r3, #26
 8004cfe:	2220      	movs	r2, #32
 8004d00:	189b      	adds	r3, r3, r2
 8004d02:	19db      	adds	r3, r3, r7
 8004d04:	2201      	movs	r2, #1
 8004d06:	701a      	strb	r2, [r3, #0]
 8004d08:	e12b      	b.n	8004f62 <UART_SetConfig+0x546>
 8004d0a:	46c0      	nop			@ (mov r8, r8)
 8004d0c:	cfff69f3 	.word	0xcfff69f3
 8004d10:	ffffcfff 	.word	0xffffcfff
 8004d14:	40008000 	.word	0x40008000
 8004d18:	11fff4ff 	.word	0x11fff4ff
 8004d1c:	40013800 	.word	0x40013800
 8004d20:	40021000 	.word	0x40021000
 8004d24:	40004400 	.word	0x40004400
 8004d28:	40004800 	.word	0x40004800
 8004d2c:	40004c00 	.word	0x40004c00
 8004d30:	00f42400 	.word	0x00f42400
 8004d34:	08006640 	.word	0x08006640
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d3a:	61bb      	str	r3, [r7, #24]
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	61fb      	str	r3, [r7, #28]
 8004d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d44:	4b92      	ldr	r3, [pc, #584]	@ (8004f90 <UART_SetConfig+0x574>)
 8004d46:	0052      	lsls	r2, r2, #1
 8004d48:	5ad3      	ldrh	r3, [r2, r3]
 8004d4a:	613b      	str	r3, [r7, #16]
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	617b      	str	r3, [r7, #20]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	69b8      	ldr	r0, [r7, #24]
 8004d56:	69f9      	ldr	r1, [r7, #28]
 8004d58:	f7fb fb54 	bl	8000404 <__aeabi_uldivmod>
 8004d5c:	0002      	movs	r2, r0
 8004d5e:	000b      	movs	r3, r1
 8004d60:	0e11      	lsrs	r1, r2, #24
 8004d62:	021d      	lsls	r5, r3, #8
 8004d64:	430d      	orrs	r5, r1
 8004d66:	0214      	lsls	r4, r2, #8
 8004d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	085b      	lsrs	r3, r3, #1
 8004d6e:	60bb      	str	r3, [r7, #8]
 8004d70:	2300      	movs	r3, #0
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	68b8      	ldr	r0, [r7, #8]
 8004d76:	68f9      	ldr	r1, [r7, #12]
 8004d78:	1900      	adds	r0, r0, r4
 8004d7a:	4169      	adcs	r1, r5
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	603b      	str	r3, [r7, #0]
 8004d82:	2300      	movs	r3, #0
 8004d84:	607b      	str	r3, [r7, #4]
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f7fb fb3b 	bl	8000404 <__aeabi_uldivmod>
 8004d8e:	0002      	movs	r2, r0
 8004d90:	000b      	movs	r3, r1
 8004d92:	0013      	movs	r3, r2
 8004d94:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d98:	23c0      	movs	r3, #192	@ 0xc0
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d309      	bcc.n	8004db4 <UART_SetConfig+0x398>
 8004da0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004da2:	2380      	movs	r3, #128	@ 0x80
 8004da4:	035b      	lsls	r3, r3, #13
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d204      	bcs.n	8004db4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004db0:	60da      	str	r2, [r3, #12]
 8004db2:	e0d6      	b.n	8004f62 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004db4:	231a      	movs	r3, #26
 8004db6:	2220      	movs	r2, #32
 8004db8:	189b      	adds	r3, r3, r2
 8004dba:	19db      	adds	r3, r3, r7
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	701a      	strb	r2, [r3, #0]
 8004dc0:	e0cf      	b.n	8004f62 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc4:	69da      	ldr	r2, [r3, #28]
 8004dc6:	2380      	movs	r3, #128	@ 0x80
 8004dc8:	021b      	lsls	r3, r3, #8
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d000      	beq.n	8004dd0 <UART_SetConfig+0x3b4>
 8004dce:	e070      	b.n	8004eb2 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8004dd0:	231b      	movs	r3, #27
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	189b      	adds	r3, r3, r2
 8004dd6:	19db      	adds	r3, r3, r7
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	2b08      	cmp	r3, #8
 8004ddc:	d015      	beq.n	8004e0a <UART_SetConfig+0x3ee>
 8004dde:	dc18      	bgt.n	8004e12 <UART_SetConfig+0x3f6>
 8004de0:	2b04      	cmp	r3, #4
 8004de2:	d00d      	beq.n	8004e00 <UART_SetConfig+0x3e4>
 8004de4:	dc15      	bgt.n	8004e12 <UART_SetConfig+0x3f6>
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <UART_SetConfig+0x3d4>
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d005      	beq.n	8004dfa <UART_SetConfig+0x3de>
 8004dee:	e010      	b.n	8004e12 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004df0:	f7fd feca 	bl	8002b88 <HAL_RCC_GetPCLK1Freq>
 8004df4:	0003      	movs	r3, r0
 8004df6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004df8:	e014      	b.n	8004e24 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dfa:	4b66      	ldr	r3, [pc, #408]	@ (8004f94 <UART_SetConfig+0x578>)
 8004dfc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004dfe:	e011      	b.n	8004e24 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e00:	f7fd fe36 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 8004e04:	0003      	movs	r3, r0
 8004e06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e08:	e00c      	b.n	8004e24 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e0a:	2380      	movs	r3, #128	@ 0x80
 8004e0c:	021b      	lsls	r3, r3, #8
 8004e0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e10:	e008      	b.n	8004e24 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004e12:	2300      	movs	r3, #0
 8004e14:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004e16:	231a      	movs	r3, #26
 8004e18:	2220      	movs	r2, #32
 8004e1a:	189b      	adds	r3, r3, r2
 8004e1c:	19db      	adds	r3, r3, r7
 8004e1e:	2201      	movs	r2, #1
 8004e20:	701a      	strb	r2, [r3, #0]
        break;
 8004e22:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d100      	bne.n	8004e2c <UART_SetConfig+0x410>
 8004e2a:	e09a      	b.n	8004f62 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e30:	4b57      	ldr	r3, [pc, #348]	@ (8004f90 <UART_SetConfig+0x574>)
 8004e32:	0052      	lsls	r2, r2, #1
 8004e34:	5ad3      	ldrh	r3, [r2, r3]
 8004e36:	0019      	movs	r1, r3
 8004e38:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004e3a:	f7fb f96d 	bl	8000118 <__udivsi3>
 8004e3e:	0003      	movs	r3, r0
 8004e40:	005a      	lsls	r2, r3, #1
 8004e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	085b      	lsrs	r3, r3, #1
 8004e48:	18d2      	adds	r2, r2, r3
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	0019      	movs	r1, r3
 8004e50:	0010      	movs	r0, r2
 8004e52:	f7fb f961 	bl	8000118 <__udivsi3>
 8004e56:	0003      	movs	r3, r0
 8004e58:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5c:	2b0f      	cmp	r3, #15
 8004e5e:	d921      	bls.n	8004ea4 <UART_SetConfig+0x488>
 8004e60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e62:	2380      	movs	r3, #128	@ 0x80
 8004e64:	025b      	lsls	r3, r3, #9
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d21c      	bcs.n	8004ea4 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	200e      	movs	r0, #14
 8004e70:	2420      	movs	r4, #32
 8004e72:	1903      	adds	r3, r0, r4
 8004e74:	19db      	adds	r3, r3, r7
 8004e76:	210f      	movs	r1, #15
 8004e78:	438a      	bics	r2, r1
 8004e7a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7e:	085b      	lsrs	r3, r3, #1
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2207      	movs	r2, #7
 8004e84:	4013      	ands	r3, r2
 8004e86:	b299      	uxth	r1, r3
 8004e88:	1903      	adds	r3, r0, r4
 8004e8a:	19db      	adds	r3, r3, r7
 8004e8c:	1902      	adds	r2, r0, r4
 8004e8e:	19d2      	adds	r2, r2, r7
 8004e90:	8812      	ldrh	r2, [r2, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	1902      	adds	r2, r0, r4
 8004e9c:	19d2      	adds	r2, r2, r7
 8004e9e:	8812      	ldrh	r2, [r2, #0]
 8004ea0:	60da      	str	r2, [r3, #12]
 8004ea2:	e05e      	b.n	8004f62 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004ea4:	231a      	movs	r3, #26
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	189b      	adds	r3, r3, r2
 8004eaa:	19db      	adds	r3, r3, r7
 8004eac:	2201      	movs	r2, #1
 8004eae:	701a      	strb	r2, [r3, #0]
 8004eb0:	e057      	b.n	8004f62 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004eb2:	231b      	movs	r3, #27
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	189b      	adds	r3, r3, r2
 8004eb8:	19db      	adds	r3, r3, r7
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2b08      	cmp	r3, #8
 8004ebe:	d015      	beq.n	8004eec <UART_SetConfig+0x4d0>
 8004ec0:	dc18      	bgt.n	8004ef4 <UART_SetConfig+0x4d8>
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	d00d      	beq.n	8004ee2 <UART_SetConfig+0x4c6>
 8004ec6:	dc15      	bgt.n	8004ef4 <UART_SetConfig+0x4d8>
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d002      	beq.n	8004ed2 <UART_SetConfig+0x4b6>
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d005      	beq.n	8004edc <UART_SetConfig+0x4c0>
 8004ed0:	e010      	b.n	8004ef4 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed2:	f7fd fe59 	bl	8002b88 <HAL_RCC_GetPCLK1Freq>
 8004ed6:	0003      	movs	r3, r0
 8004ed8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004eda:	e014      	b.n	8004f06 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004edc:	4b2d      	ldr	r3, [pc, #180]	@ (8004f94 <UART_SetConfig+0x578>)
 8004ede:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ee0:	e011      	b.n	8004f06 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ee2:	f7fd fdc5 	bl	8002a70 <HAL_RCC_GetSysClockFreq>
 8004ee6:	0003      	movs	r3, r0
 8004ee8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004eea:	e00c      	b.n	8004f06 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eec:	2380      	movs	r3, #128	@ 0x80
 8004eee:	021b      	lsls	r3, r3, #8
 8004ef0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ef2:	e008      	b.n	8004f06 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004ef8:	231a      	movs	r3, #26
 8004efa:	2220      	movs	r2, #32
 8004efc:	189b      	adds	r3, r3, r2
 8004efe:	19db      	adds	r3, r3, r7
 8004f00:	2201      	movs	r2, #1
 8004f02:	701a      	strb	r2, [r3, #0]
        break;
 8004f04:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d02a      	beq.n	8004f62 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f10:	4b1f      	ldr	r3, [pc, #124]	@ (8004f90 <UART_SetConfig+0x574>)
 8004f12:	0052      	lsls	r2, r2, #1
 8004f14:	5ad3      	ldrh	r3, [r2, r3]
 8004f16:	0019      	movs	r1, r3
 8004f18:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004f1a:	f7fb f8fd 	bl	8000118 <__udivsi3>
 8004f1e:	0003      	movs	r3, r0
 8004f20:	001a      	movs	r2, r3
 8004f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	085b      	lsrs	r3, r3, #1
 8004f28:	18d2      	adds	r2, r2, r3
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	0019      	movs	r1, r3
 8004f30:	0010      	movs	r0, r2
 8004f32:	f7fb f8f1 	bl	8000118 <__udivsi3>
 8004f36:	0003      	movs	r3, r0
 8004f38:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3c:	2b0f      	cmp	r3, #15
 8004f3e:	d90a      	bls.n	8004f56 <UART_SetConfig+0x53a>
 8004f40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f42:	2380      	movs	r3, #128	@ 0x80
 8004f44:	025b      	lsls	r3, r3, #9
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d205      	bcs.n	8004f56 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	60da      	str	r2, [r3, #12]
 8004f54:	e005      	b.n	8004f62 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004f56:	231a      	movs	r3, #26
 8004f58:	2220      	movs	r2, #32
 8004f5a:	189b      	adds	r3, r3, r2
 8004f5c:	19db      	adds	r3, r3, r7
 8004f5e:	2201      	movs	r2, #1
 8004f60:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f64:	226a      	movs	r2, #106	@ 0x6a
 8004f66:	2101      	movs	r1, #1
 8004f68:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6c:	2268      	movs	r2, #104	@ 0x68
 8004f6e:	2101      	movs	r1, #1
 8004f70:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f74:	2200      	movs	r2, #0
 8004f76:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004f7e:	231a      	movs	r3, #26
 8004f80:	2220      	movs	r2, #32
 8004f82:	189b      	adds	r3, r3, r2
 8004f84:	19db      	adds	r3, r3, r7
 8004f86:	781b      	ldrb	r3, [r3, #0]
}
 8004f88:	0018      	movs	r0, r3
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	b010      	add	sp, #64	@ 0x40
 8004f8e:	bdb0      	pop	{r4, r5, r7, pc}
 8004f90:	08006640 	.word	0x08006640
 8004f94:	00f42400 	.word	0x00f42400

08004f98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa4:	2208      	movs	r2, #8
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	d00b      	beq.n	8004fc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	4a4a      	ldr	r2, [pc, #296]	@ (80050dc <UART_AdvFeatureConfig+0x144>)
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	0019      	movs	r1, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	4013      	ands	r3, r2
 8004fca:	d00b      	beq.n	8004fe4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	4a43      	ldr	r2, [pc, #268]	@ (80050e0 <UART_AdvFeatureConfig+0x148>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	0019      	movs	r1, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe8:	2202      	movs	r2, #2
 8004fea:	4013      	ands	r3, r2
 8004fec:	d00b      	beq.n	8005006 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	4a3b      	ldr	r2, [pc, #236]	@ (80050e4 <UART_AdvFeatureConfig+0x14c>)
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	0019      	movs	r1, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500a:	2204      	movs	r2, #4
 800500c:	4013      	ands	r3, r2
 800500e:	d00b      	beq.n	8005028 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	4a34      	ldr	r2, [pc, #208]	@ (80050e8 <UART_AdvFeatureConfig+0x150>)
 8005018:	4013      	ands	r3, r2
 800501a:	0019      	movs	r1, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502c:	2210      	movs	r2, #16
 800502e:	4013      	ands	r3, r2
 8005030:	d00b      	beq.n	800504a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	4a2c      	ldr	r2, [pc, #176]	@ (80050ec <UART_AdvFeatureConfig+0x154>)
 800503a:	4013      	ands	r3, r2
 800503c:	0019      	movs	r1, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504e:	2220      	movs	r2, #32
 8005050:	4013      	ands	r3, r2
 8005052:	d00b      	beq.n	800506c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	4a25      	ldr	r2, [pc, #148]	@ (80050f0 <UART_AdvFeatureConfig+0x158>)
 800505c:	4013      	ands	r3, r2
 800505e:	0019      	movs	r1, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005070:	2240      	movs	r2, #64	@ 0x40
 8005072:	4013      	ands	r3, r2
 8005074:	d01d      	beq.n	80050b2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	4a1d      	ldr	r2, [pc, #116]	@ (80050f4 <UART_AdvFeatureConfig+0x15c>)
 800507e:	4013      	ands	r3, r2
 8005080:	0019      	movs	r1, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005092:	2380      	movs	r3, #128	@ 0x80
 8005094:	035b      	lsls	r3, r3, #13
 8005096:	429a      	cmp	r2, r3
 8005098:	d10b      	bne.n	80050b2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	4a15      	ldr	r2, [pc, #84]	@ (80050f8 <UART_AdvFeatureConfig+0x160>)
 80050a2:	4013      	ands	r3, r2
 80050a4:	0019      	movs	r1, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b6:	2280      	movs	r2, #128	@ 0x80
 80050b8:	4013      	ands	r3, r2
 80050ba:	d00b      	beq.n	80050d4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	4a0e      	ldr	r2, [pc, #56]	@ (80050fc <UART_AdvFeatureConfig+0x164>)
 80050c4:	4013      	ands	r3, r2
 80050c6:	0019      	movs	r1, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	430a      	orrs	r2, r1
 80050d2:	605a      	str	r2, [r3, #4]
  }
}
 80050d4:	46c0      	nop			@ (mov r8, r8)
 80050d6:	46bd      	mov	sp, r7
 80050d8:	b002      	add	sp, #8
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	ffff7fff 	.word	0xffff7fff
 80050e0:	fffdffff 	.word	0xfffdffff
 80050e4:	fffeffff 	.word	0xfffeffff
 80050e8:	fffbffff 	.word	0xfffbffff
 80050ec:	ffffefff 	.word	0xffffefff
 80050f0:	ffffdfff 	.word	0xffffdfff
 80050f4:	ffefffff 	.word	0xffefffff
 80050f8:	ff9fffff 	.word	0xff9fffff
 80050fc:	fff7ffff 	.word	0xfff7ffff

08005100 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b092      	sub	sp, #72	@ 0x48
 8005104:	af02      	add	r7, sp, #8
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2290      	movs	r2, #144	@ 0x90
 800510c:	2100      	movs	r1, #0
 800510e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005110:	f7fc fc98 	bl	8001a44 <HAL_GetTick>
 8005114:	0003      	movs	r3, r0
 8005116:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2208      	movs	r2, #8
 8005120:	4013      	ands	r3, r2
 8005122:	2b08      	cmp	r3, #8
 8005124:	d12d      	bne.n	8005182 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005128:	2280      	movs	r2, #128	@ 0x80
 800512a:	0391      	lsls	r1, r2, #14
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	4a47      	ldr	r2, [pc, #284]	@ (800524c <UART_CheckIdleState+0x14c>)
 8005130:	9200      	str	r2, [sp, #0]
 8005132:	2200      	movs	r2, #0
 8005134:	f000 f88e 	bl	8005254 <UART_WaitOnFlagUntilTimeout>
 8005138:	1e03      	subs	r3, r0, #0
 800513a:	d022      	beq.n	8005182 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800513c:	f3ef 8310 	mrs	r3, PRIMASK
 8005140:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005144:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005146:	2301      	movs	r3, #1
 8005148:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800514a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514c:	f383 8810 	msr	PRIMASK, r3
}
 8005150:	46c0      	nop			@ (mov r8, r8)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2180      	movs	r1, #128	@ 0x80
 800515e:	438a      	bics	r2, r1
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005164:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005168:	f383 8810 	msr	PRIMASK, r3
}
 800516c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2288      	movs	r2, #136	@ 0x88
 8005172:	2120      	movs	r1, #32
 8005174:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2284      	movs	r2, #132	@ 0x84
 800517a:	2100      	movs	r1, #0
 800517c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e060      	b.n	8005244 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2204      	movs	r2, #4
 800518a:	4013      	ands	r3, r2
 800518c:	2b04      	cmp	r3, #4
 800518e:	d146      	bne.n	800521e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005192:	2280      	movs	r2, #128	@ 0x80
 8005194:	03d1      	lsls	r1, r2, #15
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	4a2c      	ldr	r2, [pc, #176]	@ (800524c <UART_CheckIdleState+0x14c>)
 800519a:	9200      	str	r2, [sp, #0]
 800519c:	2200      	movs	r2, #0
 800519e:	f000 f859 	bl	8005254 <UART_WaitOnFlagUntilTimeout>
 80051a2:	1e03      	subs	r3, r0, #0
 80051a4:	d03b      	beq.n	800521e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051a6:	f3ef 8310 	mrs	r3, PRIMASK
 80051aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80051ac:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80051b0:	2301      	movs	r3, #1
 80051b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	f383 8810 	msr	PRIMASK, r3
}
 80051ba:	46c0      	nop			@ (mov r8, r8)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4922      	ldr	r1, [pc, #136]	@ (8005250 <UART_CheckIdleState+0x150>)
 80051c8:	400a      	ands	r2, r1
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f383 8810 	msr	PRIMASK, r3
}
 80051d6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051d8:	f3ef 8310 	mrs	r3, PRIMASK
 80051dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80051de:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80051e2:	2301      	movs	r3, #1
 80051e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	f383 8810 	msr	PRIMASK, r3
}
 80051ec:	46c0      	nop			@ (mov r8, r8)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2101      	movs	r1, #1
 80051fa:	438a      	bics	r2, r1
 80051fc:	609a      	str	r2, [r3, #8]
 80051fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005200:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	f383 8810 	msr	PRIMASK, r3
}
 8005208:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	228c      	movs	r2, #140	@ 0x8c
 800520e:	2120      	movs	r1, #32
 8005210:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2284      	movs	r2, #132	@ 0x84
 8005216:	2100      	movs	r1, #0
 8005218:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e012      	b.n	8005244 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2288      	movs	r2, #136	@ 0x88
 8005222:	2120      	movs	r1, #32
 8005224:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	228c      	movs	r2, #140	@ 0x8c
 800522a:	2120      	movs	r1, #32
 800522c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2284      	movs	r2, #132	@ 0x84
 800523e:	2100      	movs	r1, #0
 8005240:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	0018      	movs	r0, r3
 8005246:	46bd      	mov	sp, r7
 8005248:	b010      	add	sp, #64	@ 0x40
 800524a:	bd80      	pop	{r7, pc}
 800524c:	01ffffff 	.word	0x01ffffff
 8005250:	fffffedf 	.word	0xfffffedf

08005254 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	603b      	str	r3, [r7, #0]
 8005260:	1dfb      	adds	r3, r7, #7
 8005262:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005264:	e051      	b.n	800530a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	3301      	adds	r3, #1
 800526a:	d04e      	beq.n	800530a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800526c:	f7fc fbea 	bl	8001a44 <HAL_GetTick>
 8005270:	0002      	movs	r2, r0
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	429a      	cmp	r2, r3
 800527a:	d302      	bcc.n	8005282 <UART_WaitOnFlagUntilTimeout+0x2e>
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e051      	b.n	800532a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2204      	movs	r2, #4
 800528e:	4013      	ands	r3, r2
 8005290:	d03b      	beq.n	800530a <UART_WaitOnFlagUntilTimeout+0xb6>
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2b80      	cmp	r3, #128	@ 0x80
 8005296:	d038      	beq.n	800530a <UART_WaitOnFlagUntilTimeout+0xb6>
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b40      	cmp	r3, #64	@ 0x40
 800529c:	d035      	beq.n	800530a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	2208      	movs	r2, #8
 80052a6:	4013      	ands	r3, r2
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d111      	bne.n	80052d0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2208      	movs	r2, #8
 80052b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	0018      	movs	r0, r3
 80052b8:	f000 f83c 	bl	8005334 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2290      	movs	r2, #144	@ 0x90
 80052c0:	2108      	movs	r1, #8
 80052c2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2284      	movs	r2, #132	@ 0x84
 80052c8:	2100      	movs	r1, #0
 80052ca:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e02c      	b.n	800532a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	69da      	ldr	r2, [r3, #28]
 80052d6:	2380      	movs	r3, #128	@ 0x80
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	401a      	ands	r2, r3
 80052dc:	2380      	movs	r3, #128	@ 0x80
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d112      	bne.n	800530a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2280      	movs	r2, #128	@ 0x80
 80052ea:	0112      	lsls	r2, r2, #4
 80052ec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	0018      	movs	r0, r3
 80052f2:	f000 f81f 	bl	8005334 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2290      	movs	r2, #144	@ 0x90
 80052fa:	2120      	movs	r1, #32
 80052fc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2284      	movs	r2, #132	@ 0x84
 8005302:	2100      	movs	r1, #0
 8005304:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e00f      	b.n	800532a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	69db      	ldr	r3, [r3, #28]
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	4013      	ands	r3, r2
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	425a      	negs	r2, r3
 800531a:	4153      	adcs	r3, r2
 800531c:	b2db      	uxtb	r3, r3
 800531e:	001a      	movs	r2, r3
 8005320:	1dfb      	adds	r3, r7, #7
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	429a      	cmp	r2, r3
 8005326:	d09e      	beq.n	8005266 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	0018      	movs	r0, r3
 800532c:	46bd      	mov	sp, r7
 800532e:	b004      	add	sp, #16
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08e      	sub	sp, #56	@ 0x38
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800533c:	f3ef 8310 	mrs	r3, PRIMASK
 8005340:	617b      	str	r3, [r7, #20]
  return(result);
 8005342:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005344:	637b      	str	r3, [r7, #52]	@ 0x34
 8005346:	2301      	movs	r3, #1
 8005348:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	f383 8810 	msr	PRIMASK, r3
}
 8005350:	46c0      	nop			@ (mov r8, r8)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4926      	ldr	r1, [pc, #152]	@ (80053f8 <UART_EndRxTransfer+0xc4>)
 800535e:	400a      	ands	r2, r1
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005364:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	f383 8810 	msr	PRIMASK, r3
}
 800536c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800536e:	f3ef 8310 	mrs	r3, PRIMASK
 8005372:	623b      	str	r3, [r7, #32]
  return(result);
 8005374:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005376:	633b      	str	r3, [r7, #48]	@ 0x30
 8005378:	2301      	movs	r3, #1
 800537a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800537c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537e:	f383 8810 	msr	PRIMASK, r3
}
 8005382:	46c0      	nop			@ (mov r8, r8)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689a      	ldr	r2, [r3, #8]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	491b      	ldr	r1, [pc, #108]	@ (80053fc <UART_EndRxTransfer+0xc8>)
 8005390:	400a      	ands	r2, r1
 8005392:	609a      	str	r2, [r3, #8]
 8005394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005396:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539a:	f383 8810 	msr	PRIMASK, r3
}
 800539e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d118      	bne.n	80053da <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053a8:	f3ef 8310 	mrs	r3, PRIMASK
 80053ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80053ae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053b2:	2301      	movs	r3, #1
 80053b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f383 8810 	msr	PRIMASK, r3
}
 80053bc:	46c0      	nop			@ (mov r8, r8)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2110      	movs	r1, #16
 80053ca:	438a      	bics	r2, r1
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f383 8810 	msr	PRIMASK, r3
}
 80053d8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	228c      	movs	r2, #140	@ 0x8c
 80053de:	2120      	movs	r1, #32
 80053e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80053ee:	46c0      	nop			@ (mov r8, r8)
 80053f0:	46bd      	mov	sp, r7
 80053f2:	b00e      	add	sp, #56	@ 0x38
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	46c0      	nop			@ (mov r8, r8)
 80053f8:	fffffedf 	.word	0xfffffedf
 80053fc:	effffffe 	.word	0xeffffffe

08005400 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2284      	movs	r2, #132	@ 0x84
 800540c:	5c9b      	ldrb	r3, [r3, r2]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d101      	bne.n	8005416 <HAL_UARTEx_DisableFifoMode+0x16>
 8005412:	2302      	movs	r3, #2
 8005414:	e027      	b.n	8005466 <HAL_UARTEx_DisableFifoMode+0x66>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2284      	movs	r2, #132	@ 0x84
 800541a:	2101      	movs	r1, #1
 800541c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2288      	movs	r2, #136	@ 0x88
 8005422:	2124      	movs	r1, #36	@ 0x24
 8005424:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2101      	movs	r1, #1
 800543a:	438a      	bics	r2, r1
 800543c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4a0b      	ldr	r2, [pc, #44]	@ (8005470 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005442:	4013      	ands	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2288      	movs	r2, #136	@ 0x88
 8005458:	2120      	movs	r1, #32
 800545a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2284      	movs	r2, #132	@ 0x84
 8005460:	2100      	movs	r1, #0
 8005462:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	0018      	movs	r0, r3
 8005468:	46bd      	mov	sp, r7
 800546a:	b004      	add	sp, #16
 800546c:	bd80      	pop	{r7, pc}
 800546e:	46c0      	nop			@ (mov r8, r8)
 8005470:	dfffffff 	.word	0xdfffffff

08005474 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2284      	movs	r2, #132	@ 0x84
 8005482:	5c9b      	ldrb	r3, [r3, r2]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d101      	bne.n	800548c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005488:	2302      	movs	r3, #2
 800548a:	e02e      	b.n	80054ea <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2284      	movs	r2, #132	@ 0x84
 8005490:	2101      	movs	r1, #1
 8005492:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2288      	movs	r2, #136	@ 0x88
 8005498:	2124      	movs	r1, #36	@ 0x24
 800549a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2101      	movs	r1, #1
 80054b0:	438a      	bics	r2, r1
 80054b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	08d9      	lsrs	r1, r3, #3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	0018      	movs	r0, r3
 80054cc:	f000 f854 	bl	8005578 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2288      	movs	r2, #136	@ 0x88
 80054dc:	2120      	movs	r1, #32
 80054de:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2284      	movs	r2, #132	@ 0x84
 80054e4:	2100      	movs	r1, #0
 80054e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	0018      	movs	r0, r3
 80054ec:	46bd      	mov	sp, r7
 80054ee:	b004      	add	sp, #16
 80054f0:	bd80      	pop	{r7, pc}
	...

080054f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2284      	movs	r2, #132	@ 0x84
 8005502:	5c9b      	ldrb	r3, [r3, r2]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d101      	bne.n	800550c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005508:	2302      	movs	r3, #2
 800550a:	e02f      	b.n	800556c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2284      	movs	r2, #132	@ 0x84
 8005510:	2101      	movs	r1, #1
 8005512:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2288      	movs	r2, #136	@ 0x88
 8005518:	2124      	movs	r1, #36	@ 0x24
 800551a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2101      	movs	r1, #1
 8005530:	438a      	bics	r2, r1
 8005532:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	4a0e      	ldr	r2, [pc, #56]	@ (8005574 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800553c:	4013      	ands	r3, r2
 800553e:	0019      	movs	r1, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	0018      	movs	r0, r3
 800554e:	f000 f813 	bl	8005578 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2288      	movs	r2, #136	@ 0x88
 800555e:	2120      	movs	r1, #32
 8005560:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2284      	movs	r2, #132	@ 0x84
 8005566:	2100      	movs	r1, #0
 8005568:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	0018      	movs	r0, r3
 800556e:	46bd      	mov	sp, r7
 8005570:	b004      	add	sp, #16
 8005572:	bd80      	pop	{r7, pc}
 8005574:	f1ffffff 	.word	0xf1ffffff

08005578 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005584:	2b00      	cmp	r3, #0
 8005586:	d108      	bne.n	800559a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	226a      	movs	r2, #106	@ 0x6a
 800558c:	2101      	movs	r1, #1
 800558e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2268      	movs	r2, #104	@ 0x68
 8005594:	2101      	movs	r1, #1
 8005596:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005598:	e043      	b.n	8005622 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800559a:	260f      	movs	r6, #15
 800559c:	19bb      	adds	r3, r7, r6
 800559e:	2208      	movs	r2, #8
 80055a0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80055a2:	200e      	movs	r0, #14
 80055a4:	183b      	adds	r3, r7, r0
 80055a6:	2208      	movs	r2, #8
 80055a8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	0e5b      	lsrs	r3, r3, #25
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	240d      	movs	r4, #13
 80055b6:	193b      	adds	r3, r7, r4
 80055b8:	2107      	movs	r1, #7
 80055ba:	400a      	ands	r2, r1
 80055bc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	0f5b      	lsrs	r3, r3, #29
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	250c      	movs	r5, #12
 80055ca:	197b      	adds	r3, r7, r5
 80055cc:	2107      	movs	r1, #7
 80055ce:	400a      	ands	r2, r1
 80055d0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055d2:	183b      	adds	r3, r7, r0
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	197a      	adds	r2, r7, r5
 80055d8:	7812      	ldrb	r2, [r2, #0]
 80055da:	4914      	ldr	r1, [pc, #80]	@ (800562c <UARTEx_SetNbDataToProcess+0xb4>)
 80055dc:	5c8a      	ldrb	r2, [r1, r2]
 80055de:	435a      	muls	r2, r3
 80055e0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80055e2:	197b      	adds	r3, r7, r5
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	4a12      	ldr	r2, [pc, #72]	@ (8005630 <UARTEx_SetNbDataToProcess+0xb8>)
 80055e8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055ea:	0019      	movs	r1, r3
 80055ec:	f7fa fe1e 	bl	800022c <__divsi3>
 80055f0:	0003      	movs	r3, r0
 80055f2:	b299      	uxth	r1, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	226a      	movs	r2, #106	@ 0x6a
 80055f8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055fa:	19bb      	adds	r3, r7, r6
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	193a      	adds	r2, r7, r4
 8005600:	7812      	ldrb	r2, [r2, #0]
 8005602:	490a      	ldr	r1, [pc, #40]	@ (800562c <UARTEx_SetNbDataToProcess+0xb4>)
 8005604:	5c8a      	ldrb	r2, [r1, r2]
 8005606:	435a      	muls	r2, r3
 8005608:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800560a:	193b      	adds	r3, r7, r4
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	4a08      	ldr	r2, [pc, #32]	@ (8005630 <UARTEx_SetNbDataToProcess+0xb8>)
 8005610:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005612:	0019      	movs	r1, r3
 8005614:	f7fa fe0a 	bl	800022c <__divsi3>
 8005618:	0003      	movs	r3, r0
 800561a:	b299      	uxth	r1, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2268      	movs	r2, #104	@ 0x68
 8005620:	5299      	strh	r1, [r3, r2]
}
 8005622:	46c0      	nop			@ (mov r8, r8)
 8005624:	46bd      	mov	sp, r7
 8005626:	b005      	add	sp, #20
 8005628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800562a:	46c0      	nop			@ (mov r8, r8)
 800562c:	08006658 	.word	0x08006658
 8005630:	08006660 	.word	0x08006660

08005634 <std>:
 8005634:	2300      	movs	r3, #0
 8005636:	b510      	push	{r4, lr}
 8005638:	0004      	movs	r4, r0
 800563a:	6003      	str	r3, [r0, #0]
 800563c:	6043      	str	r3, [r0, #4]
 800563e:	6083      	str	r3, [r0, #8]
 8005640:	8181      	strh	r1, [r0, #12]
 8005642:	6643      	str	r3, [r0, #100]	@ 0x64
 8005644:	81c2      	strh	r2, [r0, #14]
 8005646:	6103      	str	r3, [r0, #16]
 8005648:	6143      	str	r3, [r0, #20]
 800564a:	6183      	str	r3, [r0, #24]
 800564c:	0019      	movs	r1, r3
 800564e:	2208      	movs	r2, #8
 8005650:	305c      	adds	r0, #92	@ 0x5c
 8005652:	f000 f90f 	bl	8005874 <memset>
 8005656:	4b0b      	ldr	r3, [pc, #44]	@ (8005684 <std+0x50>)
 8005658:	6224      	str	r4, [r4, #32]
 800565a:	6263      	str	r3, [r4, #36]	@ 0x24
 800565c:	4b0a      	ldr	r3, [pc, #40]	@ (8005688 <std+0x54>)
 800565e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005660:	4b0a      	ldr	r3, [pc, #40]	@ (800568c <std+0x58>)
 8005662:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005664:	4b0a      	ldr	r3, [pc, #40]	@ (8005690 <std+0x5c>)
 8005666:	6323      	str	r3, [r4, #48]	@ 0x30
 8005668:	4b0a      	ldr	r3, [pc, #40]	@ (8005694 <std+0x60>)
 800566a:	429c      	cmp	r4, r3
 800566c:	d005      	beq.n	800567a <std+0x46>
 800566e:	4b0a      	ldr	r3, [pc, #40]	@ (8005698 <std+0x64>)
 8005670:	429c      	cmp	r4, r3
 8005672:	d002      	beq.n	800567a <std+0x46>
 8005674:	4b09      	ldr	r3, [pc, #36]	@ (800569c <std+0x68>)
 8005676:	429c      	cmp	r4, r3
 8005678:	d103      	bne.n	8005682 <std+0x4e>
 800567a:	0020      	movs	r0, r4
 800567c:	3058      	adds	r0, #88	@ 0x58
 800567e:	f000 f979 	bl	8005974 <__retarget_lock_init_recursive>
 8005682:	bd10      	pop	{r4, pc}
 8005684:	080057dd 	.word	0x080057dd
 8005688:	08005805 	.word	0x08005805
 800568c:	0800583d 	.word	0x0800583d
 8005690:	08005869 	.word	0x08005869
 8005694:	2000039c 	.word	0x2000039c
 8005698:	20000404 	.word	0x20000404
 800569c:	2000046c 	.word	0x2000046c

080056a0 <stdio_exit_handler>:
 80056a0:	b510      	push	{r4, lr}
 80056a2:	4a03      	ldr	r2, [pc, #12]	@ (80056b0 <stdio_exit_handler+0x10>)
 80056a4:	4903      	ldr	r1, [pc, #12]	@ (80056b4 <stdio_exit_handler+0x14>)
 80056a6:	4804      	ldr	r0, [pc, #16]	@ (80056b8 <stdio_exit_handler+0x18>)
 80056a8:	f000 f86c 	bl	8005784 <_fwalk_sglue>
 80056ac:	bd10      	pop	{r4, pc}
 80056ae:	46c0      	nop			@ (mov r8, r8)
 80056b0:	2000003c 	.word	0x2000003c
 80056b4:	08006205 	.word	0x08006205
 80056b8:	2000004c 	.word	0x2000004c

080056bc <cleanup_stdio>:
 80056bc:	6841      	ldr	r1, [r0, #4]
 80056be:	4b0b      	ldr	r3, [pc, #44]	@ (80056ec <cleanup_stdio+0x30>)
 80056c0:	b510      	push	{r4, lr}
 80056c2:	0004      	movs	r4, r0
 80056c4:	4299      	cmp	r1, r3
 80056c6:	d001      	beq.n	80056cc <cleanup_stdio+0x10>
 80056c8:	f000 fd9c 	bl	8006204 <_fflush_r>
 80056cc:	68a1      	ldr	r1, [r4, #8]
 80056ce:	4b08      	ldr	r3, [pc, #32]	@ (80056f0 <cleanup_stdio+0x34>)
 80056d0:	4299      	cmp	r1, r3
 80056d2:	d002      	beq.n	80056da <cleanup_stdio+0x1e>
 80056d4:	0020      	movs	r0, r4
 80056d6:	f000 fd95 	bl	8006204 <_fflush_r>
 80056da:	68e1      	ldr	r1, [r4, #12]
 80056dc:	4b05      	ldr	r3, [pc, #20]	@ (80056f4 <cleanup_stdio+0x38>)
 80056de:	4299      	cmp	r1, r3
 80056e0:	d002      	beq.n	80056e8 <cleanup_stdio+0x2c>
 80056e2:	0020      	movs	r0, r4
 80056e4:	f000 fd8e 	bl	8006204 <_fflush_r>
 80056e8:	bd10      	pop	{r4, pc}
 80056ea:	46c0      	nop			@ (mov r8, r8)
 80056ec:	2000039c 	.word	0x2000039c
 80056f0:	20000404 	.word	0x20000404
 80056f4:	2000046c 	.word	0x2000046c

080056f8 <global_stdio_init.part.0>:
 80056f8:	b510      	push	{r4, lr}
 80056fa:	4b09      	ldr	r3, [pc, #36]	@ (8005720 <global_stdio_init.part.0+0x28>)
 80056fc:	4a09      	ldr	r2, [pc, #36]	@ (8005724 <global_stdio_init.part.0+0x2c>)
 80056fe:	2104      	movs	r1, #4
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	4809      	ldr	r0, [pc, #36]	@ (8005728 <global_stdio_init.part.0+0x30>)
 8005704:	2200      	movs	r2, #0
 8005706:	f7ff ff95 	bl	8005634 <std>
 800570a:	2201      	movs	r2, #1
 800570c:	2109      	movs	r1, #9
 800570e:	4807      	ldr	r0, [pc, #28]	@ (800572c <global_stdio_init.part.0+0x34>)
 8005710:	f7ff ff90 	bl	8005634 <std>
 8005714:	2202      	movs	r2, #2
 8005716:	2112      	movs	r1, #18
 8005718:	4805      	ldr	r0, [pc, #20]	@ (8005730 <global_stdio_init.part.0+0x38>)
 800571a:	f7ff ff8b 	bl	8005634 <std>
 800571e:	bd10      	pop	{r4, pc}
 8005720:	200004d4 	.word	0x200004d4
 8005724:	080056a1 	.word	0x080056a1
 8005728:	2000039c 	.word	0x2000039c
 800572c:	20000404 	.word	0x20000404
 8005730:	2000046c 	.word	0x2000046c

08005734 <__sfp_lock_acquire>:
 8005734:	b510      	push	{r4, lr}
 8005736:	4802      	ldr	r0, [pc, #8]	@ (8005740 <__sfp_lock_acquire+0xc>)
 8005738:	f000 f91d 	bl	8005976 <__retarget_lock_acquire_recursive>
 800573c:	bd10      	pop	{r4, pc}
 800573e:	46c0      	nop			@ (mov r8, r8)
 8005740:	200004dd 	.word	0x200004dd

08005744 <__sfp_lock_release>:
 8005744:	b510      	push	{r4, lr}
 8005746:	4802      	ldr	r0, [pc, #8]	@ (8005750 <__sfp_lock_release+0xc>)
 8005748:	f000 f916 	bl	8005978 <__retarget_lock_release_recursive>
 800574c:	bd10      	pop	{r4, pc}
 800574e:	46c0      	nop			@ (mov r8, r8)
 8005750:	200004dd 	.word	0x200004dd

08005754 <__sinit>:
 8005754:	b510      	push	{r4, lr}
 8005756:	0004      	movs	r4, r0
 8005758:	f7ff ffec 	bl	8005734 <__sfp_lock_acquire>
 800575c:	6a23      	ldr	r3, [r4, #32]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <__sinit+0x14>
 8005762:	f7ff ffef 	bl	8005744 <__sfp_lock_release>
 8005766:	bd10      	pop	{r4, pc}
 8005768:	4b04      	ldr	r3, [pc, #16]	@ (800577c <__sinit+0x28>)
 800576a:	6223      	str	r3, [r4, #32]
 800576c:	4b04      	ldr	r3, [pc, #16]	@ (8005780 <__sinit+0x2c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1f6      	bne.n	8005762 <__sinit+0xe>
 8005774:	f7ff ffc0 	bl	80056f8 <global_stdio_init.part.0>
 8005778:	e7f3      	b.n	8005762 <__sinit+0xe>
 800577a:	46c0      	nop			@ (mov r8, r8)
 800577c:	080056bd 	.word	0x080056bd
 8005780:	200004d4 	.word	0x200004d4

08005784 <_fwalk_sglue>:
 8005784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005786:	0014      	movs	r4, r2
 8005788:	2600      	movs	r6, #0
 800578a:	9000      	str	r0, [sp, #0]
 800578c:	9101      	str	r1, [sp, #4]
 800578e:	68a5      	ldr	r5, [r4, #8]
 8005790:	6867      	ldr	r7, [r4, #4]
 8005792:	3f01      	subs	r7, #1
 8005794:	d504      	bpl.n	80057a0 <_fwalk_sglue+0x1c>
 8005796:	6824      	ldr	r4, [r4, #0]
 8005798:	2c00      	cmp	r4, #0
 800579a:	d1f8      	bne.n	800578e <_fwalk_sglue+0xa>
 800579c:	0030      	movs	r0, r6
 800579e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80057a0:	89ab      	ldrh	r3, [r5, #12]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d908      	bls.n	80057b8 <_fwalk_sglue+0x34>
 80057a6:	220e      	movs	r2, #14
 80057a8:	5eab      	ldrsh	r3, [r5, r2]
 80057aa:	3301      	adds	r3, #1
 80057ac:	d004      	beq.n	80057b8 <_fwalk_sglue+0x34>
 80057ae:	0029      	movs	r1, r5
 80057b0:	9800      	ldr	r0, [sp, #0]
 80057b2:	9b01      	ldr	r3, [sp, #4]
 80057b4:	4798      	blx	r3
 80057b6:	4306      	orrs	r6, r0
 80057b8:	3568      	adds	r5, #104	@ 0x68
 80057ba:	e7ea      	b.n	8005792 <_fwalk_sglue+0xe>

080057bc <iprintf>:
 80057bc:	b40f      	push	{r0, r1, r2, r3}
 80057be:	b507      	push	{r0, r1, r2, lr}
 80057c0:	4905      	ldr	r1, [pc, #20]	@ (80057d8 <iprintf+0x1c>)
 80057c2:	ab04      	add	r3, sp, #16
 80057c4:	6808      	ldr	r0, [r1, #0]
 80057c6:	cb04      	ldmia	r3!, {r2}
 80057c8:	6881      	ldr	r1, [r0, #8]
 80057ca:	9301      	str	r3, [sp, #4]
 80057cc:	f000 f9fa 	bl	8005bc4 <_vfiprintf_r>
 80057d0:	b003      	add	sp, #12
 80057d2:	bc08      	pop	{r3}
 80057d4:	b004      	add	sp, #16
 80057d6:	4718      	bx	r3
 80057d8:	20000048 	.word	0x20000048

080057dc <__sread>:
 80057dc:	b570      	push	{r4, r5, r6, lr}
 80057de:	000c      	movs	r4, r1
 80057e0:	250e      	movs	r5, #14
 80057e2:	5f49      	ldrsh	r1, [r1, r5]
 80057e4:	f000 f874 	bl	80058d0 <_read_r>
 80057e8:	2800      	cmp	r0, #0
 80057ea:	db03      	blt.n	80057f4 <__sread+0x18>
 80057ec:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80057ee:	181b      	adds	r3, r3, r0
 80057f0:	6563      	str	r3, [r4, #84]	@ 0x54
 80057f2:	bd70      	pop	{r4, r5, r6, pc}
 80057f4:	89a3      	ldrh	r3, [r4, #12]
 80057f6:	4a02      	ldr	r2, [pc, #8]	@ (8005800 <__sread+0x24>)
 80057f8:	4013      	ands	r3, r2
 80057fa:	81a3      	strh	r3, [r4, #12]
 80057fc:	e7f9      	b.n	80057f2 <__sread+0x16>
 80057fe:	46c0      	nop			@ (mov r8, r8)
 8005800:	ffffefff 	.word	0xffffefff

08005804 <__swrite>:
 8005804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005806:	001f      	movs	r7, r3
 8005808:	898b      	ldrh	r3, [r1, #12]
 800580a:	0005      	movs	r5, r0
 800580c:	000c      	movs	r4, r1
 800580e:	0016      	movs	r6, r2
 8005810:	05db      	lsls	r3, r3, #23
 8005812:	d505      	bpl.n	8005820 <__swrite+0x1c>
 8005814:	230e      	movs	r3, #14
 8005816:	5ec9      	ldrsh	r1, [r1, r3]
 8005818:	2200      	movs	r2, #0
 800581a:	2302      	movs	r3, #2
 800581c:	f000 f844 	bl	80058a8 <_lseek_r>
 8005820:	89a3      	ldrh	r3, [r4, #12]
 8005822:	4a05      	ldr	r2, [pc, #20]	@ (8005838 <__swrite+0x34>)
 8005824:	0028      	movs	r0, r5
 8005826:	4013      	ands	r3, r2
 8005828:	81a3      	strh	r3, [r4, #12]
 800582a:	0032      	movs	r2, r6
 800582c:	230e      	movs	r3, #14
 800582e:	5ee1      	ldrsh	r1, [r4, r3]
 8005830:	003b      	movs	r3, r7
 8005832:	f000 f861 	bl	80058f8 <_write_r>
 8005836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005838:	ffffefff 	.word	0xffffefff

0800583c <__sseek>:
 800583c:	b570      	push	{r4, r5, r6, lr}
 800583e:	000c      	movs	r4, r1
 8005840:	250e      	movs	r5, #14
 8005842:	5f49      	ldrsh	r1, [r1, r5]
 8005844:	f000 f830 	bl	80058a8 <_lseek_r>
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	1c42      	adds	r2, r0, #1
 800584c:	d103      	bne.n	8005856 <__sseek+0x1a>
 800584e:	4a05      	ldr	r2, [pc, #20]	@ (8005864 <__sseek+0x28>)
 8005850:	4013      	ands	r3, r2
 8005852:	81a3      	strh	r3, [r4, #12]
 8005854:	bd70      	pop	{r4, r5, r6, pc}
 8005856:	2280      	movs	r2, #128	@ 0x80
 8005858:	0152      	lsls	r2, r2, #5
 800585a:	4313      	orrs	r3, r2
 800585c:	81a3      	strh	r3, [r4, #12]
 800585e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005860:	e7f8      	b.n	8005854 <__sseek+0x18>
 8005862:	46c0      	nop			@ (mov r8, r8)
 8005864:	ffffefff 	.word	0xffffefff

08005868 <__sclose>:
 8005868:	b510      	push	{r4, lr}
 800586a:	230e      	movs	r3, #14
 800586c:	5ec9      	ldrsh	r1, [r1, r3]
 800586e:	f000 f809 	bl	8005884 <_close_r>
 8005872:	bd10      	pop	{r4, pc}

08005874 <memset>:
 8005874:	0003      	movs	r3, r0
 8005876:	1882      	adds	r2, r0, r2
 8005878:	4293      	cmp	r3, r2
 800587a:	d100      	bne.n	800587e <memset+0xa>
 800587c:	4770      	bx	lr
 800587e:	7019      	strb	r1, [r3, #0]
 8005880:	3301      	adds	r3, #1
 8005882:	e7f9      	b.n	8005878 <memset+0x4>

08005884 <_close_r>:
 8005884:	2300      	movs	r3, #0
 8005886:	b570      	push	{r4, r5, r6, lr}
 8005888:	4d06      	ldr	r5, [pc, #24]	@ (80058a4 <_close_r+0x20>)
 800588a:	0004      	movs	r4, r0
 800588c:	0008      	movs	r0, r1
 800588e:	602b      	str	r3, [r5, #0]
 8005890:	f7fb fa8b 	bl	8000daa <_close>
 8005894:	1c43      	adds	r3, r0, #1
 8005896:	d103      	bne.n	80058a0 <_close_r+0x1c>
 8005898:	682b      	ldr	r3, [r5, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d000      	beq.n	80058a0 <_close_r+0x1c>
 800589e:	6023      	str	r3, [r4, #0]
 80058a0:	bd70      	pop	{r4, r5, r6, pc}
 80058a2:	46c0      	nop			@ (mov r8, r8)
 80058a4:	200004d8 	.word	0x200004d8

080058a8 <_lseek_r>:
 80058a8:	b570      	push	{r4, r5, r6, lr}
 80058aa:	0004      	movs	r4, r0
 80058ac:	0008      	movs	r0, r1
 80058ae:	0011      	movs	r1, r2
 80058b0:	001a      	movs	r2, r3
 80058b2:	2300      	movs	r3, #0
 80058b4:	4d05      	ldr	r5, [pc, #20]	@ (80058cc <_lseek_r+0x24>)
 80058b6:	602b      	str	r3, [r5, #0]
 80058b8:	f7fb fa98 	bl	8000dec <_lseek>
 80058bc:	1c43      	adds	r3, r0, #1
 80058be:	d103      	bne.n	80058c8 <_lseek_r+0x20>
 80058c0:	682b      	ldr	r3, [r5, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d000      	beq.n	80058c8 <_lseek_r+0x20>
 80058c6:	6023      	str	r3, [r4, #0]
 80058c8:	bd70      	pop	{r4, r5, r6, pc}
 80058ca:	46c0      	nop			@ (mov r8, r8)
 80058cc:	200004d8 	.word	0x200004d8

080058d0 <_read_r>:
 80058d0:	b570      	push	{r4, r5, r6, lr}
 80058d2:	0004      	movs	r4, r0
 80058d4:	0008      	movs	r0, r1
 80058d6:	0011      	movs	r1, r2
 80058d8:	001a      	movs	r2, r3
 80058da:	2300      	movs	r3, #0
 80058dc:	4d05      	ldr	r5, [pc, #20]	@ (80058f4 <_read_r+0x24>)
 80058de:	602b      	str	r3, [r5, #0]
 80058e0:	f7fb fa2a 	bl	8000d38 <_read>
 80058e4:	1c43      	adds	r3, r0, #1
 80058e6:	d103      	bne.n	80058f0 <_read_r+0x20>
 80058e8:	682b      	ldr	r3, [r5, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d000      	beq.n	80058f0 <_read_r+0x20>
 80058ee:	6023      	str	r3, [r4, #0]
 80058f0:	bd70      	pop	{r4, r5, r6, pc}
 80058f2:	46c0      	nop			@ (mov r8, r8)
 80058f4:	200004d8 	.word	0x200004d8

080058f8 <_write_r>:
 80058f8:	b570      	push	{r4, r5, r6, lr}
 80058fa:	0004      	movs	r4, r0
 80058fc:	0008      	movs	r0, r1
 80058fe:	0011      	movs	r1, r2
 8005900:	001a      	movs	r2, r3
 8005902:	2300      	movs	r3, #0
 8005904:	4d05      	ldr	r5, [pc, #20]	@ (800591c <_write_r+0x24>)
 8005906:	602b      	str	r3, [r5, #0]
 8005908:	f7fb fa33 	bl	8000d72 <_write>
 800590c:	1c43      	adds	r3, r0, #1
 800590e:	d103      	bne.n	8005918 <_write_r+0x20>
 8005910:	682b      	ldr	r3, [r5, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d000      	beq.n	8005918 <_write_r+0x20>
 8005916:	6023      	str	r3, [r4, #0]
 8005918:	bd70      	pop	{r4, r5, r6, pc}
 800591a:	46c0      	nop			@ (mov r8, r8)
 800591c:	200004d8 	.word	0x200004d8

08005920 <__errno>:
 8005920:	4b01      	ldr	r3, [pc, #4]	@ (8005928 <__errno+0x8>)
 8005922:	6818      	ldr	r0, [r3, #0]
 8005924:	4770      	bx	lr
 8005926:	46c0      	nop			@ (mov r8, r8)
 8005928:	20000048 	.word	0x20000048

0800592c <__libc_init_array>:
 800592c:	b570      	push	{r4, r5, r6, lr}
 800592e:	2600      	movs	r6, #0
 8005930:	4c0c      	ldr	r4, [pc, #48]	@ (8005964 <__libc_init_array+0x38>)
 8005932:	4d0d      	ldr	r5, [pc, #52]	@ (8005968 <__libc_init_array+0x3c>)
 8005934:	1b64      	subs	r4, r4, r5
 8005936:	10a4      	asrs	r4, r4, #2
 8005938:	42a6      	cmp	r6, r4
 800593a:	d109      	bne.n	8005950 <__libc_init_array+0x24>
 800593c:	2600      	movs	r6, #0
 800593e:	f000 fddb 	bl	80064f8 <_init>
 8005942:	4c0a      	ldr	r4, [pc, #40]	@ (800596c <__libc_init_array+0x40>)
 8005944:	4d0a      	ldr	r5, [pc, #40]	@ (8005970 <__libc_init_array+0x44>)
 8005946:	1b64      	subs	r4, r4, r5
 8005948:	10a4      	asrs	r4, r4, #2
 800594a:	42a6      	cmp	r6, r4
 800594c:	d105      	bne.n	800595a <__libc_init_array+0x2e>
 800594e:	bd70      	pop	{r4, r5, r6, pc}
 8005950:	00b3      	lsls	r3, r6, #2
 8005952:	58eb      	ldr	r3, [r5, r3]
 8005954:	4798      	blx	r3
 8005956:	3601      	adds	r6, #1
 8005958:	e7ee      	b.n	8005938 <__libc_init_array+0xc>
 800595a:	00b3      	lsls	r3, r6, #2
 800595c:	58eb      	ldr	r3, [r5, r3]
 800595e:	4798      	blx	r3
 8005960:	3601      	adds	r6, #1
 8005962:	e7f2      	b.n	800594a <__libc_init_array+0x1e>
 8005964:	080066a4 	.word	0x080066a4
 8005968:	080066a4 	.word	0x080066a4
 800596c:	080066a8 	.word	0x080066a8
 8005970:	080066a4 	.word	0x080066a4

08005974 <__retarget_lock_init_recursive>:
 8005974:	4770      	bx	lr

08005976 <__retarget_lock_acquire_recursive>:
 8005976:	4770      	bx	lr

08005978 <__retarget_lock_release_recursive>:
 8005978:	4770      	bx	lr
	...

0800597c <_free_r>:
 800597c:	b570      	push	{r4, r5, r6, lr}
 800597e:	0005      	movs	r5, r0
 8005980:	1e0c      	subs	r4, r1, #0
 8005982:	d010      	beq.n	80059a6 <_free_r+0x2a>
 8005984:	3c04      	subs	r4, #4
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	da00      	bge.n	800598e <_free_r+0x12>
 800598c:	18e4      	adds	r4, r4, r3
 800598e:	0028      	movs	r0, r5
 8005990:	f000 f8e0 	bl	8005b54 <__malloc_lock>
 8005994:	4a1d      	ldr	r2, [pc, #116]	@ (8005a0c <_free_r+0x90>)
 8005996:	6813      	ldr	r3, [r2, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d105      	bne.n	80059a8 <_free_r+0x2c>
 800599c:	6063      	str	r3, [r4, #4]
 800599e:	6014      	str	r4, [r2, #0]
 80059a0:	0028      	movs	r0, r5
 80059a2:	f000 f8df 	bl	8005b64 <__malloc_unlock>
 80059a6:	bd70      	pop	{r4, r5, r6, pc}
 80059a8:	42a3      	cmp	r3, r4
 80059aa:	d908      	bls.n	80059be <_free_r+0x42>
 80059ac:	6820      	ldr	r0, [r4, #0]
 80059ae:	1821      	adds	r1, r4, r0
 80059b0:	428b      	cmp	r3, r1
 80059b2:	d1f3      	bne.n	800599c <_free_r+0x20>
 80059b4:	6819      	ldr	r1, [r3, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	1809      	adds	r1, r1, r0
 80059ba:	6021      	str	r1, [r4, #0]
 80059bc:	e7ee      	b.n	800599c <_free_r+0x20>
 80059be:	001a      	movs	r2, r3
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <_free_r+0x4e>
 80059c6:	42a3      	cmp	r3, r4
 80059c8:	d9f9      	bls.n	80059be <_free_r+0x42>
 80059ca:	6811      	ldr	r1, [r2, #0]
 80059cc:	1850      	adds	r0, r2, r1
 80059ce:	42a0      	cmp	r0, r4
 80059d0:	d10b      	bne.n	80059ea <_free_r+0x6e>
 80059d2:	6820      	ldr	r0, [r4, #0]
 80059d4:	1809      	adds	r1, r1, r0
 80059d6:	1850      	adds	r0, r2, r1
 80059d8:	6011      	str	r1, [r2, #0]
 80059da:	4283      	cmp	r3, r0
 80059dc:	d1e0      	bne.n	80059a0 <_free_r+0x24>
 80059de:	6818      	ldr	r0, [r3, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	1841      	adds	r1, r0, r1
 80059e4:	6011      	str	r1, [r2, #0]
 80059e6:	6053      	str	r3, [r2, #4]
 80059e8:	e7da      	b.n	80059a0 <_free_r+0x24>
 80059ea:	42a0      	cmp	r0, r4
 80059ec:	d902      	bls.n	80059f4 <_free_r+0x78>
 80059ee:	230c      	movs	r3, #12
 80059f0:	602b      	str	r3, [r5, #0]
 80059f2:	e7d5      	b.n	80059a0 <_free_r+0x24>
 80059f4:	6820      	ldr	r0, [r4, #0]
 80059f6:	1821      	adds	r1, r4, r0
 80059f8:	428b      	cmp	r3, r1
 80059fa:	d103      	bne.n	8005a04 <_free_r+0x88>
 80059fc:	6819      	ldr	r1, [r3, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	1809      	adds	r1, r1, r0
 8005a02:	6021      	str	r1, [r4, #0]
 8005a04:	6063      	str	r3, [r4, #4]
 8005a06:	6054      	str	r4, [r2, #4]
 8005a08:	e7ca      	b.n	80059a0 <_free_r+0x24>
 8005a0a:	46c0      	nop			@ (mov r8, r8)
 8005a0c:	200004e4 	.word	0x200004e4

08005a10 <sbrk_aligned>:
 8005a10:	b570      	push	{r4, r5, r6, lr}
 8005a12:	4e0f      	ldr	r6, [pc, #60]	@ (8005a50 <sbrk_aligned+0x40>)
 8005a14:	000d      	movs	r5, r1
 8005a16:	6831      	ldr	r1, [r6, #0]
 8005a18:	0004      	movs	r4, r0
 8005a1a:	2900      	cmp	r1, #0
 8005a1c:	d102      	bne.n	8005a24 <sbrk_aligned+0x14>
 8005a1e:	f000 fcbd 	bl	800639c <_sbrk_r>
 8005a22:	6030      	str	r0, [r6, #0]
 8005a24:	0029      	movs	r1, r5
 8005a26:	0020      	movs	r0, r4
 8005a28:	f000 fcb8 	bl	800639c <_sbrk_r>
 8005a2c:	1c43      	adds	r3, r0, #1
 8005a2e:	d103      	bne.n	8005a38 <sbrk_aligned+0x28>
 8005a30:	2501      	movs	r5, #1
 8005a32:	426d      	negs	r5, r5
 8005a34:	0028      	movs	r0, r5
 8005a36:	bd70      	pop	{r4, r5, r6, pc}
 8005a38:	2303      	movs	r3, #3
 8005a3a:	1cc5      	adds	r5, r0, #3
 8005a3c:	439d      	bics	r5, r3
 8005a3e:	42a8      	cmp	r0, r5
 8005a40:	d0f8      	beq.n	8005a34 <sbrk_aligned+0x24>
 8005a42:	1a29      	subs	r1, r5, r0
 8005a44:	0020      	movs	r0, r4
 8005a46:	f000 fca9 	bl	800639c <_sbrk_r>
 8005a4a:	3001      	adds	r0, #1
 8005a4c:	d1f2      	bne.n	8005a34 <sbrk_aligned+0x24>
 8005a4e:	e7ef      	b.n	8005a30 <sbrk_aligned+0x20>
 8005a50:	200004e0 	.word	0x200004e0

08005a54 <_malloc_r>:
 8005a54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a56:	2203      	movs	r2, #3
 8005a58:	1ccb      	adds	r3, r1, #3
 8005a5a:	4393      	bics	r3, r2
 8005a5c:	3308      	adds	r3, #8
 8005a5e:	0005      	movs	r5, r0
 8005a60:	001f      	movs	r7, r3
 8005a62:	2b0c      	cmp	r3, #12
 8005a64:	d234      	bcs.n	8005ad0 <_malloc_r+0x7c>
 8005a66:	270c      	movs	r7, #12
 8005a68:	42b9      	cmp	r1, r7
 8005a6a:	d833      	bhi.n	8005ad4 <_malloc_r+0x80>
 8005a6c:	0028      	movs	r0, r5
 8005a6e:	f000 f871 	bl	8005b54 <__malloc_lock>
 8005a72:	4e37      	ldr	r6, [pc, #220]	@ (8005b50 <_malloc_r+0xfc>)
 8005a74:	6833      	ldr	r3, [r6, #0]
 8005a76:	001c      	movs	r4, r3
 8005a78:	2c00      	cmp	r4, #0
 8005a7a:	d12f      	bne.n	8005adc <_malloc_r+0x88>
 8005a7c:	0039      	movs	r1, r7
 8005a7e:	0028      	movs	r0, r5
 8005a80:	f7ff ffc6 	bl	8005a10 <sbrk_aligned>
 8005a84:	0004      	movs	r4, r0
 8005a86:	1c43      	adds	r3, r0, #1
 8005a88:	d15f      	bne.n	8005b4a <_malloc_r+0xf6>
 8005a8a:	6834      	ldr	r4, [r6, #0]
 8005a8c:	9400      	str	r4, [sp, #0]
 8005a8e:	9b00      	ldr	r3, [sp, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d14a      	bne.n	8005b2a <_malloc_r+0xd6>
 8005a94:	2c00      	cmp	r4, #0
 8005a96:	d052      	beq.n	8005b3e <_malloc_r+0xea>
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	0028      	movs	r0, r5
 8005a9c:	18e3      	adds	r3, r4, r3
 8005a9e:	9900      	ldr	r1, [sp, #0]
 8005aa0:	9301      	str	r3, [sp, #4]
 8005aa2:	f000 fc7b 	bl	800639c <_sbrk_r>
 8005aa6:	9b01      	ldr	r3, [sp, #4]
 8005aa8:	4283      	cmp	r3, r0
 8005aaa:	d148      	bne.n	8005b3e <_malloc_r+0xea>
 8005aac:	6823      	ldr	r3, [r4, #0]
 8005aae:	0028      	movs	r0, r5
 8005ab0:	1aff      	subs	r7, r7, r3
 8005ab2:	0039      	movs	r1, r7
 8005ab4:	f7ff ffac 	bl	8005a10 <sbrk_aligned>
 8005ab8:	3001      	adds	r0, #1
 8005aba:	d040      	beq.n	8005b3e <_malloc_r+0xea>
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	19db      	adds	r3, r3, r7
 8005ac0:	6023      	str	r3, [r4, #0]
 8005ac2:	6833      	ldr	r3, [r6, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	2a00      	cmp	r2, #0
 8005ac8:	d133      	bne.n	8005b32 <_malloc_r+0xde>
 8005aca:	9b00      	ldr	r3, [sp, #0]
 8005acc:	6033      	str	r3, [r6, #0]
 8005ace:	e019      	b.n	8005b04 <_malloc_r+0xb0>
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	dac9      	bge.n	8005a68 <_malloc_r+0x14>
 8005ad4:	230c      	movs	r3, #12
 8005ad6:	602b      	str	r3, [r5, #0]
 8005ad8:	2000      	movs	r0, #0
 8005ada:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005adc:	6821      	ldr	r1, [r4, #0]
 8005ade:	1bc9      	subs	r1, r1, r7
 8005ae0:	d420      	bmi.n	8005b24 <_malloc_r+0xd0>
 8005ae2:	290b      	cmp	r1, #11
 8005ae4:	d90a      	bls.n	8005afc <_malloc_r+0xa8>
 8005ae6:	19e2      	adds	r2, r4, r7
 8005ae8:	6027      	str	r7, [r4, #0]
 8005aea:	42a3      	cmp	r3, r4
 8005aec:	d104      	bne.n	8005af8 <_malloc_r+0xa4>
 8005aee:	6032      	str	r2, [r6, #0]
 8005af0:	6863      	ldr	r3, [r4, #4]
 8005af2:	6011      	str	r1, [r2, #0]
 8005af4:	6053      	str	r3, [r2, #4]
 8005af6:	e005      	b.n	8005b04 <_malloc_r+0xb0>
 8005af8:	605a      	str	r2, [r3, #4]
 8005afa:	e7f9      	b.n	8005af0 <_malloc_r+0x9c>
 8005afc:	6862      	ldr	r2, [r4, #4]
 8005afe:	42a3      	cmp	r3, r4
 8005b00:	d10e      	bne.n	8005b20 <_malloc_r+0xcc>
 8005b02:	6032      	str	r2, [r6, #0]
 8005b04:	0028      	movs	r0, r5
 8005b06:	f000 f82d 	bl	8005b64 <__malloc_unlock>
 8005b0a:	0020      	movs	r0, r4
 8005b0c:	2207      	movs	r2, #7
 8005b0e:	300b      	adds	r0, #11
 8005b10:	1d23      	adds	r3, r4, #4
 8005b12:	4390      	bics	r0, r2
 8005b14:	1ac2      	subs	r2, r0, r3
 8005b16:	4298      	cmp	r0, r3
 8005b18:	d0df      	beq.n	8005ada <_malloc_r+0x86>
 8005b1a:	1a1b      	subs	r3, r3, r0
 8005b1c:	50a3      	str	r3, [r4, r2]
 8005b1e:	e7dc      	b.n	8005ada <_malloc_r+0x86>
 8005b20:	605a      	str	r2, [r3, #4]
 8005b22:	e7ef      	b.n	8005b04 <_malloc_r+0xb0>
 8005b24:	0023      	movs	r3, r4
 8005b26:	6864      	ldr	r4, [r4, #4]
 8005b28:	e7a6      	b.n	8005a78 <_malloc_r+0x24>
 8005b2a:	9c00      	ldr	r4, [sp, #0]
 8005b2c:	6863      	ldr	r3, [r4, #4]
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	e7ad      	b.n	8005a8e <_malloc_r+0x3a>
 8005b32:	001a      	movs	r2, r3
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	42a3      	cmp	r3, r4
 8005b38:	d1fb      	bne.n	8005b32 <_malloc_r+0xde>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	e7da      	b.n	8005af4 <_malloc_r+0xa0>
 8005b3e:	230c      	movs	r3, #12
 8005b40:	0028      	movs	r0, r5
 8005b42:	602b      	str	r3, [r5, #0]
 8005b44:	f000 f80e 	bl	8005b64 <__malloc_unlock>
 8005b48:	e7c6      	b.n	8005ad8 <_malloc_r+0x84>
 8005b4a:	6007      	str	r7, [r0, #0]
 8005b4c:	e7da      	b.n	8005b04 <_malloc_r+0xb0>
 8005b4e:	46c0      	nop			@ (mov r8, r8)
 8005b50:	200004e4 	.word	0x200004e4

08005b54 <__malloc_lock>:
 8005b54:	b510      	push	{r4, lr}
 8005b56:	4802      	ldr	r0, [pc, #8]	@ (8005b60 <__malloc_lock+0xc>)
 8005b58:	f7ff ff0d 	bl	8005976 <__retarget_lock_acquire_recursive>
 8005b5c:	bd10      	pop	{r4, pc}
 8005b5e:	46c0      	nop			@ (mov r8, r8)
 8005b60:	200004dc 	.word	0x200004dc

08005b64 <__malloc_unlock>:
 8005b64:	b510      	push	{r4, lr}
 8005b66:	4802      	ldr	r0, [pc, #8]	@ (8005b70 <__malloc_unlock+0xc>)
 8005b68:	f7ff ff06 	bl	8005978 <__retarget_lock_release_recursive>
 8005b6c:	bd10      	pop	{r4, pc}
 8005b6e:	46c0      	nop			@ (mov r8, r8)
 8005b70:	200004dc 	.word	0x200004dc

08005b74 <__sfputc_r>:
 8005b74:	6893      	ldr	r3, [r2, #8]
 8005b76:	b510      	push	{r4, lr}
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	6093      	str	r3, [r2, #8]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	da04      	bge.n	8005b8a <__sfputc_r+0x16>
 8005b80:	6994      	ldr	r4, [r2, #24]
 8005b82:	42a3      	cmp	r3, r4
 8005b84:	db07      	blt.n	8005b96 <__sfputc_r+0x22>
 8005b86:	290a      	cmp	r1, #10
 8005b88:	d005      	beq.n	8005b96 <__sfputc_r+0x22>
 8005b8a:	6813      	ldr	r3, [r2, #0]
 8005b8c:	1c58      	adds	r0, r3, #1
 8005b8e:	6010      	str	r0, [r2, #0]
 8005b90:	7019      	strb	r1, [r3, #0]
 8005b92:	0008      	movs	r0, r1
 8005b94:	bd10      	pop	{r4, pc}
 8005b96:	f000 fb60 	bl	800625a <__swbuf_r>
 8005b9a:	0001      	movs	r1, r0
 8005b9c:	e7f9      	b.n	8005b92 <__sfputc_r+0x1e>

08005b9e <__sfputs_r>:
 8005b9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba0:	0006      	movs	r6, r0
 8005ba2:	000f      	movs	r7, r1
 8005ba4:	0014      	movs	r4, r2
 8005ba6:	18d5      	adds	r5, r2, r3
 8005ba8:	42ac      	cmp	r4, r5
 8005baa:	d101      	bne.n	8005bb0 <__sfputs_r+0x12>
 8005bac:	2000      	movs	r0, #0
 8005bae:	e007      	b.n	8005bc0 <__sfputs_r+0x22>
 8005bb0:	7821      	ldrb	r1, [r4, #0]
 8005bb2:	003a      	movs	r2, r7
 8005bb4:	0030      	movs	r0, r6
 8005bb6:	f7ff ffdd 	bl	8005b74 <__sfputc_r>
 8005bba:	3401      	adds	r4, #1
 8005bbc:	1c43      	adds	r3, r0, #1
 8005bbe:	d1f3      	bne.n	8005ba8 <__sfputs_r+0xa>
 8005bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005bc4 <_vfiprintf_r>:
 8005bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bc6:	b0a1      	sub	sp, #132	@ 0x84
 8005bc8:	000f      	movs	r7, r1
 8005bca:	0015      	movs	r5, r2
 8005bcc:	001e      	movs	r6, r3
 8005bce:	9003      	str	r0, [sp, #12]
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	d004      	beq.n	8005bde <_vfiprintf_r+0x1a>
 8005bd4:	6a03      	ldr	r3, [r0, #32]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <_vfiprintf_r+0x1a>
 8005bda:	f7ff fdbb 	bl	8005754 <__sinit>
 8005bde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005be0:	07db      	lsls	r3, r3, #31
 8005be2:	d405      	bmi.n	8005bf0 <_vfiprintf_r+0x2c>
 8005be4:	89bb      	ldrh	r3, [r7, #12]
 8005be6:	059b      	lsls	r3, r3, #22
 8005be8:	d402      	bmi.n	8005bf0 <_vfiprintf_r+0x2c>
 8005bea:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005bec:	f7ff fec3 	bl	8005976 <__retarget_lock_acquire_recursive>
 8005bf0:	89bb      	ldrh	r3, [r7, #12]
 8005bf2:	071b      	lsls	r3, r3, #28
 8005bf4:	d502      	bpl.n	8005bfc <_vfiprintf_r+0x38>
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d113      	bne.n	8005c24 <_vfiprintf_r+0x60>
 8005bfc:	0039      	movs	r1, r7
 8005bfe:	9803      	ldr	r0, [sp, #12]
 8005c00:	f000 fb6e 	bl	80062e0 <__swsetup_r>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	d00d      	beq.n	8005c24 <_vfiprintf_r+0x60>
 8005c08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c0a:	07db      	lsls	r3, r3, #31
 8005c0c:	d503      	bpl.n	8005c16 <_vfiprintf_r+0x52>
 8005c0e:	2001      	movs	r0, #1
 8005c10:	4240      	negs	r0, r0
 8005c12:	b021      	add	sp, #132	@ 0x84
 8005c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c16:	89bb      	ldrh	r3, [r7, #12]
 8005c18:	059b      	lsls	r3, r3, #22
 8005c1a:	d4f8      	bmi.n	8005c0e <_vfiprintf_r+0x4a>
 8005c1c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005c1e:	f7ff feab 	bl	8005978 <__retarget_lock_release_recursive>
 8005c22:	e7f4      	b.n	8005c0e <_vfiprintf_r+0x4a>
 8005c24:	2300      	movs	r3, #0
 8005c26:	ac08      	add	r4, sp, #32
 8005c28:	6163      	str	r3, [r4, #20]
 8005c2a:	3320      	adds	r3, #32
 8005c2c:	7663      	strb	r3, [r4, #25]
 8005c2e:	3310      	adds	r3, #16
 8005c30:	76a3      	strb	r3, [r4, #26]
 8005c32:	9607      	str	r6, [sp, #28]
 8005c34:	002e      	movs	r6, r5
 8005c36:	7833      	ldrb	r3, [r6, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <_vfiprintf_r+0x7c>
 8005c3c:	2b25      	cmp	r3, #37	@ 0x25
 8005c3e:	d148      	bne.n	8005cd2 <_vfiprintf_r+0x10e>
 8005c40:	1b73      	subs	r3, r6, r5
 8005c42:	9305      	str	r3, [sp, #20]
 8005c44:	42ae      	cmp	r6, r5
 8005c46:	d00b      	beq.n	8005c60 <_vfiprintf_r+0x9c>
 8005c48:	002a      	movs	r2, r5
 8005c4a:	0039      	movs	r1, r7
 8005c4c:	9803      	ldr	r0, [sp, #12]
 8005c4e:	f7ff ffa6 	bl	8005b9e <__sfputs_r>
 8005c52:	3001      	adds	r0, #1
 8005c54:	d100      	bne.n	8005c58 <_vfiprintf_r+0x94>
 8005c56:	e0ae      	b.n	8005db6 <_vfiprintf_r+0x1f2>
 8005c58:	6963      	ldr	r3, [r4, #20]
 8005c5a:	9a05      	ldr	r2, [sp, #20]
 8005c5c:	189b      	adds	r3, r3, r2
 8005c5e:	6163      	str	r3, [r4, #20]
 8005c60:	7833      	ldrb	r3, [r6, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d100      	bne.n	8005c68 <_vfiprintf_r+0xa4>
 8005c66:	e0a6      	b.n	8005db6 <_vfiprintf_r+0x1f2>
 8005c68:	2201      	movs	r2, #1
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	4252      	negs	r2, r2
 8005c6e:	6062      	str	r2, [r4, #4]
 8005c70:	a904      	add	r1, sp, #16
 8005c72:	3254      	adds	r2, #84	@ 0x54
 8005c74:	1852      	adds	r2, r2, r1
 8005c76:	1c75      	adds	r5, r6, #1
 8005c78:	6023      	str	r3, [r4, #0]
 8005c7a:	60e3      	str	r3, [r4, #12]
 8005c7c:	60a3      	str	r3, [r4, #8]
 8005c7e:	7013      	strb	r3, [r2, #0]
 8005c80:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005c82:	4b59      	ldr	r3, [pc, #356]	@ (8005de8 <_vfiprintf_r+0x224>)
 8005c84:	2205      	movs	r2, #5
 8005c86:	0018      	movs	r0, r3
 8005c88:	7829      	ldrb	r1, [r5, #0]
 8005c8a:	9305      	str	r3, [sp, #20]
 8005c8c:	f000 fb98 	bl	80063c0 <memchr>
 8005c90:	1c6e      	adds	r6, r5, #1
 8005c92:	2800      	cmp	r0, #0
 8005c94:	d11f      	bne.n	8005cd6 <_vfiprintf_r+0x112>
 8005c96:	6822      	ldr	r2, [r4, #0]
 8005c98:	06d3      	lsls	r3, r2, #27
 8005c9a:	d504      	bpl.n	8005ca6 <_vfiprintf_r+0xe2>
 8005c9c:	2353      	movs	r3, #83	@ 0x53
 8005c9e:	a904      	add	r1, sp, #16
 8005ca0:	185b      	adds	r3, r3, r1
 8005ca2:	2120      	movs	r1, #32
 8005ca4:	7019      	strb	r1, [r3, #0]
 8005ca6:	0713      	lsls	r3, r2, #28
 8005ca8:	d504      	bpl.n	8005cb4 <_vfiprintf_r+0xf0>
 8005caa:	2353      	movs	r3, #83	@ 0x53
 8005cac:	a904      	add	r1, sp, #16
 8005cae:	185b      	adds	r3, r3, r1
 8005cb0:	212b      	movs	r1, #43	@ 0x2b
 8005cb2:	7019      	strb	r1, [r3, #0]
 8005cb4:	782b      	ldrb	r3, [r5, #0]
 8005cb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cb8:	d016      	beq.n	8005ce8 <_vfiprintf_r+0x124>
 8005cba:	002e      	movs	r6, r5
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	200a      	movs	r0, #10
 8005cc0:	68e3      	ldr	r3, [r4, #12]
 8005cc2:	7832      	ldrb	r2, [r6, #0]
 8005cc4:	1c75      	adds	r5, r6, #1
 8005cc6:	3a30      	subs	r2, #48	@ 0x30
 8005cc8:	2a09      	cmp	r2, #9
 8005cca:	d950      	bls.n	8005d6e <_vfiprintf_r+0x1aa>
 8005ccc:	2900      	cmp	r1, #0
 8005cce:	d111      	bne.n	8005cf4 <_vfiprintf_r+0x130>
 8005cd0:	e017      	b.n	8005d02 <_vfiprintf_r+0x13e>
 8005cd2:	3601      	adds	r6, #1
 8005cd4:	e7af      	b.n	8005c36 <_vfiprintf_r+0x72>
 8005cd6:	9b05      	ldr	r3, [sp, #20]
 8005cd8:	6822      	ldr	r2, [r4, #0]
 8005cda:	1ac0      	subs	r0, r0, r3
 8005cdc:	2301      	movs	r3, #1
 8005cde:	4083      	lsls	r3, r0
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	0035      	movs	r5, r6
 8005ce4:	6023      	str	r3, [r4, #0]
 8005ce6:	e7cc      	b.n	8005c82 <_vfiprintf_r+0xbe>
 8005ce8:	9b07      	ldr	r3, [sp, #28]
 8005cea:	1d19      	adds	r1, r3, #4
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	9107      	str	r1, [sp, #28]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	db01      	blt.n	8005cf8 <_vfiprintf_r+0x134>
 8005cf4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005cf6:	e004      	b.n	8005d02 <_vfiprintf_r+0x13e>
 8005cf8:	425b      	negs	r3, r3
 8005cfa:	60e3      	str	r3, [r4, #12]
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	6023      	str	r3, [r4, #0]
 8005d02:	7833      	ldrb	r3, [r6, #0]
 8005d04:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d06:	d10c      	bne.n	8005d22 <_vfiprintf_r+0x15e>
 8005d08:	7873      	ldrb	r3, [r6, #1]
 8005d0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d0c:	d134      	bne.n	8005d78 <_vfiprintf_r+0x1b4>
 8005d0e:	9b07      	ldr	r3, [sp, #28]
 8005d10:	3602      	adds	r6, #2
 8005d12:	1d1a      	adds	r2, r3, #4
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	9207      	str	r2, [sp, #28]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	da01      	bge.n	8005d20 <_vfiprintf_r+0x15c>
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	425b      	negs	r3, r3
 8005d20:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d22:	4d32      	ldr	r5, [pc, #200]	@ (8005dec <_vfiprintf_r+0x228>)
 8005d24:	2203      	movs	r2, #3
 8005d26:	0028      	movs	r0, r5
 8005d28:	7831      	ldrb	r1, [r6, #0]
 8005d2a:	f000 fb49 	bl	80063c0 <memchr>
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	d006      	beq.n	8005d40 <_vfiprintf_r+0x17c>
 8005d32:	2340      	movs	r3, #64	@ 0x40
 8005d34:	1b40      	subs	r0, r0, r5
 8005d36:	4083      	lsls	r3, r0
 8005d38:	6822      	ldr	r2, [r4, #0]
 8005d3a:	3601      	adds	r6, #1
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	6023      	str	r3, [r4, #0]
 8005d40:	7831      	ldrb	r1, [r6, #0]
 8005d42:	2206      	movs	r2, #6
 8005d44:	482a      	ldr	r0, [pc, #168]	@ (8005df0 <_vfiprintf_r+0x22c>)
 8005d46:	1c75      	adds	r5, r6, #1
 8005d48:	7621      	strb	r1, [r4, #24]
 8005d4a:	f000 fb39 	bl	80063c0 <memchr>
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	d040      	beq.n	8005dd4 <_vfiprintf_r+0x210>
 8005d52:	4b28      	ldr	r3, [pc, #160]	@ (8005df4 <_vfiprintf_r+0x230>)
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d122      	bne.n	8005d9e <_vfiprintf_r+0x1da>
 8005d58:	2207      	movs	r2, #7
 8005d5a:	9b07      	ldr	r3, [sp, #28]
 8005d5c:	3307      	adds	r3, #7
 8005d5e:	4393      	bics	r3, r2
 8005d60:	3308      	adds	r3, #8
 8005d62:	9307      	str	r3, [sp, #28]
 8005d64:	6963      	ldr	r3, [r4, #20]
 8005d66:	9a04      	ldr	r2, [sp, #16]
 8005d68:	189b      	adds	r3, r3, r2
 8005d6a:	6163      	str	r3, [r4, #20]
 8005d6c:	e762      	b.n	8005c34 <_vfiprintf_r+0x70>
 8005d6e:	4343      	muls	r3, r0
 8005d70:	002e      	movs	r6, r5
 8005d72:	2101      	movs	r1, #1
 8005d74:	189b      	adds	r3, r3, r2
 8005d76:	e7a4      	b.n	8005cc2 <_vfiprintf_r+0xfe>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	200a      	movs	r0, #10
 8005d7c:	0019      	movs	r1, r3
 8005d7e:	3601      	adds	r6, #1
 8005d80:	6063      	str	r3, [r4, #4]
 8005d82:	7832      	ldrb	r2, [r6, #0]
 8005d84:	1c75      	adds	r5, r6, #1
 8005d86:	3a30      	subs	r2, #48	@ 0x30
 8005d88:	2a09      	cmp	r2, #9
 8005d8a:	d903      	bls.n	8005d94 <_vfiprintf_r+0x1d0>
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0c8      	beq.n	8005d22 <_vfiprintf_r+0x15e>
 8005d90:	9109      	str	r1, [sp, #36]	@ 0x24
 8005d92:	e7c6      	b.n	8005d22 <_vfiprintf_r+0x15e>
 8005d94:	4341      	muls	r1, r0
 8005d96:	002e      	movs	r6, r5
 8005d98:	2301      	movs	r3, #1
 8005d9a:	1889      	adds	r1, r1, r2
 8005d9c:	e7f1      	b.n	8005d82 <_vfiprintf_r+0x1be>
 8005d9e:	aa07      	add	r2, sp, #28
 8005da0:	9200      	str	r2, [sp, #0]
 8005da2:	0021      	movs	r1, r4
 8005da4:	003a      	movs	r2, r7
 8005da6:	4b14      	ldr	r3, [pc, #80]	@ (8005df8 <_vfiprintf_r+0x234>)
 8005da8:	9803      	ldr	r0, [sp, #12]
 8005daa:	e000      	b.n	8005dae <_vfiprintf_r+0x1ea>
 8005dac:	bf00      	nop
 8005dae:	9004      	str	r0, [sp, #16]
 8005db0:	9b04      	ldr	r3, [sp, #16]
 8005db2:	3301      	adds	r3, #1
 8005db4:	d1d6      	bne.n	8005d64 <_vfiprintf_r+0x1a0>
 8005db6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005db8:	07db      	lsls	r3, r3, #31
 8005dba:	d405      	bmi.n	8005dc8 <_vfiprintf_r+0x204>
 8005dbc:	89bb      	ldrh	r3, [r7, #12]
 8005dbe:	059b      	lsls	r3, r3, #22
 8005dc0:	d402      	bmi.n	8005dc8 <_vfiprintf_r+0x204>
 8005dc2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005dc4:	f7ff fdd8 	bl	8005978 <__retarget_lock_release_recursive>
 8005dc8:	89bb      	ldrh	r3, [r7, #12]
 8005dca:	065b      	lsls	r3, r3, #25
 8005dcc:	d500      	bpl.n	8005dd0 <_vfiprintf_r+0x20c>
 8005dce:	e71e      	b.n	8005c0e <_vfiprintf_r+0x4a>
 8005dd0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005dd2:	e71e      	b.n	8005c12 <_vfiprintf_r+0x4e>
 8005dd4:	aa07      	add	r2, sp, #28
 8005dd6:	9200      	str	r2, [sp, #0]
 8005dd8:	0021      	movs	r1, r4
 8005dda:	003a      	movs	r2, r7
 8005ddc:	4b06      	ldr	r3, [pc, #24]	@ (8005df8 <_vfiprintf_r+0x234>)
 8005dde:	9803      	ldr	r0, [sp, #12]
 8005de0:	f000 f87c 	bl	8005edc <_printf_i>
 8005de4:	e7e3      	b.n	8005dae <_vfiprintf_r+0x1ea>
 8005de6:	46c0      	nop			@ (mov r8, r8)
 8005de8:	08006668 	.word	0x08006668
 8005dec:	0800666e 	.word	0x0800666e
 8005df0:	08006672 	.word	0x08006672
 8005df4:	00000000 	.word	0x00000000
 8005df8:	08005b9f 	.word	0x08005b9f

08005dfc <_printf_common>:
 8005dfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dfe:	0016      	movs	r6, r2
 8005e00:	9301      	str	r3, [sp, #4]
 8005e02:	688a      	ldr	r2, [r1, #8]
 8005e04:	690b      	ldr	r3, [r1, #16]
 8005e06:	000c      	movs	r4, r1
 8005e08:	9000      	str	r0, [sp, #0]
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	da00      	bge.n	8005e10 <_printf_common+0x14>
 8005e0e:	0013      	movs	r3, r2
 8005e10:	0022      	movs	r2, r4
 8005e12:	6033      	str	r3, [r6, #0]
 8005e14:	3243      	adds	r2, #67	@ 0x43
 8005e16:	7812      	ldrb	r2, [r2, #0]
 8005e18:	2a00      	cmp	r2, #0
 8005e1a:	d001      	beq.n	8005e20 <_printf_common+0x24>
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	6033      	str	r3, [r6, #0]
 8005e20:	6823      	ldr	r3, [r4, #0]
 8005e22:	069b      	lsls	r3, r3, #26
 8005e24:	d502      	bpl.n	8005e2c <_printf_common+0x30>
 8005e26:	6833      	ldr	r3, [r6, #0]
 8005e28:	3302      	adds	r3, #2
 8005e2a:	6033      	str	r3, [r6, #0]
 8005e2c:	6822      	ldr	r2, [r4, #0]
 8005e2e:	2306      	movs	r3, #6
 8005e30:	0015      	movs	r5, r2
 8005e32:	401d      	ands	r5, r3
 8005e34:	421a      	tst	r2, r3
 8005e36:	d027      	beq.n	8005e88 <_printf_common+0x8c>
 8005e38:	0023      	movs	r3, r4
 8005e3a:	3343      	adds	r3, #67	@ 0x43
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	1e5a      	subs	r2, r3, #1
 8005e40:	4193      	sbcs	r3, r2
 8005e42:	6822      	ldr	r2, [r4, #0]
 8005e44:	0692      	lsls	r2, r2, #26
 8005e46:	d430      	bmi.n	8005eaa <_printf_common+0xae>
 8005e48:	0022      	movs	r2, r4
 8005e4a:	9901      	ldr	r1, [sp, #4]
 8005e4c:	9800      	ldr	r0, [sp, #0]
 8005e4e:	9d08      	ldr	r5, [sp, #32]
 8005e50:	3243      	adds	r2, #67	@ 0x43
 8005e52:	47a8      	blx	r5
 8005e54:	3001      	adds	r0, #1
 8005e56:	d025      	beq.n	8005ea4 <_printf_common+0xa8>
 8005e58:	2206      	movs	r2, #6
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	2500      	movs	r5, #0
 8005e5e:	4013      	ands	r3, r2
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	d105      	bne.n	8005e70 <_printf_common+0x74>
 8005e64:	6833      	ldr	r3, [r6, #0]
 8005e66:	68e5      	ldr	r5, [r4, #12]
 8005e68:	1aed      	subs	r5, r5, r3
 8005e6a:	43eb      	mvns	r3, r5
 8005e6c:	17db      	asrs	r3, r3, #31
 8005e6e:	401d      	ands	r5, r3
 8005e70:	68a3      	ldr	r3, [r4, #8]
 8005e72:	6922      	ldr	r2, [r4, #16]
 8005e74:	4293      	cmp	r3, r2
 8005e76:	dd01      	ble.n	8005e7c <_printf_common+0x80>
 8005e78:	1a9b      	subs	r3, r3, r2
 8005e7a:	18ed      	adds	r5, r5, r3
 8005e7c:	2600      	movs	r6, #0
 8005e7e:	42b5      	cmp	r5, r6
 8005e80:	d120      	bne.n	8005ec4 <_printf_common+0xc8>
 8005e82:	2000      	movs	r0, #0
 8005e84:	e010      	b.n	8005ea8 <_printf_common+0xac>
 8005e86:	3501      	adds	r5, #1
 8005e88:	68e3      	ldr	r3, [r4, #12]
 8005e8a:	6832      	ldr	r2, [r6, #0]
 8005e8c:	1a9b      	subs	r3, r3, r2
 8005e8e:	42ab      	cmp	r3, r5
 8005e90:	ddd2      	ble.n	8005e38 <_printf_common+0x3c>
 8005e92:	0022      	movs	r2, r4
 8005e94:	2301      	movs	r3, #1
 8005e96:	9901      	ldr	r1, [sp, #4]
 8005e98:	9800      	ldr	r0, [sp, #0]
 8005e9a:	9f08      	ldr	r7, [sp, #32]
 8005e9c:	3219      	adds	r2, #25
 8005e9e:	47b8      	blx	r7
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	d1f0      	bne.n	8005e86 <_printf_common+0x8a>
 8005ea4:	2001      	movs	r0, #1
 8005ea6:	4240      	negs	r0, r0
 8005ea8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005eaa:	2030      	movs	r0, #48	@ 0x30
 8005eac:	18e1      	adds	r1, r4, r3
 8005eae:	3143      	adds	r1, #67	@ 0x43
 8005eb0:	7008      	strb	r0, [r1, #0]
 8005eb2:	0021      	movs	r1, r4
 8005eb4:	1c5a      	adds	r2, r3, #1
 8005eb6:	3145      	adds	r1, #69	@ 0x45
 8005eb8:	7809      	ldrb	r1, [r1, #0]
 8005eba:	18a2      	adds	r2, r4, r2
 8005ebc:	3243      	adds	r2, #67	@ 0x43
 8005ebe:	3302      	adds	r3, #2
 8005ec0:	7011      	strb	r1, [r2, #0]
 8005ec2:	e7c1      	b.n	8005e48 <_printf_common+0x4c>
 8005ec4:	0022      	movs	r2, r4
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	9901      	ldr	r1, [sp, #4]
 8005eca:	9800      	ldr	r0, [sp, #0]
 8005ecc:	9f08      	ldr	r7, [sp, #32]
 8005ece:	321a      	adds	r2, #26
 8005ed0:	47b8      	blx	r7
 8005ed2:	3001      	adds	r0, #1
 8005ed4:	d0e6      	beq.n	8005ea4 <_printf_common+0xa8>
 8005ed6:	3601      	adds	r6, #1
 8005ed8:	e7d1      	b.n	8005e7e <_printf_common+0x82>
	...

08005edc <_printf_i>:
 8005edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ede:	b08b      	sub	sp, #44	@ 0x2c
 8005ee0:	9206      	str	r2, [sp, #24]
 8005ee2:	000a      	movs	r2, r1
 8005ee4:	3243      	adds	r2, #67	@ 0x43
 8005ee6:	9307      	str	r3, [sp, #28]
 8005ee8:	9005      	str	r0, [sp, #20]
 8005eea:	9203      	str	r2, [sp, #12]
 8005eec:	7e0a      	ldrb	r2, [r1, #24]
 8005eee:	000c      	movs	r4, r1
 8005ef0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005ef2:	2a78      	cmp	r2, #120	@ 0x78
 8005ef4:	d809      	bhi.n	8005f0a <_printf_i+0x2e>
 8005ef6:	2a62      	cmp	r2, #98	@ 0x62
 8005ef8:	d80b      	bhi.n	8005f12 <_printf_i+0x36>
 8005efa:	2a00      	cmp	r2, #0
 8005efc:	d100      	bne.n	8005f00 <_printf_i+0x24>
 8005efe:	e0bc      	b.n	800607a <_printf_i+0x19e>
 8005f00:	497b      	ldr	r1, [pc, #492]	@ (80060f0 <_printf_i+0x214>)
 8005f02:	9104      	str	r1, [sp, #16]
 8005f04:	2a58      	cmp	r2, #88	@ 0x58
 8005f06:	d100      	bne.n	8005f0a <_printf_i+0x2e>
 8005f08:	e090      	b.n	800602c <_printf_i+0x150>
 8005f0a:	0025      	movs	r5, r4
 8005f0c:	3542      	adds	r5, #66	@ 0x42
 8005f0e:	702a      	strb	r2, [r5, #0]
 8005f10:	e022      	b.n	8005f58 <_printf_i+0x7c>
 8005f12:	0010      	movs	r0, r2
 8005f14:	3863      	subs	r0, #99	@ 0x63
 8005f16:	2815      	cmp	r0, #21
 8005f18:	d8f7      	bhi.n	8005f0a <_printf_i+0x2e>
 8005f1a:	f7fa f8f3 	bl	8000104 <__gnu_thumb1_case_shi>
 8005f1e:	0016      	.short	0x0016
 8005f20:	fff6001f 	.word	0xfff6001f
 8005f24:	fff6fff6 	.word	0xfff6fff6
 8005f28:	001ffff6 	.word	0x001ffff6
 8005f2c:	fff6fff6 	.word	0xfff6fff6
 8005f30:	fff6fff6 	.word	0xfff6fff6
 8005f34:	003600a1 	.word	0x003600a1
 8005f38:	fff60080 	.word	0xfff60080
 8005f3c:	00b2fff6 	.word	0x00b2fff6
 8005f40:	0036fff6 	.word	0x0036fff6
 8005f44:	fff6fff6 	.word	0xfff6fff6
 8005f48:	0084      	.short	0x0084
 8005f4a:	0025      	movs	r5, r4
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	3542      	adds	r5, #66	@ 0x42
 8005f50:	1d11      	adds	r1, r2, #4
 8005f52:	6019      	str	r1, [r3, #0]
 8005f54:	6813      	ldr	r3, [r2, #0]
 8005f56:	702b      	strb	r3, [r5, #0]
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e0a0      	b.n	800609e <_printf_i+0x1c2>
 8005f5c:	6818      	ldr	r0, [r3, #0]
 8005f5e:	6809      	ldr	r1, [r1, #0]
 8005f60:	1d02      	adds	r2, r0, #4
 8005f62:	060d      	lsls	r5, r1, #24
 8005f64:	d50b      	bpl.n	8005f7e <_printf_i+0xa2>
 8005f66:	6806      	ldr	r6, [r0, #0]
 8005f68:	601a      	str	r2, [r3, #0]
 8005f6a:	2e00      	cmp	r6, #0
 8005f6c:	da03      	bge.n	8005f76 <_printf_i+0x9a>
 8005f6e:	232d      	movs	r3, #45	@ 0x2d
 8005f70:	9a03      	ldr	r2, [sp, #12]
 8005f72:	4276      	negs	r6, r6
 8005f74:	7013      	strb	r3, [r2, #0]
 8005f76:	4b5e      	ldr	r3, [pc, #376]	@ (80060f0 <_printf_i+0x214>)
 8005f78:	270a      	movs	r7, #10
 8005f7a:	9304      	str	r3, [sp, #16]
 8005f7c:	e018      	b.n	8005fb0 <_printf_i+0xd4>
 8005f7e:	6806      	ldr	r6, [r0, #0]
 8005f80:	601a      	str	r2, [r3, #0]
 8005f82:	0649      	lsls	r1, r1, #25
 8005f84:	d5f1      	bpl.n	8005f6a <_printf_i+0x8e>
 8005f86:	b236      	sxth	r6, r6
 8005f88:	e7ef      	b.n	8005f6a <_printf_i+0x8e>
 8005f8a:	6808      	ldr	r0, [r1, #0]
 8005f8c:	6819      	ldr	r1, [r3, #0]
 8005f8e:	c940      	ldmia	r1!, {r6}
 8005f90:	0605      	lsls	r5, r0, #24
 8005f92:	d402      	bmi.n	8005f9a <_printf_i+0xbe>
 8005f94:	0640      	lsls	r0, r0, #25
 8005f96:	d500      	bpl.n	8005f9a <_printf_i+0xbe>
 8005f98:	b2b6      	uxth	r6, r6
 8005f9a:	6019      	str	r1, [r3, #0]
 8005f9c:	4b54      	ldr	r3, [pc, #336]	@ (80060f0 <_printf_i+0x214>)
 8005f9e:	270a      	movs	r7, #10
 8005fa0:	9304      	str	r3, [sp, #16]
 8005fa2:	2a6f      	cmp	r2, #111	@ 0x6f
 8005fa4:	d100      	bne.n	8005fa8 <_printf_i+0xcc>
 8005fa6:	3f02      	subs	r7, #2
 8005fa8:	0023      	movs	r3, r4
 8005faa:	2200      	movs	r2, #0
 8005fac:	3343      	adds	r3, #67	@ 0x43
 8005fae:	701a      	strb	r2, [r3, #0]
 8005fb0:	6863      	ldr	r3, [r4, #4]
 8005fb2:	60a3      	str	r3, [r4, #8]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	db03      	blt.n	8005fc0 <_printf_i+0xe4>
 8005fb8:	2104      	movs	r1, #4
 8005fba:	6822      	ldr	r2, [r4, #0]
 8005fbc:	438a      	bics	r2, r1
 8005fbe:	6022      	str	r2, [r4, #0]
 8005fc0:	2e00      	cmp	r6, #0
 8005fc2:	d102      	bne.n	8005fca <_printf_i+0xee>
 8005fc4:	9d03      	ldr	r5, [sp, #12]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00c      	beq.n	8005fe4 <_printf_i+0x108>
 8005fca:	9d03      	ldr	r5, [sp, #12]
 8005fcc:	0030      	movs	r0, r6
 8005fce:	0039      	movs	r1, r7
 8005fd0:	f7fa f928 	bl	8000224 <__aeabi_uidivmod>
 8005fd4:	9b04      	ldr	r3, [sp, #16]
 8005fd6:	3d01      	subs	r5, #1
 8005fd8:	5c5b      	ldrb	r3, [r3, r1]
 8005fda:	702b      	strb	r3, [r5, #0]
 8005fdc:	0033      	movs	r3, r6
 8005fde:	0006      	movs	r6, r0
 8005fe0:	429f      	cmp	r7, r3
 8005fe2:	d9f3      	bls.n	8005fcc <_printf_i+0xf0>
 8005fe4:	2f08      	cmp	r7, #8
 8005fe6:	d109      	bne.n	8005ffc <_printf_i+0x120>
 8005fe8:	6823      	ldr	r3, [r4, #0]
 8005fea:	07db      	lsls	r3, r3, #31
 8005fec:	d506      	bpl.n	8005ffc <_printf_i+0x120>
 8005fee:	6862      	ldr	r2, [r4, #4]
 8005ff0:	6923      	ldr	r3, [r4, #16]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	dc02      	bgt.n	8005ffc <_printf_i+0x120>
 8005ff6:	2330      	movs	r3, #48	@ 0x30
 8005ff8:	3d01      	subs	r5, #1
 8005ffa:	702b      	strb	r3, [r5, #0]
 8005ffc:	9b03      	ldr	r3, [sp, #12]
 8005ffe:	1b5b      	subs	r3, r3, r5
 8006000:	6123      	str	r3, [r4, #16]
 8006002:	9b07      	ldr	r3, [sp, #28]
 8006004:	0021      	movs	r1, r4
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	9805      	ldr	r0, [sp, #20]
 800600a:	9b06      	ldr	r3, [sp, #24]
 800600c:	aa09      	add	r2, sp, #36	@ 0x24
 800600e:	f7ff fef5 	bl	8005dfc <_printf_common>
 8006012:	3001      	adds	r0, #1
 8006014:	d148      	bne.n	80060a8 <_printf_i+0x1cc>
 8006016:	2001      	movs	r0, #1
 8006018:	4240      	negs	r0, r0
 800601a:	b00b      	add	sp, #44	@ 0x2c
 800601c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800601e:	2220      	movs	r2, #32
 8006020:	6809      	ldr	r1, [r1, #0]
 8006022:	430a      	orrs	r2, r1
 8006024:	6022      	str	r2, [r4, #0]
 8006026:	2278      	movs	r2, #120	@ 0x78
 8006028:	4932      	ldr	r1, [pc, #200]	@ (80060f4 <_printf_i+0x218>)
 800602a:	9104      	str	r1, [sp, #16]
 800602c:	0021      	movs	r1, r4
 800602e:	3145      	adds	r1, #69	@ 0x45
 8006030:	700a      	strb	r2, [r1, #0]
 8006032:	6819      	ldr	r1, [r3, #0]
 8006034:	6822      	ldr	r2, [r4, #0]
 8006036:	c940      	ldmia	r1!, {r6}
 8006038:	0610      	lsls	r0, r2, #24
 800603a:	d402      	bmi.n	8006042 <_printf_i+0x166>
 800603c:	0650      	lsls	r0, r2, #25
 800603e:	d500      	bpl.n	8006042 <_printf_i+0x166>
 8006040:	b2b6      	uxth	r6, r6
 8006042:	6019      	str	r1, [r3, #0]
 8006044:	07d3      	lsls	r3, r2, #31
 8006046:	d502      	bpl.n	800604e <_printf_i+0x172>
 8006048:	2320      	movs	r3, #32
 800604a:	4313      	orrs	r3, r2
 800604c:	6023      	str	r3, [r4, #0]
 800604e:	2e00      	cmp	r6, #0
 8006050:	d001      	beq.n	8006056 <_printf_i+0x17a>
 8006052:	2710      	movs	r7, #16
 8006054:	e7a8      	b.n	8005fa8 <_printf_i+0xcc>
 8006056:	2220      	movs	r2, #32
 8006058:	6823      	ldr	r3, [r4, #0]
 800605a:	4393      	bics	r3, r2
 800605c:	6023      	str	r3, [r4, #0]
 800605e:	e7f8      	b.n	8006052 <_printf_i+0x176>
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	680d      	ldr	r5, [r1, #0]
 8006064:	1d10      	adds	r0, r2, #4
 8006066:	6949      	ldr	r1, [r1, #20]
 8006068:	6018      	str	r0, [r3, #0]
 800606a:	6813      	ldr	r3, [r2, #0]
 800606c:	062e      	lsls	r6, r5, #24
 800606e:	d501      	bpl.n	8006074 <_printf_i+0x198>
 8006070:	6019      	str	r1, [r3, #0]
 8006072:	e002      	b.n	800607a <_printf_i+0x19e>
 8006074:	066d      	lsls	r5, r5, #25
 8006076:	d5fb      	bpl.n	8006070 <_printf_i+0x194>
 8006078:	8019      	strh	r1, [r3, #0]
 800607a:	2300      	movs	r3, #0
 800607c:	9d03      	ldr	r5, [sp, #12]
 800607e:	6123      	str	r3, [r4, #16]
 8006080:	e7bf      	b.n	8006002 <_printf_i+0x126>
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	1d11      	adds	r1, r2, #4
 8006086:	6019      	str	r1, [r3, #0]
 8006088:	6815      	ldr	r5, [r2, #0]
 800608a:	2100      	movs	r1, #0
 800608c:	0028      	movs	r0, r5
 800608e:	6862      	ldr	r2, [r4, #4]
 8006090:	f000 f996 	bl	80063c0 <memchr>
 8006094:	2800      	cmp	r0, #0
 8006096:	d001      	beq.n	800609c <_printf_i+0x1c0>
 8006098:	1b40      	subs	r0, r0, r5
 800609a:	6060      	str	r0, [r4, #4]
 800609c:	6863      	ldr	r3, [r4, #4]
 800609e:	6123      	str	r3, [r4, #16]
 80060a0:	2300      	movs	r3, #0
 80060a2:	9a03      	ldr	r2, [sp, #12]
 80060a4:	7013      	strb	r3, [r2, #0]
 80060a6:	e7ac      	b.n	8006002 <_printf_i+0x126>
 80060a8:	002a      	movs	r2, r5
 80060aa:	6923      	ldr	r3, [r4, #16]
 80060ac:	9906      	ldr	r1, [sp, #24]
 80060ae:	9805      	ldr	r0, [sp, #20]
 80060b0:	9d07      	ldr	r5, [sp, #28]
 80060b2:	47a8      	blx	r5
 80060b4:	3001      	adds	r0, #1
 80060b6:	d0ae      	beq.n	8006016 <_printf_i+0x13a>
 80060b8:	6823      	ldr	r3, [r4, #0]
 80060ba:	079b      	lsls	r3, r3, #30
 80060bc:	d415      	bmi.n	80060ea <_printf_i+0x20e>
 80060be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060c0:	68e0      	ldr	r0, [r4, #12]
 80060c2:	4298      	cmp	r0, r3
 80060c4:	daa9      	bge.n	800601a <_printf_i+0x13e>
 80060c6:	0018      	movs	r0, r3
 80060c8:	e7a7      	b.n	800601a <_printf_i+0x13e>
 80060ca:	0022      	movs	r2, r4
 80060cc:	2301      	movs	r3, #1
 80060ce:	9906      	ldr	r1, [sp, #24]
 80060d0:	9805      	ldr	r0, [sp, #20]
 80060d2:	9e07      	ldr	r6, [sp, #28]
 80060d4:	3219      	adds	r2, #25
 80060d6:	47b0      	blx	r6
 80060d8:	3001      	adds	r0, #1
 80060da:	d09c      	beq.n	8006016 <_printf_i+0x13a>
 80060dc:	3501      	adds	r5, #1
 80060de:	68e3      	ldr	r3, [r4, #12]
 80060e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060e2:	1a9b      	subs	r3, r3, r2
 80060e4:	42ab      	cmp	r3, r5
 80060e6:	dcf0      	bgt.n	80060ca <_printf_i+0x1ee>
 80060e8:	e7e9      	b.n	80060be <_printf_i+0x1e2>
 80060ea:	2500      	movs	r5, #0
 80060ec:	e7f7      	b.n	80060de <_printf_i+0x202>
 80060ee:	46c0      	nop			@ (mov r8, r8)
 80060f0:	08006679 	.word	0x08006679
 80060f4:	0800668a 	.word	0x0800668a

080060f8 <__sflush_r>:
 80060f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060fa:	220c      	movs	r2, #12
 80060fc:	5e8b      	ldrsh	r3, [r1, r2]
 80060fe:	0005      	movs	r5, r0
 8006100:	000c      	movs	r4, r1
 8006102:	071a      	lsls	r2, r3, #28
 8006104:	d456      	bmi.n	80061b4 <__sflush_r+0xbc>
 8006106:	684a      	ldr	r2, [r1, #4]
 8006108:	2a00      	cmp	r2, #0
 800610a:	dc02      	bgt.n	8006112 <__sflush_r+0x1a>
 800610c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800610e:	2a00      	cmp	r2, #0
 8006110:	dd4e      	ble.n	80061b0 <__sflush_r+0xb8>
 8006112:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006114:	2f00      	cmp	r7, #0
 8006116:	d04b      	beq.n	80061b0 <__sflush_r+0xb8>
 8006118:	2200      	movs	r2, #0
 800611a:	2080      	movs	r0, #128	@ 0x80
 800611c:	682e      	ldr	r6, [r5, #0]
 800611e:	602a      	str	r2, [r5, #0]
 8006120:	001a      	movs	r2, r3
 8006122:	0140      	lsls	r0, r0, #5
 8006124:	6a21      	ldr	r1, [r4, #32]
 8006126:	4002      	ands	r2, r0
 8006128:	4203      	tst	r3, r0
 800612a:	d033      	beq.n	8006194 <__sflush_r+0x9c>
 800612c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800612e:	89a3      	ldrh	r3, [r4, #12]
 8006130:	075b      	lsls	r3, r3, #29
 8006132:	d506      	bpl.n	8006142 <__sflush_r+0x4a>
 8006134:	6863      	ldr	r3, [r4, #4]
 8006136:	1ad2      	subs	r2, r2, r3
 8006138:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <__sflush_r+0x4a>
 800613e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006140:	1ad2      	subs	r2, r2, r3
 8006142:	2300      	movs	r3, #0
 8006144:	0028      	movs	r0, r5
 8006146:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006148:	6a21      	ldr	r1, [r4, #32]
 800614a:	47b8      	blx	r7
 800614c:	89a2      	ldrh	r2, [r4, #12]
 800614e:	1c43      	adds	r3, r0, #1
 8006150:	d106      	bne.n	8006160 <__sflush_r+0x68>
 8006152:	6829      	ldr	r1, [r5, #0]
 8006154:	291d      	cmp	r1, #29
 8006156:	d846      	bhi.n	80061e6 <__sflush_r+0xee>
 8006158:	4b29      	ldr	r3, [pc, #164]	@ (8006200 <__sflush_r+0x108>)
 800615a:	410b      	asrs	r3, r1
 800615c:	07db      	lsls	r3, r3, #31
 800615e:	d442      	bmi.n	80061e6 <__sflush_r+0xee>
 8006160:	2300      	movs	r3, #0
 8006162:	6063      	str	r3, [r4, #4]
 8006164:	6923      	ldr	r3, [r4, #16]
 8006166:	6023      	str	r3, [r4, #0]
 8006168:	04d2      	lsls	r2, r2, #19
 800616a:	d505      	bpl.n	8006178 <__sflush_r+0x80>
 800616c:	1c43      	adds	r3, r0, #1
 800616e:	d102      	bne.n	8006176 <__sflush_r+0x7e>
 8006170:	682b      	ldr	r3, [r5, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d100      	bne.n	8006178 <__sflush_r+0x80>
 8006176:	6560      	str	r0, [r4, #84]	@ 0x54
 8006178:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800617a:	602e      	str	r6, [r5, #0]
 800617c:	2900      	cmp	r1, #0
 800617e:	d017      	beq.n	80061b0 <__sflush_r+0xb8>
 8006180:	0023      	movs	r3, r4
 8006182:	3344      	adds	r3, #68	@ 0x44
 8006184:	4299      	cmp	r1, r3
 8006186:	d002      	beq.n	800618e <__sflush_r+0x96>
 8006188:	0028      	movs	r0, r5
 800618a:	f7ff fbf7 	bl	800597c <_free_r>
 800618e:	2300      	movs	r3, #0
 8006190:	6363      	str	r3, [r4, #52]	@ 0x34
 8006192:	e00d      	b.n	80061b0 <__sflush_r+0xb8>
 8006194:	2301      	movs	r3, #1
 8006196:	0028      	movs	r0, r5
 8006198:	47b8      	blx	r7
 800619a:	0002      	movs	r2, r0
 800619c:	1c43      	adds	r3, r0, #1
 800619e:	d1c6      	bne.n	800612e <__sflush_r+0x36>
 80061a0:	682b      	ldr	r3, [r5, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d0c3      	beq.n	800612e <__sflush_r+0x36>
 80061a6:	2b1d      	cmp	r3, #29
 80061a8:	d001      	beq.n	80061ae <__sflush_r+0xb6>
 80061aa:	2b16      	cmp	r3, #22
 80061ac:	d11a      	bne.n	80061e4 <__sflush_r+0xec>
 80061ae:	602e      	str	r6, [r5, #0]
 80061b0:	2000      	movs	r0, #0
 80061b2:	e01e      	b.n	80061f2 <__sflush_r+0xfa>
 80061b4:	690e      	ldr	r6, [r1, #16]
 80061b6:	2e00      	cmp	r6, #0
 80061b8:	d0fa      	beq.n	80061b0 <__sflush_r+0xb8>
 80061ba:	680f      	ldr	r7, [r1, #0]
 80061bc:	600e      	str	r6, [r1, #0]
 80061be:	1bba      	subs	r2, r7, r6
 80061c0:	9201      	str	r2, [sp, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	079b      	lsls	r3, r3, #30
 80061c6:	d100      	bne.n	80061ca <__sflush_r+0xd2>
 80061c8:	694a      	ldr	r2, [r1, #20]
 80061ca:	60a2      	str	r2, [r4, #8]
 80061cc:	9b01      	ldr	r3, [sp, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	ddee      	ble.n	80061b0 <__sflush_r+0xb8>
 80061d2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80061d4:	0032      	movs	r2, r6
 80061d6:	001f      	movs	r7, r3
 80061d8:	0028      	movs	r0, r5
 80061da:	9b01      	ldr	r3, [sp, #4]
 80061dc:	6a21      	ldr	r1, [r4, #32]
 80061de:	47b8      	blx	r7
 80061e0:	2800      	cmp	r0, #0
 80061e2:	dc07      	bgt.n	80061f4 <__sflush_r+0xfc>
 80061e4:	89a2      	ldrh	r2, [r4, #12]
 80061e6:	2340      	movs	r3, #64	@ 0x40
 80061e8:	2001      	movs	r0, #1
 80061ea:	4313      	orrs	r3, r2
 80061ec:	b21b      	sxth	r3, r3
 80061ee:	81a3      	strh	r3, [r4, #12]
 80061f0:	4240      	negs	r0, r0
 80061f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061f4:	9b01      	ldr	r3, [sp, #4]
 80061f6:	1836      	adds	r6, r6, r0
 80061f8:	1a1b      	subs	r3, r3, r0
 80061fa:	9301      	str	r3, [sp, #4]
 80061fc:	e7e6      	b.n	80061cc <__sflush_r+0xd4>
 80061fe:	46c0      	nop			@ (mov r8, r8)
 8006200:	dfbffffe 	.word	0xdfbffffe

08006204 <_fflush_r>:
 8006204:	690b      	ldr	r3, [r1, #16]
 8006206:	b570      	push	{r4, r5, r6, lr}
 8006208:	0005      	movs	r5, r0
 800620a:	000c      	movs	r4, r1
 800620c:	2b00      	cmp	r3, #0
 800620e:	d102      	bne.n	8006216 <_fflush_r+0x12>
 8006210:	2500      	movs	r5, #0
 8006212:	0028      	movs	r0, r5
 8006214:	bd70      	pop	{r4, r5, r6, pc}
 8006216:	2800      	cmp	r0, #0
 8006218:	d004      	beq.n	8006224 <_fflush_r+0x20>
 800621a:	6a03      	ldr	r3, [r0, #32]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <_fflush_r+0x20>
 8006220:	f7ff fa98 	bl	8005754 <__sinit>
 8006224:	220c      	movs	r2, #12
 8006226:	5ea3      	ldrsh	r3, [r4, r2]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d0f1      	beq.n	8006210 <_fflush_r+0xc>
 800622c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800622e:	07d2      	lsls	r2, r2, #31
 8006230:	d404      	bmi.n	800623c <_fflush_r+0x38>
 8006232:	059b      	lsls	r3, r3, #22
 8006234:	d402      	bmi.n	800623c <_fflush_r+0x38>
 8006236:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006238:	f7ff fb9d 	bl	8005976 <__retarget_lock_acquire_recursive>
 800623c:	0028      	movs	r0, r5
 800623e:	0021      	movs	r1, r4
 8006240:	f7ff ff5a 	bl	80060f8 <__sflush_r>
 8006244:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006246:	0005      	movs	r5, r0
 8006248:	07db      	lsls	r3, r3, #31
 800624a:	d4e2      	bmi.n	8006212 <_fflush_r+0xe>
 800624c:	89a3      	ldrh	r3, [r4, #12]
 800624e:	059b      	lsls	r3, r3, #22
 8006250:	d4df      	bmi.n	8006212 <_fflush_r+0xe>
 8006252:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006254:	f7ff fb90 	bl	8005978 <__retarget_lock_release_recursive>
 8006258:	e7db      	b.n	8006212 <_fflush_r+0xe>

0800625a <__swbuf_r>:
 800625a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625c:	0006      	movs	r6, r0
 800625e:	000d      	movs	r5, r1
 8006260:	0014      	movs	r4, r2
 8006262:	2800      	cmp	r0, #0
 8006264:	d004      	beq.n	8006270 <__swbuf_r+0x16>
 8006266:	6a03      	ldr	r3, [r0, #32]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <__swbuf_r+0x16>
 800626c:	f7ff fa72 	bl	8005754 <__sinit>
 8006270:	69a3      	ldr	r3, [r4, #24]
 8006272:	60a3      	str	r3, [r4, #8]
 8006274:	89a3      	ldrh	r3, [r4, #12]
 8006276:	071b      	lsls	r3, r3, #28
 8006278:	d502      	bpl.n	8006280 <__swbuf_r+0x26>
 800627a:	6923      	ldr	r3, [r4, #16]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d109      	bne.n	8006294 <__swbuf_r+0x3a>
 8006280:	0021      	movs	r1, r4
 8006282:	0030      	movs	r0, r6
 8006284:	f000 f82c 	bl	80062e0 <__swsetup_r>
 8006288:	2800      	cmp	r0, #0
 800628a:	d003      	beq.n	8006294 <__swbuf_r+0x3a>
 800628c:	2501      	movs	r5, #1
 800628e:	426d      	negs	r5, r5
 8006290:	0028      	movs	r0, r5
 8006292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006294:	6923      	ldr	r3, [r4, #16]
 8006296:	6820      	ldr	r0, [r4, #0]
 8006298:	b2ef      	uxtb	r7, r5
 800629a:	1ac0      	subs	r0, r0, r3
 800629c:	6963      	ldr	r3, [r4, #20]
 800629e:	b2ed      	uxtb	r5, r5
 80062a0:	4283      	cmp	r3, r0
 80062a2:	dc05      	bgt.n	80062b0 <__swbuf_r+0x56>
 80062a4:	0021      	movs	r1, r4
 80062a6:	0030      	movs	r0, r6
 80062a8:	f7ff ffac 	bl	8006204 <_fflush_r>
 80062ac:	2800      	cmp	r0, #0
 80062ae:	d1ed      	bne.n	800628c <__swbuf_r+0x32>
 80062b0:	68a3      	ldr	r3, [r4, #8]
 80062b2:	3001      	adds	r0, #1
 80062b4:	3b01      	subs	r3, #1
 80062b6:	60a3      	str	r3, [r4, #8]
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	6022      	str	r2, [r4, #0]
 80062be:	701f      	strb	r7, [r3, #0]
 80062c0:	6963      	ldr	r3, [r4, #20]
 80062c2:	4283      	cmp	r3, r0
 80062c4:	d004      	beq.n	80062d0 <__swbuf_r+0x76>
 80062c6:	89a3      	ldrh	r3, [r4, #12]
 80062c8:	07db      	lsls	r3, r3, #31
 80062ca:	d5e1      	bpl.n	8006290 <__swbuf_r+0x36>
 80062cc:	2d0a      	cmp	r5, #10
 80062ce:	d1df      	bne.n	8006290 <__swbuf_r+0x36>
 80062d0:	0021      	movs	r1, r4
 80062d2:	0030      	movs	r0, r6
 80062d4:	f7ff ff96 	bl	8006204 <_fflush_r>
 80062d8:	2800      	cmp	r0, #0
 80062da:	d0d9      	beq.n	8006290 <__swbuf_r+0x36>
 80062dc:	e7d6      	b.n	800628c <__swbuf_r+0x32>
	...

080062e0 <__swsetup_r>:
 80062e0:	4b2d      	ldr	r3, [pc, #180]	@ (8006398 <__swsetup_r+0xb8>)
 80062e2:	b570      	push	{r4, r5, r6, lr}
 80062e4:	0005      	movs	r5, r0
 80062e6:	6818      	ldr	r0, [r3, #0]
 80062e8:	000c      	movs	r4, r1
 80062ea:	2800      	cmp	r0, #0
 80062ec:	d004      	beq.n	80062f8 <__swsetup_r+0x18>
 80062ee:	6a03      	ldr	r3, [r0, #32]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d101      	bne.n	80062f8 <__swsetup_r+0x18>
 80062f4:	f7ff fa2e 	bl	8005754 <__sinit>
 80062f8:	230c      	movs	r3, #12
 80062fa:	5ee2      	ldrsh	r2, [r4, r3]
 80062fc:	0713      	lsls	r3, r2, #28
 80062fe:	d423      	bmi.n	8006348 <__swsetup_r+0x68>
 8006300:	06d3      	lsls	r3, r2, #27
 8006302:	d407      	bmi.n	8006314 <__swsetup_r+0x34>
 8006304:	2309      	movs	r3, #9
 8006306:	602b      	str	r3, [r5, #0]
 8006308:	2340      	movs	r3, #64	@ 0x40
 800630a:	2001      	movs	r0, #1
 800630c:	4313      	orrs	r3, r2
 800630e:	81a3      	strh	r3, [r4, #12]
 8006310:	4240      	negs	r0, r0
 8006312:	e03a      	b.n	800638a <__swsetup_r+0xaa>
 8006314:	0752      	lsls	r2, r2, #29
 8006316:	d513      	bpl.n	8006340 <__swsetup_r+0x60>
 8006318:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800631a:	2900      	cmp	r1, #0
 800631c:	d008      	beq.n	8006330 <__swsetup_r+0x50>
 800631e:	0023      	movs	r3, r4
 8006320:	3344      	adds	r3, #68	@ 0x44
 8006322:	4299      	cmp	r1, r3
 8006324:	d002      	beq.n	800632c <__swsetup_r+0x4c>
 8006326:	0028      	movs	r0, r5
 8006328:	f7ff fb28 	bl	800597c <_free_r>
 800632c:	2300      	movs	r3, #0
 800632e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006330:	2224      	movs	r2, #36	@ 0x24
 8006332:	89a3      	ldrh	r3, [r4, #12]
 8006334:	4393      	bics	r3, r2
 8006336:	81a3      	strh	r3, [r4, #12]
 8006338:	2300      	movs	r3, #0
 800633a:	6063      	str	r3, [r4, #4]
 800633c:	6923      	ldr	r3, [r4, #16]
 800633e:	6023      	str	r3, [r4, #0]
 8006340:	2308      	movs	r3, #8
 8006342:	89a2      	ldrh	r2, [r4, #12]
 8006344:	4313      	orrs	r3, r2
 8006346:	81a3      	strh	r3, [r4, #12]
 8006348:	6923      	ldr	r3, [r4, #16]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10b      	bne.n	8006366 <__swsetup_r+0x86>
 800634e:	21a0      	movs	r1, #160	@ 0xa0
 8006350:	2280      	movs	r2, #128	@ 0x80
 8006352:	89a3      	ldrh	r3, [r4, #12]
 8006354:	0089      	lsls	r1, r1, #2
 8006356:	0092      	lsls	r2, r2, #2
 8006358:	400b      	ands	r3, r1
 800635a:	4293      	cmp	r3, r2
 800635c:	d003      	beq.n	8006366 <__swsetup_r+0x86>
 800635e:	0021      	movs	r1, r4
 8006360:	0028      	movs	r0, r5
 8006362:	f000 f863 	bl	800642c <__smakebuf_r>
 8006366:	230c      	movs	r3, #12
 8006368:	5ee2      	ldrsh	r2, [r4, r3]
 800636a:	2101      	movs	r1, #1
 800636c:	0013      	movs	r3, r2
 800636e:	400b      	ands	r3, r1
 8006370:	420a      	tst	r2, r1
 8006372:	d00b      	beq.n	800638c <__swsetup_r+0xac>
 8006374:	2300      	movs	r3, #0
 8006376:	60a3      	str	r3, [r4, #8]
 8006378:	6963      	ldr	r3, [r4, #20]
 800637a:	425b      	negs	r3, r3
 800637c:	61a3      	str	r3, [r4, #24]
 800637e:	2000      	movs	r0, #0
 8006380:	6923      	ldr	r3, [r4, #16]
 8006382:	4283      	cmp	r3, r0
 8006384:	d101      	bne.n	800638a <__swsetup_r+0xaa>
 8006386:	0613      	lsls	r3, r2, #24
 8006388:	d4be      	bmi.n	8006308 <__swsetup_r+0x28>
 800638a:	bd70      	pop	{r4, r5, r6, pc}
 800638c:	0791      	lsls	r1, r2, #30
 800638e:	d400      	bmi.n	8006392 <__swsetup_r+0xb2>
 8006390:	6963      	ldr	r3, [r4, #20]
 8006392:	60a3      	str	r3, [r4, #8]
 8006394:	e7f3      	b.n	800637e <__swsetup_r+0x9e>
 8006396:	46c0      	nop			@ (mov r8, r8)
 8006398:	20000048 	.word	0x20000048

0800639c <_sbrk_r>:
 800639c:	2300      	movs	r3, #0
 800639e:	b570      	push	{r4, r5, r6, lr}
 80063a0:	4d06      	ldr	r5, [pc, #24]	@ (80063bc <_sbrk_r+0x20>)
 80063a2:	0004      	movs	r4, r0
 80063a4:	0008      	movs	r0, r1
 80063a6:	602b      	str	r3, [r5, #0]
 80063a8:	f7fa fd2c 	bl	8000e04 <_sbrk>
 80063ac:	1c43      	adds	r3, r0, #1
 80063ae:	d103      	bne.n	80063b8 <_sbrk_r+0x1c>
 80063b0:	682b      	ldr	r3, [r5, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d000      	beq.n	80063b8 <_sbrk_r+0x1c>
 80063b6:	6023      	str	r3, [r4, #0]
 80063b8:	bd70      	pop	{r4, r5, r6, pc}
 80063ba:	46c0      	nop			@ (mov r8, r8)
 80063bc:	200004d8 	.word	0x200004d8

080063c0 <memchr>:
 80063c0:	b2c9      	uxtb	r1, r1
 80063c2:	1882      	adds	r2, r0, r2
 80063c4:	4290      	cmp	r0, r2
 80063c6:	d101      	bne.n	80063cc <memchr+0xc>
 80063c8:	2000      	movs	r0, #0
 80063ca:	4770      	bx	lr
 80063cc:	7803      	ldrb	r3, [r0, #0]
 80063ce:	428b      	cmp	r3, r1
 80063d0:	d0fb      	beq.n	80063ca <memchr+0xa>
 80063d2:	3001      	adds	r0, #1
 80063d4:	e7f6      	b.n	80063c4 <memchr+0x4>
	...

080063d8 <__swhatbuf_r>:
 80063d8:	b570      	push	{r4, r5, r6, lr}
 80063da:	000e      	movs	r6, r1
 80063dc:	001d      	movs	r5, r3
 80063de:	230e      	movs	r3, #14
 80063e0:	5ec9      	ldrsh	r1, [r1, r3]
 80063e2:	0014      	movs	r4, r2
 80063e4:	b096      	sub	sp, #88	@ 0x58
 80063e6:	2900      	cmp	r1, #0
 80063e8:	da0c      	bge.n	8006404 <__swhatbuf_r+0x2c>
 80063ea:	89b2      	ldrh	r2, [r6, #12]
 80063ec:	2380      	movs	r3, #128	@ 0x80
 80063ee:	0011      	movs	r1, r2
 80063f0:	4019      	ands	r1, r3
 80063f2:	421a      	tst	r2, r3
 80063f4:	d114      	bne.n	8006420 <__swhatbuf_r+0x48>
 80063f6:	2380      	movs	r3, #128	@ 0x80
 80063f8:	00db      	lsls	r3, r3, #3
 80063fa:	2000      	movs	r0, #0
 80063fc:	6029      	str	r1, [r5, #0]
 80063fe:	6023      	str	r3, [r4, #0]
 8006400:	b016      	add	sp, #88	@ 0x58
 8006402:	bd70      	pop	{r4, r5, r6, pc}
 8006404:	466a      	mov	r2, sp
 8006406:	f000 f853 	bl	80064b0 <_fstat_r>
 800640a:	2800      	cmp	r0, #0
 800640c:	dbed      	blt.n	80063ea <__swhatbuf_r+0x12>
 800640e:	23f0      	movs	r3, #240	@ 0xf0
 8006410:	9901      	ldr	r1, [sp, #4]
 8006412:	021b      	lsls	r3, r3, #8
 8006414:	4019      	ands	r1, r3
 8006416:	4b04      	ldr	r3, [pc, #16]	@ (8006428 <__swhatbuf_r+0x50>)
 8006418:	18c9      	adds	r1, r1, r3
 800641a:	424b      	negs	r3, r1
 800641c:	4159      	adcs	r1, r3
 800641e:	e7ea      	b.n	80063f6 <__swhatbuf_r+0x1e>
 8006420:	2100      	movs	r1, #0
 8006422:	2340      	movs	r3, #64	@ 0x40
 8006424:	e7e9      	b.n	80063fa <__swhatbuf_r+0x22>
 8006426:	46c0      	nop			@ (mov r8, r8)
 8006428:	ffffe000 	.word	0xffffe000

0800642c <__smakebuf_r>:
 800642c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800642e:	2602      	movs	r6, #2
 8006430:	898b      	ldrh	r3, [r1, #12]
 8006432:	0005      	movs	r5, r0
 8006434:	000c      	movs	r4, r1
 8006436:	b085      	sub	sp, #20
 8006438:	4233      	tst	r3, r6
 800643a:	d007      	beq.n	800644c <__smakebuf_r+0x20>
 800643c:	0023      	movs	r3, r4
 800643e:	3347      	adds	r3, #71	@ 0x47
 8006440:	6023      	str	r3, [r4, #0]
 8006442:	6123      	str	r3, [r4, #16]
 8006444:	2301      	movs	r3, #1
 8006446:	6163      	str	r3, [r4, #20]
 8006448:	b005      	add	sp, #20
 800644a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800644c:	ab03      	add	r3, sp, #12
 800644e:	aa02      	add	r2, sp, #8
 8006450:	f7ff ffc2 	bl	80063d8 <__swhatbuf_r>
 8006454:	9f02      	ldr	r7, [sp, #8]
 8006456:	9001      	str	r0, [sp, #4]
 8006458:	0039      	movs	r1, r7
 800645a:	0028      	movs	r0, r5
 800645c:	f7ff fafa 	bl	8005a54 <_malloc_r>
 8006460:	2800      	cmp	r0, #0
 8006462:	d108      	bne.n	8006476 <__smakebuf_r+0x4a>
 8006464:	220c      	movs	r2, #12
 8006466:	5ea3      	ldrsh	r3, [r4, r2]
 8006468:	059a      	lsls	r2, r3, #22
 800646a:	d4ed      	bmi.n	8006448 <__smakebuf_r+0x1c>
 800646c:	2203      	movs	r2, #3
 800646e:	4393      	bics	r3, r2
 8006470:	431e      	orrs	r6, r3
 8006472:	81a6      	strh	r6, [r4, #12]
 8006474:	e7e2      	b.n	800643c <__smakebuf_r+0x10>
 8006476:	2380      	movs	r3, #128	@ 0x80
 8006478:	89a2      	ldrh	r2, [r4, #12]
 800647a:	6020      	str	r0, [r4, #0]
 800647c:	4313      	orrs	r3, r2
 800647e:	81a3      	strh	r3, [r4, #12]
 8006480:	9b03      	ldr	r3, [sp, #12]
 8006482:	6120      	str	r0, [r4, #16]
 8006484:	6167      	str	r7, [r4, #20]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00c      	beq.n	80064a4 <__smakebuf_r+0x78>
 800648a:	0028      	movs	r0, r5
 800648c:	230e      	movs	r3, #14
 800648e:	5ee1      	ldrsh	r1, [r4, r3]
 8006490:	f000 f820 	bl	80064d4 <_isatty_r>
 8006494:	2800      	cmp	r0, #0
 8006496:	d005      	beq.n	80064a4 <__smakebuf_r+0x78>
 8006498:	2303      	movs	r3, #3
 800649a:	89a2      	ldrh	r2, [r4, #12]
 800649c:	439a      	bics	r2, r3
 800649e:	3b02      	subs	r3, #2
 80064a0:	4313      	orrs	r3, r2
 80064a2:	81a3      	strh	r3, [r4, #12]
 80064a4:	89a3      	ldrh	r3, [r4, #12]
 80064a6:	9a01      	ldr	r2, [sp, #4]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	81a3      	strh	r3, [r4, #12]
 80064ac:	e7cc      	b.n	8006448 <__smakebuf_r+0x1c>
	...

080064b0 <_fstat_r>:
 80064b0:	2300      	movs	r3, #0
 80064b2:	b570      	push	{r4, r5, r6, lr}
 80064b4:	4d06      	ldr	r5, [pc, #24]	@ (80064d0 <_fstat_r+0x20>)
 80064b6:	0004      	movs	r4, r0
 80064b8:	0008      	movs	r0, r1
 80064ba:	0011      	movs	r1, r2
 80064bc:	602b      	str	r3, [r5, #0]
 80064be:	f7fa fc7e 	bl	8000dbe <_fstat>
 80064c2:	1c43      	adds	r3, r0, #1
 80064c4:	d103      	bne.n	80064ce <_fstat_r+0x1e>
 80064c6:	682b      	ldr	r3, [r5, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d000      	beq.n	80064ce <_fstat_r+0x1e>
 80064cc:	6023      	str	r3, [r4, #0]
 80064ce:	bd70      	pop	{r4, r5, r6, pc}
 80064d0:	200004d8 	.word	0x200004d8

080064d4 <_isatty_r>:
 80064d4:	2300      	movs	r3, #0
 80064d6:	b570      	push	{r4, r5, r6, lr}
 80064d8:	4d06      	ldr	r5, [pc, #24]	@ (80064f4 <_isatty_r+0x20>)
 80064da:	0004      	movs	r4, r0
 80064dc:	0008      	movs	r0, r1
 80064de:	602b      	str	r3, [r5, #0]
 80064e0:	f7fa fc7b 	bl	8000dda <_isatty>
 80064e4:	1c43      	adds	r3, r0, #1
 80064e6:	d103      	bne.n	80064f0 <_isatty_r+0x1c>
 80064e8:	682b      	ldr	r3, [r5, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d000      	beq.n	80064f0 <_isatty_r+0x1c>
 80064ee:	6023      	str	r3, [r4, #0]
 80064f0:	bd70      	pop	{r4, r5, r6, pc}
 80064f2:	46c0      	nop			@ (mov r8, r8)
 80064f4:	200004d8 	.word	0x200004d8

080064f8 <_init>:
 80064f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064fa:	46c0      	nop			@ (mov r8, r8)
 80064fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064fe:	bc08      	pop	{r3}
 8006500:	469e      	mov	lr, r3
 8006502:	4770      	bx	lr

08006504 <_fini>:
 8006504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006506:	46c0      	nop			@ (mov r8, r8)
 8006508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800650a:	bc08      	pop	{r3}
 800650c:	469e      	mov	lr, r3
 800650e:	4770      	bx	lr
