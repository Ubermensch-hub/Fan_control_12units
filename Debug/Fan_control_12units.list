
Fan_control_12units.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005684  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08005740  08005740  00006740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005944  08005944  00007080  2**0
                  CONTENTS
  4 .ARM          00000000  08005944  08005944  00007080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005944  08005944  00007080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005944  08005944  00006944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005948  08005948  00006948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800594c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  20000080  080059cc  00007080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  080059cc  000073ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c015  00000000  00000000  000070a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002311  00000000  00000000  000130bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  000153d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a0a  00000000  00000000  000160e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0cf  00000000  00000000  00016af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010745  00000000  00000000  00030bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3c06  00000000  00000000  00041306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4f0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003544  00000000  00000000  000e4f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000e8494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000080 	.word	0x20000080
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005728 	.word	0x08005728

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000084 	.word	0x20000084
 8000100:	08005728 	.word	0x08005728

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_f2iz>:
 8000230:	0241      	lsls	r1, r0, #9
 8000232:	0042      	lsls	r2, r0, #1
 8000234:	0fc3      	lsrs	r3, r0, #31
 8000236:	0a49      	lsrs	r1, r1, #9
 8000238:	2000      	movs	r0, #0
 800023a:	0e12      	lsrs	r2, r2, #24
 800023c:	2a7e      	cmp	r2, #126	@ 0x7e
 800023e:	dd03      	ble.n	8000248 <__aeabi_f2iz+0x18>
 8000240:	2a9d      	cmp	r2, #157	@ 0x9d
 8000242:	dd02      	ble.n	800024a <__aeabi_f2iz+0x1a>
 8000244:	4a09      	ldr	r2, [pc, #36]	@ (800026c <__aeabi_f2iz+0x3c>)
 8000246:	1898      	adds	r0, r3, r2
 8000248:	4770      	bx	lr
 800024a:	2080      	movs	r0, #128	@ 0x80
 800024c:	0400      	lsls	r0, r0, #16
 800024e:	4301      	orrs	r1, r0
 8000250:	2a95      	cmp	r2, #149	@ 0x95
 8000252:	dc07      	bgt.n	8000264 <__aeabi_f2iz+0x34>
 8000254:	2096      	movs	r0, #150	@ 0x96
 8000256:	1a82      	subs	r2, r0, r2
 8000258:	40d1      	lsrs	r1, r2
 800025a:	4248      	negs	r0, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d1f3      	bne.n	8000248 <__aeabi_f2iz+0x18>
 8000260:	0008      	movs	r0, r1
 8000262:	e7f1      	b.n	8000248 <__aeabi_f2iz+0x18>
 8000264:	3a96      	subs	r2, #150	@ 0x96
 8000266:	4091      	lsls	r1, r2
 8000268:	e7f7      	b.n	800025a <__aeabi_f2iz+0x2a>
 800026a:	46c0      	nop			@ (mov r8, r8)
 800026c:	7fffffff 	.word	0x7fffffff

08000270 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000270:	b590      	push	{r4, r7, lr}
 8000272:	b08b      	sub	sp, #44	@ 0x2c
 8000274:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000276:	2414      	movs	r4, #20
 8000278:	193b      	adds	r3, r7, r4
 800027a:	0018      	movs	r0, r3
 800027c:	2314      	movs	r3, #20
 800027e:	001a      	movs	r2, r3
 8000280:	2100      	movs	r1, #0
 8000282:	f004 fc0f 	bl	8004aa4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000286:	4b6b      	ldr	r3, [pc, #428]	@ (8000434 <MX_GPIO_Init+0x1c4>)
 8000288:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800028a:	4b6a      	ldr	r3, [pc, #424]	@ (8000434 <MX_GPIO_Init+0x1c4>)
 800028c:	2104      	movs	r1, #4
 800028e:	430a      	orrs	r2, r1
 8000290:	635a      	str	r2, [r3, #52]	@ 0x34
 8000292:	4b68      	ldr	r3, [pc, #416]	@ (8000434 <MX_GPIO_Init+0x1c4>)
 8000294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000296:	2204      	movs	r2, #4
 8000298:	4013      	ands	r3, r2
 800029a:	613b      	str	r3, [r7, #16]
 800029c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800029e:	4b65      	ldr	r3, [pc, #404]	@ (8000434 <MX_GPIO_Init+0x1c4>)
 80002a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80002a2:	4b64      	ldr	r3, [pc, #400]	@ (8000434 <MX_GPIO_Init+0x1c4>)
 80002a4:	2120      	movs	r1, #32
 80002a6:	430a      	orrs	r2, r1
 80002a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80002aa:	4b62      	ldr	r3, [pc, #392]	@ (8000434 <MX_GPIO_Init+0x1c4>)
 80002ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80002ae:	2220      	movs	r2, #32
 80002b0:	4013      	ands	r3, r2
 80002b2:	60fb      	str	r3, [r7, #12]
 80002b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b6:	4b5f      	ldr	r3, [pc, #380]	@ (8000434 <MX_GPIO_Init+0x1c4>)
 80002b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80002ba:	4b5e      	ldr	r3, [pc, #376]	@ (8000434 <MX_GPIO_Init+0x1c4>)
 80002bc:	2101      	movs	r1, #1
 80002be:	430a      	orrs	r2, r1
 80002c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80002c2:	4b5c      	ldr	r3, [pc, #368]	@ (8000434 <MX_GPIO_Init+0x1c4>)
 80002c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80002c6:	2201      	movs	r2, #1
 80002c8:	4013      	ands	r3, r2
 80002ca:	60bb      	str	r3, [r7, #8]
 80002cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ce:	4b59      	ldr	r3, [pc, #356]	@ (8000434 <MX_GPIO_Init+0x1c4>)
 80002d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80002d2:	4b58      	ldr	r3, [pc, #352]	@ (8000434 <MX_GPIO_Init+0x1c4>)
 80002d4:	2102      	movs	r1, #2
 80002d6:	430a      	orrs	r2, r1
 80002d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80002da:	4b56      	ldr	r3, [pc, #344]	@ (8000434 <MX_GPIO_Init+0x1c4>)
 80002dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80002de:	2202      	movs	r2, #2
 80002e0:	4013      	ands	r3, r2
 80002e2:	607b      	str	r3, [r7, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002e6:	4b53      	ldr	r3, [pc, #332]	@ (8000434 <MX_GPIO_Init+0x1c4>)
 80002e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80002ea:	4b52      	ldr	r3, [pc, #328]	@ (8000434 <MX_GPIO_Init+0x1c4>)
 80002ec:	2108      	movs	r1, #8
 80002ee:	430a      	orrs	r2, r1
 80002f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80002f2:	4b50      	ldr	r3, [pc, #320]	@ (8000434 <MX_GPIO_Init+0x1c4>)
 80002f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80002f6:	2208      	movs	r2, #8
 80002f8:	4013      	ands	r3, r2
 80002fa:	603b      	str	r3, [r7, #0]
 80002fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MC_Tach_OUT_0_Pin|MC_Tach_OUT_1_Pin|MC_Tach_OUT_2_Pin|MC_Tach_OUT_3_Pin
 80002fe:	23fc      	movs	r3, #252	@ 0xfc
 8000300:	021b      	lsls	r3, r3, #8
 8000302:	484d      	ldr	r0, [pc, #308]	@ (8000438 <MX_GPIO_Init+0x1c8>)
 8000304:	2200      	movs	r2, #0
 8000306:	0019      	movs	r1, r3
 8000308:	f001 fdb2 	bl	8001e70 <HAL_GPIO_WritePin>
                          |MC_Tach_OUT_4_Pin|MC_Tach_OUT_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FAN_Tach_IN_11_Pin|FAN_Tach_IN_0_Pin|FAN_Tach_IN_1_Pin|FAN_Tach_IN_2_Pin
 800030c:	193b      	adds	r3, r7, r4
 800030e:	4a4b      	ldr	r2, [pc, #300]	@ (800043c <MX_GPIO_Init+0x1cc>)
 8000310:	601a      	str	r2, [r3, #0]
                          |FAN_Tach_IN_3_Pin|FAN_Tach_IN_4_Pin|FAN_Tach_IN_5_Pin|FAN_Tach_IN_6_Pin
                          |FAN_Tach_IN_7_Pin|FAN_Tach_IN_8_Pin|FAN_Tach_IN_9_Pin|FAN_Tach_IN_10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000312:	193b      	adds	r3, r7, r4
 8000314:	2288      	movs	r2, #136	@ 0x88
 8000316:	0352      	lsls	r2, r2, #13
 8000318:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800031a:	193b      	adds	r3, r7, r4
 800031c:	2201      	movs	r2, #1
 800031e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000320:	193b      	adds	r3, r7, r4
 8000322:	4a47      	ldr	r2, [pc, #284]	@ (8000440 <MX_GPIO_Init+0x1d0>)
 8000324:	0019      	movs	r1, r3
 8000326:	0010      	movs	r0, r2
 8000328:	f001 fc3e 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800032c:	0021      	movs	r1, r4
 800032e:	193b      	adds	r3, r7, r4
 8000330:	22f0      	movs	r2, #240	@ 0xf0
 8000332:	0212      	lsls	r2, r2, #8
 8000334:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000336:	000c      	movs	r4, r1
 8000338:	193b      	adds	r3, r7, r4
 800033a:	2203      	movs	r2, #3
 800033c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033e:	193b      	adds	r3, r7, r4
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000344:	193b      	adds	r3, r7, r4
 8000346:	4a3e      	ldr	r2, [pc, #248]	@ (8000440 <MX_GPIO_Init+0x1d0>)
 8000348:	0019      	movs	r1, r3
 800034a:	0010      	movs	r0, r2
 800034c:	f001 fc2c 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000350:	193b      	adds	r3, r7, r4
 8000352:	2207      	movs	r2, #7
 8000354:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000356:	193b      	adds	r3, r7, r4
 8000358:	2203      	movs	r2, #3
 800035a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035c:	193b      	adds	r3, r7, r4
 800035e:	2200      	movs	r2, #0
 8000360:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000362:	193b      	adds	r3, r7, r4
 8000364:	4a37      	ldr	r2, [pc, #220]	@ (8000444 <MX_GPIO_Init+0x1d4>)
 8000366:	0019      	movs	r1, r3
 8000368:	0010      	movs	r0, r2
 800036a:	f001 fc1d 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA9 PA10
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_10
 800036e:	193b      	adds	r3, r7, r4
 8000370:	4a35      	ldr	r2, [pc, #212]	@ (8000448 <MX_GPIO_Init+0x1d8>)
 8000372:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000374:	193b      	adds	r3, r7, r4
 8000376:	2203      	movs	r2, #3
 8000378:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037a:	193b      	adds	r3, r7, r4
 800037c:	2200      	movs	r2, #0
 800037e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000380:	193a      	adds	r2, r7, r4
 8000382:	23a0      	movs	r3, #160	@ 0xa0
 8000384:	05db      	lsls	r3, r3, #23
 8000386:	0011      	movs	r1, r2
 8000388:	0018      	movs	r0, r3
 800038a:	f001 fc0d 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB4 PB5 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7
 800038e:	0021      	movs	r1, r4
 8000390:	187b      	adds	r3, r7, r1
 8000392:	22ed      	movs	r2, #237	@ 0xed
 8000394:	0092      	lsls	r2, r2, #2
 8000396:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000398:	000c      	movs	r4, r1
 800039a:	193b      	adds	r3, r7, r4
 800039c:	2203      	movs	r2, #3
 800039e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a0:	193b      	adds	r3, r7, r4
 80003a2:	2200      	movs	r2, #0
 80003a4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003a6:	193b      	adds	r3, r7, r4
 80003a8:	4a23      	ldr	r2, [pc, #140]	@ (8000438 <MX_GPIO_Init+0x1c8>)
 80003aa:	0019      	movs	r1, r3
 80003ac:	0010      	movs	r0, r2
 80003ae:	f001 fbfb 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = MC_Tach_OUT_0_Pin|MC_Tach_OUT_1_Pin|MC_Tach_OUT_2_Pin|MC_Tach_OUT_3_Pin
 80003b2:	0021      	movs	r1, r4
 80003b4:	187b      	adds	r3, r7, r1
 80003b6:	22fc      	movs	r2, #252	@ 0xfc
 80003b8:	0212      	lsls	r2, r2, #8
 80003ba:	601a      	str	r2, [r3, #0]
                          |MC_Tach_OUT_4_Pin|MC_Tach_OUT_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003bc:	000c      	movs	r4, r1
 80003be:	193b      	adds	r3, r7, r4
 80003c0:	2201      	movs	r2, #1
 80003c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c4:	193b      	adds	r3, r7, r4
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003ca:	193b      	adds	r3, r7, r4
 80003cc:	2202      	movs	r2, #2
 80003ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003d0:	193b      	adds	r3, r7, r4
 80003d2:	4a19      	ldr	r2, [pc, #100]	@ (8000438 <MX_GPIO_Init+0x1c8>)
 80003d4:	0019      	movs	r1, r3
 80003d6:	0010      	movs	r0, r2
 80003d8:	f001 fbe6 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 PD1
                           PD2 PD3 PD4 PD5
                           PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1
 80003dc:	0021      	movs	r1, r4
 80003de:	187b      	adds	r3, r7, r1
 80003e0:	4a1a      	ldr	r2, [pc, #104]	@ (800044c <MX_GPIO_Init+0x1dc>)
 80003e2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	2203      	movs	r2, #3
 80003e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ea:	187b      	adds	r3, r7, r1
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003f0:	187b      	adds	r3, r7, r1
 80003f2:	4a17      	ldr	r2, [pc, #92]	@ (8000450 <MX_GPIO_Init+0x1e0>)
 80003f4:	0019      	movs	r1, r3
 80003f6:	0010      	movs	r0, r2
 80003f8:	f001 fbd6 	bl	8001ba8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2100      	movs	r1, #0
 8000400:	2005      	movs	r0, #5
 8000402:	f001 fb9f 	bl	8001b44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000406:	2005      	movs	r0, #5
 8000408:	f001 fbb1 	bl	8001b6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800040c:	2200      	movs	r2, #0
 800040e:	2100      	movs	r1, #0
 8000410:	2006      	movs	r0, #6
 8000412:	f001 fb97 	bl	8001b44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000416:	2006      	movs	r0, #6
 8000418:	f001 fba9 	bl	8001b6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800041c:	2200      	movs	r2, #0
 800041e:	2100      	movs	r1, #0
 8000420:	2007      	movs	r0, #7
 8000422:	f001 fb8f 	bl	8001b44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000426:	2007      	movs	r0, #7
 8000428:	f001 fba1 	bl	8001b6e <HAL_NVIC_EnableIRQ>

}
 800042c:	46c0      	nop			@ (mov r8, r8)
 800042e:	46bd      	mov	sp, r7
 8000430:	b00b      	add	sp, #44	@ 0x2c
 8000432:	bd90      	pop	{r4, r7, pc}
 8000434:	40021000 	.word	0x40021000
 8000438:	50000400 	.word	0x50000400
 800043c:	00000fff 	.word	0x00000fff
 8000440:	50000800 	.word	0x50000800
 8000444:	50001400 	.word	0x50001400
 8000448:	00009630 	.word	0x00009630
 800044c:	0000037f 	.word	0x0000037f
 8000450:	50000c00 	.word	0x50000c00

08000454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000458:	f001 fa1e 	bl	8001898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045c:	f000 f862 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000460:	f7ff ff06 	bl	8000270 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000464:	f000 fc16 	bl	8000c94 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000468:	f000 fa4a 	bl	8000900 <MX_TIM1_Init>
  MX_RTC_Init();
 800046c:	f000 f8c2 	bl	80005f4 <MX_RTC_Init>
  MX_TIM2_Init();
 8000470:	f000 fb4a 	bl	8000b08 <MX_TIM2_Init>
  MX_TIM16_Init();
 8000474:	f000 fca8 	bl	8000dc8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // запуск PWM на необходимых каналах таймеров
 8000478:	4b26      	ldr	r3, [pc, #152]	@ (8000514 <main+0xc0>)
 800047a:	2100      	movs	r1, #0
 800047c:	0018      	movs	r0, r3
 800047e:	f002 fe55 	bl	800312c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000482:	4b24      	ldr	r3, [pc, #144]	@ (8000514 <main+0xc0>)
 8000484:	2104      	movs	r1, #4
 8000486:	0018      	movs	r0, r3
 8000488:	f002 fe50 	bl	800312c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800048c:	4b21      	ldr	r3, [pc, #132]	@ (8000514 <main+0xc0>)
 800048e:	2108      	movs	r1, #8
 8000490:	0018      	movs	r0, r3
 8000492:	f002 fe4b 	bl	800312c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000496:	4b1f      	ldr	r3, [pc, #124]	@ (8000514 <main+0xc0>)
 8000498:	210c      	movs	r1, #12
 800049a:	0018      	movs	r0, r3
 800049c:	f002 fe46 	bl	800312c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80004a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000518 <main+0xc4>)
 80004a2:	2108      	movs	r1, #8
 80004a4:	0018      	movs	r0, r3
 80004a6:	f002 fe41 	bl	800312c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80004aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000518 <main+0xc4>)
 80004ac:	210c      	movs	r1, #12
 80004ae:	0018      	movs	r0, r3
 80004b0:	f002 fe3c 	bl	800312c <HAL_TIM_PWM_Start>

  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80004b4:	200f      	movs	r0, #15
 80004b6:	f001 fb5a 	bl	8001b6e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80004ba:	2010      	movs	r0, #16
 80004bc:	f001 fb57 	bl	8001b6e <HAL_NVIC_EnableIRQ>

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80004c0:	4b15      	ldr	r3, [pc, #84]	@ (8000518 <main+0xc4>)
 80004c2:	2100      	movs	r1, #0
 80004c4:	0018      	movs	r0, r3
 80004c6:	f002 ff7b 	bl	80033c0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80004ca:	4b13      	ldr	r3, [pc, #76]	@ (8000518 <main+0xc4>)
 80004cc:	2104      	movs	r1, #4
 80004ce:	0018      	movs	r0, r3
 80004d0:	f002 ff76 	bl	80033c0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80004d4:	4b11      	ldr	r3, [pc, #68]	@ (800051c <main+0xc8>)
 80004d6:	2100      	movs	r1, #0
 80004d8:	0018      	movs	r0, r3
 80004da:	f002 ff71 	bl	80033c0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80004de:	4b0f      	ldr	r3, [pc, #60]	@ (800051c <main+0xc8>)
 80004e0:	2104      	movs	r1, #4
 80004e2:	0018      	movs	r0, r3
 80004e4:	f002 ff6c 	bl	80033c0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 80004e8:	4b0c      	ldr	r3, [pc, #48]	@ (800051c <main+0xc8>)
 80004ea:	2108      	movs	r1, #8
 80004ec:	0018      	movs	r0, r3
 80004ee:	f002 ff67 	bl	80033c0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 80004f2:	4b0a      	ldr	r3, [pc, #40]	@ (800051c <main+0xc8>)
 80004f4:	210c      	movs	r1, #12
 80004f6:	0018      	movs	r0, r3
 80004f8:	f002 ff62 	bl	80033c0 <HAL_TIM_IC_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  set_PWM(count_connected_devices);
 80004fc:	4b08      	ldr	r3, [pc, #32]	@ (8000520 <main+0xcc>)
 80004fe:	0018      	movs	r0, r3
 8000500:	f000 feca 	bl	8001298 <set_PWM>
	  adjust_PWM();
 8000504:	f000 fe54 	bl	80011b0 <adjust_PWM>

	  HAL_Delay(10);
 8000508:	200a      	movs	r0, #10
 800050a:	f001 fa4b 	bl	80019a4 <HAL_Delay>
	  set_PWM(count_connected_devices);
 800050e:	46c0      	nop			@ (mov r8, r8)
 8000510:	e7f4      	b.n	80004fc <main+0xa8>
 8000512:	46c0      	nop			@ (mov r8, r8)
 8000514:	2000012c 	.word	0x2000012c
 8000518:	20000178 	.word	0x20000178
 800051c:	200001c4 	.word	0x200001c4
 8000520:	08001219 	.word	0x08001219

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b590      	push	{r4, r7, lr}
 8000526:	b093      	sub	sp, #76	@ 0x4c
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	2410      	movs	r4, #16
 800052c:	193b      	adds	r3, r7, r4
 800052e:	0018      	movs	r0, r3
 8000530:	2338      	movs	r3, #56	@ 0x38
 8000532:	001a      	movs	r2, r3
 8000534:	2100      	movs	r1, #0
 8000536:	f004 fab5 	bl	8004aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053a:	003b      	movs	r3, r7
 800053c:	0018      	movs	r0, r3
 800053e:	2310      	movs	r3, #16
 8000540:	001a      	movs	r2, r3
 8000542:	2100      	movs	r1, #0
 8000544:	f004 faae 	bl	8004aa4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2380      	movs	r3, #128	@ 0x80
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	0018      	movs	r0, r3
 800054e:	f001 fceb 	bl	8001f28 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000552:	193b      	adds	r3, r7, r4
 8000554:	220a      	movs	r2, #10
 8000556:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000558:	193b      	adds	r3, r7, r4
 800055a:	2280      	movs	r2, #128	@ 0x80
 800055c:	0052      	lsls	r2, r2, #1
 800055e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000560:	0021      	movs	r1, r4
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2240      	movs	r2, #64	@ 0x40
 800056c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2201      	movs	r2, #1
 8000572:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2202      	movs	r2, #2
 8000578:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2202      	movs	r2, #2
 800057e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2200      	movs	r2, #0
 8000584:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2208      	movs	r2, #8
 800058a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2280      	movs	r2, #128	@ 0x80
 8000590:	0292      	lsls	r2, r2, #10
 8000592:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	22c0      	movs	r2, #192	@ 0xc0
 8000598:	04d2      	lsls	r2, r2, #19
 800059a:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2280      	movs	r2, #128	@ 0x80
 80005a0:	0592      	lsls	r2, r2, #22
 80005a2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	0018      	movs	r0, r3
 80005a8:	f001 fcfe 	bl	8001fa8 <HAL_RCC_OscConfig>
 80005ac:	1e03      	subs	r3, r0, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005b0:	f000 f819 	bl	80005e6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	003b      	movs	r3, r7
 80005b6:	2207      	movs	r2, #7
 80005b8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ba:	003b      	movs	r3, r7
 80005bc:	2202      	movs	r2, #2
 80005be:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	003b      	movs	r3, r7
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c6:	003b      	movs	r3, r7
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005cc:	003b      	movs	r3, r7
 80005ce:	2102      	movs	r1, #2
 80005d0:	0018      	movs	r0, r3
 80005d2:	f002 f803 	bl	80025dc <HAL_RCC_ClockConfig>
 80005d6:	1e03      	subs	r3, r0, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xba>
  {
    Error_Handler();
 80005da:	f000 f804 	bl	80005e6 <Error_Handler>
  }
}
 80005de:	46c0      	nop			@ (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b013      	add	sp, #76	@ 0x4c
 80005e4:	bd90      	pop	{r4, r7, pc}

080005e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ea:	b672      	cpsid	i
}
 80005ec:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */

  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ee:	46c0      	nop			@ (mov r8, r8)
 80005f0:	e7fd      	b.n	80005ee <Error_Handler+0x8>
	...

080005f4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005f8:	4b13      	ldr	r3, [pc, #76]	@ (8000648 <MX_RTC_Init+0x54>)
 80005fa:	4a14      	ldr	r2, [pc, #80]	@ (800064c <MX_RTC_Init+0x58>)
 80005fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80005fe:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <MX_RTC_Init+0x54>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000604:	4b10      	ldr	r3, [pc, #64]	@ (8000648 <MX_RTC_Init+0x54>)
 8000606:	227f      	movs	r2, #127	@ 0x7f
 8000608:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800060a:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <MX_RTC_Init+0x54>)
 800060c:	22ff      	movs	r2, #255	@ 0xff
 800060e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000610:	4b0d      	ldr	r3, [pc, #52]	@ (8000648 <MX_RTC_Init+0x54>)
 8000612:	2200      	movs	r2, #0
 8000614:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000616:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <MX_RTC_Init+0x54>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800061c:	4b0a      	ldr	r3, [pc, #40]	@ (8000648 <MX_RTC_Init+0x54>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000622:	4b09      	ldr	r3, [pc, #36]	@ (8000648 <MX_RTC_Init+0x54>)
 8000624:	2280      	movs	r2, #128	@ 0x80
 8000626:	05d2      	lsls	r2, r2, #23
 8000628:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800062a:	4b07      	ldr	r3, [pc, #28]	@ (8000648 <MX_RTC_Init+0x54>)
 800062c:	2200      	movs	r2, #0
 800062e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000630:	4b05      	ldr	r3, [pc, #20]	@ (8000648 <MX_RTC_Init+0x54>)
 8000632:	0018      	movs	r0, r3
 8000634:	f002 fb14 	bl	8002c60 <HAL_RTC_Init>
 8000638:	1e03      	subs	r3, r0, #0
 800063a:	d001      	beq.n	8000640 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 800063c:	f7ff ffd3 	bl	80005e6 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000640:	46c0      	nop			@ (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	46c0      	nop			@ (mov r8, r8)
 8000648:	2000009c 	.word	0x2000009c
 800064c:	40002800 	.word	0x40002800

08000650 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000650:	b590      	push	{r4, r7, lr}
 8000652:	b091      	sub	sp, #68	@ 0x44
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000658:	240c      	movs	r4, #12
 800065a:	193b      	adds	r3, r7, r4
 800065c:	0018      	movs	r0, r3
 800065e:	2334      	movs	r3, #52	@ 0x34
 8000660:	001a      	movs	r2, r3
 8000662:	2100      	movs	r1, #0
 8000664:	f004 fa1e 	bl	8004aa4 <memset>
  if(rtcHandle->Instance==RTC)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a15      	ldr	r2, [pc, #84]	@ (80006c4 <HAL_RTC_MspInit+0x74>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d124      	bne.n	80006bc <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000672:	193b      	adds	r3, r7, r4
 8000674:	2280      	movs	r2, #128	@ 0x80
 8000676:	0292      	lsls	r2, r2, #10
 8000678:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800067a:	193b      	adds	r3, r7, r4
 800067c:	2280      	movs	r2, #128	@ 0x80
 800067e:	0092      	lsls	r2, r2, #2
 8000680:	631a      	str	r2, [r3, #48]	@ 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000682:	193b      	adds	r3, r7, r4
 8000684:	0018      	movs	r0, r3
 8000686:	f002 f933 	bl	80028f0 <HAL_RCCEx_PeriphCLKConfig>
 800068a:	1e03      	subs	r3, r0, #0
 800068c:	d001      	beq.n	8000692 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800068e:	f7ff ffaa 	bl	80005e6 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000692:	4b0d      	ldr	r3, [pc, #52]	@ (80006c8 <HAL_RTC_MspInit+0x78>)
 8000694:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000696:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <HAL_RTC_MspInit+0x78>)
 8000698:	2180      	movs	r1, #128	@ 0x80
 800069a:	0209      	lsls	r1, r1, #8
 800069c:	430a      	orrs	r2, r1
 800069e:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80006a0:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <HAL_RTC_MspInit+0x78>)
 80006a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006a4:	4b08      	ldr	r3, [pc, #32]	@ (80006c8 <HAL_RTC_MspInit+0x78>)
 80006a6:	2180      	movs	r1, #128	@ 0x80
 80006a8:	00c9      	lsls	r1, r1, #3
 80006aa:	430a      	orrs	r2, r1
 80006ac:	63da      	str	r2, [r3, #60]	@ 0x3c
 80006ae:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <HAL_RTC_MspInit+0x78>)
 80006b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006b2:	2380      	movs	r3, #128	@ 0x80
 80006b4:	00db      	lsls	r3, r3, #3
 80006b6:	4013      	ands	r3, r2
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80006bc:	46c0      	nop			@ (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	b011      	add	sp, #68	@ 0x44
 80006c2:	bd90      	pop	{r4, r7, pc}
 80006c4:	40002800 	.word	0x40002800
 80006c8:	40021000 	.word	0x40021000

080006cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <HAL_MspInit+0x44>)
 80006d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <HAL_MspInit+0x44>)
 80006d8:	2101      	movs	r1, #1
 80006da:	430a      	orrs	r2, r1
 80006dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80006de:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <HAL_MspInit+0x44>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e2:	2201      	movs	r2, #1
 80006e4:	4013      	ands	r3, r2
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ea:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <HAL_MspInit+0x44>)
 80006ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006ee:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <HAL_MspInit+0x44>)
 80006f0:	2180      	movs	r1, #128	@ 0x80
 80006f2:	0549      	lsls	r1, r1, #21
 80006f4:	430a      	orrs	r2, r1
 80006f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80006f8:	4b05      	ldr	r3, [pc, #20]	@ (8000710 <HAL_MspInit+0x44>)
 80006fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006fc:	2380      	movs	r3, #128	@ 0x80
 80006fe:	055b      	lsls	r3, r3, #21
 8000700:	4013      	ands	r3, r2
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000706:	46c0      	nop			@ (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	b002      	add	sp, #8
 800070c:	bd80      	pop	{r7, pc}
 800070e:	46c0      	nop			@ (mov r8, r8)
 8000710:	40021000 	.word	0x40021000

08000714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000718:	46c0      	nop			@ (mov r8, r8)
 800071a:	e7fd      	b.n	8000718 <NMI_Handler+0x4>

0800071c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000720:	46c0      	nop			@ (mov r8, r8)
 8000722:	e7fd      	b.n	8000720 <HardFault_Handler+0x4>

08000724 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000728:	46c0      	nop			@ (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000732:	46c0      	nop			@ (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800073c:	f001 f916 	bl	800196c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000740:	46c0      	nop			@ (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FAN_Tach_IN_0_Pin);
 800074a:	2001      	movs	r0, #1
 800074c:	f001 fbae 	bl	8001eac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(FAN_Tach_IN_1_Pin);
 8000750:	2002      	movs	r0, #2
 8000752:	f001 fbab 	bl	8001eac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000756:	46c0      	nop			@ (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FAN_Tach_IN_2_Pin);
 8000760:	2004      	movs	r0, #4
 8000762:	f001 fba3 	bl	8001eac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(FAN_Tach_IN_3_Pin);
 8000766:	2008      	movs	r0, #8
 8000768:	f001 fba0 	bl	8001eac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800076c:	46c0      	nop			@ (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FAN_Tach_IN_4_Pin);
 8000776:	2010      	movs	r0, #16
 8000778:	f001 fb98 	bl	8001eac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(FAN_Tach_IN_5_Pin);
 800077c:	2020      	movs	r0, #32
 800077e:	f001 fb95 	bl	8001eac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(FAN_Tach_IN_6_Pin);
 8000782:	2040      	movs	r0, #64	@ 0x40
 8000784:	f001 fb92 	bl	8001eac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(FAN_Tach_IN_7_Pin);
 8000788:	2080      	movs	r0, #128	@ 0x80
 800078a:	f001 fb8f 	bl	8001eac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(FAN_Tach_IN_8_Pin);
 800078e:	2380      	movs	r3, #128	@ 0x80
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	0018      	movs	r0, r3
 8000794:	f001 fb8a 	bl	8001eac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(FAN_Tach_IN_9_Pin);
 8000798:	2380      	movs	r3, #128	@ 0x80
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	0018      	movs	r0, r3
 800079e:	f001 fb85 	bl	8001eac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(FAN_Tach_IN_10_Pin);
 80007a2:	2380      	movs	r3, #128	@ 0x80
 80007a4:	00db      	lsls	r3, r3, #3
 80007a6:	0018      	movs	r0, r3
 80007a8:	f001 fb80 	bl	8001eac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(FAN_Tach_IN_11_Pin);
 80007ac:	2380      	movs	r3, #128	@ 0x80
 80007ae:	011b      	lsls	r3, r3, #4
 80007b0:	0018      	movs	r0, r3
 80007b2:	f001 fb7b 	bl	8001eac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	e00a      	b.n	80007e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007ce:	e000      	b.n	80007d2 <_read+0x16>
 80007d0:	bf00      	nop
 80007d2:	0001      	movs	r1, r0
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	1c5a      	adds	r2, r3, #1
 80007d8:	60ba      	str	r2, [r7, #8]
 80007da:	b2ca      	uxtb	r2, r1
 80007dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	3301      	adds	r3, #1
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697a      	ldr	r2, [r7, #20]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	dbf0      	blt.n	80007ce <_read+0x12>
  }

  return len;
 80007ec:	687b      	ldr	r3, [r7, #4]
}
 80007ee:	0018      	movs	r0, r3
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b006      	add	sp, #24
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b086      	sub	sp, #24
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	60f8      	str	r0, [r7, #12]
 80007fe:	60b9      	str	r1, [r7, #8]
 8000800:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	e009      	b.n	800081c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	1c5a      	adds	r2, r3, #1
 800080c:	60ba      	str	r2, [r7, #8]
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	0018      	movs	r0, r3
 8000812:	e000      	b.n	8000816 <_write+0x20>
 8000814:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	3301      	adds	r3, #1
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	697a      	ldr	r2, [r7, #20]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	429a      	cmp	r2, r3
 8000822:	dbf1      	blt.n	8000808 <_write+0x12>
  }
  return len;
 8000824:	687b      	ldr	r3, [r7, #4]
}
 8000826:	0018      	movs	r0, r3
 8000828:	46bd      	mov	sp, r7
 800082a:	b006      	add	sp, #24
 800082c:	bd80      	pop	{r7, pc}

0800082e <_close>:

int _close(int file)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000836:	2301      	movs	r3, #1
 8000838:	425b      	negs	r3, r3
}
 800083a:	0018      	movs	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	b002      	add	sp, #8
 8000840:	bd80      	pop	{r7, pc}

08000842 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b082      	sub	sp, #8
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
 800084a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	2280      	movs	r2, #128	@ 0x80
 8000850:	0192      	lsls	r2, r2, #6
 8000852:	605a      	str	r2, [r3, #4]
  return 0;
 8000854:	2300      	movs	r3, #0
}
 8000856:	0018      	movs	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	b002      	add	sp, #8
 800085c:	bd80      	pop	{r7, pc}

0800085e <_isatty>:

int _isatty(int file)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000866:	2301      	movs	r3, #1
}
 8000868:	0018      	movs	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	b002      	add	sp, #8
 800086e:	bd80      	pop	{r7, pc}

08000870 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800087c:	2300      	movs	r3, #0
}
 800087e:	0018      	movs	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	b004      	add	sp, #16
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000890:	4a14      	ldr	r2, [pc, #80]	@ (80008e4 <_sbrk+0x5c>)
 8000892:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <_sbrk+0x60>)
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800089c:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <_sbrk+0x64>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d102      	bne.n	80008aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a4:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <_sbrk+0x64>)
 80008a6:	4a12      	ldr	r2, [pc, #72]	@ (80008f0 <_sbrk+0x68>)
 80008a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008aa:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <_sbrk+0x64>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	18d3      	adds	r3, r2, r3
 80008b2:	693a      	ldr	r2, [r7, #16]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d207      	bcs.n	80008c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008b8:	f004 f94a 	bl	8004b50 <__errno>
 80008bc:	0003      	movs	r3, r0
 80008be:	220c      	movs	r2, #12
 80008c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008c2:	2301      	movs	r3, #1
 80008c4:	425b      	negs	r3, r3
 80008c6:	e009      	b.n	80008dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008c8:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <_sbrk+0x64>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ce:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <_sbrk+0x64>)
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	18d2      	adds	r2, r2, r3
 80008d6:	4b05      	ldr	r3, [pc, #20]	@ (80008ec <_sbrk+0x64>)
 80008d8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80008da:	68fb      	ldr	r3, [r7, #12]
}
 80008dc:	0018      	movs	r0, r3
 80008de:	46bd      	mov	sp, r7
 80008e0:	b006      	add	sp, #24
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20009000 	.word	0x20009000
 80008e8:	00000400 	.word	0x00000400
 80008ec:	200000c8 	.word	0x200000c8
 80008f0:	200003b0 	.word	0x200003b0

080008f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f8:	46c0      	nop			@ (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b09c      	sub	sp, #112	@ 0x70
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000906:	2360      	movs	r3, #96	@ 0x60
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	0018      	movs	r0, r3
 800090c:	2310      	movs	r3, #16
 800090e:	001a      	movs	r2, r3
 8000910:	2100      	movs	r1, #0
 8000912:	f004 f8c7 	bl	8004aa4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000916:	2354      	movs	r3, #84	@ 0x54
 8000918:	18fb      	adds	r3, r7, r3
 800091a:	0018      	movs	r0, r3
 800091c:	230c      	movs	r3, #12
 800091e:	001a      	movs	r2, r3
 8000920:	2100      	movs	r1, #0
 8000922:	f004 f8bf 	bl	8004aa4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000926:	2338      	movs	r3, #56	@ 0x38
 8000928:	18fb      	adds	r3, r7, r3
 800092a:	0018      	movs	r0, r3
 800092c:	231c      	movs	r3, #28
 800092e:	001a      	movs	r2, r3
 8000930:	2100      	movs	r1, #0
 8000932:	f004 f8b7 	bl	8004aa4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	0018      	movs	r0, r3
 800093a:	2334      	movs	r3, #52	@ 0x34
 800093c:	001a      	movs	r2, r3
 800093e:	2100      	movs	r1, #0
 8000940:	f004 f8b0 	bl	8004aa4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000944:	4b6a      	ldr	r3, [pc, #424]	@ (8000af0 <MX_TIM1_Init+0x1f0>)
 8000946:	4a6b      	ldr	r2, [pc, #428]	@ (8000af4 <MX_TIM1_Init+0x1f4>)
 8000948:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 800094a:	4b69      	ldr	r3, [pc, #420]	@ (8000af0 <MX_TIM1_Init+0x1f0>)
 800094c:	2202      	movs	r2, #2
 800094e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000950:	4b67      	ldr	r3, [pc, #412]	@ (8000af0 <MX_TIM1_Init+0x1f0>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 880;
 8000956:	4b66      	ldr	r3, [pc, #408]	@ (8000af0 <MX_TIM1_Init+0x1f0>)
 8000958:	22dc      	movs	r2, #220	@ 0xdc
 800095a:	0092      	lsls	r2, r2, #2
 800095c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095e:	4b64      	ldr	r3, [pc, #400]	@ (8000af0 <MX_TIM1_Init+0x1f0>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000964:	4b62      	ldr	r3, [pc, #392]	@ (8000af0 <MX_TIM1_Init+0x1f0>)
 8000966:	2200      	movs	r2, #0
 8000968:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096a:	4b61      	ldr	r3, [pc, #388]	@ (8000af0 <MX_TIM1_Init+0x1f0>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000970:	4b5f      	ldr	r3, [pc, #380]	@ (8000af0 <MX_TIM1_Init+0x1f0>)
 8000972:	0018      	movs	r0, r3
 8000974:	f002 fac2 	bl	8002efc <HAL_TIM_Base_Init>
 8000978:	1e03      	subs	r3, r0, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 800097c:	f7ff fe33 	bl	80005e6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000980:	2160      	movs	r1, #96	@ 0x60
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2280      	movs	r2, #128	@ 0x80
 8000986:	0152      	lsls	r2, r2, #5
 8000988:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800098a:	187a      	adds	r2, r7, r1
 800098c:	4b58      	ldr	r3, [pc, #352]	@ (8000af0 <MX_TIM1_Init+0x1f0>)
 800098e:	0011      	movs	r1, r2
 8000990:	0018      	movs	r0, r3
 8000992:	f003 f851 	bl	8003a38 <HAL_TIM_ConfigClockSource>
 8000996:	1e03      	subs	r3, r0, #0
 8000998:	d001      	beq.n	800099e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800099a:	f7ff fe24 	bl	80005e6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800099e:	4b54      	ldr	r3, [pc, #336]	@ (8000af0 <MX_TIM1_Init+0x1f0>)
 80009a0:	0018      	movs	r0, r3
 80009a2:	f002 fb63 	bl	800306c <HAL_TIM_PWM_Init>
 80009a6:	1e03      	subs	r3, r0, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 80009aa:	f7ff fe1c 	bl	80005e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ae:	2154      	movs	r1, #84	@ 0x54
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2200      	movs	r2, #0
 80009ba:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009c2:	187a      	adds	r2, r7, r1
 80009c4:	4b4a      	ldr	r3, [pc, #296]	@ (8000af0 <MX_TIM1_Init+0x1f0>)
 80009c6:	0011      	movs	r1, r2
 80009c8:	0018      	movs	r0, r3
 80009ca:	f003 fe41 	bl	8004650 <HAL_TIMEx_MasterConfigSynchronization>
 80009ce:	1e03      	subs	r3, r0, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80009d2:	f7ff fe08 	bl	80005e6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009d6:	2138      	movs	r1, #56	@ 0x38
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	2260      	movs	r2, #96	@ 0x60
 80009dc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = MC_PWM_OUT_3_PW;
 80009de:	4b46      	ldr	r3, [pc, #280]	@ (8000af8 <MX_TIM1_Init+0x1f8>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	001a      	movs	r2, r3
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2200      	movs	r2, #0
 80009fe:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a06:	1879      	adds	r1, r7, r1
 8000a08:	4b39      	ldr	r3, [pc, #228]	@ (8000af0 <MX_TIM1_Init+0x1f0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f002 ff13 	bl	8003838 <HAL_TIM_PWM_ConfigChannel>
 8000a12:	1e03      	subs	r3, r0, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 8000a16:	f7ff fde6 	bl	80005e6 <Error_Handler>
  }
  sConfigOC.Pulse = MC_PWM_OUT_1_PW;
 8000a1a:	4b38      	ldr	r3, [pc, #224]	@ (8000afc <MX_TIM1_Init+0x1fc>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	001a      	movs	r2, r3
 8000a20:	2138      	movs	r1, #56	@ 0x38
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a26:	1879      	adds	r1, r7, r1
 8000a28:	4b31      	ldr	r3, [pc, #196]	@ (8000af0 <MX_TIM1_Init+0x1f0>)
 8000a2a:	2204      	movs	r2, #4
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f002 ff03 	bl	8003838 <HAL_TIM_PWM_ConfigChannel>
 8000a32:	1e03      	subs	r3, r0, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8000a36:	f7ff fdd6 	bl	80005e6 <Error_Handler>
  }
  sConfigOC.Pulse = MC_PWM_OUT_0_PW;
 8000a3a:	4b31      	ldr	r3, [pc, #196]	@ (8000b00 <MX_TIM1_Init+0x200>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	001a      	movs	r2, r3
 8000a40:	2138      	movs	r1, #56	@ 0x38
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a46:	1879      	adds	r1, r7, r1
 8000a48:	4b29      	ldr	r3, [pc, #164]	@ (8000af0 <MX_TIM1_Init+0x1f0>)
 8000a4a:	2208      	movs	r2, #8
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f002 fef3 	bl	8003838 <HAL_TIM_PWM_ConfigChannel>
 8000a52:	1e03      	subs	r3, r0, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000a56:	f7ff fdc6 	bl	80005e6 <Error_Handler>
  }
  sConfigOC.Pulse = MC_PWM_OUT_2_PW;
 8000a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000b04 <MX_TIM1_Init+0x204>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	001a      	movs	r2, r3
 8000a60:	2138      	movs	r1, #56	@ 0x38
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a66:	1879      	adds	r1, r7, r1
 8000a68:	4b21      	ldr	r3, [pc, #132]	@ (8000af0 <MX_TIM1_Init+0x1f0>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f002 fee3 	bl	8003838 <HAL_TIM_PWM_ConfigChannel>
 8000a72:	1e03      	subs	r3, r0, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000a76:	f7ff fdb6 	bl	80005e6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	2200      	movs	r2, #0
 8000a84:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	2280      	movs	r2, #128	@ 0x80
 8000a9c:	0192      	lsls	r2, r2, #6
 8000a9e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	2200      	movs	r2, #0
 8000ab0:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	2280      	movs	r2, #128	@ 0x80
 8000ab6:	0492      	lsls	r2, r2, #18
 8000ab8:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2200      	movs	r2, #0
 8000abe:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000acc:	1d3a      	adds	r2, r7, #4
 8000ace:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <MX_TIM1_Init+0x1f0>)
 8000ad0:	0011      	movs	r1, r2
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f003 fe2a 	bl	800472c <HAL_TIMEx_ConfigBreakDeadTime>
 8000ad8:	1e03      	subs	r3, r0, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM1_Init+0x1e0>
  {
    Error_Handler();
 8000adc:	f7ff fd83 	bl	80005e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ae0:	4b03      	ldr	r3, [pc, #12]	@ (8000af0 <MX_TIM1_Init+0x1f0>)
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f000 fada 	bl	800109c <HAL_TIM_MspPostInit>

}
 8000ae8:	46c0      	nop			@ (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b01c      	add	sp, #112	@ 0x70
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	2000012c 	.word	0x2000012c
 8000af4:	40012c00 	.word	0x40012c00
 8000af8:	20000010 	.word	0x20000010
 8000afc:	20000008 	.word	0x20000008
 8000b00:	20000004 	.word	0x20000004
 8000b04:	2000000c 	.word	0x2000000c

08000b08 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b092      	sub	sp, #72	@ 0x48
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b0e:	2338      	movs	r3, #56	@ 0x38
 8000b10:	18fb      	adds	r3, r7, r3
 8000b12:	0018      	movs	r0, r3
 8000b14:	2310      	movs	r3, #16
 8000b16:	001a      	movs	r2, r3
 8000b18:	2100      	movs	r1, #0
 8000b1a:	f003 ffc3 	bl	8004aa4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1e:	232c      	movs	r3, #44	@ 0x2c
 8000b20:	18fb      	adds	r3, r7, r3
 8000b22:	0018      	movs	r0, r3
 8000b24:	230c      	movs	r3, #12
 8000b26:	001a      	movs	r2, r3
 8000b28:	2100      	movs	r1, #0
 8000b2a:	f003 ffbb 	bl	8004aa4 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b2e:	231c      	movs	r3, #28
 8000b30:	18fb      	adds	r3, r7, r3
 8000b32:	0018      	movs	r0, r3
 8000b34:	2310      	movs	r3, #16
 8000b36:	001a      	movs	r2, r3
 8000b38:	2100      	movs	r1, #0
 8000b3a:	f003 ffb3 	bl	8004aa4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b3e:	003b      	movs	r3, r7
 8000b40:	0018      	movs	r0, r3
 8000b42:	231c      	movs	r3, #28
 8000b44:	001a      	movs	r2, r3
 8000b46:	2100      	movs	r1, #0
 8000b48:	f003 ffac 	bl	8004aa4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b4c:	4b4e      	ldr	r3, [pc, #312]	@ (8000c88 <MX_TIM2_Init+0x180>)
 8000b4e:	2280      	movs	r2, #128	@ 0x80
 8000b50:	05d2      	lsls	r2, r2, #23
 8000b52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 8000b54:	4b4c      	ldr	r3, [pc, #304]	@ (8000c88 <MX_TIM2_Init+0x180>)
 8000b56:	2202      	movs	r2, #2
 8000b58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5a:	4b4b      	ldr	r3, [pc, #300]	@ (8000c88 <MX_TIM2_Init+0x180>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 880;
 8000b60:	4b49      	ldr	r3, [pc, #292]	@ (8000c88 <MX_TIM2_Init+0x180>)
 8000b62:	22dc      	movs	r2, #220	@ 0xdc
 8000b64:	0092      	lsls	r2, r2, #2
 8000b66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b68:	4b47      	ldr	r3, [pc, #284]	@ (8000c88 <MX_TIM2_Init+0x180>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6e:	4b46      	ldr	r3, [pc, #280]	@ (8000c88 <MX_TIM2_Init+0x180>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b74:	4b44      	ldr	r3, [pc, #272]	@ (8000c88 <MX_TIM2_Init+0x180>)
 8000b76:	0018      	movs	r0, r3
 8000b78:	f002 f9c0 	bl	8002efc <HAL_TIM_Base_Init>
 8000b7c:	1e03      	subs	r3, r0, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000b80:	f7ff fd31 	bl	80005e6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b84:	2138      	movs	r1, #56	@ 0x38
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	2280      	movs	r2, #128	@ 0x80
 8000b8a:	0152      	lsls	r2, r2, #5
 8000b8c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b8e:	187a      	adds	r2, r7, r1
 8000b90:	4b3d      	ldr	r3, [pc, #244]	@ (8000c88 <MX_TIM2_Init+0x180>)
 8000b92:	0011      	movs	r1, r2
 8000b94:	0018      	movs	r0, r3
 8000b96:	f002 ff4f 	bl	8003a38 <HAL_TIM_ConfigClockSource>
 8000b9a:	1e03      	subs	r3, r0, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000b9e:	f7ff fd22 	bl	80005e6 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000ba2:	4b39      	ldr	r3, [pc, #228]	@ (8000c88 <MX_TIM2_Init+0x180>)
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f002 fbab 	bl	8003300 <HAL_TIM_IC_Init>
 8000baa:	1e03      	subs	r3, r0, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8000bae:	f7ff fd1a 	bl	80005e6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bb2:	4b35      	ldr	r3, [pc, #212]	@ (8000c88 <MX_TIM2_Init+0x180>)
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f002 fa59 	bl	800306c <HAL_TIM_PWM_Init>
 8000bba:	1e03      	subs	r3, r0, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000bbe:	f7ff fd12 	bl	80005e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc2:	212c      	movs	r1, #44	@ 0x2c
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bd0:	187a      	adds	r2, r7, r1
 8000bd2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c88 <MX_TIM2_Init+0x180>)
 8000bd4:	0011      	movs	r1, r2
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f003 fd3a 	bl	8004650 <HAL_TIMEx_MasterConfigSynchronization>
 8000bdc:	1e03      	subs	r3, r0, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000be0:	f7ff fd01 	bl	80005e6 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000be4:	211c      	movs	r1, #28
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	220a      	movs	r2, #10
 8000bea:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2201      	movs	r2, #1
 8000bf0:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000bfe:	1879      	adds	r1, r7, r1
 8000c00:	4b21      	ldr	r3, [pc, #132]	@ (8000c88 <MX_TIM2_Init+0x180>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	0018      	movs	r0, r3
 8000c06:	f002 fd73 	bl	80036f0 <HAL_TIM_IC_ConfigChannel>
 8000c0a:	1e03      	subs	r3, r0, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 8000c0e:	f7ff fcea 	bl	80005e6 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000c12:	231c      	movs	r3, #28
 8000c14:	18f9      	adds	r1, r7, r3
 8000c16:	4b1c      	ldr	r3, [pc, #112]	@ (8000c88 <MX_TIM2_Init+0x180>)
 8000c18:	2204      	movs	r2, #4
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f002 fd68 	bl	80036f0 <HAL_TIM_IC_ConfigChannel>
 8000c20:	1e03      	subs	r3, r0, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 8000c24:	f7ff fcdf 	bl	80005e6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c28:	003b      	movs	r3, r7
 8000c2a:	2260      	movs	r2, #96	@ 0x60
 8000c2c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = MC_PWM_OUT_5_PW;
 8000c2e:	4b17      	ldr	r3, [pc, #92]	@ (8000c8c <MX_TIM2_Init+0x184>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	001a      	movs	r2, r3
 8000c34:	003b      	movs	r3, r7
 8000c36:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c38:	003b      	movs	r3, r7
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c3e:	003b      	movs	r3, r7
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c44:	0039      	movs	r1, r7
 8000c46:	4b10      	ldr	r3, [pc, #64]	@ (8000c88 <MX_TIM2_Init+0x180>)
 8000c48:	2208      	movs	r2, #8
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f002 fdf4 	bl	8003838 <HAL_TIM_PWM_ConfigChannel>
 8000c50:	1e03      	subs	r3, r0, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM2_Init+0x150>
  {
    Error_Handler();
 8000c54:	f7ff fcc7 	bl	80005e6 <Error_Handler>
  }
  sConfigOC.Pulse = MC_PWM_OUT_4_PW;
 8000c58:	4b0d      	ldr	r3, [pc, #52]	@ (8000c90 <MX_TIM2_Init+0x188>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	001a      	movs	r2, r3
 8000c5e:	003b      	movs	r3, r7
 8000c60:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c62:	0039      	movs	r1, r7
 8000c64:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <MX_TIM2_Init+0x180>)
 8000c66:	220c      	movs	r2, #12
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f002 fde5 	bl	8003838 <HAL_TIM_PWM_ConfigChannel>
 8000c6e:	1e03      	subs	r3, r0, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM2_Init+0x16e>
  {
    Error_Handler();
 8000c72:	f7ff fcb8 	bl	80005e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c76:	4b04      	ldr	r3, [pc, #16]	@ (8000c88 <MX_TIM2_Init+0x180>)
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f000 fa0f 	bl	800109c <HAL_TIM_MspPostInit>

}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b012      	add	sp, #72	@ 0x48
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	20000178 	.word	0x20000178
 8000c8c:	20000018 	.word	0x20000018
 8000c90:	20000014 	.word	0x20000014

08000c94 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08c      	sub	sp, #48	@ 0x30
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c9a:	2320      	movs	r3, #32
 8000c9c:	18fb      	adds	r3, r7, r3
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	2310      	movs	r3, #16
 8000ca2:	001a      	movs	r2, r3
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	f003 fefd 	bl	8004aa4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000caa:	2314      	movs	r3, #20
 8000cac:	18fb      	adds	r3, r7, r3
 8000cae:	0018      	movs	r0, r3
 8000cb0:	230c      	movs	r3, #12
 8000cb2:	001a      	movs	r2, r3
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	f003 fef5 	bl	8004aa4 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	2310      	movs	r3, #16
 8000cc0:	001a      	movs	r2, r3
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	f003 feee 	bl	8004aa4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cc8:	4b3d      	ldr	r3, [pc, #244]	@ (8000dc0 <MX_TIM3_Init+0x12c>)
 8000cca:	4a3e      	ldr	r2, [pc, #248]	@ (8000dc4 <MX_TIM3_Init+0x130>)
 8000ccc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2;
 8000cce:	4b3c      	ldr	r3, [pc, #240]	@ (8000dc0 <MX_TIM3_Init+0x12c>)
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd4:	4b3a      	ldr	r3, [pc, #232]	@ (8000dc0 <MX_TIM3_Init+0x12c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 880;
 8000cda:	4b39      	ldr	r3, [pc, #228]	@ (8000dc0 <MX_TIM3_Init+0x12c>)
 8000cdc:	22dc      	movs	r2, #220	@ 0xdc
 8000cde:	0092      	lsls	r2, r2, #2
 8000ce0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce2:	4b37      	ldr	r3, [pc, #220]	@ (8000dc0 <MX_TIM3_Init+0x12c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce8:	4b35      	ldr	r3, [pc, #212]	@ (8000dc0 <MX_TIM3_Init+0x12c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cee:	4b34      	ldr	r3, [pc, #208]	@ (8000dc0 <MX_TIM3_Init+0x12c>)
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f002 f903 	bl	8002efc <HAL_TIM_Base_Init>
 8000cf6:	1e03      	subs	r3, r0, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000cfa:	f7ff fc74 	bl	80005e6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cfe:	2120      	movs	r1, #32
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	2280      	movs	r2, #128	@ 0x80
 8000d04:	0152      	lsls	r2, r2, #5
 8000d06:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d08:	187a      	adds	r2, r7, r1
 8000d0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000dc0 <MX_TIM3_Init+0x12c>)
 8000d0c:	0011      	movs	r1, r2
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f002 fe92 	bl	8003a38 <HAL_TIM_ConfigClockSource>
 8000d14:	1e03      	subs	r3, r0, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000d18:	f7ff fc65 	bl	80005e6 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000d1c:	4b28      	ldr	r3, [pc, #160]	@ (8000dc0 <MX_TIM3_Init+0x12c>)
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f002 faee 	bl	8003300 <HAL_TIM_IC_Init>
 8000d24:	1e03      	subs	r3, r0, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000d28:	f7ff fc5d 	bl	80005e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2c:	2114      	movs	r1, #20
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d3a:	187a      	adds	r2, r7, r1
 8000d3c:	4b20      	ldr	r3, [pc, #128]	@ (8000dc0 <MX_TIM3_Init+0x12c>)
 8000d3e:	0011      	movs	r1, r2
 8000d40:	0018      	movs	r0, r3
 8000d42:	f003 fc85 	bl	8004650 <HAL_TIMEx_MasterConfigSynchronization>
 8000d46:	1e03      	subs	r3, r0, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000d4a:	f7ff fc4c 	bl	80005e6 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	220a      	movs	r2, #10
 8000d52:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2201      	movs	r2, #1
 8000d58:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d66:	1d39      	adds	r1, r7, #4
 8000d68:	4b15      	ldr	r3, [pc, #84]	@ (8000dc0 <MX_TIM3_Init+0x12c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f002 fcbf 	bl	80036f0 <HAL_TIM_IC_ConfigChannel>
 8000d72:	1e03      	subs	r3, r0, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000d76:	f7ff fc36 	bl	80005e6 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000d7a:	1d39      	adds	r1, r7, #4
 8000d7c:	4b10      	ldr	r3, [pc, #64]	@ (8000dc0 <MX_TIM3_Init+0x12c>)
 8000d7e:	2204      	movs	r2, #4
 8000d80:	0018      	movs	r0, r3
 8000d82:	f002 fcb5 	bl	80036f0 <HAL_TIM_IC_ConfigChannel>
 8000d86:	1e03      	subs	r3, r0, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 8000d8a:	f7ff fc2c 	bl	80005e6 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000d8e:	1d39      	adds	r1, r7, #4
 8000d90:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc0 <MX_TIM3_Init+0x12c>)
 8000d92:	2208      	movs	r2, #8
 8000d94:	0018      	movs	r0, r3
 8000d96:	f002 fcab 	bl	80036f0 <HAL_TIM_IC_ConfigChannel>
 8000d9a:	1e03      	subs	r3, r0, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 8000d9e:	f7ff fc22 	bl	80005e6 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000da2:	1d39      	adds	r1, r7, #4
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <MX_TIM3_Init+0x12c>)
 8000da6:	220c      	movs	r2, #12
 8000da8:	0018      	movs	r0, r3
 8000daa:	f002 fca1 	bl	80036f0 <HAL_TIM_IC_ConfigChannel>
 8000dae:	1e03      	subs	r3, r0, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM3_Init+0x122>
  {
    Error_Handler();
 8000db2:	f7ff fc18 	bl	80005e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000db6:	46c0      	nop			@ (mov r8, r8)
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b00c      	add	sp, #48	@ 0x30
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	200001c4 	.word	0x200001c4
 8000dc4:	40000400 	.word	0x40000400

08000dc8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b094      	sub	sp, #80	@ 0x50
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dce:	2334      	movs	r3, #52	@ 0x34
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	231c      	movs	r3, #28
 8000dd6:	001a      	movs	r2, r3
 8000dd8:	2100      	movs	r1, #0
 8000dda:	f003 fe63 	bl	8004aa4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dde:	003b      	movs	r3, r7
 8000de0:	0018      	movs	r0, r3
 8000de2:	2334      	movs	r3, #52	@ 0x34
 8000de4:	001a      	movs	r2, r3
 8000de6:	2100      	movs	r1, #0
 8000de8:	f003 fe5c 	bl	8004aa4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000dec:	4b35      	ldr	r3, [pc, #212]	@ (8000ec4 <MX_TIM16_Init+0xfc>)
 8000dee:	4a36      	ldr	r2, [pc, #216]	@ (8000ec8 <MX_TIM16_Init+0x100>)
 8000df0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000df2:	4b34      	ldr	r3, [pc, #208]	@ (8000ec4 <MX_TIM16_Init+0xfc>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df8:	4b32      	ldr	r3, [pc, #200]	@ (8000ec4 <MX_TIM16_Init+0xfc>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000dfe:	4b31      	ldr	r3, [pc, #196]	@ (8000ec4 <MX_TIM16_Init+0xfc>)
 8000e00:	4a32      	ldr	r2, [pc, #200]	@ (8000ecc <MX_TIM16_Init+0x104>)
 8000e02:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e04:	4b2f      	ldr	r3, [pc, #188]	@ (8000ec4 <MX_TIM16_Init+0xfc>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000e0a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ec4 <MX_TIM16_Init+0xfc>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e10:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec4 <MX_TIM16_Init+0xfc>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000e16:	4b2b      	ldr	r3, [pc, #172]	@ (8000ec4 <MX_TIM16_Init+0xfc>)
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f002 f86f 	bl	8002efc <HAL_TIM_Base_Init>
 8000e1e:	1e03      	subs	r3, r0, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8000e22:	f7ff fbe0 	bl	80005e6 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8000e26:	4b27      	ldr	r3, [pc, #156]	@ (8000ec4 <MX_TIM16_Init+0xfc>)
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f002 f8bf 	bl	8002fac <HAL_TIM_OC_Init>
 8000e2e:	1e03      	subs	r3, r0, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8000e32:	f7ff fbd8 	bl	80005e6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000e36:	2134      	movs	r1, #52	@ 0x34
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	2200      	movs	r2, #0
 8000e42:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e56:	187b      	adds	r3, r7, r1
 8000e58:	2200      	movs	r2, #0
 8000e5a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	2200      	movs	r2, #0
 8000e60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e62:	1879      	adds	r1, r7, r1
 8000e64:	4b17      	ldr	r3, [pc, #92]	@ (8000ec4 <MX_TIM16_Init+0xfc>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f002 fbe1 	bl	8003630 <HAL_TIM_OC_ConfigChannel>
 8000e6e:	1e03      	subs	r3, r0, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8000e72:	f7ff fbb8 	bl	80005e6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e76:	003b      	movs	r3, r7
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e7c:	003b      	movs	r3, r7
 8000e7e:	2200      	movs	r2, #0
 8000e80:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e82:	003b      	movs	r3, r7
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e88:	003b      	movs	r3, r7
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e8e:	003b      	movs	r3, r7
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e94:	003b      	movs	r3, r7
 8000e96:	2280      	movs	r2, #128	@ 0x80
 8000e98:	0192      	lsls	r2, r2, #6
 8000e9a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e9c:	003b      	movs	r3, r7
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ea2:	003b      	movs	r3, r7
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000ea8:	003a      	movs	r2, r7
 8000eaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <MX_TIM16_Init+0xfc>)
 8000eac:	0011      	movs	r1, r2
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f003 fc3c 	bl	800472c <HAL_TIMEx_ConfigBreakDeadTime>
 8000eb4:	1e03      	subs	r3, r0, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8000eb8:	f7ff fb95 	bl	80005e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000ebc:	46c0      	nop			@ (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b014      	add	sp, #80	@ 0x50
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000210 	.word	0x20000210
 8000ec8:	40014400 	.word	0x40014400
 8000ecc:	0000ffff 	.word	0x0000ffff

08000ed0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b09d      	sub	sp, #116	@ 0x74
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	235c      	movs	r3, #92	@ 0x5c
 8000eda:	18fb      	adds	r3, r7, r3
 8000edc:	0018      	movs	r0, r3
 8000ede:	2314      	movs	r3, #20
 8000ee0:	001a      	movs	r2, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	f003 fdde 	bl	8004aa4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee8:	2428      	movs	r4, #40	@ 0x28
 8000eea:	193b      	adds	r3, r7, r4
 8000eec:	0018      	movs	r0, r3
 8000eee:	2334      	movs	r3, #52	@ 0x34
 8000ef0:	001a      	movs	r2, r3
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	f003 fdd6 	bl	8004aa4 <memset>
  if(tim_baseHandle->Instance==TIM1)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a62      	ldr	r2, [pc, #392]	@ (8001088 <HAL_TIM_Base_MspInit+0x1b8>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d11d      	bne.n	8000f3e <HAL_TIM_Base_MspInit+0x6e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000f02:	193b      	adds	r3, r7, r4
 8000f04:	2280      	movs	r2, #128	@ 0x80
 8000f06:	0392      	lsls	r2, r2, #14
 8000f08:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000f0a:	193b      	adds	r3, r7, r4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f10:	193b      	adds	r3, r7, r4
 8000f12:	0018      	movs	r0, r3
 8000f14:	f001 fcec 	bl	80028f0 <HAL_RCCEx_PeriphCLKConfig>
 8000f18:	1e03      	subs	r3, r0, #0
 8000f1a:	d001      	beq.n	8000f20 <HAL_TIM_Base_MspInit+0x50>
    {
      Error_Handler();
 8000f1c:	f7ff fb63 	bl	80005e6 <Error_Handler>
    }

    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f20:	4b5a      	ldr	r3, [pc, #360]	@ (800108c <HAL_TIM_Base_MspInit+0x1bc>)
 8000f22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f24:	4b59      	ldr	r3, [pc, #356]	@ (800108c <HAL_TIM_Base_MspInit+0x1bc>)
 8000f26:	2180      	movs	r1, #128	@ 0x80
 8000f28:	0109      	lsls	r1, r1, #4
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f2e:	4b57      	ldr	r3, [pc, #348]	@ (800108c <HAL_TIM_Base_MspInit+0x1bc>)
 8000f30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f32:	2380      	movs	r3, #128	@ 0x80
 8000f34:	011b      	lsls	r3, r3, #4
 8000f36:	4013      	ands	r3, r2
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000f3c:	e09f      	b.n	800107e <HAL_TIM_Base_MspInit+0x1ae>
  else if(tim_baseHandle->Instance==TIM2)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	2380      	movs	r3, #128	@ 0x80
 8000f44:	05db      	lsls	r3, r3, #23
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d12f      	bne.n	8000faa <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f4a:	4b50      	ldr	r3, [pc, #320]	@ (800108c <HAL_TIM_Base_MspInit+0x1bc>)
 8000f4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f4e:	4b4f      	ldr	r3, [pc, #316]	@ (800108c <HAL_TIM_Base_MspInit+0x1bc>)
 8000f50:	2101      	movs	r1, #1
 8000f52:	430a      	orrs	r2, r1
 8000f54:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f56:	4b4d      	ldr	r3, [pc, #308]	@ (800108c <HAL_TIM_Base_MspInit+0x1bc>)
 8000f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	623b      	str	r3, [r7, #32]
 8000f60:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	4b4a      	ldr	r3, [pc, #296]	@ (800108c <HAL_TIM_Base_MspInit+0x1bc>)
 8000f64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f66:	4b49      	ldr	r3, [pc, #292]	@ (800108c <HAL_TIM_Base_MspInit+0x1bc>)
 8000f68:	2101      	movs	r1, #1
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f6e:	4b47      	ldr	r3, [pc, #284]	@ (800108c <HAL_TIM_Base_MspInit+0x1bc>)
 8000f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f72:	2201      	movs	r2, #1
 8000f74:	4013      	ands	r3, r2
 8000f76:	61fb      	str	r3, [r7, #28]
 8000f78:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = Buf_PWM_IN_5_Pin|Buf_PWM_IN_4_Pin;
 8000f7a:	215c      	movs	r1, #92	@ 0x5c
 8000f7c:	187b      	adds	r3, r7, r1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	187b      	adds	r3, r7, r1
 8000f84:	2202      	movs	r2, #2
 8000f86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f88:	187b      	adds	r3, r7, r1
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f8e:	187b      	adds	r3, r7, r1
 8000f90:	2202      	movs	r2, #2
 8000f92:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	2202      	movs	r2, #2
 8000f98:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9a:	187a      	adds	r2, r7, r1
 8000f9c:	23a0      	movs	r3, #160	@ 0xa0
 8000f9e:	05db      	lsls	r3, r3, #23
 8000fa0:	0011      	movs	r1, r2
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f000 fe00 	bl	8001ba8 <HAL_GPIO_Init>
}
 8000fa8:	e069      	b.n	800107e <HAL_TIM_Base_MspInit+0x1ae>
  else if(tim_baseHandle->Instance==TIM3)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a38      	ldr	r2, [pc, #224]	@ (8001090 <HAL_TIM_Base_MspInit+0x1c0>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d151      	bne.n	8001058 <HAL_TIM_Base_MspInit+0x188>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fb4:	4b35      	ldr	r3, [pc, #212]	@ (800108c <HAL_TIM_Base_MspInit+0x1bc>)
 8000fb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fb8:	4b34      	ldr	r3, [pc, #208]	@ (800108c <HAL_TIM_Base_MspInit+0x1bc>)
 8000fba:	2102      	movs	r1, #2
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fc0:	4b32      	ldr	r3, [pc, #200]	@ (800108c <HAL_TIM_Base_MspInit+0x1bc>)
 8000fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
 8000fca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	4b2f      	ldr	r3, [pc, #188]	@ (800108c <HAL_TIM_Base_MspInit+0x1bc>)
 8000fce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fd0:	4b2e      	ldr	r3, [pc, #184]	@ (800108c <HAL_TIM_Base_MspInit+0x1bc>)
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fd8:	4b2c      	ldr	r3, [pc, #176]	@ (800108c <HAL_TIM_Base_MspInit+0x1bc>)
 8000fda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4013      	ands	r3, r2
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe4:	4b29      	ldr	r3, [pc, #164]	@ (800108c <HAL_TIM_Base_MspInit+0x1bc>)
 8000fe6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fe8:	4b28      	ldr	r3, [pc, #160]	@ (800108c <HAL_TIM_Base_MspInit+0x1bc>)
 8000fea:	2102      	movs	r1, #2
 8000fec:	430a      	orrs	r2, r1
 8000fee:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ff0:	4b26      	ldr	r3, [pc, #152]	@ (800108c <HAL_TIM_Base_MspInit+0x1bc>)
 8000ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Buf_PWM_IN_3_Pin|Buf_PWM_IN_2_Pin;
 8000ffc:	245c      	movs	r4, #92	@ 0x5c
 8000ffe:	193b      	adds	r3, r7, r4
 8001000:	22c0      	movs	r2, #192	@ 0xc0
 8001002:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	193b      	adds	r3, r7, r4
 8001006:	2202      	movs	r2, #2
 8001008:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800100a:	193b      	adds	r3, r7, r4
 800100c:	2201      	movs	r2, #1
 800100e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001010:	193b      	adds	r3, r7, r4
 8001012:	2202      	movs	r2, #2
 8001014:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001016:	193b      	adds	r3, r7, r4
 8001018:	2201      	movs	r2, #1
 800101a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	193a      	adds	r2, r7, r4
 800101e:	23a0      	movs	r3, #160	@ 0xa0
 8001020:	05db      	lsls	r3, r3, #23
 8001022:	0011      	movs	r1, r2
 8001024:	0018      	movs	r0, r3
 8001026:	f000 fdbf 	bl	8001ba8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Buf_PWM_IN_1_Pin|Buf_PWM_IN_0_Pin;
 800102a:	0021      	movs	r1, r4
 800102c:	187b      	adds	r3, r7, r1
 800102e:	2203      	movs	r2, #3
 8001030:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	187b      	adds	r3, r7, r1
 8001034:	2202      	movs	r2, #2
 8001036:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001038:	187b      	adds	r3, r7, r1
 800103a:	2201      	movs	r2, #1
 800103c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800103e:	187b      	adds	r3, r7, r1
 8001040:	2202      	movs	r2, #2
 8001042:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001044:	187b      	adds	r3, r7, r1
 8001046:	2201      	movs	r2, #1
 8001048:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104a:	187b      	adds	r3, r7, r1
 800104c:	4a11      	ldr	r2, [pc, #68]	@ (8001094 <HAL_TIM_Base_MspInit+0x1c4>)
 800104e:	0019      	movs	r1, r3
 8001050:	0010      	movs	r0, r2
 8001052:	f000 fda9 	bl	8001ba8 <HAL_GPIO_Init>
}
 8001056:	e012      	b.n	800107e <HAL_TIM_Base_MspInit+0x1ae>
  else if(tim_baseHandle->Instance==TIM16)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0e      	ldr	r2, [pc, #56]	@ (8001098 <HAL_TIM_Base_MspInit+0x1c8>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d10d      	bne.n	800107e <HAL_TIM_Base_MspInit+0x1ae>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001062:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <HAL_TIM_Base_MspInit+0x1bc>)
 8001064:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <HAL_TIM_Base_MspInit+0x1bc>)
 8001068:	2180      	movs	r1, #128	@ 0x80
 800106a:	0289      	lsls	r1, r1, #10
 800106c:	430a      	orrs	r2, r1
 800106e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_TIM_Base_MspInit+0x1bc>)
 8001072:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001074:	2380      	movs	r3, #128	@ 0x80
 8001076:	029b      	lsls	r3, r3, #10
 8001078:	4013      	ands	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
}
 800107e:	46c0      	nop			@ (mov r8, r8)
 8001080:	46bd      	mov	sp, r7
 8001082:	b01d      	add	sp, #116	@ 0x74
 8001084:	bd90      	pop	{r4, r7, pc}
 8001086:	46c0      	nop			@ (mov r8, r8)
 8001088:	40012c00 	.word	0x40012c00
 800108c:	40021000 	.word	0x40021000
 8001090:	40000400 	.word	0x40000400
 8001094:	50000400 	.word	0x50000400
 8001098:	40014400 	.word	0x40014400

0800109c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b08b      	sub	sp, #44	@ 0x2c
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	2414      	movs	r4, #20
 80010a6:	193b      	adds	r3, r7, r4
 80010a8:	0018      	movs	r0, r3
 80010aa:	2314      	movs	r3, #20
 80010ac:	001a      	movs	r2, r3
 80010ae:	2100      	movs	r1, #0
 80010b0:	f003 fcf8 	bl	8004aa4 <memset>
  if(timHandle->Instance==TIM1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a3a      	ldr	r2, [pc, #232]	@ (80011a4 <HAL_TIM_MspPostInit+0x108>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d145      	bne.n	800114a <HAL_TIM_MspPostInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	4b3a      	ldr	r3, [pc, #232]	@ (80011a8 <HAL_TIM_MspPostInit+0x10c>)
 80010c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010c2:	4b39      	ldr	r3, [pc, #228]	@ (80011a8 <HAL_TIM_MspPostInit+0x10c>)
 80010c4:	2101      	movs	r1, #1
 80010c6:	430a      	orrs	r2, r1
 80010c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80010ca:	4b37      	ldr	r3, [pc, #220]	@ (80011a8 <HAL_TIM_MspPostInit+0x10c>)
 80010cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010ce:	2201      	movs	r2, #1
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	4b34      	ldr	r3, [pc, #208]	@ (80011a8 <HAL_TIM_MspPostInit+0x10c>)
 80010d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010da:	4b33      	ldr	r3, [pc, #204]	@ (80011a8 <HAL_TIM_MspPostInit+0x10c>)
 80010dc:	2102      	movs	r1, #2
 80010de:	430a      	orrs	r2, r1
 80010e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80010e2:	4b31      	ldr	r3, [pc, #196]	@ (80011a8 <HAL_TIM_MspPostInit+0x10c>)
 80010e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010e6:	2202      	movs	r2, #2
 80010e8:	4013      	ands	r3, r2
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA11 [PA9]     ------> TIM1_CH4
    PB3     ------> TIM1_CH2
    PB6     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = MC_PWM_OUT_3_Pin|MC_PWM_OUT_2_Pin;
 80010ee:	193b      	adds	r3, r7, r4
 80010f0:	2290      	movs	r2, #144	@ 0x90
 80010f2:	0112      	lsls	r2, r2, #4
 80010f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	193b      	adds	r3, r7, r4
 80010f8:	2202      	movs	r2, #2
 80010fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010fc:	193b      	adds	r3, r7, r4
 80010fe:	2201      	movs	r2, #1
 8001100:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001102:	193b      	adds	r3, r7, r4
 8001104:	2202      	movs	r2, #2
 8001106:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001108:	193b      	adds	r3, r7, r4
 800110a:	2202      	movs	r2, #2
 800110c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	193a      	adds	r2, r7, r4
 8001110:	23a0      	movs	r3, #160	@ 0xa0
 8001112:	05db      	lsls	r3, r3, #23
 8001114:	0011      	movs	r1, r2
 8001116:	0018      	movs	r0, r3
 8001118:	f000 fd46 	bl	8001ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MC_PWM_OUT_1_Pin|MC_PWM_OUT_0_Pin;
 800111c:	0021      	movs	r1, r4
 800111e:	187b      	adds	r3, r7, r1
 8001120:	2248      	movs	r2, #72	@ 0x48
 8001122:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	187b      	adds	r3, r7, r1
 8001126:	2202      	movs	r2, #2
 8001128:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800112a:	187b      	adds	r3, r7, r1
 800112c:	2201      	movs	r2, #1
 800112e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001130:	187b      	adds	r3, r7, r1
 8001132:	2202      	movs	r2, #2
 8001134:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001136:	187b      	adds	r3, r7, r1
 8001138:	2201      	movs	r2, #1
 800113a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113c:	187b      	adds	r3, r7, r1
 800113e:	4a1b      	ldr	r2, [pc, #108]	@ (80011ac <HAL_TIM_MspPostInit+0x110>)
 8001140:	0019      	movs	r1, r3
 8001142:	0010      	movs	r0, r2
 8001144:	f000 fd30 	bl	8001ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001148:	e028      	b.n	800119c <HAL_TIM_MspPostInit+0x100>
  else if(timHandle->Instance==TIM2)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	2380      	movs	r3, #128	@ 0x80
 8001150:	05db      	lsls	r3, r3, #23
 8001152:	429a      	cmp	r2, r3
 8001154:	d122      	bne.n	800119c <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <HAL_TIM_MspPostInit+0x10c>)
 8001158:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800115a:	4b13      	ldr	r3, [pc, #76]	@ (80011a8 <HAL_TIM_MspPostInit+0x10c>)
 800115c:	2101      	movs	r1, #1
 800115e:	430a      	orrs	r2, r1
 8001160:	635a      	str	r2, [r3, #52]	@ 0x34
 8001162:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <HAL_TIM_MspPostInit+0x10c>)
 8001164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001166:	2201      	movs	r2, #1
 8001168:	4013      	ands	r3, r2
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MC_PWM_OUT_5_Pin|MC_PWM_OUT_4_Pin;
 800116e:	2114      	movs	r1, #20
 8001170:	187b      	adds	r3, r7, r1
 8001172:	220c      	movs	r2, #12
 8001174:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	187b      	adds	r3, r7, r1
 8001178:	2202      	movs	r2, #2
 800117a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800117c:	187b      	adds	r3, r7, r1
 800117e:	2201      	movs	r2, #1
 8001180:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001182:	187b      	adds	r3, r7, r1
 8001184:	2202      	movs	r2, #2
 8001186:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001188:	187b      	adds	r3, r7, r1
 800118a:	2202      	movs	r2, #2
 800118c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118e:	187a      	adds	r2, r7, r1
 8001190:	23a0      	movs	r3, #160	@ 0xa0
 8001192:	05db      	lsls	r3, r3, #23
 8001194:	0011      	movs	r1, r2
 8001196:	0018      	movs	r0, r3
 8001198:	f000 fd06 	bl	8001ba8 <HAL_GPIO_Init>
}
 800119c:	46c0      	nop			@ (mov r8, r8)
 800119e:	46bd      	mov	sp, r7
 80011a0:	b00b      	add	sp, #44	@ 0x2c
 80011a2:	bd90      	pop	{r4, r7, pc}
 80011a4:	40012c00 	.word	0x40012c00
 80011a8:	40021000 	.word	0x40021000
 80011ac:	50000400 	.word	0x50000400

080011b0 <adjust_PWM>:
    }



void adjust_PWM()
    {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, MC_PWM_OUT_3_PW);
 80011b4:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <adjust_PWM+0x48>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b10      	ldr	r3, [pc, #64]	@ (80011fc <adjust_PWM+0x4c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, MC_PWM_OUT_1_PW);
 80011be:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <adjust_PWM+0x50>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <adjust_PWM+0x4c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, MC_PWM_OUT_0_PW);
 80011c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <adjust_PWM+0x54>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <adjust_PWM+0x4c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, MC_PWM_OUT_2_PW);
 80011d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001208 <adjust_PWM+0x58>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <adjust_PWM+0x4c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, MC_PWM_OUT_5_PW);
 80011dc:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <adjust_PWM+0x5c>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001210 <adjust_PWM+0x60>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, MC_PWM_OUT_4_PW);
 80011e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <adjust_PWM+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <adjust_PWM+0x60>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
 80011f0:	46c0      	nop			@ (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	46c0      	nop			@ (mov r8, r8)
 80011f8:	20000010 	.word	0x20000010
 80011fc:	2000012c 	.word	0x2000012c
 8001200:	20000008 	.word	0x20000008
 8001204:	20000004 	.word	0x20000004
 8001208:	2000000c 	.word	0x2000000c
 800120c:	20000018 	.word	0x20000018
 8001210:	20000178 	.word	0x20000178
 8001214:	20000014 	.word	0x20000014

08001218 <count_connected_devices>:

int count_connected_devices()
    {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
    int count = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
    if (BUF_PWM_IN_5.is_on == true)
 8001222:	4b17      	ldr	r3, [pc, #92]	@ (8001280 <count_connected_devices+0x68>)
 8001224:	7b5b      	ldrb	r3, [r3, #13]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <count_connected_devices+0x18>
	count++;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3301      	adds	r3, #1
 800122e:	607b      	str	r3, [r7, #4]
    if (BUF_PWM_IN_4.is_on == true)
 8001230:	4b14      	ldr	r3, [pc, #80]	@ (8001284 <count_connected_devices+0x6c>)
 8001232:	7b5b      	ldrb	r3, [r3, #13]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d002      	beq.n	800123e <count_connected_devices+0x26>
	count++;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3301      	adds	r3, #1
 800123c:	607b      	str	r3, [r7, #4]
    if (BUF_PWM_IN_3.is_on == true)
 800123e:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <count_connected_devices+0x70>)
 8001240:	7b5b      	ldrb	r3, [r3, #13]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d002      	beq.n	800124c <count_connected_devices+0x34>
	count++;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3301      	adds	r3, #1
 800124a:	607b      	str	r3, [r7, #4]
    if (BUF_PWM_IN_2.is_on == true)
 800124c:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <count_connected_devices+0x74>)
 800124e:	7b5b      	ldrb	r3, [r3, #13]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d002      	beq.n	800125a <count_connected_devices+0x42>
	count++;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3301      	adds	r3, #1
 8001258:	607b      	str	r3, [r7, #4]
    if (BUF_PWM_IN_1.is_on == true)
 800125a:	4b0d      	ldr	r3, [pc, #52]	@ (8001290 <count_connected_devices+0x78>)
 800125c:	7b5b      	ldrb	r3, [r3, #13]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d002      	beq.n	8001268 <count_connected_devices+0x50>
	count++;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3301      	adds	r3, #1
 8001266:	607b      	str	r3, [r7, #4]
    if (BUF_PWM_IN_0.is_on == true)
 8001268:	4b0a      	ldr	r3, [pc, #40]	@ (8001294 <count_connected_devices+0x7c>)
 800126a:	7b5b      	ldrb	r3, [r3, #13]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d002      	beq.n	8001276 <count_connected_devices+0x5e>
	count++;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3301      	adds	r3, #1
 8001274:	607b      	str	r3, [r7, #4]
    return count;
 8001276:	687b      	ldr	r3, [r7, #4]
    }
 8001278:	0018      	movs	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	b002      	add	sp, #8
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200000cc 	.word	0x200000cc
 8001284:	200000dc 	.word	0x200000dc
 8001288:	200000ec 	.word	0x200000ec
 800128c:	200000fc 	.word	0x200000fc
 8001290:	2000010c 	.word	0x2000010c
 8001294:	2000011c 	.word	0x2000011c

08001298 <set_PWM>:



void set_PWM(int num_devices)
    {
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

    if (num_devices == 6)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b06      	cmp	r3, #6
 80012a4:	d134      	bne.n	8001310 <set_PWM+0x78>
	{
	MC_PWM_OUT_0_PW = BUF_PWM_IN_0.pulse_width;
 80012a6:	4be5      	ldr	r3, [pc, #916]	@ (800163c <set_PWM+0x3a4>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	1c18      	adds	r0, r3, #0
 80012ac:	f7fe ffc0 	bl	8000230 <__aeabi_f2iz>
 80012b0:	0002      	movs	r2, r0
 80012b2:	4be3      	ldr	r3, [pc, #908]	@ (8001640 <set_PWM+0x3a8>)
 80012b4:	601a      	str	r2, [r3, #0]
	MC_PWM_OUT_1_PW = BUF_PWM_IN_1.pulse_width;
 80012b6:	4be3      	ldr	r3, [pc, #908]	@ (8001644 <set_PWM+0x3ac>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	1c18      	adds	r0, r3, #0
 80012bc:	f7fe ffb8 	bl	8000230 <__aeabi_f2iz>
 80012c0:	0002      	movs	r2, r0
 80012c2:	4be1      	ldr	r3, [pc, #900]	@ (8001648 <set_PWM+0x3b0>)
 80012c4:	601a      	str	r2, [r3, #0]
	MC_PWM_OUT_2_PW = BUF_PWM_IN_2.pulse_width;
 80012c6:	4be1      	ldr	r3, [pc, #900]	@ (800164c <set_PWM+0x3b4>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	1c18      	adds	r0, r3, #0
 80012cc:	f7fe ffb0 	bl	8000230 <__aeabi_f2iz>
 80012d0:	0002      	movs	r2, r0
 80012d2:	4bdf      	ldr	r3, [pc, #892]	@ (8001650 <set_PWM+0x3b8>)
 80012d4:	601a      	str	r2, [r3, #0]
	MC_PWM_OUT_3_PW = BUF_PWM_IN_3.pulse_width;
 80012d6:	4bdf      	ldr	r3, [pc, #892]	@ (8001654 <set_PWM+0x3bc>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	1c18      	adds	r0, r3, #0
 80012dc:	f7fe ffa8 	bl	8000230 <__aeabi_f2iz>
 80012e0:	0002      	movs	r2, r0
 80012e2:	4bdd      	ldr	r3, [pc, #884]	@ (8001658 <set_PWM+0x3c0>)
 80012e4:	601a      	str	r2, [r3, #0]
	MC_PWM_OUT_4_PW = BUF_PWM_IN_4.pulse_width;
 80012e6:	4bdd      	ldr	r3, [pc, #884]	@ (800165c <set_PWM+0x3c4>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	1c18      	adds	r0, r3, #0
 80012ec:	f7fe ffa0 	bl	8000230 <__aeabi_f2iz>
 80012f0:	0002      	movs	r2, r0
 80012f2:	4bdb      	ldr	r3, [pc, #876]	@ (8001660 <set_PWM+0x3c8>)
 80012f4:	601a      	str	r2, [r3, #0]
	MC_PWM_OUT_5_PW = BUF_PWM_IN_5.pulse_width;
 80012f6:	4bdb      	ldr	r3, [pc, #876]	@ (8001664 <set_PWM+0x3cc>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	1c18      	adds	r0, r3, #0
 80012fc:	f7fe ff98 	bl	8000230 <__aeabi_f2iz>
 8001300:	0002      	movs	r2, r0
 8001302:	4bd9      	ldr	r3, [pc, #868]	@ (8001668 <set_PWM+0x3d0>)
 8001304:	601a      	str	r2, [r3, #0]
	printf("num of connected devices = 6");
 8001306:	4bd9      	ldr	r3, [pc, #868]	@ (800166c <set_PWM+0x3d4>)
 8001308:	0018      	movs	r0, r3
 800130a:	f003 fb6f 	bl	80049ec <iprintf>
    else
	{
	MC_PWM_OUT_0_PW = MC_PWM_OUT_1_PW = MC_PWM_OUT_2_PW = MC_PWM_OUT_3_PW = MC_PWM_OUT_4_PW = MC_PWM_OUT_5_PW = 100;
	printf("WARNING! num of connected devices = 0");
	}
    }
 800130e:	e27b      	b.n	8001808 <set_PWM+0x570>
    else if (num_devices == 5)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b05      	cmp	r3, #5
 8001314:	d000      	beq.n	8001318 <set_PWM+0x80>
 8001316:	e093      	b.n	8001440 <set_PWM+0x1a8>
	MC_PWM_OUT_0_PW = BUF_PWM_IN_0.pulse_width;
 8001318:	4bc8      	ldr	r3, [pc, #800]	@ (800163c <set_PWM+0x3a4>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	1c18      	adds	r0, r3, #0
 800131e:	f7fe ff87 	bl	8000230 <__aeabi_f2iz>
 8001322:	0002      	movs	r2, r0
 8001324:	4bc6      	ldr	r3, [pc, #792]	@ (8001640 <set_PWM+0x3a8>)
 8001326:	601a      	str	r2, [r3, #0]
	MC_PWM_OUT_1_PW = BUF_PWM_IN_1.pulse_width;
 8001328:	4bc6      	ldr	r3, [pc, #792]	@ (8001644 <set_PWM+0x3ac>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	1c18      	adds	r0, r3, #0
 800132e:	f7fe ff7f 	bl	8000230 <__aeabi_f2iz>
 8001332:	0002      	movs	r2, r0
 8001334:	4bc4      	ldr	r3, [pc, #784]	@ (8001648 <set_PWM+0x3b0>)
 8001336:	601a      	str	r2, [r3, #0]
	MC_PWM_OUT_2_PW = BUF_PWM_IN_2.pulse_width;
 8001338:	4bc4      	ldr	r3, [pc, #784]	@ (800164c <set_PWM+0x3b4>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	1c18      	adds	r0, r3, #0
 800133e:	f7fe ff77 	bl	8000230 <__aeabi_f2iz>
 8001342:	0002      	movs	r2, r0
 8001344:	4bc2      	ldr	r3, [pc, #776]	@ (8001650 <set_PWM+0x3b8>)
 8001346:	601a      	str	r2, [r3, #0]
	MC_PWM_OUT_3_PW = BUF_PWM_IN_3.pulse_width;
 8001348:	4bc2      	ldr	r3, [pc, #776]	@ (8001654 <set_PWM+0x3bc>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	1c18      	adds	r0, r3, #0
 800134e:	f7fe ff6f 	bl	8000230 <__aeabi_f2iz>
 8001352:	0002      	movs	r2, r0
 8001354:	4bc0      	ldr	r3, [pc, #768]	@ (8001658 <set_PWM+0x3c0>)
 8001356:	601a      	str	r2, [r3, #0]
	MC_PWM_OUT_4_PW = BUF_PWM_IN_4.pulse_width;
 8001358:	4bc0      	ldr	r3, [pc, #768]	@ (800165c <set_PWM+0x3c4>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	1c18      	adds	r0, r3, #0
 800135e:	f7fe ff67 	bl	8000230 <__aeabi_f2iz>
 8001362:	0002      	movs	r2, r0
 8001364:	4bbe      	ldr	r3, [pc, #760]	@ (8001660 <set_PWM+0x3c8>)
 8001366:	601a      	str	r2, [r3, #0]
	MC_PWM_OUT_5_PW = BUF_PWM_IN_5.pulse_width;
 8001368:	4bbe      	ldr	r3, [pc, #760]	@ (8001664 <set_PWM+0x3cc>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	1c18      	adds	r0, r3, #0
 800136e:	f7fe ff5f 	bl	8000230 <__aeabi_f2iz>
 8001372:	0002      	movs	r2, r0
 8001374:	4bbc      	ldr	r3, [pc, #752]	@ (8001668 <set_PWM+0x3d0>)
 8001376:	601a      	str	r2, [r3, #0]
	if (BUF_PWM_IN_0.is_on == 0)
 8001378:	4bb0      	ldr	r3, [pc, #704]	@ (800163c <set_PWM+0x3a4>)
 800137a:	7b5b      	ldrb	r3, [r3, #13]
 800137c:	2201      	movs	r2, #1
 800137e:	4053      	eors	r3, r2
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d008      	beq.n	8001398 <set_PWM+0x100>
	    MC_PWM_OUT_0_PW = BUF_PWM_IN_1.pulse_width;
 8001386:	4baf      	ldr	r3, [pc, #700]	@ (8001644 <set_PWM+0x3ac>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	1c18      	adds	r0, r3, #0
 800138c:	f7fe ff50 	bl	8000230 <__aeabi_f2iz>
 8001390:	0002      	movs	r2, r0
 8001392:	4bab      	ldr	r3, [pc, #684]	@ (8001640 <set_PWM+0x3a8>)
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	e04e      	b.n	8001436 <set_PWM+0x19e>
	else if (BUF_PWM_IN_1.is_on == 0)
 8001398:	4baa      	ldr	r3, [pc, #680]	@ (8001644 <set_PWM+0x3ac>)
 800139a:	7b5b      	ldrb	r3, [r3, #13]
 800139c:	2201      	movs	r2, #1
 800139e:	4053      	eors	r3, r2
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d008      	beq.n	80013b8 <set_PWM+0x120>
	    MC_PWM_OUT_1_PW = BUF_PWM_IN_0.pulse_width;
 80013a6:	4ba5      	ldr	r3, [pc, #660]	@ (800163c <set_PWM+0x3a4>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	1c18      	adds	r0, r3, #0
 80013ac:	f7fe ff40 	bl	8000230 <__aeabi_f2iz>
 80013b0:	0002      	movs	r2, r0
 80013b2:	4ba5      	ldr	r3, [pc, #660]	@ (8001648 <set_PWM+0x3b0>)
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	e03e      	b.n	8001436 <set_PWM+0x19e>
	else if (BUF_PWM_IN_2.is_on == 0)
 80013b8:	4ba4      	ldr	r3, [pc, #656]	@ (800164c <set_PWM+0x3b4>)
 80013ba:	7b5b      	ldrb	r3, [r3, #13]
 80013bc:	2201      	movs	r2, #1
 80013be:	4053      	eors	r3, r2
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d008      	beq.n	80013d8 <set_PWM+0x140>
	    MC_PWM_OUT_2_PW = BUF_PWM_IN_1.pulse_width;
 80013c6:	4b9f      	ldr	r3, [pc, #636]	@ (8001644 <set_PWM+0x3ac>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	1c18      	adds	r0, r3, #0
 80013cc:	f7fe ff30 	bl	8000230 <__aeabi_f2iz>
 80013d0:	0002      	movs	r2, r0
 80013d2:	4b9f      	ldr	r3, [pc, #636]	@ (8001650 <set_PWM+0x3b8>)
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	e02e      	b.n	8001436 <set_PWM+0x19e>
	else if (BUF_PWM_IN_3.is_on == 0)
 80013d8:	4b9e      	ldr	r3, [pc, #632]	@ (8001654 <set_PWM+0x3bc>)
 80013da:	7b5b      	ldrb	r3, [r3, #13]
 80013dc:	2201      	movs	r2, #1
 80013de:	4053      	eors	r3, r2
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d008      	beq.n	80013f8 <set_PWM+0x160>
	    MC_PWM_OUT_3_PW = BUF_PWM_IN_2.pulse_width;
 80013e6:	4b99      	ldr	r3, [pc, #612]	@ (800164c <set_PWM+0x3b4>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	1c18      	adds	r0, r3, #0
 80013ec:	f7fe ff20 	bl	8000230 <__aeabi_f2iz>
 80013f0:	0002      	movs	r2, r0
 80013f2:	4b99      	ldr	r3, [pc, #612]	@ (8001658 <set_PWM+0x3c0>)
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	e01e      	b.n	8001436 <set_PWM+0x19e>
	else if (BUF_PWM_IN_4.is_on == 0)
 80013f8:	4b98      	ldr	r3, [pc, #608]	@ (800165c <set_PWM+0x3c4>)
 80013fa:	7b5b      	ldrb	r3, [r3, #13]
 80013fc:	2201      	movs	r2, #1
 80013fe:	4053      	eors	r3, r2
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d008      	beq.n	8001418 <set_PWM+0x180>
	    MC_PWM_OUT_4_PW = BUF_PWM_IN_3.pulse_width;
 8001406:	4b93      	ldr	r3, [pc, #588]	@ (8001654 <set_PWM+0x3bc>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	1c18      	adds	r0, r3, #0
 800140c:	f7fe ff10 	bl	8000230 <__aeabi_f2iz>
 8001410:	0002      	movs	r2, r0
 8001412:	4b93      	ldr	r3, [pc, #588]	@ (8001660 <set_PWM+0x3c8>)
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	e00e      	b.n	8001436 <set_PWM+0x19e>
	else if (BUF_PWM_IN_5.is_on == 0)
 8001418:	4b92      	ldr	r3, [pc, #584]	@ (8001664 <set_PWM+0x3cc>)
 800141a:	7b5b      	ldrb	r3, [r3, #13]
 800141c:	2201      	movs	r2, #1
 800141e:	4053      	eors	r3, r2
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d007      	beq.n	8001436 <set_PWM+0x19e>
	    MC_PWM_OUT_5_PW = BUF_PWM_IN_4.pulse_width;
 8001426:	4b8d      	ldr	r3, [pc, #564]	@ (800165c <set_PWM+0x3c4>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	1c18      	adds	r0, r3, #0
 800142c:	f7fe ff00 	bl	8000230 <__aeabi_f2iz>
 8001430:	0002      	movs	r2, r0
 8001432:	4b8d      	ldr	r3, [pc, #564]	@ (8001668 <set_PWM+0x3d0>)
 8001434:	601a      	str	r2, [r3, #0]
	printf("num of connected devices = 5");
 8001436:	4b8e      	ldr	r3, [pc, #568]	@ (8001670 <set_PWM+0x3d8>)
 8001438:	0018      	movs	r0, r3
 800143a:	f003 fad7 	bl	80049ec <iprintf>
    }
 800143e:	e1e3      	b.n	8001808 <set_PWM+0x570>
    else if (num_devices == 4)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b04      	cmp	r3, #4
 8001444:	d000      	beq.n	8001448 <set_PWM+0x1b0>
 8001446:	e093      	b.n	8001570 <set_PWM+0x2d8>
	MC_PWM_OUT_0_PW = BUF_PWM_IN_0.pulse_width;
 8001448:	4b7c      	ldr	r3, [pc, #496]	@ (800163c <set_PWM+0x3a4>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	1c18      	adds	r0, r3, #0
 800144e:	f7fe feef 	bl	8000230 <__aeabi_f2iz>
 8001452:	0002      	movs	r2, r0
 8001454:	4b7a      	ldr	r3, [pc, #488]	@ (8001640 <set_PWM+0x3a8>)
 8001456:	601a      	str	r2, [r3, #0]
	MC_PWM_OUT_1_PW = BUF_PWM_IN_1.pulse_width;
 8001458:	4b7a      	ldr	r3, [pc, #488]	@ (8001644 <set_PWM+0x3ac>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	1c18      	adds	r0, r3, #0
 800145e:	f7fe fee7 	bl	8000230 <__aeabi_f2iz>
 8001462:	0002      	movs	r2, r0
 8001464:	4b78      	ldr	r3, [pc, #480]	@ (8001648 <set_PWM+0x3b0>)
 8001466:	601a      	str	r2, [r3, #0]
	MC_PWM_OUT_2_PW = BUF_PWM_IN_2.pulse_width;
 8001468:	4b78      	ldr	r3, [pc, #480]	@ (800164c <set_PWM+0x3b4>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	1c18      	adds	r0, r3, #0
 800146e:	f7fe fedf 	bl	8000230 <__aeabi_f2iz>
 8001472:	0002      	movs	r2, r0
 8001474:	4b76      	ldr	r3, [pc, #472]	@ (8001650 <set_PWM+0x3b8>)
 8001476:	601a      	str	r2, [r3, #0]
	MC_PWM_OUT_3_PW = BUF_PWM_IN_3.pulse_width;
 8001478:	4b76      	ldr	r3, [pc, #472]	@ (8001654 <set_PWM+0x3bc>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	1c18      	adds	r0, r3, #0
 800147e:	f7fe fed7 	bl	8000230 <__aeabi_f2iz>
 8001482:	0002      	movs	r2, r0
 8001484:	4b74      	ldr	r3, [pc, #464]	@ (8001658 <set_PWM+0x3c0>)
 8001486:	601a      	str	r2, [r3, #0]
	MC_PWM_OUT_4_PW = BUF_PWM_IN_4.pulse_width;
 8001488:	4b74      	ldr	r3, [pc, #464]	@ (800165c <set_PWM+0x3c4>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	1c18      	adds	r0, r3, #0
 800148e:	f7fe fecf 	bl	8000230 <__aeabi_f2iz>
 8001492:	0002      	movs	r2, r0
 8001494:	4b72      	ldr	r3, [pc, #456]	@ (8001660 <set_PWM+0x3c8>)
 8001496:	601a      	str	r2, [r3, #0]
	MC_PWM_OUT_5_PW = BUF_PWM_IN_5.pulse_width;
 8001498:	4b72      	ldr	r3, [pc, #456]	@ (8001664 <set_PWM+0x3cc>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	1c18      	adds	r0, r3, #0
 800149e:	f7fe fec7 	bl	8000230 <__aeabi_f2iz>
 80014a2:	0002      	movs	r2, r0
 80014a4:	4b70      	ldr	r3, [pc, #448]	@ (8001668 <set_PWM+0x3d0>)
 80014a6:	601a      	str	r2, [r3, #0]
	if (BUF_PWM_IN_0.is_on == 0)
 80014a8:	4b64      	ldr	r3, [pc, #400]	@ (800163c <set_PWM+0x3a4>)
 80014aa:	7b5b      	ldrb	r3, [r3, #13]
 80014ac:	2201      	movs	r2, #1
 80014ae:	4053      	eors	r3, r2
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d008      	beq.n	80014c8 <set_PWM+0x230>
	    MC_PWM_OUT_0_PW = BUF_PWM_IN_1.pulse_width;
 80014b6:	4b63      	ldr	r3, [pc, #396]	@ (8001644 <set_PWM+0x3ac>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	1c18      	adds	r0, r3, #0
 80014bc:	f7fe feb8 	bl	8000230 <__aeabi_f2iz>
 80014c0:	0002      	movs	r2, r0
 80014c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001640 <set_PWM+0x3a8>)
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	e04e      	b.n	8001566 <set_PWM+0x2ce>
	else if (BUF_PWM_IN_1.is_on == 0)
 80014c8:	4b5e      	ldr	r3, [pc, #376]	@ (8001644 <set_PWM+0x3ac>)
 80014ca:	7b5b      	ldrb	r3, [r3, #13]
 80014cc:	2201      	movs	r2, #1
 80014ce:	4053      	eors	r3, r2
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d008      	beq.n	80014e8 <set_PWM+0x250>
	    MC_PWM_OUT_1_PW = BUF_PWM_IN_0.pulse_width;
 80014d6:	4b59      	ldr	r3, [pc, #356]	@ (800163c <set_PWM+0x3a4>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	1c18      	adds	r0, r3, #0
 80014dc:	f7fe fea8 	bl	8000230 <__aeabi_f2iz>
 80014e0:	0002      	movs	r2, r0
 80014e2:	4b59      	ldr	r3, [pc, #356]	@ (8001648 <set_PWM+0x3b0>)
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	e03e      	b.n	8001566 <set_PWM+0x2ce>
	else if (BUF_PWM_IN_2.is_on == 0)
 80014e8:	4b58      	ldr	r3, [pc, #352]	@ (800164c <set_PWM+0x3b4>)
 80014ea:	7b5b      	ldrb	r3, [r3, #13]
 80014ec:	2201      	movs	r2, #1
 80014ee:	4053      	eors	r3, r2
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d008      	beq.n	8001508 <set_PWM+0x270>
	    MC_PWM_OUT_2_PW = BUF_PWM_IN_1.pulse_width;
 80014f6:	4b53      	ldr	r3, [pc, #332]	@ (8001644 <set_PWM+0x3ac>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	1c18      	adds	r0, r3, #0
 80014fc:	f7fe fe98 	bl	8000230 <__aeabi_f2iz>
 8001500:	0002      	movs	r2, r0
 8001502:	4b53      	ldr	r3, [pc, #332]	@ (8001650 <set_PWM+0x3b8>)
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	e02e      	b.n	8001566 <set_PWM+0x2ce>
	else if (BUF_PWM_IN_3.is_on == 0)
 8001508:	4b52      	ldr	r3, [pc, #328]	@ (8001654 <set_PWM+0x3bc>)
 800150a:	7b5b      	ldrb	r3, [r3, #13]
 800150c:	2201      	movs	r2, #1
 800150e:	4053      	eors	r3, r2
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d008      	beq.n	8001528 <set_PWM+0x290>
	    MC_PWM_OUT_3_PW = BUF_PWM_IN_2.pulse_width;
 8001516:	4b4d      	ldr	r3, [pc, #308]	@ (800164c <set_PWM+0x3b4>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	1c18      	adds	r0, r3, #0
 800151c:	f7fe fe88 	bl	8000230 <__aeabi_f2iz>
 8001520:	0002      	movs	r2, r0
 8001522:	4b4d      	ldr	r3, [pc, #308]	@ (8001658 <set_PWM+0x3c0>)
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	e01e      	b.n	8001566 <set_PWM+0x2ce>
	else if (BUF_PWM_IN_4.is_on == 0)
 8001528:	4b4c      	ldr	r3, [pc, #304]	@ (800165c <set_PWM+0x3c4>)
 800152a:	7b5b      	ldrb	r3, [r3, #13]
 800152c:	2201      	movs	r2, #1
 800152e:	4053      	eors	r3, r2
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d008      	beq.n	8001548 <set_PWM+0x2b0>
	    MC_PWM_OUT_4_PW = BUF_PWM_IN_3.pulse_width;
 8001536:	4b47      	ldr	r3, [pc, #284]	@ (8001654 <set_PWM+0x3bc>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	1c18      	adds	r0, r3, #0
 800153c:	f7fe fe78 	bl	8000230 <__aeabi_f2iz>
 8001540:	0002      	movs	r2, r0
 8001542:	4b47      	ldr	r3, [pc, #284]	@ (8001660 <set_PWM+0x3c8>)
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	e00e      	b.n	8001566 <set_PWM+0x2ce>
	else if (BUF_PWM_IN_5.is_on == 0)
 8001548:	4b46      	ldr	r3, [pc, #280]	@ (8001664 <set_PWM+0x3cc>)
 800154a:	7b5b      	ldrb	r3, [r3, #13]
 800154c:	2201      	movs	r2, #1
 800154e:	4053      	eors	r3, r2
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d007      	beq.n	8001566 <set_PWM+0x2ce>
	    MC_PWM_OUT_5_PW = BUF_PWM_IN_4.pulse_width;
 8001556:	4b41      	ldr	r3, [pc, #260]	@ (800165c <set_PWM+0x3c4>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	1c18      	adds	r0, r3, #0
 800155c:	f7fe fe68 	bl	8000230 <__aeabi_f2iz>
 8001560:	0002      	movs	r2, r0
 8001562:	4b41      	ldr	r3, [pc, #260]	@ (8001668 <set_PWM+0x3d0>)
 8001564:	601a      	str	r2, [r3, #0]
	printf("num of connected devices = 4");
 8001566:	4b43      	ldr	r3, [pc, #268]	@ (8001674 <set_PWM+0x3dc>)
 8001568:	0018      	movs	r0, r3
 800156a:	f003 fa3f 	bl	80049ec <iprintf>
    }
 800156e:	e14b      	b.n	8001808 <set_PWM+0x570>
    else if (num_devices == 3)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b03      	cmp	r3, #3
 8001574:	d134      	bne.n	80015e0 <set_PWM+0x348>
	MC_PWM_OUT_0_PW = BUF_PWM_IN_0.pulse_width;
 8001576:	4b31      	ldr	r3, [pc, #196]	@ (800163c <set_PWM+0x3a4>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	1c18      	adds	r0, r3, #0
 800157c:	f7fe fe58 	bl	8000230 <__aeabi_f2iz>
 8001580:	0002      	movs	r2, r0
 8001582:	4b2f      	ldr	r3, [pc, #188]	@ (8001640 <set_PWM+0x3a8>)
 8001584:	601a      	str	r2, [r3, #0]
	MC_PWM_OUT_1_PW = BUF_PWM_IN_1.pulse_width;
 8001586:	4b2f      	ldr	r3, [pc, #188]	@ (8001644 <set_PWM+0x3ac>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	1c18      	adds	r0, r3, #0
 800158c:	f7fe fe50 	bl	8000230 <__aeabi_f2iz>
 8001590:	0002      	movs	r2, r0
 8001592:	4b2d      	ldr	r3, [pc, #180]	@ (8001648 <set_PWM+0x3b0>)
 8001594:	601a      	str	r2, [r3, #0]
	MC_PWM_OUT_2_PW = BUF_PWM_IN_2.pulse_width;
 8001596:	4b2d      	ldr	r3, [pc, #180]	@ (800164c <set_PWM+0x3b4>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	1c18      	adds	r0, r3, #0
 800159c:	f7fe fe48 	bl	8000230 <__aeabi_f2iz>
 80015a0:	0002      	movs	r2, r0
 80015a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001650 <set_PWM+0x3b8>)
 80015a4:	601a      	str	r2, [r3, #0]
	MC_PWM_OUT_3_PW = BUF_PWM_IN_3.pulse_width;
 80015a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001654 <set_PWM+0x3bc>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	1c18      	adds	r0, r3, #0
 80015ac:	f7fe fe40 	bl	8000230 <__aeabi_f2iz>
 80015b0:	0002      	movs	r2, r0
 80015b2:	4b29      	ldr	r3, [pc, #164]	@ (8001658 <set_PWM+0x3c0>)
 80015b4:	601a      	str	r2, [r3, #0]
	MC_PWM_OUT_4_PW = BUF_PWM_IN_4.pulse_width;
 80015b6:	4b29      	ldr	r3, [pc, #164]	@ (800165c <set_PWM+0x3c4>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	1c18      	adds	r0, r3, #0
 80015bc:	f7fe fe38 	bl	8000230 <__aeabi_f2iz>
 80015c0:	0002      	movs	r2, r0
 80015c2:	4b27      	ldr	r3, [pc, #156]	@ (8001660 <set_PWM+0x3c8>)
 80015c4:	601a      	str	r2, [r3, #0]
	MC_PWM_OUT_5_PW = BUF_PWM_IN_5.pulse_width;
 80015c6:	4b27      	ldr	r3, [pc, #156]	@ (8001664 <set_PWM+0x3cc>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	1c18      	adds	r0, r3, #0
 80015cc:	f7fe fe30 	bl	8000230 <__aeabi_f2iz>
 80015d0:	0002      	movs	r2, r0
 80015d2:	4b25      	ldr	r3, [pc, #148]	@ (8001668 <set_PWM+0x3d0>)
 80015d4:	601a      	str	r2, [r3, #0]
	printf("num of connected devices = 3");
 80015d6:	4b28      	ldr	r3, [pc, #160]	@ (8001678 <set_PWM+0x3e0>)
 80015d8:	0018      	movs	r0, r3
 80015da:	f003 fa07 	bl	80049ec <iprintf>
    }
 80015de:	e113      	b.n	8001808 <set_PWM+0x570>
    else if (num_devices == 2)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d104      	bne.n	80015f0 <set_PWM+0x358>
	printf("num of connected devices = 2");
 80015e6:	4b25      	ldr	r3, [pc, #148]	@ (800167c <set_PWM+0x3e4>)
 80015e8:	0018      	movs	r0, r3
 80015ea:	f003 f9ff 	bl	80049ec <iprintf>
    }
 80015ee:	e10b      	b.n	8001808 <set_PWM+0x570>
    else if (num_devices == 1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d000      	beq.n	80015f8 <set_PWM+0x360>
 80015f6:	e0ec      	b.n	80017d2 <set_PWM+0x53a>
	if (BUF_PWM_IN_0.is_on == 1)
 80015f8:	4b10      	ldr	r3, [pc, #64]	@ (800163c <set_PWM+0x3a4>)
 80015fa:	7b5b      	ldrb	r3, [r3, #13]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d03f      	beq.n	8001680 <set_PWM+0x3e8>
	    MC_PWM_OUT_0_PW = MC_PWM_OUT_1_PW = MC_PWM_OUT_2_PW = MC_PWM_OUT_3_PW = MC_PWM_OUT_4_PW = MC_PWM_OUT_5_PW = BUF_PWM_IN_0.pulse_width;
 8001600:	4b0e      	ldr	r3, [pc, #56]	@ (800163c <set_PWM+0x3a4>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	1c18      	adds	r0, r3, #0
 8001606:	f7fe fe13 	bl	8000230 <__aeabi_f2iz>
 800160a:	0002      	movs	r2, r0
 800160c:	4b16      	ldr	r3, [pc, #88]	@ (8001668 <set_PWM+0x3d0>)
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <set_PWM+0x3d0>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <set_PWM+0x3c8>)
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <set_PWM+0x3c8>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <set_PWM+0x3c0>)
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	4b0d      	ldr	r3, [pc, #52]	@ (8001658 <set_PWM+0x3c0>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b0a      	ldr	r3, [pc, #40]	@ (8001650 <set_PWM+0x3b8>)
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <set_PWM+0x3b8>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <set_PWM+0x3b0>)
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	4b05      	ldr	r3, [pc, #20]	@ (8001648 <set_PWM+0x3b0>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b02      	ldr	r3, [pc, #8]	@ (8001640 <set_PWM+0x3a8>)
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	e0c6      	b.n	80017c8 <set_PWM+0x530>
 800163a:	46c0      	nop			@ (mov r8, r8)
 800163c:	2000011c 	.word	0x2000011c
 8001640:	20000004 	.word	0x20000004
 8001644:	2000010c 	.word	0x2000010c
 8001648:	20000008 	.word	0x20000008
 800164c:	200000fc 	.word	0x200000fc
 8001650:	2000000c 	.word	0x2000000c
 8001654:	200000ec 	.word	0x200000ec
 8001658:	20000010 	.word	0x20000010
 800165c:	200000dc 	.word	0x200000dc
 8001660:	20000014 	.word	0x20000014
 8001664:	200000cc 	.word	0x200000cc
 8001668:	20000018 	.word	0x20000018
 800166c:	08005740 	.word	0x08005740
 8001670:	08005760 	.word	0x08005760
 8001674:	08005780 	.word	0x08005780
 8001678:	080057a0 	.word	0x080057a0
 800167c:	080057c0 	.word	0x080057c0
	    } else if (BUF_PWM_IN_1.is_on == 1)
 8001680:	4b63      	ldr	r3, [pc, #396]	@ (8001810 <set_PWM+0x578>)
 8001682:	7b5b      	ldrb	r3, [r3, #13]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d01c      	beq.n	80016c2 <set_PWM+0x42a>
		MC_PWM_OUT_0_PW = MC_PWM_OUT_1_PW = MC_PWM_OUT_2_PW = MC_PWM_OUT_3_PW = MC_PWM_OUT_4_PW = MC_PWM_OUT_5_PW = BUF_PWM_IN_1.pulse_width;
 8001688:	4b61      	ldr	r3, [pc, #388]	@ (8001810 <set_PWM+0x578>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	1c18      	adds	r0, r3, #0
 800168e:	f7fe fdcf 	bl	8000230 <__aeabi_f2iz>
 8001692:	0002      	movs	r2, r0
 8001694:	4b5f      	ldr	r3, [pc, #380]	@ (8001814 <set_PWM+0x57c>)
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	4b5e      	ldr	r3, [pc, #376]	@ (8001814 <set_PWM+0x57c>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b5e      	ldr	r3, [pc, #376]	@ (8001818 <set_PWM+0x580>)
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	4b5d      	ldr	r3, [pc, #372]	@ (8001818 <set_PWM+0x580>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b5d      	ldr	r3, [pc, #372]	@ (800181c <set_PWM+0x584>)
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	4b5c      	ldr	r3, [pc, #368]	@ (800181c <set_PWM+0x584>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b5c      	ldr	r3, [pc, #368]	@ (8001820 <set_PWM+0x588>)
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	4b5b      	ldr	r3, [pc, #364]	@ (8001820 <set_PWM+0x588>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b5b      	ldr	r3, [pc, #364]	@ (8001824 <set_PWM+0x58c>)
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	4b5a      	ldr	r3, [pc, #360]	@ (8001824 <set_PWM+0x58c>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b5a      	ldr	r3, [pc, #360]	@ (8001828 <set_PWM+0x590>)
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	e082      	b.n	80017c8 <set_PWM+0x530>
		} else if (BUF_PWM_IN_2.is_on == 1)
 80016c2:	4b5a      	ldr	r3, [pc, #360]	@ (800182c <set_PWM+0x594>)
 80016c4:	7b5b      	ldrb	r3, [r3, #13]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d01c      	beq.n	8001704 <set_PWM+0x46c>
		    MC_PWM_OUT_0_PW = MC_PWM_OUT_1_PW = MC_PWM_OUT_2_PW = MC_PWM_OUT_3_PW = MC_PWM_OUT_4_PW = MC_PWM_OUT_5_PW = BUF_PWM_IN_2.pulse_width;
 80016ca:	4b58      	ldr	r3, [pc, #352]	@ (800182c <set_PWM+0x594>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	1c18      	adds	r0, r3, #0
 80016d0:	f7fe fdae 	bl	8000230 <__aeabi_f2iz>
 80016d4:	0002      	movs	r2, r0
 80016d6:	4b4f      	ldr	r3, [pc, #316]	@ (8001814 <set_PWM+0x57c>)
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	4b4e      	ldr	r3, [pc, #312]	@ (8001814 <set_PWM+0x57c>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	4b4e      	ldr	r3, [pc, #312]	@ (8001818 <set_PWM+0x580>)
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	4b4d      	ldr	r3, [pc, #308]	@ (8001818 <set_PWM+0x580>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4b4d      	ldr	r3, [pc, #308]	@ (800181c <set_PWM+0x584>)
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	4b4c      	ldr	r3, [pc, #304]	@ (800181c <set_PWM+0x584>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001820 <set_PWM+0x588>)
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	4b4b      	ldr	r3, [pc, #300]	@ (8001820 <set_PWM+0x588>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001824 <set_PWM+0x58c>)
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001824 <set_PWM+0x58c>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001828 <set_PWM+0x590>)
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	e061      	b.n	80017c8 <set_PWM+0x530>
		    } else if (BUF_PWM_IN_3.is_on == 1)
 8001704:	4b4a      	ldr	r3, [pc, #296]	@ (8001830 <set_PWM+0x598>)
 8001706:	7b5b      	ldrb	r3, [r3, #13]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d01c      	beq.n	8001746 <set_PWM+0x4ae>
			MC_PWM_OUT_0_PW = MC_PWM_OUT_1_PW = MC_PWM_OUT_2_PW = MC_PWM_OUT_3_PW = MC_PWM_OUT_4_PW = MC_PWM_OUT_5_PW = BUF_PWM_IN_3.pulse_width;
 800170c:	4b48      	ldr	r3, [pc, #288]	@ (8001830 <set_PWM+0x598>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	1c18      	adds	r0, r3, #0
 8001712:	f7fe fd8d 	bl	8000230 <__aeabi_f2iz>
 8001716:	0002      	movs	r2, r0
 8001718:	4b3e      	ldr	r3, [pc, #248]	@ (8001814 <set_PWM+0x57c>)
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	4b3d      	ldr	r3, [pc, #244]	@ (8001814 <set_PWM+0x57c>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b3d      	ldr	r3, [pc, #244]	@ (8001818 <set_PWM+0x580>)
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	4b3c      	ldr	r3, [pc, #240]	@ (8001818 <set_PWM+0x580>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b3c      	ldr	r3, [pc, #240]	@ (800181c <set_PWM+0x584>)
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	4b3b      	ldr	r3, [pc, #236]	@ (800181c <set_PWM+0x584>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b3b      	ldr	r3, [pc, #236]	@ (8001820 <set_PWM+0x588>)
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	4b3a      	ldr	r3, [pc, #232]	@ (8001820 <set_PWM+0x588>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b3a      	ldr	r3, [pc, #232]	@ (8001824 <set_PWM+0x58c>)
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	4b39      	ldr	r3, [pc, #228]	@ (8001824 <set_PWM+0x58c>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b39      	ldr	r3, [pc, #228]	@ (8001828 <set_PWM+0x590>)
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	e040      	b.n	80017c8 <set_PWM+0x530>
			} else if (BUF_PWM_IN_4.is_on == 1)
 8001746:	4b3b      	ldr	r3, [pc, #236]	@ (8001834 <set_PWM+0x59c>)
 8001748:	7b5b      	ldrb	r3, [r3, #13]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d01c      	beq.n	8001788 <set_PWM+0x4f0>
			    MC_PWM_OUT_0_PW = MC_PWM_OUT_1_PW = MC_PWM_OUT_2_PW = MC_PWM_OUT_3_PW = MC_PWM_OUT_4_PW = MC_PWM_OUT_5_PW = BUF_PWM_IN_4.pulse_width;
 800174e:	4b39      	ldr	r3, [pc, #228]	@ (8001834 <set_PWM+0x59c>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	1c18      	adds	r0, r3, #0
 8001754:	f7fe fd6c 	bl	8000230 <__aeabi_f2iz>
 8001758:	0002      	movs	r2, r0
 800175a:	4b2e      	ldr	r3, [pc, #184]	@ (8001814 <set_PWM+0x57c>)
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	4b2d      	ldr	r3, [pc, #180]	@ (8001814 <set_PWM+0x57c>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4b2d      	ldr	r3, [pc, #180]	@ (8001818 <set_PWM+0x580>)
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	4b2c      	ldr	r3, [pc, #176]	@ (8001818 <set_PWM+0x580>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	4b2c      	ldr	r3, [pc, #176]	@ (800181c <set_PWM+0x584>)
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	4b2b      	ldr	r3, [pc, #172]	@ (800181c <set_PWM+0x584>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	4b2b      	ldr	r3, [pc, #172]	@ (8001820 <set_PWM+0x588>)
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	4b2a      	ldr	r3, [pc, #168]	@ (8001820 <set_PWM+0x588>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4b2a      	ldr	r3, [pc, #168]	@ (8001824 <set_PWM+0x58c>)
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	4b29      	ldr	r3, [pc, #164]	@ (8001824 <set_PWM+0x58c>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4b29      	ldr	r3, [pc, #164]	@ (8001828 <set_PWM+0x590>)
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	e01f      	b.n	80017c8 <set_PWM+0x530>
			    } else if (BUF_PWM_IN_5.is_on == 1)
 8001788:	4b2b      	ldr	r3, [pc, #172]	@ (8001838 <set_PWM+0x5a0>)
 800178a:	7b5b      	ldrb	r3, [r3, #13]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d01b      	beq.n	80017c8 <set_PWM+0x530>
				MC_PWM_OUT_0_PW = MC_PWM_OUT_1_PW = MC_PWM_OUT_2_PW = MC_PWM_OUT_3_PW = MC_PWM_OUT_4_PW = MC_PWM_OUT_5_PW = BUF_PWM_IN_5.pulse_width;
 8001790:	4b29      	ldr	r3, [pc, #164]	@ (8001838 <set_PWM+0x5a0>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	1c18      	adds	r0, r3, #0
 8001796:	f7fe fd4b 	bl	8000230 <__aeabi_f2iz>
 800179a:	0002      	movs	r2, r0
 800179c:	4b1d      	ldr	r3, [pc, #116]	@ (8001814 <set_PWM+0x57c>)
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001814 <set_PWM+0x57c>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001818 <set_PWM+0x580>)
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001818 <set_PWM+0x580>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b1b      	ldr	r3, [pc, #108]	@ (800181c <set_PWM+0x584>)
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	4b1a      	ldr	r3, [pc, #104]	@ (800181c <set_PWM+0x584>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001820 <set_PWM+0x588>)
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <set_PWM+0x588>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b19      	ldr	r3, [pc, #100]	@ (8001824 <set_PWM+0x58c>)
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	4b18      	ldr	r3, [pc, #96]	@ (8001824 <set_PWM+0x58c>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b18      	ldr	r3, [pc, #96]	@ (8001828 <set_PWM+0x590>)
 80017c6:	601a      	str	r2, [r3, #0]
	printf("num of connected devices = 1");
 80017c8:	4b1c      	ldr	r3, [pc, #112]	@ (800183c <set_PWM+0x5a4>)
 80017ca:	0018      	movs	r0, r3
 80017cc:	f003 f90e 	bl	80049ec <iprintf>
    }
 80017d0:	e01a      	b.n	8001808 <set_PWM+0x570>
	MC_PWM_OUT_0_PW = MC_PWM_OUT_1_PW = MC_PWM_OUT_2_PW = MC_PWM_OUT_3_PW = MC_PWM_OUT_4_PW = MC_PWM_OUT_5_PW = 100;
 80017d2:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <set_PWM+0x57c>)
 80017d4:	2264      	movs	r2, #100	@ 0x64
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <set_PWM+0x57c>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <set_PWM+0x580>)
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001818 <set_PWM+0x580>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b0d      	ldr	r3, [pc, #52]	@ (800181c <set_PWM+0x584>)
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <set_PWM+0x584>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <set_PWM+0x588>)
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001820 <set_PWM+0x588>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <set_PWM+0x58c>)
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001824 <set_PWM+0x58c>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <set_PWM+0x590>)
 80017fe:	601a      	str	r2, [r3, #0]
	printf("WARNING! num of connected devices = 0");
 8001800:	4b0f      	ldr	r3, [pc, #60]	@ (8001840 <set_PWM+0x5a8>)
 8001802:	0018      	movs	r0, r3
 8001804:	f003 f8f2 	bl	80049ec <iprintf>
    }
 8001808:	46c0      	nop			@ (mov r8, r8)
 800180a:	46bd      	mov	sp, r7
 800180c:	b002      	add	sp, #8
 800180e:	bd80      	pop	{r7, pc}
 8001810:	2000010c 	.word	0x2000010c
 8001814:	20000018 	.word	0x20000018
 8001818:	20000014 	.word	0x20000014
 800181c:	20000010 	.word	0x20000010
 8001820:	2000000c 	.word	0x2000000c
 8001824:	20000008 	.word	0x20000008
 8001828:	20000004 	.word	0x20000004
 800182c:	200000fc 	.word	0x200000fc
 8001830:	200000ec 	.word	0x200000ec
 8001834:	200000dc 	.word	0x200000dc
 8001838:	200000cc 	.word	0x200000cc
 800183c:	080057e0 	.word	0x080057e0
 8001840:	08005800 	.word	0x08005800

08001844 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001844:	480d      	ldr	r0, [pc, #52]	@ (800187c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001846:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001848:	f7ff f854 	bl	80008f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800184c:	480c      	ldr	r0, [pc, #48]	@ (8001880 <LoopForever+0x6>)
  ldr r1, =_edata
 800184e:	490d      	ldr	r1, [pc, #52]	@ (8001884 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001850:	4a0d      	ldr	r2, [pc, #52]	@ (8001888 <LoopForever+0xe>)
  movs r3, #0
 8001852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001854:	e002      	b.n	800185c <LoopCopyDataInit>

08001856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800185a:	3304      	adds	r3, #4

0800185c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800185c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800185e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001860:	d3f9      	bcc.n	8001856 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001862:	4a0a      	ldr	r2, [pc, #40]	@ (800188c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001864:	4c0a      	ldr	r4, [pc, #40]	@ (8001890 <LoopForever+0x16>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001868:	e001      	b.n	800186e <LoopFillZerobss>

0800186a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800186a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800186c:	3204      	adds	r2, #4

0800186e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800186e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001870:	d3fb      	bcc.n	800186a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001872:	f003 f973 	bl	8004b5c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001876:	f7fe fded 	bl	8000454 <main>

0800187a <LoopForever>:

LoopForever:
  b LoopForever
 800187a:	e7fe      	b.n	800187a <LoopForever>
  ldr   r0, =_estack
 800187c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001884:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001888:	0800594c 	.word	0x0800594c
  ldr r2, =_sbss
 800188c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001890:	200003ac 	.word	0x200003ac

08001894 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001894:	e7fe      	b.n	8001894 <ADC1_COMP_IRQHandler>
	...

08001898 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800189e:	1dfb      	adds	r3, r7, #7
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a4:	4b0b      	ldr	r3, [pc, #44]	@ (80018d4 <HAL_Init+0x3c>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b0a      	ldr	r3, [pc, #40]	@ (80018d4 <HAL_Init+0x3c>)
 80018aa:	2180      	movs	r1, #128	@ 0x80
 80018ac:	0049      	lsls	r1, r1, #1
 80018ae:	430a      	orrs	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018b2:	2003      	movs	r0, #3
 80018b4:	f000 f810 	bl	80018d8 <HAL_InitTick>
 80018b8:	1e03      	subs	r3, r0, #0
 80018ba:	d003      	beq.n	80018c4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80018bc:	1dfb      	adds	r3, r7, #7
 80018be:	2201      	movs	r2, #1
 80018c0:	701a      	strb	r2, [r3, #0]
 80018c2:	e001      	b.n	80018c8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80018c4:	f7fe ff02 	bl	80006cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018c8:	1dfb      	adds	r3, r7, #7
 80018ca:	781b      	ldrb	r3, [r3, #0]
}
 80018cc:	0018      	movs	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	b002      	add	sp, #8
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40022000 	.word	0x40022000

080018d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018e0:	230f      	movs	r3, #15
 80018e2:	18fb      	adds	r3, r7, r3
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80018e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001960 <HAL_InitTick+0x88>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d02b      	beq.n	8001948 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80018f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001964 <HAL_InitTick+0x8c>)
 80018f2:	681c      	ldr	r4, [r3, #0]
 80018f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001960 <HAL_InitTick+0x88>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	0019      	movs	r1, r3
 80018fa:	23fa      	movs	r3, #250	@ 0xfa
 80018fc:	0098      	lsls	r0, r3, #2
 80018fe:	f7fe fc0b 	bl	8000118 <__udivsi3>
 8001902:	0003      	movs	r3, r0
 8001904:	0019      	movs	r1, r3
 8001906:	0020      	movs	r0, r4
 8001908:	f7fe fc06 	bl	8000118 <__udivsi3>
 800190c:	0003      	movs	r3, r0
 800190e:	0018      	movs	r0, r3
 8001910:	f000 f93d 	bl	8001b8e <HAL_SYSTICK_Config>
 8001914:	1e03      	subs	r3, r0, #0
 8001916:	d112      	bne.n	800193e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b03      	cmp	r3, #3
 800191c:	d80a      	bhi.n	8001934 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	2301      	movs	r3, #1
 8001922:	425b      	negs	r3, r3
 8001924:	2200      	movs	r2, #0
 8001926:	0018      	movs	r0, r3
 8001928:	f000 f90c 	bl	8001b44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800192c:	4b0e      	ldr	r3, [pc, #56]	@ (8001968 <HAL_InitTick+0x90>)
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	e00d      	b.n	8001950 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001934:	230f      	movs	r3, #15
 8001936:	18fb      	adds	r3, r7, r3
 8001938:	2201      	movs	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]
 800193c:	e008      	b.n	8001950 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800193e:	230f      	movs	r3, #15
 8001940:	18fb      	adds	r3, r7, r3
 8001942:	2201      	movs	r2, #1
 8001944:	701a      	strb	r2, [r3, #0]
 8001946:	e003      	b.n	8001950 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001948:	230f      	movs	r3, #15
 800194a:	18fb      	adds	r3, r7, r3
 800194c:	2201      	movs	r2, #1
 800194e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001950:	230f      	movs	r3, #15
 8001952:	18fb      	adds	r3, r7, r3
 8001954:	781b      	ldrb	r3, [r3, #0]
}
 8001956:	0018      	movs	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	b005      	add	sp, #20
 800195c:	bd90      	pop	{r4, r7, pc}
 800195e:	46c0      	nop			@ (mov r8, r8)
 8001960:	20000020 	.word	0x20000020
 8001964:	20000000 	.word	0x20000000
 8001968:	2000001c 	.word	0x2000001c

0800196c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001970:	4b05      	ldr	r3, [pc, #20]	@ (8001988 <HAL_IncTick+0x1c>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	001a      	movs	r2, r3
 8001976:	4b05      	ldr	r3, [pc, #20]	@ (800198c <HAL_IncTick+0x20>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	18d2      	adds	r2, r2, r3
 800197c:	4b03      	ldr	r3, [pc, #12]	@ (800198c <HAL_IncTick+0x20>)
 800197e:	601a      	str	r2, [r3, #0]
}
 8001980:	46c0      	nop			@ (mov r8, r8)
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	46c0      	nop			@ (mov r8, r8)
 8001988:	20000020 	.word	0x20000020
 800198c:	2000025c 	.word	0x2000025c

08001990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  return uwTick;
 8001994:	4b02      	ldr	r3, [pc, #8]	@ (80019a0 <HAL_GetTick+0x10>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	0018      	movs	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	46c0      	nop			@ (mov r8, r8)
 80019a0:	2000025c 	.word	0x2000025c

080019a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019ac:	f7ff fff0 	bl	8001990 <HAL_GetTick>
 80019b0:	0003      	movs	r3, r0
 80019b2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3301      	adds	r3, #1
 80019bc:	d005      	beq.n	80019ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019be:	4b0a      	ldr	r3, [pc, #40]	@ (80019e8 <HAL_Delay+0x44>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	001a      	movs	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	189b      	adds	r3, r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ca:	46c0      	nop			@ (mov r8, r8)
 80019cc:	f7ff ffe0 	bl	8001990 <HAL_GetTick>
 80019d0:	0002      	movs	r2, r0
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d8f7      	bhi.n	80019cc <HAL_Delay+0x28>
  {
  }
}
 80019dc:	46c0      	nop			@ (mov r8, r8)
 80019de:	46c0      	nop			@ (mov r8, r8)
 80019e0:	46bd      	mov	sp, r7
 80019e2:	b004      	add	sp, #16
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	46c0      	nop			@ (mov r8, r8)
 80019e8:	20000020 	.word	0x20000020

080019ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	0002      	movs	r2, r0
 80019f4:	1dfb      	adds	r3, r7, #7
 80019f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80019f8:	1dfb      	adds	r3, r7, #7
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80019fe:	d809      	bhi.n	8001a14 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a00:	1dfb      	adds	r3, r7, #7
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	001a      	movs	r2, r3
 8001a06:	231f      	movs	r3, #31
 8001a08:	401a      	ands	r2, r3
 8001a0a:	4b04      	ldr	r3, [pc, #16]	@ (8001a1c <__NVIC_EnableIRQ+0x30>)
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	4091      	lsls	r1, r2
 8001a10:	000a      	movs	r2, r1
 8001a12:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001a14:	46c0      	nop			@ (mov r8, r8)
 8001a16:	46bd      	mov	sp, r7
 8001a18:	b002      	add	sp, #8
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	e000e100 	.word	0xe000e100

08001a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	0002      	movs	r2, r0
 8001a28:	6039      	str	r1, [r7, #0]
 8001a2a:	1dfb      	adds	r3, r7, #7
 8001a2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a2e:	1dfb      	adds	r3, r7, #7
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a34:	d828      	bhi.n	8001a88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a36:	4a2f      	ldr	r2, [pc, #188]	@ (8001af4 <__NVIC_SetPriority+0xd4>)
 8001a38:	1dfb      	adds	r3, r7, #7
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	b25b      	sxtb	r3, r3
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	33c0      	adds	r3, #192	@ 0xc0
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	589b      	ldr	r3, [r3, r2]
 8001a46:	1dfa      	adds	r2, r7, #7
 8001a48:	7812      	ldrb	r2, [r2, #0]
 8001a4a:	0011      	movs	r1, r2
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	400a      	ands	r2, r1
 8001a50:	00d2      	lsls	r2, r2, #3
 8001a52:	21ff      	movs	r1, #255	@ 0xff
 8001a54:	4091      	lsls	r1, r2
 8001a56:	000a      	movs	r2, r1
 8001a58:	43d2      	mvns	r2, r2
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	019b      	lsls	r3, r3, #6
 8001a62:	22ff      	movs	r2, #255	@ 0xff
 8001a64:	401a      	ands	r2, r3
 8001a66:	1dfb      	adds	r3, r7, #7
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	4003      	ands	r3, r0
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a74:	481f      	ldr	r0, [pc, #124]	@ (8001af4 <__NVIC_SetPriority+0xd4>)
 8001a76:	1dfb      	adds	r3, r7, #7
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	b25b      	sxtb	r3, r3
 8001a7c:	089b      	lsrs	r3, r3, #2
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	33c0      	adds	r3, #192	@ 0xc0
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001a86:	e031      	b.n	8001aec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a88:	4a1b      	ldr	r2, [pc, #108]	@ (8001af8 <__NVIC_SetPriority+0xd8>)
 8001a8a:	1dfb      	adds	r3, r7, #7
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	0019      	movs	r1, r3
 8001a90:	230f      	movs	r3, #15
 8001a92:	400b      	ands	r3, r1
 8001a94:	3b08      	subs	r3, #8
 8001a96:	089b      	lsrs	r3, r3, #2
 8001a98:	3306      	adds	r3, #6
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	18d3      	adds	r3, r2, r3
 8001a9e:	3304      	adds	r3, #4
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	1dfa      	adds	r2, r7, #7
 8001aa4:	7812      	ldrb	r2, [r2, #0]
 8001aa6:	0011      	movs	r1, r2
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	400a      	ands	r2, r1
 8001aac:	00d2      	lsls	r2, r2, #3
 8001aae:	21ff      	movs	r1, #255	@ 0xff
 8001ab0:	4091      	lsls	r1, r2
 8001ab2:	000a      	movs	r2, r1
 8001ab4:	43d2      	mvns	r2, r2
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	019b      	lsls	r3, r3, #6
 8001abe:	22ff      	movs	r2, #255	@ 0xff
 8001ac0:	401a      	ands	r2, r3
 8001ac2:	1dfb      	adds	r3, r7, #7
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	2303      	movs	r3, #3
 8001aca:	4003      	ands	r3, r0
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ad0:	4809      	ldr	r0, [pc, #36]	@ (8001af8 <__NVIC_SetPriority+0xd8>)
 8001ad2:	1dfb      	adds	r3, r7, #7
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	001c      	movs	r4, r3
 8001ad8:	230f      	movs	r3, #15
 8001ada:	4023      	ands	r3, r4
 8001adc:	3b08      	subs	r3, #8
 8001ade:	089b      	lsrs	r3, r3, #2
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	3306      	adds	r3, #6
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	18c3      	adds	r3, r0, r3
 8001ae8:	3304      	adds	r3, #4
 8001aea:	601a      	str	r2, [r3, #0]
}
 8001aec:	46c0      	nop			@ (mov r8, r8)
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b003      	add	sp, #12
 8001af2:	bd90      	pop	{r4, r7, pc}
 8001af4:	e000e100 	.word	0xe000e100
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	1e5a      	subs	r2, r3, #1
 8001b08:	2380      	movs	r3, #128	@ 0x80
 8001b0a:	045b      	lsls	r3, r3, #17
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d301      	bcc.n	8001b14 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b10:	2301      	movs	r3, #1
 8001b12:	e010      	b.n	8001b36 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b14:	4b0a      	ldr	r3, [pc, #40]	@ (8001b40 <SysTick_Config+0x44>)
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	3a01      	subs	r2, #1
 8001b1a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	425b      	negs	r3, r3
 8001b20:	2103      	movs	r1, #3
 8001b22:	0018      	movs	r0, r3
 8001b24:	f7ff ff7c 	bl	8001a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b28:	4b05      	ldr	r3, [pc, #20]	@ (8001b40 <SysTick_Config+0x44>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2e:	4b04      	ldr	r3, [pc, #16]	@ (8001b40 <SysTick_Config+0x44>)
 8001b30:	2207      	movs	r2, #7
 8001b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	0018      	movs	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	b002      	add	sp, #8
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	46c0      	nop			@ (mov r8, r8)
 8001b40:	e000e010 	.word	0xe000e010

08001b44 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	210f      	movs	r1, #15
 8001b50:	187b      	adds	r3, r7, r1
 8001b52:	1c02      	adds	r2, r0, #0
 8001b54:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	187b      	adds	r3, r7, r1
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	b25b      	sxtb	r3, r3
 8001b5e:	0011      	movs	r1, r2
 8001b60:	0018      	movs	r0, r3
 8001b62:	f7ff ff5d 	bl	8001a20 <__NVIC_SetPriority>
}
 8001b66:	46c0      	nop			@ (mov r8, r8)
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	b004      	add	sp, #16
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	0002      	movs	r2, r0
 8001b76:	1dfb      	adds	r3, r7, #7
 8001b78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b7a:	1dfb      	adds	r3, r7, #7
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	b25b      	sxtb	r3, r3
 8001b80:	0018      	movs	r0, r3
 8001b82:	f7ff ff33 	bl	80019ec <__NVIC_EnableIRQ>
}
 8001b86:	46c0      	nop			@ (mov r8, r8)
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	b002      	add	sp, #8
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f7ff ffaf 	bl	8001afc <SysTick_Config>
 8001b9e:	0003      	movs	r3, r0
}
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	b002      	add	sp, #8
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb6:	e147      	b.n	8001e48 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	4091      	lsls	r1, r2
 8001bc2:	000a      	movs	r2, r1
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d100      	bne.n	8001bd0 <HAL_GPIO_Init+0x28>
 8001bce:	e138      	b.n	8001e42 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d005      	beq.n	8001be8 <HAL_GPIO_Init+0x40>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2203      	movs	r2, #3
 8001be2:	4013      	ands	r3, r2
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d130      	bne.n	8001c4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	0013      	movs	r3, r2
 8001bf8:	43da      	mvns	r2, r3
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	68da      	ldr	r2, [r3, #12]
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	0013      	movs	r3, r2
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c1e:	2201      	movs	r2, #1
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	409a      	lsls	r2, r3
 8001c24:	0013      	movs	r3, r2
 8001c26:	43da      	mvns	r2, r3
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	091b      	lsrs	r3, r3, #4
 8001c34:	2201      	movs	r2, #1
 8001c36:	401a      	ands	r2, r3
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	0013      	movs	r3, r2
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2203      	movs	r2, #3
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b03      	cmp	r3, #3
 8001c54:	d017      	beq.n	8001c86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	2203      	movs	r2, #3
 8001c62:	409a      	lsls	r2, r3
 8001c64:	0013      	movs	r3, r2
 8001c66:	43da      	mvns	r2, r3
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	409a      	lsls	r2, r3
 8001c78:	0013      	movs	r3, r2
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d123      	bne.n	8001cda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	08da      	lsrs	r2, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3208      	adds	r2, #8
 8001c9a:	0092      	lsls	r2, r2, #2
 8001c9c:	58d3      	ldr	r3, [r2, r3]
 8001c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2207      	movs	r2, #7
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	220f      	movs	r2, #15
 8001caa:	409a      	lsls	r2, r3
 8001cac:	0013      	movs	r3, r2
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	691a      	ldr	r2, [r3, #16]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	2107      	movs	r1, #7
 8001cbe:	400b      	ands	r3, r1
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	409a      	lsls	r2, r3
 8001cc4:	0013      	movs	r3, r2
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	08da      	lsrs	r2, r3, #3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3208      	adds	r2, #8
 8001cd4:	0092      	lsls	r2, r2, #2
 8001cd6:	6939      	ldr	r1, [r7, #16]
 8001cd8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	0013      	movs	r3, r2
 8001cea:	43da      	mvns	r2, r3
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	401a      	ands	r2, r3
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	0013      	movs	r3, r2
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	23c0      	movs	r3, #192	@ 0xc0
 8001d14:	029b      	lsls	r3, r3, #10
 8001d16:	4013      	ands	r3, r2
 8001d18:	d100      	bne.n	8001d1c <HAL_GPIO_Init+0x174>
 8001d1a:	e092      	b.n	8001e42 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001d1c:	4a50      	ldr	r2, [pc, #320]	@ (8001e60 <HAL_GPIO_Init+0x2b8>)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	3318      	adds	r3, #24
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	589b      	ldr	r3, [r3, r2]
 8001d28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	4013      	ands	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	220f      	movs	r2, #15
 8001d34:	409a      	lsls	r2, r3
 8001d36:	0013      	movs	r3, r2
 8001d38:	43da      	mvns	r2, r3
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	23a0      	movs	r3, #160	@ 0xa0
 8001d44:	05db      	lsls	r3, r3, #23
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d013      	beq.n	8001d72 <HAL_GPIO_Init+0x1ca>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a45      	ldr	r2, [pc, #276]	@ (8001e64 <HAL_GPIO_Init+0x2bc>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00d      	beq.n	8001d6e <HAL_GPIO_Init+0x1c6>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a44      	ldr	r2, [pc, #272]	@ (8001e68 <HAL_GPIO_Init+0x2c0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d007      	beq.n	8001d6a <HAL_GPIO_Init+0x1c2>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a43      	ldr	r2, [pc, #268]	@ (8001e6c <HAL_GPIO_Init+0x2c4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d101      	bne.n	8001d66 <HAL_GPIO_Init+0x1be>
 8001d62:	2303      	movs	r3, #3
 8001d64:	e006      	b.n	8001d74 <HAL_GPIO_Init+0x1cc>
 8001d66:	2305      	movs	r3, #5
 8001d68:	e004      	b.n	8001d74 <HAL_GPIO_Init+0x1cc>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e002      	b.n	8001d74 <HAL_GPIO_Init+0x1cc>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_GPIO_Init+0x1cc>
 8001d72:	2300      	movs	r3, #0
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	2103      	movs	r1, #3
 8001d78:	400a      	ands	r2, r1
 8001d7a:	00d2      	lsls	r2, r2, #3
 8001d7c:	4093      	lsls	r3, r2
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001d84:	4936      	ldr	r1, [pc, #216]	@ (8001e60 <HAL_GPIO_Init+0x2b8>)
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	089b      	lsrs	r3, r3, #2
 8001d8a:	3318      	adds	r3, #24
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d92:	4b33      	ldr	r3, [pc, #204]	@ (8001e60 <HAL_GPIO_Init+0x2b8>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	2380      	movs	r3, #128	@ 0x80
 8001da8:	035b      	lsls	r3, r3, #13
 8001daa:	4013      	ands	r3, r2
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001db6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e60 <HAL_GPIO_Init+0x2b8>)
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001dbc:	4b28      	ldr	r3, [pc, #160]	@ (8001e60 <HAL_GPIO_Init+0x2b8>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	43da      	mvns	r2, r3
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	2380      	movs	r3, #128	@ 0x80
 8001dd2:	039b      	lsls	r3, r3, #14
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d003      	beq.n	8001de0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001de0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e60 <HAL_GPIO_Init+0x2b8>)
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001de6:	4a1e      	ldr	r2, [pc, #120]	@ (8001e60 <HAL_GPIO_Init+0x2b8>)
 8001de8:	2384      	movs	r3, #132	@ 0x84
 8001dea:	58d3      	ldr	r3, [r2, r3]
 8001dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	43da      	mvns	r2, r3
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4013      	ands	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	2380      	movs	r3, #128	@ 0x80
 8001dfe:	029b      	lsls	r3, r3, #10
 8001e00:	4013      	ands	r3, r2
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e0c:	4914      	ldr	r1, [pc, #80]	@ (8001e60 <HAL_GPIO_Init+0x2b8>)
 8001e0e:	2284      	movs	r2, #132	@ 0x84
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001e14:	4a12      	ldr	r2, [pc, #72]	@ (8001e60 <HAL_GPIO_Init+0x2b8>)
 8001e16:	2380      	movs	r3, #128	@ 0x80
 8001e18:	58d3      	ldr	r3, [r2, r3]
 8001e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4013      	ands	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	2380      	movs	r3, #128	@ 0x80
 8001e2c:	025b      	lsls	r3, r3, #9
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e3a:	4909      	ldr	r1, [pc, #36]	@ (8001e60 <HAL_GPIO_Init+0x2b8>)
 8001e3c:	2280      	movs	r2, #128	@ 0x80
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	3301      	adds	r3, #1
 8001e46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	40da      	lsrs	r2, r3
 8001e50:	1e13      	subs	r3, r2, #0
 8001e52:	d000      	beq.n	8001e56 <HAL_GPIO_Init+0x2ae>
 8001e54:	e6b0      	b.n	8001bb8 <HAL_GPIO_Init+0x10>
  }
}
 8001e56:	46c0      	nop			@ (mov r8, r8)
 8001e58:	46c0      	nop			@ (mov r8, r8)
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b006      	add	sp, #24
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40021800 	.word	0x40021800
 8001e64:	50000400 	.word	0x50000400
 8001e68:	50000800 	.word	0x50000800
 8001e6c:	50000c00 	.word	0x50000c00

08001e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	0008      	movs	r0, r1
 8001e7a:	0011      	movs	r1, r2
 8001e7c:	1cbb      	adds	r3, r7, #2
 8001e7e:	1c02      	adds	r2, r0, #0
 8001e80:	801a      	strh	r2, [r3, #0]
 8001e82:	1c7b      	adds	r3, r7, #1
 8001e84:	1c0a      	adds	r2, r1, #0
 8001e86:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e88:	1c7b      	adds	r3, r7, #1
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d004      	beq.n	8001e9a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e90:	1cbb      	adds	r3, r7, #2
 8001e92:	881a      	ldrh	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e98:	e003      	b.n	8001ea2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e9a:	1cbb      	adds	r3, r7, #2
 8001e9c:	881a      	ldrh	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ea2:	46c0      	nop			@ (mov r8, r8)
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	b002      	add	sp, #8
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	0002      	movs	r2, r0
 8001eb4:	1dbb      	adds	r3, r7, #6
 8001eb6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001eb8:	4b10      	ldr	r3, [pc, #64]	@ (8001efc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	1dba      	adds	r2, r7, #6
 8001ebe:	8812      	ldrh	r2, [r2, #0]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d008      	beq.n	8001ed6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8001efc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001ec6:	1dba      	adds	r2, r7, #6
 8001ec8:	8812      	ldrh	r2, [r2, #0]
 8001eca:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001ecc:	1dbb      	adds	r3, r7, #6
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f000 f815 	bl	8001f00 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001ed6:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	1dba      	adds	r2, r7, #6
 8001edc:	8812      	ldrh	r2, [r2, #0]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d008      	beq.n	8001ef4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001ee2:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001ee4:	1dba      	adds	r2, r7, #6
 8001ee6:	8812      	ldrh	r2, [r2, #0]
 8001ee8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001eea:	1dbb      	adds	r3, r7, #6
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	0018      	movs	r0, r3
 8001ef0:	f000 f810 	bl	8001f14 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001ef4:	46c0      	nop			@ (mov r8, r8)
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b002      	add	sp, #8
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40021800 	.word	0x40021800

08001f00 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	0002      	movs	r2, r0
 8001f08:	1dbb      	adds	r3, r7, #6
 8001f0a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001f0c:	46c0      	nop			@ (mov r8, r8)
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b002      	add	sp, #8
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	0002      	movs	r2, r0
 8001f1c:	1dbb      	adds	r3, r7, #6
 8001f1e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001f20:	46c0      	nop			@ (mov r8, r8)
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b002      	add	sp, #8
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001f30:	4b19      	ldr	r3, [pc, #100]	@ (8001f98 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a19      	ldr	r2, [pc, #100]	@ (8001f9c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	0019      	movs	r1, r3
 8001f3a:	4b17      	ldr	r3, [pc, #92]	@ (8001f98 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d11f      	bne.n	8001f8c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001f4c:	4b14      	ldr	r3, [pc, #80]	@ (8001fa0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	0013      	movs	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	189b      	adds	r3, r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4912      	ldr	r1, [pc, #72]	@ (8001fa4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f7fe f8dc 	bl	8000118 <__udivsi3>
 8001f60:	0003      	movs	r3, r0
 8001f62:	3301      	adds	r3, #1
 8001f64:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f66:	e008      	b.n	8001f7a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	3b01      	subs	r3, #1
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	e001      	b.n	8001f7a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e009      	b.n	8001f8e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f7a:	4b07      	ldr	r3, [pc, #28]	@ (8001f98 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f7c:	695a      	ldr	r2, [r3, #20]
 8001f7e:	2380      	movs	r3, #128	@ 0x80
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	401a      	ands	r2, r3
 8001f84:	2380      	movs	r3, #128	@ 0x80
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d0ed      	beq.n	8001f68 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	0018      	movs	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b004      	add	sp, #16
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	46c0      	nop			@ (mov r8, r8)
 8001f98:	40007000 	.word	0x40007000
 8001f9c:	fffff9ff 	.word	0xfffff9ff
 8001fa0:	20000000 	.word	0x20000000
 8001fa4:	000f4240 	.word	0x000f4240

08001fa8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e2fe      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d100      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x1e>
 8001fc4:	e07c      	b.n	80020c0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fc6:	4bc3      	ldr	r3, [pc, #780]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2238      	movs	r2, #56	@ 0x38
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fd0:	4bc0      	ldr	r3, [pc, #768]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	2203      	movs	r2, #3
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	2b10      	cmp	r3, #16
 8001fde:	d102      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x3e>
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d002      	beq.n	8001fec <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d10b      	bne.n	8002004 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fec:	4bb9      	ldr	r3, [pc, #740]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	2380      	movs	r3, #128	@ 0x80
 8001ff2:	029b      	lsls	r3, r3, #10
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d062      	beq.n	80020be <HAL_RCC_OscConfig+0x116>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d15e      	bne.n	80020be <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e2d9      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	2380      	movs	r3, #128	@ 0x80
 800200a:	025b      	lsls	r3, r3, #9
 800200c:	429a      	cmp	r2, r3
 800200e:	d107      	bne.n	8002020 <HAL_RCC_OscConfig+0x78>
 8002010:	4bb0      	ldr	r3, [pc, #704]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4baf      	ldr	r3, [pc, #700]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002016:	2180      	movs	r1, #128	@ 0x80
 8002018:	0249      	lsls	r1, r1, #9
 800201a:	430a      	orrs	r2, r1
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	e020      	b.n	8002062 <HAL_RCC_OscConfig+0xba>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	23a0      	movs	r3, #160	@ 0xa0
 8002026:	02db      	lsls	r3, r3, #11
 8002028:	429a      	cmp	r2, r3
 800202a:	d10e      	bne.n	800204a <HAL_RCC_OscConfig+0xa2>
 800202c:	4ba9      	ldr	r3, [pc, #676]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4ba8      	ldr	r3, [pc, #672]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002032:	2180      	movs	r1, #128	@ 0x80
 8002034:	02c9      	lsls	r1, r1, #11
 8002036:	430a      	orrs	r2, r1
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	4ba6      	ldr	r3, [pc, #664]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4ba5      	ldr	r3, [pc, #660]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002040:	2180      	movs	r1, #128	@ 0x80
 8002042:	0249      	lsls	r1, r1, #9
 8002044:	430a      	orrs	r2, r1
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	e00b      	b.n	8002062 <HAL_RCC_OscConfig+0xba>
 800204a:	4ba2      	ldr	r3, [pc, #648]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	4ba1      	ldr	r3, [pc, #644]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002050:	49a1      	ldr	r1, [pc, #644]	@ (80022d8 <HAL_RCC_OscConfig+0x330>)
 8002052:	400a      	ands	r2, r1
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	4b9f      	ldr	r3, [pc, #636]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	4b9e      	ldr	r3, [pc, #632]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 800205c:	499f      	ldr	r1, [pc, #636]	@ (80022dc <HAL_RCC_OscConfig+0x334>)
 800205e:	400a      	ands	r2, r1
 8002060:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d014      	beq.n	8002094 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206a:	f7ff fc91 	bl	8001990 <HAL_GetTick>
 800206e:	0003      	movs	r3, r0
 8002070:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002074:	f7ff fc8c 	bl	8001990 <HAL_GetTick>
 8002078:	0002      	movs	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b64      	cmp	r3, #100	@ 0x64
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e298      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002086:	4b93      	ldr	r3, [pc, #588]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	2380      	movs	r3, #128	@ 0x80
 800208c:	029b      	lsls	r3, r3, #10
 800208e:	4013      	ands	r3, r2
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0xcc>
 8002092:	e015      	b.n	80020c0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002094:	f7ff fc7c 	bl	8001990 <HAL_GetTick>
 8002098:	0003      	movs	r3, r0
 800209a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800209e:	f7ff fc77 	bl	8001990 <HAL_GetTick>
 80020a2:	0002      	movs	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b64      	cmp	r3, #100	@ 0x64
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e283      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020b0:	4b88      	ldr	r3, [pc, #544]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	2380      	movs	r3, #128	@ 0x80
 80020b6:	029b      	lsls	r3, r3, #10
 80020b8:	4013      	ands	r3, r2
 80020ba:	d1f0      	bne.n	800209e <HAL_RCC_OscConfig+0xf6>
 80020bc:	e000      	b.n	80020c0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020be:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2202      	movs	r2, #2
 80020c6:	4013      	ands	r3, r2
 80020c8:	d100      	bne.n	80020cc <HAL_RCC_OscConfig+0x124>
 80020ca:	e099      	b.n	8002200 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020cc:	4b81      	ldr	r3, [pc, #516]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	2238      	movs	r2, #56	@ 0x38
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020d6:	4b7f      	ldr	r3, [pc, #508]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	2203      	movs	r2, #3
 80020dc:	4013      	ands	r3, r2
 80020de:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	2b10      	cmp	r3, #16
 80020e4:	d102      	bne.n	80020ec <HAL_RCC_OscConfig+0x144>
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d002      	beq.n	80020f2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d135      	bne.n	800215e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020f2:	4b78      	ldr	r3, [pc, #480]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	2380      	movs	r3, #128	@ 0x80
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4013      	ands	r3, r2
 80020fc:	d005      	beq.n	800210a <HAL_RCC_OscConfig+0x162>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e256      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210a:	4b72      	ldr	r3, [pc, #456]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	4a74      	ldr	r2, [pc, #464]	@ (80022e0 <HAL_RCC_OscConfig+0x338>)
 8002110:	4013      	ands	r3, r2
 8002112:	0019      	movs	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	021a      	lsls	r2, r3, #8
 800211a:	4b6e      	ldr	r3, [pc, #440]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 800211c:	430a      	orrs	r2, r1
 800211e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d112      	bne.n	800214c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002126:	4b6b      	ldr	r3, [pc, #428]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a6e      	ldr	r2, [pc, #440]	@ (80022e4 <HAL_RCC_OscConfig+0x33c>)
 800212c:	4013      	ands	r3, r2
 800212e:	0019      	movs	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	4b67      	ldr	r3, [pc, #412]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002136:	430a      	orrs	r2, r1
 8002138:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800213a:	4b66      	ldr	r3, [pc, #408]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	0adb      	lsrs	r3, r3, #11
 8002140:	2207      	movs	r2, #7
 8002142:	4013      	ands	r3, r2
 8002144:	4a68      	ldr	r2, [pc, #416]	@ (80022e8 <HAL_RCC_OscConfig+0x340>)
 8002146:	40da      	lsrs	r2, r3
 8002148:	4b68      	ldr	r3, [pc, #416]	@ (80022ec <HAL_RCC_OscConfig+0x344>)
 800214a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800214c:	4b68      	ldr	r3, [pc, #416]	@ (80022f0 <HAL_RCC_OscConfig+0x348>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	0018      	movs	r0, r3
 8002152:	f7ff fbc1 	bl	80018d8 <HAL_InitTick>
 8002156:	1e03      	subs	r3, r0, #0
 8002158:	d051      	beq.n	80021fe <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e22c      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d030      	beq.n	80021c8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002166:	4b5b      	ldr	r3, [pc, #364]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a5e      	ldr	r2, [pc, #376]	@ (80022e4 <HAL_RCC_OscConfig+0x33c>)
 800216c:	4013      	ands	r3, r2
 800216e:	0019      	movs	r1, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	4b57      	ldr	r3, [pc, #348]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002176:	430a      	orrs	r2, r1
 8002178:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800217a:	4b56      	ldr	r3, [pc, #344]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4b55      	ldr	r3, [pc, #340]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002180:	2180      	movs	r1, #128	@ 0x80
 8002182:	0049      	lsls	r1, r1, #1
 8002184:	430a      	orrs	r2, r1
 8002186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7ff fc02 	bl	8001990 <HAL_GetTick>
 800218c:	0003      	movs	r3, r0
 800218e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002192:	f7ff fbfd 	bl	8001990 <HAL_GetTick>
 8002196:	0002      	movs	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e209      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021a4:	4b4b      	ldr	r3, [pc, #300]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	2380      	movs	r3, #128	@ 0x80
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4013      	ands	r3, r2
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b0:	4b48      	ldr	r3, [pc, #288]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	4a4a      	ldr	r2, [pc, #296]	@ (80022e0 <HAL_RCC_OscConfig+0x338>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	0019      	movs	r1, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	021a      	lsls	r2, r3, #8
 80021c0:	4b44      	ldr	r3, [pc, #272]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 80021c2:	430a      	orrs	r2, r1
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	e01b      	b.n	8002200 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80021c8:	4b42      	ldr	r3, [pc, #264]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b41      	ldr	r3, [pc, #260]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 80021ce:	4949      	ldr	r1, [pc, #292]	@ (80022f4 <HAL_RCC_OscConfig+0x34c>)
 80021d0:	400a      	ands	r2, r1
 80021d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d4:	f7ff fbdc 	bl	8001990 <HAL_GetTick>
 80021d8:	0003      	movs	r3, r0
 80021da:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021de:	f7ff fbd7 	bl	8001990 <HAL_GetTick>
 80021e2:	0002      	movs	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e1e3      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021f0:	4b38      	ldr	r3, [pc, #224]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	2380      	movs	r3, #128	@ 0x80
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4013      	ands	r3, r2
 80021fa:	d1f0      	bne.n	80021de <HAL_RCC_OscConfig+0x236>
 80021fc:	e000      	b.n	8002200 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021fe:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2208      	movs	r2, #8
 8002206:	4013      	ands	r3, r2
 8002208:	d047      	beq.n	800229a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800220a:	4b32      	ldr	r3, [pc, #200]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2238      	movs	r2, #56	@ 0x38
 8002210:	4013      	ands	r3, r2
 8002212:	2b18      	cmp	r3, #24
 8002214:	d10a      	bne.n	800222c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002216:	4b2f      	ldr	r3, [pc, #188]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800221a:	2202      	movs	r2, #2
 800221c:	4013      	ands	r3, r2
 800221e:	d03c      	beq.n	800229a <HAL_RCC_OscConfig+0x2f2>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d138      	bne.n	800229a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e1c5      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d019      	beq.n	8002268 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002234:	4b27      	ldr	r3, [pc, #156]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002236:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002238:	4b26      	ldr	r3, [pc, #152]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 800223a:	2101      	movs	r1, #1
 800223c:	430a      	orrs	r2, r1
 800223e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002240:	f7ff fba6 	bl	8001990 <HAL_GetTick>
 8002244:	0003      	movs	r3, r0
 8002246:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800224a:	f7ff fba1 	bl	8001990 <HAL_GetTick>
 800224e:	0002      	movs	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e1ad      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800225c:	4b1d      	ldr	r3, [pc, #116]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 800225e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002260:	2202      	movs	r2, #2
 8002262:	4013      	ands	r3, r2
 8002264:	d0f1      	beq.n	800224a <HAL_RCC_OscConfig+0x2a2>
 8002266:	e018      	b.n	800229a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002268:	4b1a      	ldr	r3, [pc, #104]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 800226a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800226c:	4b19      	ldr	r3, [pc, #100]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 800226e:	2101      	movs	r1, #1
 8002270:	438a      	bics	r2, r1
 8002272:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002274:	f7ff fb8c 	bl	8001990 <HAL_GetTick>
 8002278:	0003      	movs	r3, r0
 800227a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800227e:	f7ff fb87 	bl	8001990 <HAL_GetTick>
 8002282:	0002      	movs	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e193      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002290:	4b10      	ldr	r3, [pc, #64]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 8002292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002294:	2202      	movs	r2, #2
 8002296:	4013      	ands	r3, r2
 8002298:	d1f1      	bne.n	800227e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2204      	movs	r2, #4
 80022a0:	4013      	ands	r3, r2
 80022a2:	d100      	bne.n	80022a6 <HAL_RCC_OscConfig+0x2fe>
 80022a4:	e0c6      	b.n	8002434 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022a6:	231f      	movs	r3, #31
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80022ae:	4b09      	ldr	r3, [pc, #36]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2238      	movs	r2, #56	@ 0x38
 80022b4:	4013      	ands	r3, r2
 80022b6:	2b20      	cmp	r3, #32
 80022b8:	d11e      	bne.n	80022f8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80022ba:	4b06      	ldr	r3, [pc, #24]	@ (80022d4 <HAL_RCC_OscConfig+0x32c>)
 80022bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022be:	2202      	movs	r2, #2
 80022c0:	4013      	ands	r3, r2
 80022c2:	d100      	bne.n	80022c6 <HAL_RCC_OscConfig+0x31e>
 80022c4:	e0b6      	b.n	8002434 <HAL_RCC_OscConfig+0x48c>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d000      	beq.n	80022d0 <HAL_RCC_OscConfig+0x328>
 80022ce:	e0b1      	b.n	8002434 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e171      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
 80022d4:	40021000 	.word	0x40021000
 80022d8:	fffeffff 	.word	0xfffeffff
 80022dc:	fffbffff 	.word	0xfffbffff
 80022e0:	ffff80ff 	.word	0xffff80ff
 80022e4:	ffffc7ff 	.word	0xffffc7ff
 80022e8:	00f42400 	.word	0x00f42400
 80022ec:	20000000 	.word	0x20000000
 80022f0:	2000001c 	.word	0x2000001c
 80022f4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022f8:	4bb1      	ldr	r3, [pc, #708]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 80022fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022fc:	2380      	movs	r3, #128	@ 0x80
 80022fe:	055b      	lsls	r3, r3, #21
 8002300:	4013      	ands	r3, r2
 8002302:	d101      	bne.n	8002308 <HAL_RCC_OscConfig+0x360>
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <HAL_RCC_OscConfig+0x362>
 8002308:	2300      	movs	r3, #0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d011      	beq.n	8002332 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800230e:	4bac      	ldr	r3, [pc, #688]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 8002310:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002312:	4bab      	ldr	r3, [pc, #684]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 8002314:	2180      	movs	r1, #128	@ 0x80
 8002316:	0549      	lsls	r1, r1, #21
 8002318:	430a      	orrs	r2, r1
 800231a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800231c:	4ba8      	ldr	r3, [pc, #672]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 800231e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002320:	2380      	movs	r3, #128	@ 0x80
 8002322:	055b      	lsls	r3, r3, #21
 8002324:	4013      	ands	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800232a:	231f      	movs	r3, #31
 800232c:	18fb      	adds	r3, r7, r3
 800232e:	2201      	movs	r2, #1
 8002330:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002332:	4ba4      	ldr	r3, [pc, #656]	@ (80025c4 <HAL_RCC_OscConfig+0x61c>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	2380      	movs	r3, #128	@ 0x80
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	4013      	ands	r3, r2
 800233c:	d11a      	bne.n	8002374 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800233e:	4ba1      	ldr	r3, [pc, #644]	@ (80025c4 <HAL_RCC_OscConfig+0x61c>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	4ba0      	ldr	r3, [pc, #640]	@ (80025c4 <HAL_RCC_OscConfig+0x61c>)
 8002344:	2180      	movs	r1, #128	@ 0x80
 8002346:	0049      	lsls	r1, r1, #1
 8002348:	430a      	orrs	r2, r1
 800234a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800234c:	f7ff fb20 	bl	8001990 <HAL_GetTick>
 8002350:	0003      	movs	r3, r0
 8002352:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002356:	f7ff fb1b 	bl	8001990 <HAL_GetTick>
 800235a:	0002      	movs	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e127      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002368:	4b96      	ldr	r3, [pc, #600]	@ (80025c4 <HAL_RCC_OscConfig+0x61c>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	2380      	movs	r3, #128	@ 0x80
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4013      	ands	r3, r2
 8002372:	d0f0      	beq.n	8002356 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d106      	bne.n	800238a <HAL_RCC_OscConfig+0x3e2>
 800237c:	4b90      	ldr	r3, [pc, #576]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 800237e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002380:	4b8f      	ldr	r3, [pc, #572]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 8002382:	2101      	movs	r1, #1
 8002384:	430a      	orrs	r2, r1
 8002386:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002388:	e01c      	b.n	80023c4 <HAL_RCC_OscConfig+0x41c>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2b05      	cmp	r3, #5
 8002390:	d10c      	bne.n	80023ac <HAL_RCC_OscConfig+0x404>
 8002392:	4b8b      	ldr	r3, [pc, #556]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 8002394:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002396:	4b8a      	ldr	r3, [pc, #552]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 8002398:	2104      	movs	r1, #4
 800239a:	430a      	orrs	r2, r1
 800239c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800239e:	4b88      	ldr	r3, [pc, #544]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 80023a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023a2:	4b87      	ldr	r3, [pc, #540]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 80023a4:	2101      	movs	r1, #1
 80023a6:	430a      	orrs	r2, r1
 80023a8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023aa:	e00b      	b.n	80023c4 <HAL_RCC_OscConfig+0x41c>
 80023ac:	4b84      	ldr	r3, [pc, #528]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 80023ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023b0:	4b83      	ldr	r3, [pc, #524]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 80023b2:	2101      	movs	r1, #1
 80023b4:	438a      	bics	r2, r1
 80023b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023b8:	4b81      	ldr	r3, [pc, #516]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 80023ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023bc:	4b80      	ldr	r3, [pc, #512]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 80023be:	2104      	movs	r1, #4
 80023c0:	438a      	bics	r2, r1
 80023c2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d014      	beq.n	80023f6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7ff fae0 	bl	8001990 <HAL_GetTick>
 80023d0:	0003      	movs	r3, r0
 80023d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023d4:	e009      	b.n	80023ea <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d6:	f7ff fadb 	bl	8001990 <HAL_GetTick>
 80023da:	0002      	movs	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	4a79      	ldr	r2, [pc, #484]	@ (80025c8 <HAL_RCC_OscConfig+0x620>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e0e6      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ea:	4b75      	ldr	r3, [pc, #468]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 80023ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ee:	2202      	movs	r2, #2
 80023f0:	4013      	ands	r3, r2
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x42e>
 80023f4:	e013      	b.n	800241e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f6:	f7ff facb 	bl	8001990 <HAL_GetTick>
 80023fa:	0003      	movs	r3, r0
 80023fc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023fe:	e009      	b.n	8002414 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002400:	f7ff fac6 	bl	8001990 <HAL_GetTick>
 8002404:	0002      	movs	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	4a6f      	ldr	r2, [pc, #444]	@ (80025c8 <HAL_RCC_OscConfig+0x620>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e0d1      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002414:	4b6a      	ldr	r3, [pc, #424]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 8002416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002418:	2202      	movs	r2, #2
 800241a:	4013      	ands	r3, r2
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800241e:	231f      	movs	r3, #31
 8002420:	18fb      	adds	r3, r7, r3
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d105      	bne.n	8002434 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002428:	4b65      	ldr	r3, [pc, #404]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 800242a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800242c:	4b64      	ldr	r3, [pc, #400]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 800242e:	4967      	ldr	r1, [pc, #412]	@ (80025cc <HAL_RCC_OscConfig+0x624>)
 8002430:	400a      	ands	r2, r1
 8002432:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d100      	bne.n	800243e <HAL_RCC_OscConfig+0x496>
 800243c:	e0bb      	b.n	80025b6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800243e:	4b60      	ldr	r3, [pc, #384]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2238      	movs	r2, #56	@ 0x38
 8002444:	4013      	ands	r3, r2
 8002446:	2b10      	cmp	r3, #16
 8002448:	d100      	bne.n	800244c <HAL_RCC_OscConfig+0x4a4>
 800244a:	e07b      	b.n	8002544 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	2b02      	cmp	r3, #2
 8002452:	d156      	bne.n	8002502 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002454:	4b5a      	ldr	r3, [pc, #360]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4b59      	ldr	r3, [pc, #356]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 800245a:	495d      	ldr	r1, [pc, #372]	@ (80025d0 <HAL_RCC_OscConfig+0x628>)
 800245c:	400a      	ands	r2, r1
 800245e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7ff fa96 	bl	8001990 <HAL_GetTick>
 8002464:	0003      	movs	r3, r0
 8002466:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246a:	f7ff fa91 	bl	8001990 <HAL_GetTick>
 800246e:	0002      	movs	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e09d      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800247c:	4b50      	ldr	r3, [pc, #320]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	2380      	movs	r3, #128	@ 0x80
 8002482:	049b      	lsls	r3, r3, #18
 8002484:	4013      	ands	r3, r2
 8002486:	d1f0      	bne.n	800246a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002488:	4b4d      	ldr	r3, [pc, #308]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4a51      	ldr	r2, [pc, #324]	@ (80025d4 <HAL_RCC_OscConfig+0x62c>)
 800248e:	4013      	ands	r3, r2
 8002490:	0019      	movs	r1, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1a      	ldr	r2, [r3, #32]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a0:	021b      	lsls	r3, r3, #8
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a8:	431a      	orrs	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024b4:	431a      	orrs	r2, r3
 80024b6:	4b42      	ldr	r3, [pc, #264]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 80024b8:	430a      	orrs	r2, r1
 80024ba:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024bc:	4b40      	ldr	r3, [pc, #256]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4b3f      	ldr	r3, [pc, #252]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 80024c2:	2180      	movs	r1, #128	@ 0x80
 80024c4:	0449      	lsls	r1, r1, #17
 80024c6:	430a      	orrs	r2, r1
 80024c8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80024ca:	4b3d      	ldr	r3, [pc, #244]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	4b3c      	ldr	r3, [pc, #240]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 80024d0:	2180      	movs	r1, #128	@ 0x80
 80024d2:	0549      	lsls	r1, r1, #21
 80024d4:	430a      	orrs	r2, r1
 80024d6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d8:	f7ff fa5a 	bl	8001990 <HAL_GetTick>
 80024dc:	0003      	movs	r3, r0
 80024de:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e2:	f7ff fa55 	bl	8001990 <HAL_GetTick>
 80024e6:	0002      	movs	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e061      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024f4:	4b32      	ldr	r3, [pc, #200]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	2380      	movs	r3, #128	@ 0x80
 80024fa:	049b      	lsls	r3, r3, #18
 80024fc:	4013      	ands	r3, r2
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x53a>
 8002500:	e059      	b.n	80025b6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002502:	4b2f      	ldr	r3, [pc, #188]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	4b2e      	ldr	r3, [pc, #184]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 8002508:	4931      	ldr	r1, [pc, #196]	@ (80025d0 <HAL_RCC_OscConfig+0x628>)
 800250a:	400a      	ands	r2, r1
 800250c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250e:	f7ff fa3f 	bl	8001990 <HAL_GetTick>
 8002512:	0003      	movs	r3, r0
 8002514:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002518:	f7ff fa3a 	bl	8001990 <HAL_GetTick>
 800251c:	0002      	movs	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e046      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800252a:	4b25      	ldr	r3, [pc, #148]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	2380      	movs	r3, #128	@ 0x80
 8002530:	049b      	lsls	r3, r3, #18
 8002532:	4013      	ands	r3, r2
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002536:	4b22      	ldr	r3, [pc, #136]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	4b21      	ldr	r3, [pc, #132]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 800253c:	4926      	ldr	r1, [pc, #152]	@ (80025d8 <HAL_RCC_OscConfig+0x630>)
 800253e:	400a      	ands	r2, r1
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	e038      	b.n	80025b6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e033      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002550:	4b1b      	ldr	r3, [pc, #108]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	2203      	movs	r2, #3
 800255a:	401a      	ands	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	429a      	cmp	r2, r3
 8002562:	d126      	bne.n	80025b2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	2270      	movs	r2, #112	@ 0x70
 8002568:	401a      	ands	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256e:	429a      	cmp	r2, r3
 8002570:	d11f      	bne.n	80025b2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	23fe      	movs	r3, #254	@ 0xfe
 8002576:	01db      	lsls	r3, r3, #7
 8002578:	401a      	ands	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002580:	429a      	cmp	r2, r3
 8002582:	d116      	bne.n	80025b2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	23f8      	movs	r3, #248	@ 0xf8
 8002588:	039b      	lsls	r3, r3, #14
 800258a:	401a      	ands	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002590:	429a      	cmp	r2, r3
 8002592:	d10e      	bne.n	80025b2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	23e0      	movs	r3, #224	@ 0xe0
 8002598:	051b      	lsls	r3, r3, #20
 800259a:	401a      	ands	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d106      	bne.n	80025b2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	0f5b      	lsrs	r3, r3, #29
 80025a8:	075a      	lsls	r2, r3, #29
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d001      	beq.n	80025b6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	0018      	movs	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b008      	add	sp, #32
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40007000 	.word	0x40007000
 80025c8:	00001388 	.word	0x00001388
 80025cc:	efffffff 	.word	0xefffffff
 80025d0:	feffffff 	.word	0xfeffffff
 80025d4:	11c1808c 	.word	0x11c1808c
 80025d8:	eefefffc 	.word	0xeefefffc

080025dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0e9      	b.n	80027c4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025f0:	4b76      	ldr	r3, [pc, #472]	@ (80027cc <HAL_RCC_ClockConfig+0x1f0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2207      	movs	r2, #7
 80025f6:	4013      	ands	r3, r2
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d91e      	bls.n	800263c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fe:	4b73      	ldr	r3, [pc, #460]	@ (80027cc <HAL_RCC_ClockConfig+0x1f0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2207      	movs	r2, #7
 8002604:	4393      	bics	r3, r2
 8002606:	0019      	movs	r1, r3
 8002608:	4b70      	ldr	r3, [pc, #448]	@ (80027cc <HAL_RCC_ClockConfig+0x1f0>)
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002610:	f7ff f9be 	bl	8001990 <HAL_GetTick>
 8002614:	0003      	movs	r3, r0
 8002616:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002618:	e009      	b.n	800262e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800261a:	f7ff f9b9 	bl	8001990 <HAL_GetTick>
 800261e:	0002      	movs	r2, r0
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	4a6a      	ldr	r2, [pc, #424]	@ (80027d0 <HAL_RCC_ClockConfig+0x1f4>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e0ca      	b.n	80027c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800262e:	4b67      	ldr	r3, [pc, #412]	@ (80027cc <HAL_RCC_ClockConfig+0x1f0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2207      	movs	r2, #7
 8002634:	4013      	ands	r3, r2
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d1ee      	bne.n	800261a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2202      	movs	r2, #2
 8002642:	4013      	ands	r3, r2
 8002644:	d015      	beq.n	8002672 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2204      	movs	r2, #4
 800264c:	4013      	ands	r3, r2
 800264e:	d006      	beq.n	800265e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002650:	4b60      	ldr	r3, [pc, #384]	@ (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	4b5f      	ldr	r3, [pc, #380]	@ (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002656:	21e0      	movs	r1, #224	@ 0xe0
 8002658:	01c9      	lsls	r1, r1, #7
 800265a:	430a      	orrs	r2, r1
 800265c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800265e:	4b5d      	ldr	r3, [pc, #372]	@ (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	4a5d      	ldr	r2, [pc, #372]	@ (80027d8 <HAL_RCC_ClockConfig+0x1fc>)
 8002664:	4013      	ands	r3, r2
 8002666:	0019      	movs	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	4b59      	ldr	r3, [pc, #356]	@ (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 800266e:	430a      	orrs	r2, r1
 8002670:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2201      	movs	r2, #1
 8002678:	4013      	ands	r3, r2
 800267a:	d057      	beq.n	800272c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d107      	bne.n	8002694 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002684:	4b53      	ldr	r3, [pc, #332]	@ (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	2380      	movs	r3, #128	@ 0x80
 800268a:	029b      	lsls	r3, r3, #10
 800268c:	4013      	ands	r3, r2
 800268e:	d12b      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e097      	b.n	80027c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d107      	bne.n	80026ac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800269c:	4b4d      	ldr	r3, [pc, #308]	@ (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	2380      	movs	r3, #128	@ 0x80
 80026a2:	049b      	lsls	r3, r3, #18
 80026a4:	4013      	ands	r3, r2
 80026a6:	d11f      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e08b      	b.n	80027c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d107      	bne.n	80026c4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026b4:	4b47      	ldr	r3, [pc, #284]	@ (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	2380      	movs	r3, #128	@ 0x80
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4013      	ands	r3, r2
 80026be:	d113      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e07f      	b.n	80027c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b03      	cmp	r3, #3
 80026ca:	d106      	bne.n	80026da <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026cc:	4b41      	ldr	r3, [pc, #260]	@ (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 80026ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026d0:	2202      	movs	r2, #2
 80026d2:	4013      	ands	r3, r2
 80026d4:	d108      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e074      	b.n	80027c4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026da:	4b3e      	ldr	r3, [pc, #248]	@ (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 80026dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026de:	2202      	movs	r2, #2
 80026e0:	4013      	ands	r3, r2
 80026e2:	d101      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e06d      	b.n	80027c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026e8:	4b3a      	ldr	r3, [pc, #232]	@ (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2207      	movs	r2, #7
 80026ee:	4393      	bics	r3, r2
 80026f0:	0019      	movs	r1, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	4b37      	ldr	r3, [pc, #220]	@ (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 80026f8:	430a      	orrs	r2, r1
 80026fa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026fc:	f7ff f948 	bl	8001990 <HAL_GetTick>
 8002700:	0003      	movs	r3, r0
 8002702:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002704:	e009      	b.n	800271a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002706:	f7ff f943 	bl	8001990 <HAL_GetTick>
 800270a:	0002      	movs	r2, r0
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	4a2f      	ldr	r2, [pc, #188]	@ (80027d0 <HAL_RCC_ClockConfig+0x1f4>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e054      	b.n	80027c4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271a:	4b2e      	ldr	r3, [pc, #184]	@ (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2238      	movs	r2, #56	@ 0x38
 8002720:	401a      	ands	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	429a      	cmp	r2, r3
 800272a:	d1ec      	bne.n	8002706 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800272c:	4b27      	ldr	r3, [pc, #156]	@ (80027cc <HAL_RCC_ClockConfig+0x1f0>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2207      	movs	r2, #7
 8002732:	4013      	ands	r3, r2
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d21e      	bcs.n	8002778 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273a:	4b24      	ldr	r3, [pc, #144]	@ (80027cc <HAL_RCC_ClockConfig+0x1f0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2207      	movs	r2, #7
 8002740:	4393      	bics	r3, r2
 8002742:	0019      	movs	r1, r3
 8002744:	4b21      	ldr	r3, [pc, #132]	@ (80027cc <HAL_RCC_ClockConfig+0x1f0>)
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800274c:	f7ff f920 	bl	8001990 <HAL_GetTick>
 8002750:	0003      	movs	r3, r0
 8002752:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002754:	e009      	b.n	800276a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002756:	f7ff f91b 	bl	8001990 <HAL_GetTick>
 800275a:	0002      	movs	r2, r0
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	4a1b      	ldr	r2, [pc, #108]	@ (80027d0 <HAL_RCC_ClockConfig+0x1f4>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e02c      	b.n	80027c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800276a:	4b18      	ldr	r3, [pc, #96]	@ (80027cc <HAL_RCC_ClockConfig+0x1f0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2207      	movs	r2, #7
 8002770:	4013      	ands	r3, r2
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d1ee      	bne.n	8002756 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2204      	movs	r2, #4
 800277e:	4013      	ands	r3, r2
 8002780:	d009      	beq.n	8002796 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002782:	4b14      	ldr	r3, [pc, #80]	@ (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	4a15      	ldr	r2, [pc, #84]	@ (80027dc <HAL_RCC_ClockConfig+0x200>)
 8002788:	4013      	ands	r3, r2
 800278a:	0019      	movs	r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	4b10      	ldr	r3, [pc, #64]	@ (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 8002792:	430a      	orrs	r2, r1
 8002794:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002796:	f000 f829 	bl	80027ec <HAL_RCC_GetSysClockFreq>
 800279a:	0001      	movs	r1, r0
 800279c:	4b0d      	ldr	r3, [pc, #52]	@ (80027d4 <HAL_RCC_ClockConfig+0x1f8>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	0a1b      	lsrs	r3, r3, #8
 80027a2:	220f      	movs	r2, #15
 80027a4:	401a      	ands	r2, r3
 80027a6:	4b0e      	ldr	r3, [pc, #56]	@ (80027e0 <HAL_RCC_ClockConfig+0x204>)
 80027a8:	0092      	lsls	r2, r2, #2
 80027aa:	58d3      	ldr	r3, [r2, r3]
 80027ac:	221f      	movs	r2, #31
 80027ae:	4013      	ands	r3, r2
 80027b0:	000a      	movs	r2, r1
 80027b2:	40da      	lsrs	r2, r3
 80027b4:	4b0b      	ldr	r3, [pc, #44]	@ (80027e4 <HAL_RCC_ClockConfig+0x208>)
 80027b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80027b8:	4b0b      	ldr	r3, [pc, #44]	@ (80027e8 <HAL_RCC_ClockConfig+0x20c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	0018      	movs	r0, r3
 80027be:	f7ff f88b 	bl	80018d8 <HAL_InitTick>
 80027c2:	0003      	movs	r3, r0
}
 80027c4:	0018      	movs	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	b004      	add	sp, #16
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40022000 	.word	0x40022000
 80027d0:	00001388 	.word	0x00001388
 80027d4:	40021000 	.word	0x40021000
 80027d8:	fffff0ff 	.word	0xfffff0ff
 80027dc:	ffff8fff 	.word	0xffff8fff
 80027e0:	08005828 	.word	0x08005828
 80027e4:	20000000 	.word	0x20000000
 80027e8:	2000001c 	.word	0x2000001c

080027ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027f2:	4b3c      	ldr	r3, [pc, #240]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2238      	movs	r2, #56	@ 0x38
 80027f8:	4013      	ands	r3, r2
 80027fa:	d10f      	bne.n	800281c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80027fc:	4b39      	ldr	r3, [pc, #228]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	0adb      	lsrs	r3, r3, #11
 8002802:	2207      	movs	r2, #7
 8002804:	4013      	ands	r3, r2
 8002806:	2201      	movs	r2, #1
 8002808:	409a      	lsls	r2, r3
 800280a:	0013      	movs	r3, r2
 800280c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800280e:	6839      	ldr	r1, [r7, #0]
 8002810:	4835      	ldr	r0, [pc, #212]	@ (80028e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002812:	f7fd fc81 	bl	8000118 <__udivsi3>
 8002816:	0003      	movs	r3, r0
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	e05d      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800281c:	4b31      	ldr	r3, [pc, #196]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	2238      	movs	r2, #56	@ 0x38
 8002822:	4013      	ands	r3, r2
 8002824:	2b08      	cmp	r3, #8
 8002826:	d102      	bne.n	800282e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002828:	4b30      	ldr	r3, [pc, #192]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x100>)
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	e054      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800282e:	4b2d      	ldr	r3, [pc, #180]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	2238      	movs	r2, #56	@ 0x38
 8002834:	4013      	ands	r3, r2
 8002836:	2b10      	cmp	r3, #16
 8002838:	d138      	bne.n	80028ac <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800283a:	4b2a      	ldr	r3, [pc, #168]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	2203      	movs	r2, #3
 8002840:	4013      	ands	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002844:	4b27      	ldr	r3, [pc, #156]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	091b      	lsrs	r3, r3, #4
 800284a:	2207      	movs	r2, #7
 800284c:	4013      	ands	r3, r2
 800284e:	3301      	adds	r3, #1
 8002850:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b03      	cmp	r3, #3
 8002856:	d10d      	bne.n	8002874 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	4824      	ldr	r0, [pc, #144]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x100>)
 800285c:	f7fd fc5c 	bl	8000118 <__udivsi3>
 8002860:	0003      	movs	r3, r0
 8002862:	0019      	movs	r1, r3
 8002864:	4b1f      	ldr	r3, [pc, #124]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	0a1b      	lsrs	r3, r3, #8
 800286a:	227f      	movs	r2, #127	@ 0x7f
 800286c:	4013      	ands	r3, r2
 800286e:	434b      	muls	r3, r1
 8002870:	617b      	str	r3, [r7, #20]
        break;
 8002872:	e00d      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002874:	68b9      	ldr	r1, [r7, #8]
 8002876:	481c      	ldr	r0, [pc, #112]	@ (80028e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002878:	f7fd fc4e 	bl	8000118 <__udivsi3>
 800287c:	0003      	movs	r3, r0
 800287e:	0019      	movs	r1, r3
 8002880:	4b18      	ldr	r3, [pc, #96]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	0a1b      	lsrs	r3, r3, #8
 8002886:	227f      	movs	r2, #127	@ 0x7f
 8002888:	4013      	ands	r3, r2
 800288a:	434b      	muls	r3, r1
 800288c:	617b      	str	r3, [r7, #20]
        break;
 800288e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002890:	4b14      	ldr	r3, [pc, #80]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	0f5b      	lsrs	r3, r3, #29
 8002896:	2207      	movs	r2, #7
 8002898:	4013      	ands	r3, r2
 800289a:	3301      	adds	r3, #1
 800289c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	6978      	ldr	r0, [r7, #20]
 80028a2:	f7fd fc39 	bl	8000118 <__udivsi3>
 80028a6:	0003      	movs	r3, r0
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	e015      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80028ac:	4b0d      	ldr	r3, [pc, #52]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2238      	movs	r2, #56	@ 0x38
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b20      	cmp	r3, #32
 80028b6:	d103      	bne.n	80028c0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80028b8:	2380      	movs	r3, #128	@ 0x80
 80028ba:	021b      	lsls	r3, r3, #8
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	e00b      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80028c0:	4b08      	ldr	r3, [pc, #32]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	2238      	movs	r2, #56	@ 0x38
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b18      	cmp	r3, #24
 80028ca:	d103      	bne.n	80028d4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80028cc:	23fa      	movs	r3, #250	@ 0xfa
 80028ce:	01db      	lsls	r3, r3, #7
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	e001      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80028d8:	693b      	ldr	r3, [r7, #16]
}
 80028da:	0018      	movs	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	b006      	add	sp, #24
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	46c0      	nop			@ (mov r8, r8)
 80028e4:	40021000 	.word	0x40021000
 80028e8:	00f42400 	.word	0x00f42400
 80028ec:	007a1200 	.word	0x007a1200

080028f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80028f8:	2313      	movs	r3, #19
 80028fa:	18fb      	adds	r3, r7, r3
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002900:	2312      	movs	r3, #18
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	2200      	movs	r2, #0
 8002906:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	2380      	movs	r3, #128	@ 0x80
 800290e:	029b      	lsls	r3, r3, #10
 8002910:	4013      	ands	r3, r2
 8002912:	d100      	bne.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002914:	e0a3      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002916:	2011      	movs	r0, #17
 8002918:	183b      	adds	r3, r7, r0
 800291a:	2200      	movs	r2, #0
 800291c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800291e:	4bc3      	ldr	r3, [pc, #780]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002920:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002922:	2380      	movs	r3, #128	@ 0x80
 8002924:	055b      	lsls	r3, r3, #21
 8002926:	4013      	ands	r3, r2
 8002928:	d110      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800292a:	4bc0      	ldr	r3, [pc, #768]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800292c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800292e:	4bbf      	ldr	r3, [pc, #764]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002930:	2180      	movs	r1, #128	@ 0x80
 8002932:	0549      	lsls	r1, r1, #21
 8002934:	430a      	orrs	r2, r1
 8002936:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002938:	4bbc      	ldr	r3, [pc, #752]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800293a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800293c:	2380      	movs	r3, #128	@ 0x80
 800293e:	055b      	lsls	r3, r3, #21
 8002940:	4013      	ands	r3, r2
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002946:	183b      	adds	r3, r7, r0
 8002948:	2201      	movs	r2, #1
 800294a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800294c:	4bb8      	ldr	r3, [pc, #736]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4bb7      	ldr	r3, [pc, #732]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002952:	2180      	movs	r1, #128	@ 0x80
 8002954:	0049      	lsls	r1, r1, #1
 8002956:	430a      	orrs	r2, r1
 8002958:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800295a:	f7ff f819 	bl	8001990 <HAL_GetTick>
 800295e:	0003      	movs	r3, r0
 8002960:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002962:	e00b      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002964:	f7ff f814 	bl	8001990 <HAL_GetTick>
 8002968:	0002      	movs	r2, r0
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d904      	bls.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002972:	2313      	movs	r3, #19
 8002974:	18fb      	adds	r3, r7, r3
 8002976:	2203      	movs	r2, #3
 8002978:	701a      	strb	r2, [r3, #0]
        break;
 800297a:	e005      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800297c:	4bac      	ldr	r3, [pc, #688]	@ (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	2380      	movs	r3, #128	@ 0x80
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4013      	ands	r3, r2
 8002986:	d0ed      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002988:	2313      	movs	r3, #19
 800298a:	18fb      	adds	r3, r7, r3
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d154      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002992:	4ba6      	ldr	r3, [pc, #664]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002994:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002996:	23c0      	movs	r3, #192	@ 0xc0
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4013      	ands	r3, r2
 800299c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d019      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d014      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029ae:	4b9f      	ldr	r3, [pc, #636]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b2:	4aa0      	ldr	r2, [pc, #640]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029b8:	4b9c      	ldr	r3, [pc, #624]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029bc:	4b9b      	ldr	r3, [pc, #620]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029be:	2180      	movs	r1, #128	@ 0x80
 80029c0:	0249      	lsls	r1, r1, #9
 80029c2:	430a      	orrs	r2, r1
 80029c4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029c6:	4b99      	ldr	r3, [pc, #612]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029ca:	4b98      	ldr	r3, [pc, #608]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029cc:	499a      	ldr	r1, [pc, #616]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80029ce:	400a      	ands	r2, r1
 80029d0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029d2:	4b96      	ldr	r3, [pc, #600]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	2201      	movs	r2, #1
 80029dc:	4013      	ands	r3, r2
 80029de:	d016      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e0:	f7fe ffd6 	bl	8001990 <HAL_GetTick>
 80029e4:	0003      	movs	r3, r0
 80029e6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029e8:	e00c      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ea:	f7fe ffd1 	bl	8001990 <HAL_GetTick>
 80029ee:	0002      	movs	r2, r0
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	4a91      	ldr	r2, [pc, #580]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d904      	bls.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80029fa:	2313      	movs	r3, #19
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	2203      	movs	r2, #3
 8002a00:	701a      	strb	r2, [r3, #0]
            break;
 8002a02:	e004      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a04:	4b89      	ldr	r3, [pc, #548]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a08:	2202      	movs	r2, #2
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d0ed      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002a0e:	2313      	movs	r3, #19
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10a      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a18:	4b84      	ldr	r3, [pc, #528]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1c:	4a85      	ldr	r2, [pc, #532]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	0019      	movs	r1, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a26:	4b81      	ldr	r3, [pc, #516]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a2c:	e00c      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a2e:	2312      	movs	r3, #18
 8002a30:	18fb      	adds	r3, r7, r3
 8002a32:	2213      	movs	r2, #19
 8002a34:	18ba      	adds	r2, r7, r2
 8002a36:	7812      	ldrb	r2, [r2, #0]
 8002a38:	701a      	strb	r2, [r3, #0]
 8002a3a:	e005      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a3c:	2312      	movs	r3, #18
 8002a3e:	18fb      	adds	r3, r7, r3
 8002a40:	2213      	movs	r2, #19
 8002a42:	18ba      	adds	r2, r7, r2
 8002a44:	7812      	ldrb	r2, [r2, #0]
 8002a46:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a48:	2311      	movs	r3, #17
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d105      	bne.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a52:	4b76      	ldr	r3, [pc, #472]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a56:	4b75      	ldr	r3, [pc, #468]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a58:	4979      	ldr	r1, [pc, #484]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002a5a:	400a      	ands	r2, r1
 8002a5c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2201      	movs	r2, #1
 8002a64:	4013      	ands	r3, r2
 8002a66:	d009      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a68:	4b70      	ldr	r3, [pc, #448]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	4393      	bics	r3, r2
 8002a70:	0019      	movs	r1, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	4b6d      	ldr	r3, [pc, #436]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2202      	movs	r2, #2
 8002a82:	4013      	ands	r3, r2
 8002a84:	d009      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a86:	4b69      	ldr	r3, [pc, #420]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a8a:	220c      	movs	r2, #12
 8002a8c:	4393      	bics	r3, r2
 8002a8e:	0019      	movs	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	4b65      	ldr	r3, [pc, #404]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a96:	430a      	orrs	r2, r1
 8002a98:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2210      	movs	r2, #16
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d009      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002aa4:	4b61      	ldr	r3, [pc, #388]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa8:	4a66      	ldr	r2, [pc, #408]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	0019      	movs	r1, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	4b5e      	ldr	r3, [pc, #376]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	2380      	movs	r3, #128	@ 0x80
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d009      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ac4:	4b59      	ldr	r3, [pc, #356]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac8:	4a5f      	ldr	r2, [pc, #380]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	0019      	movs	r1, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	699a      	ldr	r2, [r3, #24]
 8002ad2:	4b56      	ldr	r3, [pc, #344]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	2380      	movs	r3, #128	@ 0x80
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d009      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ae4:	4b51      	ldr	r3, [pc, #324]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae8:	4a58      	ldr	r2, [pc, #352]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	0019      	movs	r1, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69da      	ldr	r2, [r3, #28]
 8002af2:	4b4e      	ldr	r3, [pc, #312]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002af4:	430a      	orrs	r2, r1
 8002af6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2220      	movs	r2, #32
 8002afe:	4013      	ands	r3, r2
 8002b00:	d009      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b02:	4b4a      	ldr	r3, [pc, #296]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b06:	4a52      	ldr	r2, [pc, #328]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	4b46      	ldr	r3, [pc, #280]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b12:	430a      	orrs	r2, r1
 8002b14:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	2380      	movs	r3, #128	@ 0x80
 8002b1c:	01db      	lsls	r3, r3, #7
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d015      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b22:	4b42      	ldr	r3, [pc, #264]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	0899      	lsrs	r1, r3, #2
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1a      	ldr	r2, [r3, #32]
 8002b2e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b30:	430a      	orrs	r2, r1
 8002b32:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1a      	ldr	r2, [r3, #32]
 8002b38:	2380      	movs	r3, #128	@ 0x80
 8002b3a:	05db      	lsls	r3, r3, #23
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d106      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b40:	4b3a      	ldr	r3, [pc, #232]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	4b39      	ldr	r3, [pc, #228]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b46:	2180      	movs	r1, #128	@ 0x80
 8002b48:	0249      	lsls	r1, r1, #9
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	2380      	movs	r3, #128	@ 0x80
 8002b54:	031b      	lsls	r3, r3, #12
 8002b56:	4013      	ands	r3, r2
 8002b58:	d009      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b5a:	4b34      	ldr	r3, [pc, #208]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b5e:	2240      	movs	r2, #64	@ 0x40
 8002b60:	4393      	bics	r3, r2
 8002b62:	0019      	movs	r1, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b68:	4b30      	ldr	r3, [pc, #192]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	2380      	movs	r3, #128	@ 0x80
 8002b74:	039b      	lsls	r3, r3, #14
 8002b76:	4013      	ands	r3, r2
 8002b78:	d016      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b7a:	4b2c      	ldr	r3, [pc, #176]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7e:	4a35      	ldr	r2, [pc, #212]	@ (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	0019      	movs	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b88:	4b28      	ldr	r3, [pc, #160]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b92:	2380      	movs	r3, #128	@ 0x80
 8002b94:	03db      	lsls	r3, r3, #15
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d106      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002b9a:	4b24      	ldr	r3, [pc, #144]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	4b23      	ldr	r3, [pc, #140]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ba0:	2180      	movs	r1, #128	@ 0x80
 8002ba2:	0449      	lsls	r1, r1, #17
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	2380      	movs	r3, #128	@ 0x80
 8002bae:	03db      	lsls	r3, r3, #15
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d016      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb8:	4a27      	ldr	r2, [pc, #156]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	0019      	movs	r1, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bcc:	2380      	movs	r3, #128	@ 0x80
 8002bce:	045b      	lsls	r3, r3, #17
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d106      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002bd4:	4b15      	ldr	r3, [pc, #84]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	4b14      	ldr	r3, [pc, #80]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bda:	2180      	movs	r1, #128	@ 0x80
 8002bdc:	0449      	lsls	r1, r1, #17
 8002bde:	430a      	orrs	r2, r1
 8002be0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	2380      	movs	r3, #128	@ 0x80
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	4013      	ands	r3, r2
 8002bec:	d016      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002bee:	4b0f      	ldr	r3, [pc, #60]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf2:	4a1a      	ldr	r2, [pc, #104]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	0019      	movs	r1, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	695a      	ldr	r2, [r3, #20]
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695a      	ldr	r2, [r3, #20]
 8002c06:	2380      	movs	r3, #128	@ 0x80
 8002c08:	01db      	lsls	r3, r3, #7
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d106      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c0e:	4b07      	ldr	r3, [pc, #28]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c14:	2180      	movs	r1, #128	@ 0x80
 8002c16:	0249      	lsls	r1, r1, #9
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002c1c:	2312      	movs	r3, #18
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	781b      	ldrb	r3, [r3, #0]
}
 8002c22:	0018      	movs	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b006      	add	sp, #24
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	46c0      	nop			@ (mov r8, r8)
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	40007000 	.word	0x40007000
 8002c34:	fffffcff 	.word	0xfffffcff
 8002c38:	fffeffff 	.word	0xfffeffff
 8002c3c:	00001388 	.word	0x00001388
 8002c40:	efffffff 	.word	0xefffffff
 8002c44:	fffff3ff 	.word	0xfffff3ff
 8002c48:	fff3ffff 	.word	0xfff3ffff
 8002c4c:	ffcfffff 	.word	0xffcfffff
 8002c50:	ffffcfff 	.word	0xffffcfff
 8002c54:	ffbfffff 	.word	0xffbfffff
 8002c58:	feffffff 	.word	0xfeffffff
 8002c5c:	ffff3fff 	.word	0xffff3fff

08002c60 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c60:	b5b0      	push	{r4, r5, r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c68:	230f      	movs	r3, #15
 8002c6a:	18fb      	adds	r3, r7, r3
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d100      	bne.n	8002c78 <HAL_RTC_Init+0x18>
 8002c76:	e08c      	b.n	8002d92 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2229      	movs	r2, #41	@ 0x29
 8002c7c:	5c9b      	ldrb	r3, [r3, r2]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10b      	bne.n	8002c9c <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2228      	movs	r2, #40	@ 0x28
 8002c88:	2100      	movs	r1, #0
 8002c8a:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2288      	movs	r2, #136	@ 0x88
 8002c90:	0212      	lsls	r2, r2, #8
 8002c92:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	0018      	movs	r0, r3
 8002c98:	f7fd fcda 	bl	8000650 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2229      	movs	r2, #41	@ 0x29
 8002ca0:	2102      	movs	r1, #2
 8002ca2:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	2210      	movs	r2, #16
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b10      	cmp	r3, #16
 8002cb0:	d062      	beq.n	8002d78 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	22ca      	movs	r2, #202	@ 0xca
 8002cb8:	625a      	str	r2, [r3, #36]	@ 0x24
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2253      	movs	r2, #83	@ 0x53
 8002cc0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002cc2:	250f      	movs	r5, #15
 8002cc4:	197c      	adds	r4, r7, r5
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f000 f891 	bl	8002df0 <RTC_EnterInitMode>
 8002cce:	0003      	movs	r3, r0
 8002cd0:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002cd2:	0028      	movs	r0, r5
 8002cd4:	183b      	adds	r3, r7, r0
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d12c      	bne.n	8002d36 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	492e      	ldr	r1, [pc, #184]	@ (8002da0 <HAL_RTC_Init+0x140>)
 8002ce8:	400a      	ands	r2, r1
 8002cea:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6999      	ldr	r1, [r3, #24]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6912      	ldr	r2, [r2, #16]
 8002d12:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6919      	ldr	r1, [r3, #16]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	041a      	lsls	r2, r3, #16
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002d28:	183c      	adds	r4, r7, r0
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f000 f8a1 	bl	8002e74 <RTC_ExitInitMode>
 8002d32:	0003      	movs	r3, r0
 8002d34:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002d36:	230f      	movs	r3, #15
 8002d38:	18fb      	adds	r3, r7, r3
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d116      	bne.n	8002d6e <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699a      	ldr	r2, [r3, #24]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	00d2      	lsls	r2, r2, #3
 8002d4c:	08d2      	lsrs	r2, r2, #3
 8002d4e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6999      	ldr	r1, [r3, #24]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	22ff      	movs	r2, #255	@ 0xff
 8002d74:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d76:	e003      	b.n	8002d80 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002d78:	230f      	movs	r3, #15
 8002d7a:	18fb      	adds	r3, r7, r3
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002d80:	230f      	movs	r3, #15
 8002d82:	18fb      	adds	r3, r7, r3
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d103      	bne.n	8002d92 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2229      	movs	r2, #41	@ 0x29
 8002d8e:	2101      	movs	r1, #1
 8002d90:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002d92:	230f      	movs	r3, #15
 8002d94:	18fb      	adds	r3, r7, r3
 8002d96:	781b      	ldrb	r3, [r3, #0]
}
 8002d98:	0018      	movs	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	b004      	add	sp, #16
 8002d9e:	bdb0      	pop	{r4, r5, r7, pc}
 8002da0:	fb8fffbf 	.word	0xfb8fffbf

08002da4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a0e      	ldr	r2, [pc, #56]	@ (8002dec <HAL_RTC_WaitForSynchro+0x48>)
 8002db2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002db4:	f7fe fdec 	bl	8001990 <HAL_GetTick>
 8002db8:	0003      	movs	r3, r0
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002dbc:	e00a      	b.n	8002dd4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002dbe:	f7fe fde7 	bl	8001990 <HAL_GetTick>
 8002dc2:	0002      	movs	r2, r0
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1ad2      	subs	r2, r2, r3
 8002dc8:	23fa      	movs	r3, #250	@ 0xfa
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d901      	bls.n	8002dd4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e006      	b.n	8002de2 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d0ee      	beq.n	8002dbe <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	0018      	movs	r0, r3
 8002de4:	46bd      	mov	sp, r7
 8002de6:	b004      	add	sp, #16
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	46c0      	nop			@ (mov r8, r8)
 8002dec:	0001005f 	.word	0x0001005f

08002df0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002df8:	230f      	movs	r3, #15
 8002dfa:	18fb      	adds	r3, r7, r3
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	2240      	movs	r2, #64	@ 0x40
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d12c      	bne.n	8002e66 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2180      	movs	r1, #128	@ 0x80
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002e1c:	f7fe fdb8 	bl	8001990 <HAL_GetTick>
 8002e20:	0003      	movs	r3, r0
 8002e22:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002e24:	e014      	b.n	8002e50 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e26:	f7fe fdb3 	bl	8001990 <HAL_GetTick>
 8002e2a:	0002      	movs	r2, r0
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	1ad2      	subs	r2, r2, r3
 8002e30:	200f      	movs	r0, #15
 8002e32:	183b      	adds	r3, r7, r0
 8002e34:	1839      	adds	r1, r7, r0
 8002e36:	7809      	ldrb	r1, [r1, #0]
 8002e38:	7019      	strb	r1, [r3, #0]
 8002e3a:	23fa      	movs	r3, #250	@ 0xfa
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d906      	bls.n	8002e50 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8002e42:	183b      	adds	r3, r7, r0
 8002e44:	2203      	movs	r2, #3
 8002e46:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2229      	movs	r2, #41	@ 0x29
 8002e4c:	2103      	movs	r1, #3
 8002e4e:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	2240      	movs	r2, #64	@ 0x40
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d104      	bne.n	8002e66 <RTC_EnterInitMode+0x76>
 8002e5c:	230f      	movs	r3, #15
 8002e5e:	18fb      	adds	r3, r7, r3
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d1df      	bne.n	8002e26 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002e66:	230f      	movs	r3, #15
 8002e68:	18fb      	adds	r3, r7, r3
 8002e6a:	781b      	ldrb	r3, [r3, #0]
}
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b004      	add	sp, #16
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e74:	b590      	push	{r4, r7, lr}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e7c:	240f      	movs	r4, #15
 8002e7e:	193b      	adds	r3, r7, r4
 8002e80:	2200      	movs	r2, #0
 8002e82:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002e84:	4b1c      	ldr	r3, [pc, #112]	@ (8002ef8 <RTC_ExitInitMode+0x84>)
 8002e86:	68da      	ldr	r2, [r3, #12]
 8002e88:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef8 <RTC_ExitInitMode+0x84>)
 8002e8a:	2180      	movs	r1, #128	@ 0x80
 8002e8c:	438a      	bics	r2, r1
 8002e8e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002e90:	4b19      	ldr	r3, [pc, #100]	@ (8002ef8 <RTC_ExitInitMode+0x84>)
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	2220      	movs	r2, #32
 8002e96:	4013      	ands	r3, r2
 8002e98:	d10d      	bne.n	8002eb6 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f7ff ff81 	bl	8002da4 <HAL_RTC_WaitForSynchro>
 8002ea2:	1e03      	subs	r3, r0, #0
 8002ea4:	d021      	beq.n	8002eea <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2229      	movs	r2, #41	@ 0x29
 8002eaa:	2103      	movs	r1, #3
 8002eac:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002eae:	193b      	adds	r3, r7, r4
 8002eb0:	2203      	movs	r2, #3
 8002eb2:	701a      	strb	r2, [r3, #0]
 8002eb4:	e019      	b.n	8002eea <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002eb6:	4b10      	ldr	r3, [pc, #64]	@ (8002ef8 <RTC_ExitInitMode+0x84>)
 8002eb8:	699a      	ldr	r2, [r3, #24]
 8002eba:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef8 <RTC_ExitInitMode+0x84>)
 8002ebc:	2120      	movs	r1, #32
 8002ebe:	438a      	bics	r2, r1
 8002ec0:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f7ff ff6d 	bl	8002da4 <HAL_RTC_WaitForSynchro>
 8002eca:	1e03      	subs	r3, r0, #0
 8002ecc:	d007      	beq.n	8002ede <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2229      	movs	r2, #41	@ 0x29
 8002ed2:	2103      	movs	r1, #3
 8002ed4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002ed6:	230f      	movs	r3, #15
 8002ed8:	18fb      	adds	r3, r7, r3
 8002eda:	2203      	movs	r2, #3
 8002edc:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002ede:	4b06      	ldr	r3, [pc, #24]	@ (8002ef8 <RTC_ExitInitMode+0x84>)
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	4b05      	ldr	r3, [pc, #20]	@ (8002ef8 <RTC_ExitInitMode+0x84>)
 8002ee4:	2120      	movs	r1, #32
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002eea:	230f      	movs	r3, #15
 8002eec:	18fb      	adds	r3, r7, r3
 8002eee:	781b      	ldrb	r3, [r3, #0]
}
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b005      	add	sp, #20
 8002ef6:	bd90      	pop	{r4, r7, pc}
 8002ef8:	40002800 	.word	0x40002800

08002efc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e04a      	b.n	8002fa4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	223d      	movs	r2, #61	@ 0x3d
 8002f12:	5c9b      	ldrb	r3, [r3, r2]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d107      	bne.n	8002f2a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	223c      	movs	r2, #60	@ 0x3c
 8002f1e:	2100      	movs	r1, #0
 8002f20:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	0018      	movs	r0, r3
 8002f26:	f7fd ffd3 	bl	8000ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	223d      	movs	r2, #61	@ 0x3d
 8002f2e:	2102      	movs	r1, #2
 8002f30:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3304      	adds	r3, #4
 8002f3a:	0019      	movs	r1, r3
 8002f3c:	0010      	movs	r0, r2
 8002f3e:	f000 fe51 	bl	8003be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2248      	movs	r2, #72	@ 0x48
 8002f46:	2101      	movs	r1, #1
 8002f48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	223e      	movs	r2, #62	@ 0x3e
 8002f4e:	2101      	movs	r1, #1
 8002f50:	5499      	strb	r1, [r3, r2]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	223f      	movs	r2, #63	@ 0x3f
 8002f56:	2101      	movs	r1, #1
 8002f58:	5499      	strb	r1, [r3, r2]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2240      	movs	r2, #64	@ 0x40
 8002f5e:	2101      	movs	r1, #1
 8002f60:	5499      	strb	r1, [r3, r2]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2241      	movs	r2, #65	@ 0x41
 8002f66:	2101      	movs	r1, #1
 8002f68:	5499      	strb	r1, [r3, r2]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2242      	movs	r2, #66	@ 0x42
 8002f6e:	2101      	movs	r1, #1
 8002f70:	5499      	strb	r1, [r3, r2]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2243      	movs	r2, #67	@ 0x43
 8002f76:	2101      	movs	r1, #1
 8002f78:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2244      	movs	r2, #68	@ 0x44
 8002f7e:	2101      	movs	r1, #1
 8002f80:	5499      	strb	r1, [r3, r2]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2245      	movs	r2, #69	@ 0x45
 8002f86:	2101      	movs	r1, #1
 8002f88:	5499      	strb	r1, [r3, r2]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2246      	movs	r2, #70	@ 0x46
 8002f8e:	2101      	movs	r1, #1
 8002f90:	5499      	strb	r1, [r3, r2]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2247      	movs	r2, #71	@ 0x47
 8002f96:	2101      	movs	r1, #1
 8002f98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	223d      	movs	r2, #61	@ 0x3d
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	b002      	add	sp, #8
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e04a      	b.n	8003054 <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	223d      	movs	r2, #61	@ 0x3d
 8002fc2:	5c9b      	ldrb	r3, [r3, r2]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d107      	bne.n	8002fda <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	223c      	movs	r2, #60	@ 0x3c
 8002fce:	2100      	movs	r1, #0
 8002fd0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f000 f841 	bl	800305c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	223d      	movs	r2, #61	@ 0x3d
 8002fde:	2102      	movs	r1, #2
 8002fe0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	0019      	movs	r1, r3
 8002fec:	0010      	movs	r0, r2
 8002fee:	f000 fdf9 	bl	8003be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2248      	movs	r2, #72	@ 0x48
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	223e      	movs	r2, #62	@ 0x3e
 8002ffe:	2101      	movs	r1, #1
 8003000:	5499      	strb	r1, [r3, r2]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	223f      	movs	r2, #63	@ 0x3f
 8003006:	2101      	movs	r1, #1
 8003008:	5499      	strb	r1, [r3, r2]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2240      	movs	r2, #64	@ 0x40
 800300e:	2101      	movs	r1, #1
 8003010:	5499      	strb	r1, [r3, r2]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2241      	movs	r2, #65	@ 0x41
 8003016:	2101      	movs	r1, #1
 8003018:	5499      	strb	r1, [r3, r2]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2242      	movs	r2, #66	@ 0x42
 800301e:	2101      	movs	r1, #1
 8003020:	5499      	strb	r1, [r3, r2]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2243      	movs	r2, #67	@ 0x43
 8003026:	2101      	movs	r1, #1
 8003028:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2244      	movs	r2, #68	@ 0x44
 800302e:	2101      	movs	r1, #1
 8003030:	5499      	strb	r1, [r3, r2]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2245      	movs	r2, #69	@ 0x45
 8003036:	2101      	movs	r1, #1
 8003038:	5499      	strb	r1, [r3, r2]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2246      	movs	r2, #70	@ 0x46
 800303e:	2101      	movs	r1, #1
 8003040:	5499      	strb	r1, [r3, r2]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2247      	movs	r2, #71	@ 0x47
 8003046:	2101      	movs	r1, #1
 8003048:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	223d      	movs	r2, #61	@ 0x3d
 800304e:	2101      	movs	r1, #1
 8003050:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	0018      	movs	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	b002      	add	sp, #8
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003064:	46c0      	nop			@ (mov r8, r8)
 8003066:	46bd      	mov	sp, r7
 8003068:	b002      	add	sp, #8
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e04a      	b.n	8003114 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	223d      	movs	r2, #61	@ 0x3d
 8003082:	5c9b      	ldrb	r3, [r3, r2]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d107      	bne.n	800309a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	223c      	movs	r2, #60	@ 0x3c
 800308e:	2100      	movs	r1, #0
 8003090:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	0018      	movs	r0, r3
 8003096:	f000 f841 	bl	800311c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	223d      	movs	r2, #61	@ 0x3d
 800309e:	2102      	movs	r1, #2
 80030a0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3304      	adds	r3, #4
 80030aa:	0019      	movs	r1, r3
 80030ac:	0010      	movs	r0, r2
 80030ae:	f000 fd99 	bl	8003be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2248      	movs	r2, #72	@ 0x48
 80030b6:	2101      	movs	r1, #1
 80030b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	223e      	movs	r2, #62	@ 0x3e
 80030be:	2101      	movs	r1, #1
 80030c0:	5499      	strb	r1, [r3, r2]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	223f      	movs	r2, #63	@ 0x3f
 80030c6:	2101      	movs	r1, #1
 80030c8:	5499      	strb	r1, [r3, r2]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2240      	movs	r2, #64	@ 0x40
 80030ce:	2101      	movs	r1, #1
 80030d0:	5499      	strb	r1, [r3, r2]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2241      	movs	r2, #65	@ 0x41
 80030d6:	2101      	movs	r1, #1
 80030d8:	5499      	strb	r1, [r3, r2]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2242      	movs	r2, #66	@ 0x42
 80030de:	2101      	movs	r1, #1
 80030e0:	5499      	strb	r1, [r3, r2]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2243      	movs	r2, #67	@ 0x43
 80030e6:	2101      	movs	r1, #1
 80030e8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2244      	movs	r2, #68	@ 0x44
 80030ee:	2101      	movs	r1, #1
 80030f0:	5499      	strb	r1, [r3, r2]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2245      	movs	r2, #69	@ 0x45
 80030f6:	2101      	movs	r1, #1
 80030f8:	5499      	strb	r1, [r3, r2]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2246      	movs	r2, #70	@ 0x46
 80030fe:	2101      	movs	r1, #1
 8003100:	5499      	strb	r1, [r3, r2]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2247      	movs	r2, #71	@ 0x47
 8003106:	2101      	movs	r1, #1
 8003108:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	223d      	movs	r2, #61	@ 0x3d
 800310e:	2101      	movs	r1, #1
 8003110:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	0018      	movs	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	b002      	add	sp, #8
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003124:	46c0      	nop			@ (mov r8, r8)
 8003126:	46bd      	mov	sp, r7
 8003128:	b002      	add	sp, #8
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d108      	bne.n	800314e <HAL_TIM_PWM_Start+0x22>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	223e      	movs	r2, #62	@ 0x3e
 8003140:	5c9b      	ldrb	r3, [r3, r2]
 8003142:	b2db      	uxtb	r3, r3
 8003144:	3b01      	subs	r3, #1
 8003146:	1e5a      	subs	r2, r3, #1
 8003148:	4193      	sbcs	r3, r2
 800314a:	b2db      	uxtb	r3, r3
 800314c:	e037      	b.n	80031be <HAL_TIM_PWM_Start+0x92>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b04      	cmp	r3, #4
 8003152:	d108      	bne.n	8003166 <HAL_TIM_PWM_Start+0x3a>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	223f      	movs	r2, #63	@ 0x3f
 8003158:	5c9b      	ldrb	r3, [r3, r2]
 800315a:	b2db      	uxtb	r3, r3
 800315c:	3b01      	subs	r3, #1
 800315e:	1e5a      	subs	r2, r3, #1
 8003160:	4193      	sbcs	r3, r2
 8003162:	b2db      	uxtb	r3, r3
 8003164:	e02b      	b.n	80031be <HAL_TIM_PWM_Start+0x92>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b08      	cmp	r3, #8
 800316a:	d108      	bne.n	800317e <HAL_TIM_PWM_Start+0x52>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2240      	movs	r2, #64	@ 0x40
 8003170:	5c9b      	ldrb	r3, [r3, r2]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	1e5a      	subs	r2, r3, #1
 8003178:	4193      	sbcs	r3, r2
 800317a:	b2db      	uxtb	r3, r3
 800317c:	e01f      	b.n	80031be <HAL_TIM_PWM_Start+0x92>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b0c      	cmp	r3, #12
 8003182:	d108      	bne.n	8003196 <HAL_TIM_PWM_Start+0x6a>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2241      	movs	r2, #65	@ 0x41
 8003188:	5c9b      	ldrb	r3, [r3, r2]
 800318a:	b2db      	uxtb	r3, r3
 800318c:	3b01      	subs	r3, #1
 800318e:	1e5a      	subs	r2, r3, #1
 8003190:	4193      	sbcs	r3, r2
 8003192:	b2db      	uxtb	r3, r3
 8003194:	e013      	b.n	80031be <HAL_TIM_PWM_Start+0x92>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b10      	cmp	r3, #16
 800319a:	d108      	bne.n	80031ae <HAL_TIM_PWM_Start+0x82>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2242      	movs	r2, #66	@ 0x42
 80031a0:	5c9b      	ldrb	r3, [r3, r2]
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	3b01      	subs	r3, #1
 80031a6:	1e5a      	subs	r2, r3, #1
 80031a8:	4193      	sbcs	r3, r2
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	e007      	b.n	80031be <HAL_TIM_PWM_Start+0x92>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2243      	movs	r2, #67	@ 0x43
 80031b2:	5c9b      	ldrb	r3, [r3, r2]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	3b01      	subs	r3, #1
 80031b8:	1e5a      	subs	r2, r3, #1
 80031ba:	4193      	sbcs	r3, r2
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e08b      	b.n	80032de <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d104      	bne.n	80031d6 <HAL_TIM_PWM_Start+0xaa>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	223e      	movs	r2, #62	@ 0x3e
 80031d0:	2102      	movs	r1, #2
 80031d2:	5499      	strb	r1, [r3, r2]
 80031d4:	e023      	b.n	800321e <HAL_TIM_PWM_Start+0xf2>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d104      	bne.n	80031e6 <HAL_TIM_PWM_Start+0xba>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	223f      	movs	r2, #63	@ 0x3f
 80031e0:	2102      	movs	r1, #2
 80031e2:	5499      	strb	r1, [r3, r2]
 80031e4:	e01b      	b.n	800321e <HAL_TIM_PWM_Start+0xf2>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d104      	bne.n	80031f6 <HAL_TIM_PWM_Start+0xca>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2240      	movs	r2, #64	@ 0x40
 80031f0:	2102      	movs	r1, #2
 80031f2:	5499      	strb	r1, [r3, r2]
 80031f4:	e013      	b.n	800321e <HAL_TIM_PWM_Start+0xf2>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b0c      	cmp	r3, #12
 80031fa:	d104      	bne.n	8003206 <HAL_TIM_PWM_Start+0xda>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2241      	movs	r2, #65	@ 0x41
 8003200:	2102      	movs	r1, #2
 8003202:	5499      	strb	r1, [r3, r2]
 8003204:	e00b      	b.n	800321e <HAL_TIM_PWM_Start+0xf2>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b10      	cmp	r3, #16
 800320a:	d104      	bne.n	8003216 <HAL_TIM_PWM_Start+0xea>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2242      	movs	r2, #66	@ 0x42
 8003210:	2102      	movs	r1, #2
 8003212:	5499      	strb	r1, [r3, r2]
 8003214:	e003      	b.n	800321e <HAL_TIM_PWM_Start+0xf2>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2243      	movs	r2, #67	@ 0x43
 800321a:	2102      	movs	r1, #2
 800321c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6839      	ldr	r1, [r7, #0]
 8003224:	2201      	movs	r2, #1
 8003226:	0018      	movs	r0, r3
 8003228:	f001 f9ee 	bl	8004608 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a2d      	ldr	r2, [pc, #180]	@ (80032e8 <HAL_TIM_PWM_Start+0x1bc>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d00e      	beq.n	8003254 <HAL_TIM_PWM_Start+0x128>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a2c      	ldr	r2, [pc, #176]	@ (80032ec <HAL_TIM_PWM_Start+0x1c0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d009      	beq.n	8003254 <HAL_TIM_PWM_Start+0x128>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a2a      	ldr	r2, [pc, #168]	@ (80032f0 <HAL_TIM_PWM_Start+0x1c4>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d004      	beq.n	8003254 <HAL_TIM_PWM_Start+0x128>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a29      	ldr	r2, [pc, #164]	@ (80032f4 <HAL_TIM_PWM_Start+0x1c8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d101      	bne.n	8003258 <HAL_TIM_PWM_Start+0x12c>
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <HAL_TIM_PWM_Start+0x12e>
 8003258:	2300      	movs	r3, #0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d008      	beq.n	8003270 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2180      	movs	r1, #128	@ 0x80
 800326a:	0209      	lsls	r1, r1, #8
 800326c:	430a      	orrs	r2, r1
 800326e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a1c      	ldr	r2, [pc, #112]	@ (80032e8 <HAL_TIM_PWM_Start+0x1bc>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d00f      	beq.n	800329a <HAL_TIM_PWM_Start+0x16e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	2380      	movs	r3, #128	@ 0x80
 8003280:	05db      	lsls	r3, r3, #23
 8003282:	429a      	cmp	r2, r3
 8003284:	d009      	beq.n	800329a <HAL_TIM_PWM_Start+0x16e>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a1b      	ldr	r2, [pc, #108]	@ (80032f8 <HAL_TIM_PWM_Start+0x1cc>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d004      	beq.n	800329a <HAL_TIM_PWM_Start+0x16e>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a15      	ldr	r2, [pc, #84]	@ (80032ec <HAL_TIM_PWM_Start+0x1c0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d116      	bne.n	80032c8 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	4a16      	ldr	r2, [pc, #88]	@ (80032fc <HAL_TIM_PWM_Start+0x1d0>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2b06      	cmp	r3, #6
 80032aa:	d016      	beq.n	80032da <HAL_TIM_PWM_Start+0x1ae>
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	2380      	movs	r3, #128	@ 0x80
 80032b0:	025b      	lsls	r3, r3, #9
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d011      	beq.n	80032da <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2101      	movs	r1, #1
 80032c2:	430a      	orrs	r2, r1
 80032c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c6:	e008      	b.n	80032da <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2101      	movs	r1, #1
 80032d4:	430a      	orrs	r2, r1
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	e000      	b.n	80032dc <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032da:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	0018      	movs	r0, r3
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b004      	add	sp, #16
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	46c0      	nop			@ (mov r8, r8)
 80032e8:	40012c00 	.word	0x40012c00
 80032ec:	40014000 	.word	0x40014000
 80032f0:	40014400 	.word	0x40014400
 80032f4:	40014800 	.word	0x40014800
 80032f8:	40000400 	.word	0x40000400
 80032fc:	00010007 	.word	0x00010007

08003300 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e04a      	b.n	80033a8 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	223d      	movs	r2, #61	@ 0x3d
 8003316:	5c9b      	ldrb	r3, [r3, r2]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d107      	bne.n	800332e <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	223c      	movs	r2, #60	@ 0x3c
 8003322:	2100      	movs	r1, #0
 8003324:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	0018      	movs	r0, r3
 800332a:	f000 f841 	bl	80033b0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	223d      	movs	r2, #61	@ 0x3d
 8003332:	2102      	movs	r1, #2
 8003334:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3304      	adds	r3, #4
 800333e:	0019      	movs	r1, r3
 8003340:	0010      	movs	r0, r2
 8003342:	f000 fc4f 	bl	8003be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2248      	movs	r2, #72	@ 0x48
 800334a:	2101      	movs	r1, #1
 800334c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	223e      	movs	r2, #62	@ 0x3e
 8003352:	2101      	movs	r1, #1
 8003354:	5499      	strb	r1, [r3, r2]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	223f      	movs	r2, #63	@ 0x3f
 800335a:	2101      	movs	r1, #1
 800335c:	5499      	strb	r1, [r3, r2]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2240      	movs	r2, #64	@ 0x40
 8003362:	2101      	movs	r1, #1
 8003364:	5499      	strb	r1, [r3, r2]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2241      	movs	r2, #65	@ 0x41
 800336a:	2101      	movs	r1, #1
 800336c:	5499      	strb	r1, [r3, r2]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2242      	movs	r2, #66	@ 0x42
 8003372:	2101      	movs	r1, #1
 8003374:	5499      	strb	r1, [r3, r2]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2243      	movs	r2, #67	@ 0x43
 800337a:	2101      	movs	r1, #1
 800337c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2244      	movs	r2, #68	@ 0x44
 8003382:	2101      	movs	r1, #1
 8003384:	5499      	strb	r1, [r3, r2]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2245      	movs	r2, #69	@ 0x45
 800338a:	2101      	movs	r1, #1
 800338c:	5499      	strb	r1, [r3, r2]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2246      	movs	r2, #70	@ 0x46
 8003392:	2101      	movs	r1, #1
 8003394:	5499      	strb	r1, [r3, r2]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2247      	movs	r2, #71	@ 0x47
 800339a:	2101      	movs	r1, #1
 800339c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	223d      	movs	r2, #61	@ 0x3d
 80033a2:	2101      	movs	r1, #1
 80033a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	0018      	movs	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	b002      	add	sp, #8
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80033b8:	46c0      	nop			@ (mov r8, r8)
 80033ba:	46bd      	mov	sp, r7
 80033bc:	b002      	add	sp, #8
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ca:	230f      	movs	r3, #15
 80033cc:	18fb      	adds	r3, r7, r3
 80033ce:	2200      	movs	r2, #0
 80033d0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d104      	bne.n	80033e2 <HAL_TIM_IC_Start_IT+0x22>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	223e      	movs	r2, #62	@ 0x3e
 80033dc:	5c9b      	ldrb	r3, [r3, r2]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	e023      	b.n	800342a <HAL_TIM_IC_Start_IT+0x6a>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d104      	bne.n	80033f2 <HAL_TIM_IC_Start_IT+0x32>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	223f      	movs	r2, #63	@ 0x3f
 80033ec:	5c9b      	ldrb	r3, [r3, r2]
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	e01b      	b.n	800342a <HAL_TIM_IC_Start_IT+0x6a>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d104      	bne.n	8003402 <HAL_TIM_IC_Start_IT+0x42>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2240      	movs	r2, #64	@ 0x40
 80033fc:	5c9b      	ldrb	r3, [r3, r2]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	e013      	b.n	800342a <HAL_TIM_IC_Start_IT+0x6a>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b0c      	cmp	r3, #12
 8003406:	d104      	bne.n	8003412 <HAL_TIM_IC_Start_IT+0x52>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2241      	movs	r2, #65	@ 0x41
 800340c:	5c9b      	ldrb	r3, [r3, r2]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	e00b      	b.n	800342a <HAL_TIM_IC_Start_IT+0x6a>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b10      	cmp	r3, #16
 8003416:	d104      	bne.n	8003422 <HAL_TIM_IC_Start_IT+0x62>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2242      	movs	r2, #66	@ 0x42
 800341c:	5c9b      	ldrb	r3, [r3, r2]
 800341e:	b2db      	uxtb	r3, r3
 8003420:	e003      	b.n	800342a <HAL_TIM_IC_Start_IT+0x6a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2243      	movs	r2, #67	@ 0x43
 8003426:	5c9b      	ldrb	r3, [r3, r2]
 8003428:	b2db      	uxtb	r3, r3
 800342a:	220e      	movs	r2, #14
 800342c:	18ba      	adds	r2, r7, r2
 800342e:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d104      	bne.n	8003440 <HAL_TIM_IC_Start_IT+0x80>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2244      	movs	r2, #68	@ 0x44
 800343a:	5c9b      	ldrb	r3, [r3, r2]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	e013      	b.n	8003468 <HAL_TIM_IC_Start_IT+0xa8>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	2b04      	cmp	r3, #4
 8003444:	d104      	bne.n	8003450 <HAL_TIM_IC_Start_IT+0x90>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2245      	movs	r2, #69	@ 0x45
 800344a:	5c9b      	ldrb	r3, [r3, r2]
 800344c:	b2db      	uxtb	r3, r3
 800344e:	e00b      	b.n	8003468 <HAL_TIM_IC_Start_IT+0xa8>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	2b08      	cmp	r3, #8
 8003454:	d104      	bne.n	8003460 <HAL_TIM_IC_Start_IT+0xa0>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2246      	movs	r2, #70	@ 0x46
 800345a:	5c9b      	ldrb	r3, [r3, r2]
 800345c:	b2db      	uxtb	r3, r3
 800345e:	e003      	b.n	8003468 <HAL_TIM_IC_Start_IT+0xa8>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2247      	movs	r2, #71	@ 0x47
 8003464:	5c9b      	ldrb	r3, [r3, r2]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	210d      	movs	r1, #13
 800346a:	187a      	adds	r2, r7, r1
 800346c:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800346e:	230e      	movs	r3, #14
 8003470:	18fb      	adds	r3, r7, r3
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d103      	bne.n	8003480 <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003478:	187b      	adds	r3, r7, r1
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d001      	beq.n	8003484 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e0c8      	b.n	8003616 <HAL_TIM_IC_Start_IT+0x256>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d104      	bne.n	8003494 <HAL_TIM_IC_Start_IT+0xd4>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	223e      	movs	r2, #62	@ 0x3e
 800348e:	2102      	movs	r1, #2
 8003490:	5499      	strb	r1, [r3, r2]
 8003492:	e023      	b.n	80034dc <HAL_TIM_IC_Start_IT+0x11c>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	2b04      	cmp	r3, #4
 8003498:	d104      	bne.n	80034a4 <HAL_TIM_IC_Start_IT+0xe4>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	223f      	movs	r2, #63	@ 0x3f
 800349e:	2102      	movs	r1, #2
 80034a0:	5499      	strb	r1, [r3, r2]
 80034a2:	e01b      	b.n	80034dc <HAL_TIM_IC_Start_IT+0x11c>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d104      	bne.n	80034b4 <HAL_TIM_IC_Start_IT+0xf4>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2240      	movs	r2, #64	@ 0x40
 80034ae:	2102      	movs	r1, #2
 80034b0:	5499      	strb	r1, [r3, r2]
 80034b2:	e013      	b.n	80034dc <HAL_TIM_IC_Start_IT+0x11c>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	2b0c      	cmp	r3, #12
 80034b8:	d104      	bne.n	80034c4 <HAL_TIM_IC_Start_IT+0x104>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2241      	movs	r2, #65	@ 0x41
 80034be:	2102      	movs	r1, #2
 80034c0:	5499      	strb	r1, [r3, r2]
 80034c2:	e00b      	b.n	80034dc <HAL_TIM_IC_Start_IT+0x11c>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	2b10      	cmp	r3, #16
 80034c8:	d104      	bne.n	80034d4 <HAL_TIM_IC_Start_IT+0x114>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2242      	movs	r2, #66	@ 0x42
 80034ce:	2102      	movs	r1, #2
 80034d0:	5499      	strb	r1, [r3, r2]
 80034d2:	e003      	b.n	80034dc <HAL_TIM_IC_Start_IT+0x11c>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2243      	movs	r2, #67	@ 0x43
 80034d8:	2102      	movs	r1, #2
 80034da:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d104      	bne.n	80034ec <HAL_TIM_IC_Start_IT+0x12c>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2244      	movs	r2, #68	@ 0x44
 80034e6:	2102      	movs	r1, #2
 80034e8:	5499      	strb	r1, [r3, r2]
 80034ea:	e013      	b.n	8003514 <HAL_TIM_IC_Start_IT+0x154>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d104      	bne.n	80034fc <HAL_TIM_IC_Start_IT+0x13c>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2245      	movs	r2, #69	@ 0x45
 80034f6:	2102      	movs	r1, #2
 80034f8:	5499      	strb	r1, [r3, r2]
 80034fa:	e00b      	b.n	8003514 <HAL_TIM_IC_Start_IT+0x154>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d104      	bne.n	800350c <HAL_TIM_IC_Start_IT+0x14c>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2246      	movs	r2, #70	@ 0x46
 8003506:	2102      	movs	r1, #2
 8003508:	5499      	strb	r1, [r3, r2]
 800350a:	e003      	b.n	8003514 <HAL_TIM_IC_Start_IT+0x154>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2247      	movs	r2, #71	@ 0x47
 8003510:	2102      	movs	r1, #2
 8003512:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	2b0c      	cmp	r3, #12
 8003518:	d02a      	beq.n	8003570 <HAL_TIM_IC_Start_IT+0x1b0>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b0c      	cmp	r3, #12
 800351e:	d830      	bhi.n	8003582 <HAL_TIM_IC_Start_IT+0x1c2>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	2b08      	cmp	r3, #8
 8003524:	d01b      	beq.n	800355e <HAL_TIM_IC_Start_IT+0x19e>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b08      	cmp	r3, #8
 800352a:	d82a      	bhi.n	8003582 <HAL_TIM_IC_Start_IT+0x1c2>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_TIM_IC_Start_IT+0x17a>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b04      	cmp	r3, #4
 8003536:	d009      	beq.n	800354c <HAL_TIM_IC_Start_IT+0x18c>
 8003538:	e023      	b.n	8003582 <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2102      	movs	r1, #2
 8003546:	430a      	orrs	r2, r1
 8003548:	60da      	str	r2, [r3, #12]
      break;
 800354a:	e01f      	b.n	800358c <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2104      	movs	r1, #4
 8003558:	430a      	orrs	r2, r1
 800355a:	60da      	str	r2, [r3, #12]
      break;
 800355c:	e016      	b.n	800358c <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2108      	movs	r1, #8
 800356a:	430a      	orrs	r2, r1
 800356c:	60da      	str	r2, [r3, #12]
      break;
 800356e:	e00d      	b.n	800358c <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68da      	ldr	r2, [r3, #12]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2110      	movs	r1, #16
 800357c:	430a      	orrs	r2, r1
 800357e:	60da      	str	r2, [r3, #12]
      break;
 8003580:	e004      	b.n	800358c <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 8003582:	230f      	movs	r3, #15
 8003584:	18fb      	adds	r3, r7, r3
 8003586:	2201      	movs	r2, #1
 8003588:	701a      	strb	r2, [r3, #0]
      break;
 800358a:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800358c:	230f      	movs	r3, #15
 800358e:	18fb      	adds	r3, r7, r3
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d13c      	bne.n	8003610 <HAL_TIM_IC_Start_IT+0x250>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6839      	ldr	r1, [r7, #0]
 800359c:	2201      	movs	r2, #1
 800359e:	0018      	movs	r0, r3
 80035a0:	f001 f832 	bl	8004608 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003620 <HAL_TIM_IC_Start_IT+0x260>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00f      	beq.n	80035ce <HAL_TIM_IC_Start_IT+0x20e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	2380      	movs	r3, #128	@ 0x80
 80035b4:	05db      	lsls	r3, r3, #23
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d009      	beq.n	80035ce <HAL_TIM_IC_Start_IT+0x20e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a19      	ldr	r2, [pc, #100]	@ (8003624 <HAL_TIM_IC_Start_IT+0x264>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d004      	beq.n	80035ce <HAL_TIM_IC_Start_IT+0x20e>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a17      	ldr	r2, [pc, #92]	@ (8003628 <HAL_TIM_IC_Start_IT+0x268>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d116      	bne.n	80035fc <HAL_TIM_IC_Start_IT+0x23c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	4a15      	ldr	r2, [pc, #84]	@ (800362c <HAL_TIM_IC_Start_IT+0x26c>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b06      	cmp	r3, #6
 80035de:	d016      	beq.n	800360e <HAL_TIM_IC_Start_IT+0x24e>
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	2380      	movs	r3, #128	@ 0x80
 80035e4:	025b      	lsls	r3, r3, #9
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d011      	beq.n	800360e <HAL_TIM_IC_Start_IT+0x24e>
      {
        __HAL_TIM_ENABLE(htim);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2101      	movs	r1, #1
 80035f6:	430a      	orrs	r2, r1
 80035f8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035fa:	e008      	b.n	800360e <HAL_TIM_IC_Start_IT+0x24e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2101      	movs	r1, #1
 8003608:	430a      	orrs	r2, r1
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	e000      	b.n	8003610 <HAL_TIM_IC_Start_IT+0x250>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800360e:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8003610:	230f      	movs	r3, #15
 8003612:	18fb      	adds	r3, r7, r3
 8003614:	781b      	ldrb	r3, [r3, #0]
}
 8003616:	0018      	movs	r0, r3
 8003618:	46bd      	mov	sp, r7
 800361a:	b004      	add	sp, #16
 800361c:	bd80      	pop	{r7, pc}
 800361e:	46c0      	nop			@ (mov r8, r8)
 8003620:	40012c00 	.word	0x40012c00
 8003624:	40000400 	.word	0x40000400
 8003628:	40014000 	.word	0x40014000
 800362c:	00010007 	.word	0x00010007

08003630 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800363c:	2317      	movs	r3, #23
 800363e:	18fb      	adds	r3, r7, r3
 8003640:	2200      	movs	r2, #0
 8003642:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	223c      	movs	r2, #60	@ 0x3c
 8003648:	5c9b      	ldrb	r3, [r3, r2]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_TIM_OC_ConfigChannel+0x22>
 800364e:	2302      	movs	r3, #2
 8003650:	e048      	b.n	80036e4 <HAL_TIM_OC_ConfigChannel+0xb4>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	223c      	movs	r2, #60	@ 0x3c
 8003656:	2101      	movs	r1, #1
 8003658:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b14      	cmp	r3, #20
 800365e:	d835      	bhi.n	80036cc <HAL_TIM_OC_ConfigChannel+0x9c>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	009a      	lsls	r2, r3, #2
 8003664:	4b21      	ldr	r3, [pc, #132]	@ (80036ec <HAL_TIM_OC_ConfigChannel+0xbc>)
 8003666:	18d3      	adds	r3, r2, r3
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	0011      	movs	r1, r2
 8003674:	0018      	movs	r0, r3
 8003676:	f000 fb43 	bl	8003d00 <TIM_OC1_SetConfig>
      break;
 800367a:	e02c      	b.n	80036d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	0011      	movs	r1, r2
 8003684:	0018      	movs	r0, r3
 8003686:	f000 fbc5 	bl	8003e14 <TIM_OC2_SetConfig>
      break;
 800368a:	e024      	b.n	80036d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	0011      	movs	r1, r2
 8003694:	0018      	movs	r0, r3
 8003696:	f000 fc41 	bl	8003f1c <TIM_OC3_SetConfig>
      break;
 800369a:	e01c      	b.n	80036d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	0011      	movs	r1, r2
 80036a4:	0018      	movs	r0, r3
 80036a6:	f000 fcc1 	bl	800402c <TIM_OC4_SetConfig>
      break;
 80036aa:	e014      	b.n	80036d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	0011      	movs	r1, r2
 80036b4:	0018      	movs	r0, r3
 80036b6:	f000 fd23 	bl	8004100 <TIM_OC5_SetConfig>
      break;
 80036ba:	e00c      	b.n	80036d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	0011      	movs	r1, r2
 80036c4:	0018      	movs	r0, r3
 80036c6:	f000 fd7b 	bl	80041c0 <TIM_OC6_SetConfig>
      break;
 80036ca:	e004      	b.n	80036d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80036cc:	2317      	movs	r3, #23
 80036ce:	18fb      	adds	r3, r7, r3
 80036d0:	2201      	movs	r2, #1
 80036d2:	701a      	strb	r2, [r3, #0]
      break;
 80036d4:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	223c      	movs	r2, #60	@ 0x3c
 80036da:	2100      	movs	r1, #0
 80036dc:	5499      	strb	r1, [r3, r2]

  return status;
 80036de:	2317      	movs	r3, #23
 80036e0:	18fb      	adds	r3, r7, r3
 80036e2:	781b      	ldrb	r3, [r3, #0]
}
 80036e4:	0018      	movs	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	b006      	add	sp, #24
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	08005868 	.word	0x08005868

080036f0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036fc:	2317      	movs	r3, #23
 80036fe:	18fb      	adds	r3, r7, r3
 8003700:	2200      	movs	r2, #0
 8003702:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	223c      	movs	r2, #60	@ 0x3c
 8003708:	5c9b      	ldrb	r3, [r3, r2]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_TIM_IC_ConfigChannel+0x22>
 800370e:	2302      	movs	r3, #2
 8003710:	e08c      	b.n	800382c <HAL_TIM_IC_ConfigChannel+0x13c>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	223c      	movs	r2, #60	@ 0x3c
 8003716:	2101      	movs	r1, #1
 8003718:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d11b      	bne.n	8003758 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003730:	f000 fdaa 	bl	8004288 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699a      	ldr	r2, [r3, #24]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	210c      	movs	r1, #12
 8003740:	438a      	bics	r2, r1
 8003742:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6999      	ldr	r1, [r3, #24]
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	619a      	str	r2, [r3, #24]
 8003756:	e062      	b.n	800381e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b04      	cmp	r3, #4
 800375c:	d11c      	bne.n	8003798 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800376e:	f000 fe15 	bl	800439c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	699a      	ldr	r2, [r3, #24]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	492d      	ldr	r1, [pc, #180]	@ (8003834 <HAL_TIM_IC_ConfigChannel+0x144>)
 800377e:	400a      	ands	r2, r1
 8003780:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6999      	ldr	r1, [r3, #24]
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	021a      	lsls	r2, r3, #8
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	619a      	str	r2, [r3, #24]
 8003796:	e042      	b.n	800381e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b08      	cmp	r3, #8
 800379c:	d11b      	bne.n	80037d6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80037ae:	f000 fe69 	bl	8004484 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	69da      	ldr	r2, [r3, #28]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	210c      	movs	r1, #12
 80037be:	438a      	bics	r2, r1
 80037c0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69d9      	ldr	r1, [r3, #28]
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	61da      	str	r2, [r3, #28]
 80037d4:	e023      	b.n	800381e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b0c      	cmp	r3, #12
 80037da:	d11c      	bne.n	8003816 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80037ec:	f000 fe8a 	bl	8004504 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	69da      	ldr	r2, [r3, #28]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	490e      	ldr	r1, [pc, #56]	@ (8003834 <HAL_TIM_IC_ConfigChannel+0x144>)
 80037fc:	400a      	ands	r2, r1
 80037fe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	69d9      	ldr	r1, [r3, #28]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	021a      	lsls	r2, r3, #8
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	61da      	str	r2, [r3, #28]
 8003814:	e003      	b.n	800381e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8003816:	2317      	movs	r3, #23
 8003818:	18fb      	adds	r3, r7, r3
 800381a:	2201      	movs	r2, #1
 800381c:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	223c      	movs	r2, #60	@ 0x3c
 8003822:	2100      	movs	r1, #0
 8003824:	5499      	strb	r1, [r3, r2]

  return status;
 8003826:	2317      	movs	r3, #23
 8003828:	18fb      	adds	r3, r7, r3
 800382a:	781b      	ldrb	r3, [r3, #0]
}
 800382c:	0018      	movs	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	b006      	add	sp, #24
 8003832:	bd80      	pop	{r7, pc}
 8003834:	fffff3ff 	.word	0xfffff3ff

08003838 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003844:	2317      	movs	r3, #23
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	2200      	movs	r2, #0
 800384a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	223c      	movs	r2, #60	@ 0x3c
 8003850:	5c9b      	ldrb	r3, [r3, r2]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d101      	bne.n	800385a <HAL_TIM_PWM_ConfigChannel+0x22>
 8003856:	2302      	movs	r3, #2
 8003858:	e0e5      	b.n	8003a26 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	223c      	movs	r2, #60	@ 0x3c
 800385e:	2101      	movs	r1, #1
 8003860:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b14      	cmp	r3, #20
 8003866:	d900      	bls.n	800386a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003868:	e0d1      	b.n	8003a0e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	009a      	lsls	r2, r3, #2
 800386e:	4b70      	ldr	r3, [pc, #448]	@ (8003a30 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003870:	18d3      	adds	r3, r2, r3
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	0011      	movs	r1, r2
 800387e:	0018      	movs	r0, r3
 8003880:	f000 fa3e 	bl	8003d00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2108      	movs	r1, #8
 8003890:	430a      	orrs	r2, r1
 8003892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699a      	ldr	r2, [r3, #24]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2104      	movs	r1, #4
 80038a0:	438a      	bics	r2, r1
 80038a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6999      	ldr	r1, [r3, #24]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	619a      	str	r2, [r3, #24]
      break;
 80038b6:	e0af      	b.n	8003a18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	0011      	movs	r1, r2
 80038c0:	0018      	movs	r0, r3
 80038c2:	f000 faa7 	bl	8003e14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699a      	ldr	r2, [r3, #24]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2180      	movs	r1, #128	@ 0x80
 80038d2:	0109      	lsls	r1, r1, #4
 80038d4:	430a      	orrs	r2, r1
 80038d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699a      	ldr	r2, [r3, #24]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4954      	ldr	r1, [pc, #336]	@ (8003a34 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80038e4:	400a      	ands	r2, r1
 80038e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6999      	ldr	r1, [r3, #24]
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	021a      	lsls	r2, r3, #8
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	619a      	str	r2, [r3, #24]
      break;
 80038fc:	e08c      	b.n	8003a18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	0011      	movs	r1, r2
 8003906:	0018      	movs	r0, r3
 8003908:	f000 fb08 	bl	8003f1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	69da      	ldr	r2, [r3, #28]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2108      	movs	r1, #8
 8003918:	430a      	orrs	r2, r1
 800391a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	69da      	ldr	r2, [r3, #28]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2104      	movs	r1, #4
 8003928:	438a      	bics	r2, r1
 800392a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	69d9      	ldr	r1, [r3, #28]
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	691a      	ldr	r2, [r3, #16]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	61da      	str	r2, [r3, #28]
      break;
 800393e:	e06b      	b.n	8003a18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	0011      	movs	r1, r2
 8003948:	0018      	movs	r0, r3
 800394a:	f000 fb6f 	bl	800402c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	69da      	ldr	r2, [r3, #28]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2180      	movs	r1, #128	@ 0x80
 800395a:	0109      	lsls	r1, r1, #4
 800395c:	430a      	orrs	r2, r1
 800395e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	69da      	ldr	r2, [r3, #28]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4932      	ldr	r1, [pc, #200]	@ (8003a34 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800396c:	400a      	ands	r2, r1
 800396e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	69d9      	ldr	r1, [r3, #28]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	021a      	lsls	r2, r3, #8
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	61da      	str	r2, [r3, #28]
      break;
 8003984:	e048      	b.n	8003a18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	0011      	movs	r1, r2
 800398e:	0018      	movs	r0, r3
 8003990:	f000 fbb6 	bl	8004100 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2108      	movs	r1, #8
 80039a0:	430a      	orrs	r2, r1
 80039a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2104      	movs	r1, #4
 80039b0:	438a      	bics	r2, r1
 80039b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	691a      	ldr	r2, [r3, #16]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80039c6:	e027      	b.n	8003a18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	0011      	movs	r1, r2
 80039d0:	0018      	movs	r0, r3
 80039d2:	f000 fbf5 	bl	80041c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2180      	movs	r1, #128	@ 0x80
 80039e2:	0109      	lsls	r1, r1, #4
 80039e4:	430a      	orrs	r2, r1
 80039e6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4910      	ldr	r1, [pc, #64]	@ (8003a34 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80039f4:	400a      	ands	r2, r1
 80039f6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	021a      	lsls	r2, r3, #8
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003a0c:	e004      	b.n	8003a18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003a0e:	2317      	movs	r3, #23
 8003a10:	18fb      	adds	r3, r7, r3
 8003a12:	2201      	movs	r2, #1
 8003a14:	701a      	strb	r2, [r3, #0]
      break;
 8003a16:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	223c      	movs	r2, #60	@ 0x3c
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	5499      	strb	r1, [r3, r2]

  return status;
 8003a20:	2317      	movs	r3, #23
 8003a22:	18fb      	adds	r3, r7, r3
 8003a24:	781b      	ldrb	r3, [r3, #0]
}
 8003a26:	0018      	movs	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	b006      	add	sp, #24
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	46c0      	nop			@ (mov r8, r8)
 8003a30:	080058bc 	.word	0x080058bc
 8003a34:	fffffbff 	.word	0xfffffbff

08003a38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a42:	230f      	movs	r3, #15
 8003a44:	18fb      	adds	r3, r7, r3
 8003a46:	2200      	movs	r2, #0
 8003a48:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	223c      	movs	r2, #60	@ 0x3c
 8003a4e:	5c9b      	ldrb	r3, [r3, r2]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <HAL_TIM_ConfigClockSource+0x20>
 8003a54:	2302      	movs	r3, #2
 8003a56:	e0bc      	b.n	8003bd2 <HAL_TIM_ConfigClockSource+0x19a>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	223c      	movs	r2, #60	@ 0x3c
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	223d      	movs	r2, #61	@ 0x3d
 8003a64:	2102      	movs	r1, #2
 8003a66:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	4a5a      	ldr	r2, [pc, #360]	@ (8003bdc <HAL_TIM_ConfigClockSource+0x1a4>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	4a59      	ldr	r2, [pc, #356]	@ (8003be0 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2280      	movs	r2, #128	@ 0x80
 8003a8e:	0192      	lsls	r2, r2, #6
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d040      	beq.n	8003b16 <HAL_TIM_ConfigClockSource+0xde>
 8003a94:	2280      	movs	r2, #128	@ 0x80
 8003a96:	0192      	lsls	r2, r2, #6
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d900      	bls.n	8003a9e <HAL_TIM_ConfigClockSource+0x66>
 8003a9c:	e088      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x178>
 8003a9e:	2280      	movs	r2, #128	@ 0x80
 8003aa0:	0152      	lsls	r2, r2, #5
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d100      	bne.n	8003aa8 <HAL_TIM_ConfigClockSource+0x70>
 8003aa6:	e088      	b.n	8003bba <HAL_TIM_ConfigClockSource+0x182>
 8003aa8:	2280      	movs	r2, #128	@ 0x80
 8003aaa:	0152      	lsls	r2, r2, #5
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d900      	bls.n	8003ab2 <HAL_TIM_ConfigClockSource+0x7a>
 8003ab0:	e07e      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x178>
 8003ab2:	2b70      	cmp	r3, #112	@ 0x70
 8003ab4:	d018      	beq.n	8003ae8 <HAL_TIM_ConfigClockSource+0xb0>
 8003ab6:	d900      	bls.n	8003aba <HAL_TIM_ConfigClockSource+0x82>
 8003ab8:	e07a      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x178>
 8003aba:	2b60      	cmp	r3, #96	@ 0x60
 8003abc:	d04f      	beq.n	8003b5e <HAL_TIM_ConfigClockSource+0x126>
 8003abe:	d900      	bls.n	8003ac2 <HAL_TIM_ConfigClockSource+0x8a>
 8003ac0:	e076      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x178>
 8003ac2:	2b50      	cmp	r3, #80	@ 0x50
 8003ac4:	d03b      	beq.n	8003b3e <HAL_TIM_ConfigClockSource+0x106>
 8003ac6:	d900      	bls.n	8003aca <HAL_TIM_ConfigClockSource+0x92>
 8003ac8:	e072      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x178>
 8003aca:	2b40      	cmp	r3, #64	@ 0x40
 8003acc:	d057      	beq.n	8003b7e <HAL_TIM_ConfigClockSource+0x146>
 8003ace:	d900      	bls.n	8003ad2 <HAL_TIM_ConfigClockSource+0x9a>
 8003ad0:	e06e      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x178>
 8003ad2:	2b30      	cmp	r3, #48	@ 0x30
 8003ad4:	d063      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0x166>
 8003ad6:	d86b      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x178>
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d060      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0x166>
 8003adc:	d868      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x178>
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d05d      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0x166>
 8003ae2:	2b10      	cmp	r3, #16
 8003ae4:	d05b      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0x166>
 8003ae6:	e063      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003af8:	f000 fd66 	bl	80045c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2277      	movs	r2, #119	@ 0x77
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	609a      	str	r2, [r3, #8]
      break;
 8003b14:	e052      	b.n	8003bbc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b26:	f000 fd4f 	bl	80045c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2180      	movs	r1, #128	@ 0x80
 8003b36:	01c9      	lsls	r1, r1, #7
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	609a      	str	r2, [r3, #8]
      break;
 8003b3c:	e03e      	b.n	8003bbc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b4a:	001a      	movs	r2, r3
 8003b4c:	f000 fbf8 	bl	8004340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2150      	movs	r1, #80	@ 0x50
 8003b56:	0018      	movs	r0, r3
 8003b58:	f000 fd1a 	bl	8004590 <TIM_ITRx_SetConfig>
      break;
 8003b5c:	e02e      	b.n	8003bbc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b6a:	001a      	movs	r2, r3
 8003b6c:	f000 fc58 	bl	8004420 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2160      	movs	r1, #96	@ 0x60
 8003b76:	0018      	movs	r0, r3
 8003b78:	f000 fd0a 	bl	8004590 <TIM_ITRx_SetConfig>
      break;
 8003b7c:	e01e      	b.n	8003bbc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b8a:	001a      	movs	r2, r3
 8003b8c:	f000 fbd8 	bl	8004340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2140      	movs	r1, #64	@ 0x40
 8003b96:	0018      	movs	r0, r3
 8003b98:	f000 fcfa 	bl	8004590 <TIM_ITRx_SetConfig>
      break;
 8003b9c:	e00e      	b.n	8003bbc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	0019      	movs	r1, r3
 8003ba8:	0010      	movs	r0, r2
 8003baa:	f000 fcf1 	bl	8004590 <TIM_ITRx_SetConfig>
      break;
 8003bae:	e005      	b.n	8003bbc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003bb0:	230f      	movs	r3, #15
 8003bb2:	18fb      	adds	r3, r7, r3
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	701a      	strb	r2, [r3, #0]
      break;
 8003bb8:	e000      	b.n	8003bbc <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003bba:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	223d      	movs	r2, #61	@ 0x3d
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	223c      	movs	r2, #60	@ 0x3c
 8003bc8:	2100      	movs	r1, #0
 8003bca:	5499      	strb	r1, [r3, r2]

  return status;
 8003bcc:	230f      	movs	r3, #15
 8003bce:	18fb      	adds	r3, r7, r3
 8003bd0:	781b      	ldrb	r3, [r3, #0]
}
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	b004      	add	sp, #16
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	46c0      	nop			@ (mov r8, r8)
 8003bdc:	ffceff88 	.word	0xffceff88
 8003be0:	ffff00ff 	.word	0xffff00ff

08003be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a3b      	ldr	r2, [pc, #236]	@ (8003ce4 <TIM_Base_SetConfig+0x100>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d008      	beq.n	8003c0e <TIM_Base_SetConfig+0x2a>
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	2380      	movs	r3, #128	@ 0x80
 8003c00:	05db      	lsls	r3, r3, #23
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d003      	beq.n	8003c0e <TIM_Base_SetConfig+0x2a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a37      	ldr	r2, [pc, #220]	@ (8003ce8 <TIM_Base_SetConfig+0x104>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d108      	bne.n	8003c20 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2270      	movs	r2, #112	@ 0x70
 8003c12:	4393      	bics	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a30      	ldr	r2, [pc, #192]	@ (8003ce4 <TIM_Base_SetConfig+0x100>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d018      	beq.n	8003c5a <TIM_Base_SetConfig+0x76>
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	2380      	movs	r3, #128	@ 0x80
 8003c2c:	05db      	lsls	r3, r3, #23
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d013      	beq.n	8003c5a <TIM_Base_SetConfig+0x76>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a2c      	ldr	r2, [pc, #176]	@ (8003ce8 <TIM_Base_SetConfig+0x104>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00f      	beq.n	8003c5a <TIM_Base_SetConfig+0x76>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a2b      	ldr	r2, [pc, #172]	@ (8003cec <TIM_Base_SetConfig+0x108>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d00b      	beq.n	8003c5a <TIM_Base_SetConfig+0x76>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a2a      	ldr	r2, [pc, #168]	@ (8003cf0 <TIM_Base_SetConfig+0x10c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d007      	beq.n	8003c5a <TIM_Base_SetConfig+0x76>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a29      	ldr	r2, [pc, #164]	@ (8003cf4 <TIM_Base_SetConfig+0x110>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d003      	beq.n	8003c5a <TIM_Base_SetConfig+0x76>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a28      	ldr	r2, [pc, #160]	@ (8003cf8 <TIM_Base_SetConfig+0x114>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d108      	bne.n	8003c6c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4a27      	ldr	r2, [pc, #156]	@ (8003cfc <TIM_Base_SetConfig+0x118>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2280      	movs	r2, #128	@ 0x80
 8003c70:	4393      	bics	r3, r2
 8003c72:	001a      	movs	r2, r3
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a13      	ldr	r2, [pc, #76]	@ (8003ce4 <TIM_Base_SetConfig+0x100>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00b      	beq.n	8003cb2 <TIM_Base_SetConfig+0xce>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a14      	ldr	r2, [pc, #80]	@ (8003cf0 <TIM_Base_SetConfig+0x10c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d007      	beq.n	8003cb2 <TIM_Base_SetConfig+0xce>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a13      	ldr	r2, [pc, #76]	@ (8003cf4 <TIM_Base_SetConfig+0x110>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d003      	beq.n	8003cb2 <TIM_Base_SetConfig+0xce>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a12      	ldr	r2, [pc, #72]	@ (8003cf8 <TIM_Base_SetConfig+0x114>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d103      	bne.n	8003cba <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	691a      	ldr	r2, [r3, #16]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d106      	bne.n	8003cda <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	4393      	bics	r3, r2
 8003cd4:	001a      	movs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	611a      	str	r2, [r3, #16]
  }
}
 8003cda:	46c0      	nop			@ (mov r8, r8)
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	b004      	add	sp, #16
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	46c0      	nop			@ (mov r8, r8)
 8003ce4:	40012c00 	.word	0x40012c00
 8003ce8:	40000400 	.word	0x40000400
 8003cec:	40002000 	.word	0x40002000
 8003cf0:	40014000 	.word	0x40014000
 8003cf4:	40014400 	.word	0x40014400
 8003cf8:	40014800 	.word	0x40014800
 8003cfc:	fffffcff 	.word	0xfffffcff

08003d00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	2201      	movs	r2, #1
 8003d16:	4393      	bics	r3, r2
 8003d18:	001a      	movs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	4a32      	ldr	r2, [pc, #200]	@ (8003df8 <TIM_OC1_SetConfig+0xf8>)
 8003d2e:	4013      	ands	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2203      	movs	r2, #3
 8003d36:	4393      	bics	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	2202      	movs	r2, #2
 8003d48:	4393      	bics	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a28      	ldr	r2, [pc, #160]	@ (8003dfc <TIM_OC1_SetConfig+0xfc>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d00b      	beq.n	8003d76 <TIM_OC1_SetConfig+0x76>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a27      	ldr	r2, [pc, #156]	@ (8003e00 <TIM_OC1_SetConfig+0x100>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d007      	beq.n	8003d76 <TIM_OC1_SetConfig+0x76>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a26      	ldr	r2, [pc, #152]	@ (8003e04 <TIM_OC1_SetConfig+0x104>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d003      	beq.n	8003d76 <TIM_OC1_SetConfig+0x76>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a25      	ldr	r2, [pc, #148]	@ (8003e08 <TIM_OC1_SetConfig+0x108>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d10c      	bne.n	8003d90 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2208      	movs	r2, #8
 8003d7a:	4393      	bics	r3, r2
 8003d7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	4393      	bics	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a1a      	ldr	r2, [pc, #104]	@ (8003dfc <TIM_OC1_SetConfig+0xfc>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d00b      	beq.n	8003db0 <TIM_OC1_SetConfig+0xb0>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a19      	ldr	r2, [pc, #100]	@ (8003e00 <TIM_OC1_SetConfig+0x100>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d007      	beq.n	8003db0 <TIM_OC1_SetConfig+0xb0>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a18      	ldr	r2, [pc, #96]	@ (8003e04 <TIM_OC1_SetConfig+0x104>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d003      	beq.n	8003db0 <TIM_OC1_SetConfig+0xb0>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a17      	ldr	r2, [pc, #92]	@ (8003e08 <TIM_OC1_SetConfig+0x108>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d111      	bne.n	8003dd4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	4a16      	ldr	r2, [pc, #88]	@ (8003e0c <TIM_OC1_SetConfig+0x10c>)
 8003db4:	4013      	ands	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4a15      	ldr	r2, [pc, #84]	@ (8003e10 <TIM_OC1_SetConfig+0x110>)
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	621a      	str	r2, [r3, #32]
}
 8003dee:	46c0      	nop			@ (mov r8, r8)
 8003df0:	46bd      	mov	sp, r7
 8003df2:	b006      	add	sp, #24
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	46c0      	nop			@ (mov r8, r8)
 8003df8:	fffeff8f 	.word	0xfffeff8f
 8003dfc:	40012c00 	.word	0x40012c00
 8003e00:	40014000 	.word	0x40014000
 8003e04:	40014400 	.word	0x40014400
 8003e08:	40014800 	.word	0x40014800
 8003e0c:	fffffeff 	.word	0xfffffeff
 8003e10:	fffffdff 	.word	0xfffffdff

08003e14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	2210      	movs	r2, #16
 8003e2a:	4393      	bics	r3, r2
 8003e2c:	001a      	movs	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4a2e      	ldr	r2, [pc, #184]	@ (8003efc <TIM_OC2_SetConfig+0xe8>)
 8003e42:	4013      	ands	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4a2d      	ldr	r2, [pc, #180]	@ (8003f00 <TIM_OC2_SetConfig+0xec>)
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	021b      	lsls	r3, r3, #8
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	4393      	bics	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a24      	ldr	r2, [pc, #144]	@ (8003f04 <TIM_OC2_SetConfig+0xf0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d10d      	bne.n	8003e92 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2280      	movs	r2, #128	@ 0x80
 8003e7a:	4393      	bics	r3, r2
 8003e7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2240      	movs	r2, #64	@ 0x40
 8003e8e:	4393      	bics	r3, r2
 8003e90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a1b      	ldr	r2, [pc, #108]	@ (8003f04 <TIM_OC2_SetConfig+0xf0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d00b      	beq.n	8003eb2 <TIM_OC2_SetConfig+0x9e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a1a      	ldr	r2, [pc, #104]	@ (8003f08 <TIM_OC2_SetConfig+0xf4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d007      	beq.n	8003eb2 <TIM_OC2_SetConfig+0x9e>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a19      	ldr	r2, [pc, #100]	@ (8003f0c <TIM_OC2_SetConfig+0xf8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d003      	beq.n	8003eb2 <TIM_OC2_SetConfig+0x9e>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a18      	ldr	r2, [pc, #96]	@ (8003f10 <TIM_OC2_SetConfig+0xfc>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d113      	bne.n	8003eda <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	4a17      	ldr	r2, [pc, #92]	@ (8003f14 <TIM_OC2_SetConfig+0x100>)
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	4a16      	ldr	r2, [pc, #88]	@ (8003f18 <TIM_OC2_SetConfig+0x104>)
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	621a      	str	r2, [r3, #32]
}
 8003ef4:	46c0      	nop			@ (mov r8, r8)
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b006      	add	sp, #24
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	feff8fff 	.word	0xfeff8fff
 8003f00:	fffffcff 	.word	0xfffffcff
 8003f04:	40012c00 	.word	0x40012c00
 8003f08:	40014000 	.word	0x40014000
 8003f0c:	40014400 	.word	0x40014400
 8003f10:	40014800 	.word	0x40014800
 8003f14:	fffffbff 	.word	0xfffffbff
 8003f18:	fffff7ff 	.word	0xfffff7ff

08003f1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	4a33      	ldr	r2, [pc, #204]	@ (8004000 <TIM_OC3_SetConfig+0xe4>)
 8003f32:	401a      	ands	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4a2f      	ldr	r2, [pc, #188]	@ (8004004 <TIM_OC3_SetConfig+0xe8>)
 8003f48:	4013      	ands	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2203      	movs	r2, #3
 8003f50:	4393      	bics	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	4a29      	ldr	r2, [pc, #164]	@ (8004008 <TIM_OC3_SetConfig+0xec>)
 8003f62:	4013      	ands	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	021b      	lsls	r3, r3, #8
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a25      	ldr	r2, [pc, #148]	@ (800400c <TIM_OC3_SetConfig+0xf0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d10d      	bne.n	8003f96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	4a24      	ldr	r2, [pc, #144]	@ (8004010 <TIM_OC3_SetConfig+0xf4>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	021b      	lsls	r3, r3, #8
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	4a20      	ldr	r2, [pc, #128]	@ (8004014 <TIM_OC3_SetConfig+0xf8>)
 8003f92:	4013      	ands	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a1c      	ldr	r2, [pc, #112]	@ (800400c <TIM_OC3_SetConfig+0xf0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00b      	beq.n	8003fb6 <TIM_OC3_SetConfig+0x9a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a1d      	ldr	r2, [pc, #116]	@ (8004018 <TIM_OC3_SetConfig+0xfc>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d007      	beq.n	8003fb6 <TIM_OC3_SetConfig+0x9a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a1c      	ldr	r2, [pc, #112]	@ (800401c <TIM_OC3_SetConfig+0x100>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d003      	beq.n	8003fb6 <TIM_OC3_SetConfig+0x9a>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a1b      	ldr	r2, [pc, #108]	@ (8004020 <TIM_OC3_SetConfig+0x104>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d113      	bne.n	8003fde <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	4a1a      	ldr	r2, [pc, #104]	@ (8004024 <TIM_OC3_SetConfig+0x108>)
 8003fba:	4013      	ands	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	4a19      	ldr	r2, [pc, #100]	@ (8004028 <TIM_OC3_SetConfig+0x10c>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	621a      	str	r2, [r3, #32]
}
 8003ff8:	46c0      	nop			@ (mov r8, r8)
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	b006      	add	sp, #24
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	fffffeff 	.word	0xfffffeff
 8004004:	fffeff8f 	.word	0xfffeff8f
 8004008:	fffffdff 	.word	0xfffffdff
 800400c:	40012c00 	.word	0x40012c00
 8004010:	fffff7ff 	.word	0xfffff7ff
 8004014:	fffffbff 	.word	0xfffffbff
 8004018:	40014000 	.word	0x40014000
 800401c:	40014400 	.word	0x40014400
 8004020:	40014800 	.word	0x40014800
 8004024:	ffffefff 	.word	0xffffefff
 8004028:	ffffdfff 	.word	0xffffdfff

0800402c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	4a26      	ldr	r2, [pc, #152]	@ (80040dc <TIM_OC4_SetConfig+0xb0>)
 8004042:	401a      	ands	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4a22      	ldr	r2, [pc, #136]	@ (80040e0 <TIM_OC4_SetConfig+0xb4>)
 8004058:	4013      	ands	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4a21      	ldr	r2, [pc, #132]	@ (80040e4 <TIM_OC4_SetConfig+0xb8>)
 8004060:	4013      	ands	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	021b      	lsls	r3, r3, #8
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	4313      	orrs	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	4a1d      	ldr	r2, [pc, #116]	@ (80040e8 <TIM_OC4_SetConfig+0xbc>)
 8004074:	4013      	ands	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	031b      	lsls	r3, r3, #12
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a19      	ldr	r2, [pc, #100]	@ (80040ec <TIM_OC4_SetConfig+0xc0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d00b      	beq.n	80040a4 <TIM_OC4_SetConfig+0x78>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a18      	ldr	r2, [pc, #96]	@ (80040f0 <TIM_OC4_SetConfig+0xc4>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d007      	beq.n	80040a4 <TIM_OC4_SetConfig+0x78>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a17      	ldr	r2, [pc, #92]	@ (80040f4 <TIM_OC4_SetConfig+0xc8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d003      	beq.n	80040a4 <TIM_OC4_SetConfig+0x78>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a16      	ldr	r2, [pc, #88]	@ (80040f8 <TIM_OC4_SetConfig+0xcc>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d109      	bne.n	80040b8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	4a15      	ldr	r2, [pc, #84]	@ (80040fc <TIM_OC4_SetConfig+0xd0>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	019b      	lsls	r3, r3, #6
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	621a      	str	r2, [r3, #32]
}
 80040d2:	46c0      	nop			@ (mov r8, r8)
 80040d4:	46bd      	mov	sp, r7
 80040d6:	b006      	add	sp, #24
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	46c0      	nop			@ (mov r8, r8)
 80040dc:	ffffefff 	.word	0xffffefff
 80040e0:	feff8fff 	.word	0xfeff8fff
 80040e4:	fffffcff 	.word	0xfffffcff
 80040e8:	ffffdfff 	.word	0xffffdfff
 80040ec:	40012c00 	.word	0x40012c00
 80040f0:	40014000 	.word	0x40014000
 80040f4:	40014400 	.word	0x40014400
 80040f8:	40014800 	.word	0x40014800
 80040fc:	ffffbfff 	.word	0xffffbfff

08004100 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	4a23      	ldr	r2, [pc, #140]	@ (80041a4 <TIM_OC5_SetConfig+0xa4>)
 8004116:	401a      	ands	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4a1f      	ldr	r2, [pc, #124]	@ (80041a8 <TIM_OC5_SetConfig+0xa8>)
 800412c:	4013      	ands	r3, r2
 800412e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	4a1b      	ldr	r2, [pc, #108]	@ (80041ac <TIM_OC5_SetConfig+0xac>)
 800413e:	4013      	ands	r3, r2
 8004140:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	041b      	lsls	r3, r3, #16
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a17      	ldr	r2, [pc, #92]	@ (80041b0 <TIM_OC5_SetConfig+0xb0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00b      	beq.n	800416e <TIM_OC5_SetConfig+0x6e>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a16      	ldr	r2, [pc, #88]	@ (80041b4 <TIM_OC5_SetConfig+0xb4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d007      	beq.n	800416e <TIM_OC5_SetConfig+0x6e>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a15      	ldr	r2, [pc, #84]	@ (80041b8 <TIM_OC5_SetConfig+0xb8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d003      	beq.n	800416e <TIM_OC5_SetConfig+0x6e>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a14      	ldr	r2, [pc, #80]	@ (80041bc <TIM_OC5_SetConfig+0xbc>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d109      	bne.n	8004182 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	4a0c      	ldr	r2, [pc, #48]	@ (80041a4 <TIM_OC5_SetConfig+0xa4>)
 8004172:	4013      	ands	r3, r2
 8004174:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	021b      	lsls	r3, r3, #8
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	4313      	orrs	r3, r2
 8004180:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	621a      	str	r2, [r3, #32]
}
 800419c:	46c0      	nop			@ (mov r8, r8)
 800419e:	46bd      	mov	sp, r7
 80041a0:	b006      	add	sp, #24
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	fffeffff 	.word	0xfffeffff
 80041a8:	fffeff8f 	.word	0xfffeff8f
 80041ac:	fffdffff 	.word	0xfffdffff
 80041b0:	40012c00 	.word	0x40012c00
 80041b4:	40014000 	.word	0x40014000
 80041b8:	40014400 	.word	0x40014400
 80041bc:	40014800 	.word	0x40014800

080041c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	4a24      	ldr	r2, [pc, #144]	@ (8004268 <TIM_OC6_SetConfig+0xa8>)
 80041d6:	401a      	ands	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4a20      	ldr	r2, [pc, #128]	@ (800426c <TIM_OC6_SetConfig+0xac>)
 80041ec:	4013      	ands	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	021b      	lsls	r3, r3, #8
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004270 <TIM_OC6_SetConfig+0xb0>)
 8004200:	4013      	ands	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	051b      	lsls	r3, r3, #20
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a18      	ldr	r2, [pc, #96]	@ (8004274 <TIM_OC6_SetConfig+0xb4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d00b      	beq.n	8004230 <TIM_OC6_SetConfig+0x70>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a17      	ldr	r2, [pc, #92]	@ (8004278 <TIM_OC6_SetConfig+0xb8>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d007      	beq.n	8004230 <TIM_OC6_SetConfig+0x70>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a16      	ldr	r2, [pc, #88]	@ (800427c <TIM_OC6_SetConfig+0xbc>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d003      	beq.n	8004230 <TIM_OC6_SetConfig+0x70>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a15      	ldr	r2, [pc, #84]	@ (8004280 <TIM_OC6_SetConfig+0xc0>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d109      	bne.n	8004244 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	4a14      	ldr	r2, [pc, #80]	@ (8004284 <TIM_OC6_SetConfig+0xc4>)
 8004234:	4013      	ands	r3, r2
 8004236:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	029b      	lsls	r3, r3, #10
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	621a      	str	r2, [r3, #32]
}
 800425e:	46c0      	nop			@ (mov r8, r8)
 8004260:	46bd      	mov	sp, r7
 8004262:	b006      	add	sp, #24
 8004264:	bd80      	pop	{r7, pc}
 8004266:	46c0      	nop			@ (mov r8, r8)
 8004268:	ffefffff 	.word	0xffefffff
 800426c:	feff8fff 	.word	0xfeff8fff
 8004270:	ffdfffff 	.word	0xffdfffff
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40014000 	.word	0x40014000
 800427c:	40014400 	.word	0x40014400
 8004280:	40014800 	.word	0x40014800
 8004284:	fffbffff 	.word	0xfffbffff

08004288 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
 8004294:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	2201      	movs	r2, #1
 80042a2:	4393      	bics	r3, r2
 80042a4:	001a      	movs	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4a20      	ldr	r2, [pc, #128]	@ (8004334 <TIM_TI1_SetConfig+0xac>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d00c      	beq.n	80042d2 <TIM_TI1_SetConfig+0x4a>
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	2380      	movs	r3, #128	@ 0x80
 80042bc:	05db      	lsls	r3, r3, #23
 80042be:	429a      	cmp	r2, r3
 80042c0:	d007      	beq.n	80042d2 <TIM_TI1_SetConfig+0x4a>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004338 <TIM_TI1_SetConfig+0xb0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d003      	beq.n	80042d2 <TIM_TI1_SetConfig+0x4a>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4a1b      	ldr	r2, [pc, #108]	@ (800433c <TIM_TI1_SetConfig+0xb4>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d101      	bne.n	80042d6 <TIM_TI1_SetConfig+0x4e>
 80042d2:	2301      	movs	r3, #1
 80042d4:	e000      	b.n	80042d8 <TIM_TI1_SetConfig+0x50>
 80042d6:	2300      	movs	r3, #0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d008      	beq.n	80042ee <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	2203      	movs	r2, #3
 80042e0:	4393      	bics	r3, r2
 80042e2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	e003      	b.n	80042f6 <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2201      	movs	r2, #1
 80042f2:	4313      	orrs	r3, r2
 80042f4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	22f0      	movs	r2, #240	@ 0xf0
 80042fa:	4393      	bics	r3, r2
 80042fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	22ff      	movs	r2, #255	@ 0xff
 8004304:	4013      	ands	r3, r2
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	4313      	orrs	r3, r2
 800430a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	220a      	movs	r2, #10
 8004310:	4393      	bics	r3, r2
 8004312:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	220a      	movs	r2, #10
 8004318:	4013      	ands	r3, r2
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	4313      	orrs	r3, r2
 800431e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	621a      	str	r2, [r3, #32]
}
 800432c:	46c0      	nop			@ (mov r8, r8)
 800432e:	46bd      	mov	sp, r7
 8004330:	b006      	add	sp, #24
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40012c00 	.word	0x40012c00
 8004338:	40000400 	.word	0x40000400
 800433c:	40014000 	.word	0x40014000

08004340 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	2201      	movs	r2, #1
 8004358:	4393      	bics	r3, r2
 800435a:	001a      	movs	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	22f0      	movs	r2, #240	@ 0xf0
 800436a:	4393      	bics	r3, r2
 800436c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	4313      	orrs	r3, r2
 8004376:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	220a      	movs	r2, #10
 800437c:	4393      	bics	r3, r2
 800437e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	621a      	str	r2, [r3, #32]
}
 8004394:	46c0      	nop			@ (mov r8, r8)
 8004396:	46bd      	mov	sp, r7
 8004398:	b006      	add	sp, #24
 800439a:	bd80      	pop	{r7, pc}

0800439c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	2210      	movs	r2, #16
 80043b6:	4393      	bics	r3, r2
 80043b8:	001a      	movs	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	4a14      	ldr	r2, [pc, #80]	@ (8004418 <TIM_TI2_SetConfig+0x7c>)
 80043c8:	4013      	ands	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	021b      	lsls	r3, r3, #8
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	4a10      	ldr	r2, [pc, #64]	@ (800441c <TIM_TI2_SetConfig+0x80>)
 80043da:	4013      	ands	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	031b      	lsls	r3, r3, #12
 80043e2:	041b      	lsls	r3, r3, #16
 80043e4:	0c1b      	lsrs	r3, r3, #16
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	22a0      	movs	r2, #160	@ 0xa0
 80043f0:	4393      	bics	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	22a0      	movs	r2, #160	@ 0xa0
 80043fa:	4013      	ands	r3, r2
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	4313      	orrs	r3, r2
 8004400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	621a      	str	r2, [r3, #32]
}
 800440e:	46c0      	nop			@ (mov r8, r8)
 8004410:	46bd      	mov	sp, r7
 8004412:	b006      	add	sp, #24
 8004414:	bd80      	pop	{r7, pc}
 8004416:	46c0      	nop			@ (mov r8, r8)
 8004418:	fffffcff 	.word	0xfffffcff
 800441c:	ffff0fff 	.word	0xffff0fff

08004420 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	2210      	movs	r2, #16
 8004438:	4393      	bics	r3, r2
 800443a:	001a      	movs	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	4a0d      	ldr	r2, [pc, #52]	@ (8004480 <TIM_TI2_ConfigInputStage+0x60>)
 800444a:	4013      	ands	r3, r2
 800444c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	031b      	lsls	r3, r3, #12
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	22a0      	movs	r2, #160	@ 0xa0
 800445c:	4393      	bics	r3, r2
 800445e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	4313      	orrs	r3, r2
 8004468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	621a      	str	r2, [r3, #32]
}
 8004476:	46c0      	nop			@ (mov r8, r8)
 8004478:	46bd      	mov	sp, r7
 800447a:	b006      	add	sp, #24
 800447c:	bd80      	pop	{r7, pc}
 800447e:	46c0      	nop			@ (mov r8, r8)
 8004480:	ffff0fff 	.word	0xffff0fff

08004484 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	4a17      	ldr	r2, [pc, #92]	@ (80044fc <TIM_TI3_SetConfig+0x78>)
 800449e:	401a      	ands	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	2203      	movs	r2, #3
 80044ae:	4393      	bics	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	22f0      	movs	r2, #240	@ 0xf0
 80044be:	4393      	bics	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	22ff      	movs	r2, #255	@ 0xff
 80044c8:	4013      	ands	r3, r2
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	4a0b      	ldr	r2, [pc, #44]	@ (8004500 <TIM_TI3_SetConfig+0x7c>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	021a      	lsls	r2, r3, #8
 80044dc:	23a0      	movs	r3, #160	@ 0xa0
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	4013      	ands	r3, r2
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	621a      	str	r2, [r3, #32]
}
 80044f4:	46c0      	nop			@ (mov r8, r8)
 80044f6:	46bd      	mov	sp, r7
 80044f8:	b006      	add	sp, #24
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	fffffeff 	.word	0xfffffeff
 8004500:	fffff5ff 	.word	0xfffff5ff

08004504 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	4a18      	ldr	r2, [pc, #96]	@ (8004580 <TIM_TI4_SetConfig+0x7c>)
 800451e:	401a      	ands	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	4a15      	ldr	r2, [pc, #84]	@ (8004584 <TIM_TI4_SetConfig+0x80>)
 800452e:	4013      	ands	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	021b      	lsls	r3, r3, #8
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	4313      	orrs	r3, r2
 800453a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	4a12      	ldr	r2, [pc, #72]	@ (8004588 <TIM_TI4_SetConfig+0x84>)
 8004540:	4013      	ands	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	031b      	lsls	r3, r3, #12
 8004548:	041b      	lsls	r3, r3, #16
 800454a:	0c1b      	lsrs	r3, r3, #16
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4313      	orrs	r3, r2
 8004550:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	4a0d      	ldr	r2, [pc, #52]	@ (800458c <TIM_TI4_SetConfig+0x88>)
 8004556:	4013      	ands	r3, r2
 8004558:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	031a      	lsls	r2, r3, #12
 800455e:	23a0      	movs	r3, #160	@ 0xa0
 8004560:	021b      	lsls	r3, r3, #8
 8004562:	4013      	ands	r3, r2
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	4313      	orrs	r3, r2
 8004568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	621a      	str	r2, [r3, #32]
}
 8004576:	46c0      	nop			@ (mov r8, r8)
 8004578:	46bd      	mov	sp, r7
 800457a:	b006      	add	sp, #24
 800457c:	bd80      	pop	{r7, pc}
 800457e:	46c0      	nop			@ (mov r8, r8)
 8004580:	ffffefff 	.word	0xffffefff
 8004584:	fffffcff 	.word	0xfffffcff
 8004588:	ffff0fff 	.word	0xffff0fff
 800458c:	ffff5fff 	.word	0xffff5fff

08004590 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4a08      	ldr	r2, [pc, #32]	@ (80045c4 <TIM_ITRx_SetConfig+0x34>)
 80045a4:	4013      	ands	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	2207      	movs	r2, #7
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	609a      	str	r2, [r3, #8]
}
 80045ba:	46c0      	nop			@ (mov r8, r8)
 80045bc:	46bd      	mov	sp, r7
 80045be:	b004      	add	sp, #16
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	46c0      	nop			@ (mov r8, r8)
 80045c4:	ffcfff8f 	.word	0xffcfff8f

080045c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	4a09      	ldr	r2, [pc, #36]	@ (8004604 <TIM_ETR_SetConfig+0x3c>)
 80045e0:	4013      	ands	r3, r2
 80045e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	021a      	lsls	r2, r3, #8
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	431a      	orrs	r2, r3
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	609a      	str	r2, [r3, #8]
}
 80045fc:	46c0      	nop			@ (mov r8, r8)
 80045fe:	46bd      	mov	sp, r7
 8004600:	b006      	add	sp, #24
 8004602:	bd80      	pop	{r7, pc}
 8004604:	ffff00ff 	.word	0xffff00ff

08004608 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	221f      	movs	r2, #31
 8004618:	4013      	ands	r3, r2
 800461a:	2201      	movs	r2, #1
 800461c:	409a      	lsls	r2, r3
 800461e:	0013      	movs	r3, r2
 8004620:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	43d2      	mvns	r2, r2
 800462a:	401a      	ands	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a1a      	ldr	r2, [r3, #32]
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	211f      	movs	r1, #31
 8004638:	400b      	ands	r3, r1
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	4099      	lsls	r1, r3
 800463e:	000b      	movs	r3, r1
 8004640:	431a      	orrs	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	621a      	str	r2, [r3, #32]
}
 8004646:	46c0      	nop			@ (mov r8, r8)
 8004648:	46bd      	mov	sp, r7
 800464a:	b006      	add	sp, #24
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	223c      	movs	r2, #60	@ 0x3c
 800465e:	5c9b      	ldrb	r3, [r3, r2]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d101      	bne.n	8004668 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004664:	2302      	movs	r3, #2
 8004666:	e055      	b.n	8004714 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	223c      	movs	r2, #60	@ 0x3c
 800466c:	2101      	movs	r1, #1
 800466e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	223d      	movs	r2, #61	@ 0x3d
 8004674:	2102      	movs	r1, #2
 8004676:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a23      	ldr	r2, [pc, #140]	@ (800471c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d108      	bne.n	80046a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4a22      	ldr	r2, [pc, #136]	@ (8004720 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004696:	4013      	ands	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2270      	movs	r2, #112	@ 0x70
 80046a8:	4393      	bics	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a16      	ldr	r2, [pc, #88]	@ (800471c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00f      	beq.n	80046e8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	2380      	movs	r3, #128	@ 0x80
 80046ce:	05db      	lsls	r3, r3, #23
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d009      	beq.n	80046e8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a12      	ldr	r2, [pc, #72]	@ (8004724 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d004      	beq.n	80046e8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a11      	ldr	r2, [pc, #68]	@ (8004728 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d10c      	bne.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2280      	movs	r2, #128	@ 0x80
 80046ec:	4393      	bics	r3, r2
 80046ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	223d      	movs	r2, #61	@ 0x3d
 8004706:	2101      	movs	r1, #1
 8004708:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	223c      	movs	r2, #60	@ 0x3c
 800470e:	2100      	movs	r1, #0
 8004710:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	0018      	movs	r0, r3
 8004716:	46bd      	mov	sp, r7
 8004718:	b004      	add	sp, #16
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40012c00 	.word	0x40012c00
 8004720:	ff0fffff 	.word	0xff0fffff
 8004724:	40000400 	.word	0x40000400
 8004728:	40014000 	.word	0x40014000

0800472c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004736:	2300      	movs	r3, #0
 8004738:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	223c      	movs	r2, #60	@ 0x3c
 800473e:	5c9b      	ldrb	r3, [r3, r2]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004744:	2302      	movs	r3, #2
 8004746:	e06f      	b.n	8004828 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	223c      	movs	r2, #60	@ 0x3c
 800474c:	2101      	movs	r1, #1
 800474e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	22ff      	movs	r2, #255	@ 0xff
 8004754:	4393      	bics	r3, r2
 8004756:	001a      	movs	r2, r3
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	4313      	orrs	r3, r2
 800475e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4a33      	ldr	r2, [pc, #204]	@ (8004830 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004764:	401a      	ands	r2, r3
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	4313      	orrs	r3, r2
 800476c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4a30      	ldr	r2, [pc, #192]	@ (8004834 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004772:	401a      	ands	r2, r3
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	4313      	orrs	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4a2e      	ldr	r2, [pc, #184]	@ (8004838 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8004780:	401a      	ands	r2, r3
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4313      	orrs	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	4a2b      	ldr	r2, [pc, #172]	@ (800483c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800478e:	401a      	ands	r2, r3
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4a29      	ldr	r2, [pc, #164]	@ (8004840 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800479c:	401a      	ands	r2, r3
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4a26      	ldr	r2, [pc, #152]	@ (8004844 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80047aa:	401a      	ands	r2, r3
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b0:	4313      	orrs	r3, r2
 80047b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4a24      	ldr	r2, [pc, #144]	@ (8004848 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80047b8:	401a      	ands	r2, r3
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	041b      	lsls	r3, r3, #16
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4a21      	ldr	r2, [pc, #132]	@ (800484c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80047c8:	401a      	ands	r2, r3
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004850 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d11c      	bne.n	8004816 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4a1d      	ldr	r2, [pc, #116]	@ (8004854 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80047e0:	401a      	ands	r2, r3
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e6:	051b      	lsls	r3, r3, #20
 80047e8:	4313      	orrs	r3, r2
 80047ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4a1a      	ldr	r2, [pc, #104]	@ (8004858 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80047f0:	401a      	ands	r2, r3
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	4a17      	ldr	r2, [pc, #92]	@ (800485c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80047fe:	401a      	ands	r2, r3
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004804:	4313      	orrs	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4a15      	ldr	r2, [pc, #84]	@ (8004860 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800480c:	401a      	ands	r2, r3
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	223c      	movs	r2, #60	@ 0x3c
 8004822:	2100      	movs	r1, #0
 8004824:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	0018      	movs	r0, r3
 800482a:	46bd      	mov	sp, r7
 800482c:	b004      	add	sp, #16
 800482e:	bd80      	pop	{r7, pc}
 8004830:	fffffcff 	.word	0xfffffcff
 8004834:	fffffbff 	.word	0xfffffbff
 8004838:	fffff7ff 	.word	0xfffff7ff
 800483c:	ffffefff 	.word	0xffffefff
 8004840:	ffffdfff 	.word	0xffffdfff
 8004844:	ffffbfff 	.word	0xffffbfff
 8004848:	fff0ffff 	.word	0xfff0ffff
 800484c:	efffffff 	.word	0xefffffff
 8004850:	40012c00 	.word	0x40012c00
 8004854:	ff0fffff 	.word	0xff0fffff
 8004858:	feffffff 	.word	0xfeffffff
 800485c:	fdffffff 	.word	0xfdffffff
 8004860:	dfffffff 	.word	0xdfffffff

08004864 <std>:
 8004864:	2300      	movs	r3, #0
 8004866:	b510      	push	{r4, lr}
 8004868:	0004      	movs	r4, r0
 800486a:	6003      	str	r3, [r0, #0]
 800486c:	6043      	str	r3, [r0, #4]
 800486e:	6083      	str	r3, [r0, #8]
 8004870:	8181      	strh	r1, [r0, #12]
 8004872:	6643      	str	r3, [r0, #100]	@ 0x64
 8004874:	81c2      	strh	r2, [r0, #14]
 8004876:	6103      	str	r3, [r0, #16]
 8004878:	6143      	str	r3, [r0, #20]
 800487a:	6183      	str	r3, [r0, #24]
 800487c:	0019      	movs	r1, r3
 800487e:	2208      	movs	r2, #8
 8004880:	305c      	adds	r0, #92	@ 0x5c
 8004882:	f000 f90f 	bl	8004aa4 <memset>
 8004886:	4b0b      	ldr	r3, [pc, #44]	@ (80048b4 <std+0x50>)
 8004888:	6224      	str	r4, [r4, #32]
 800488a:	6263      	str	r3, [r4, #36]	@ 0x24
 800488c:	4b0a      	ldr	r3, [pc, #40]	@ (80048b8 <std+0x54>)
 800488e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004890:	4b0a      	ldr	r3, [pc, #40]	@ (80048bc <std+0x58>)
 8004892:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004894:	4b0a      	ldr	r3, [pc, #40]	@ (80048c0 <std+0x5c>)
 8004896:	6323      	str	r3, [r4, #48]	@ 0x30
 8004898:	4b0a      	ldr	r3, [pc, #40]	@ (80048c4 <std+0x60>)
 800489a:	429c      	cmp	r4, r3
 800489c:	d005      	beq.n	80048aa <std+0x46>
 800489e:	4b0a      	ldr	r3, [pc, #40]	@ (80048c8 <std+0x64>)
 80048a0:	429c      	cmp	r4, r3
 80048a2:	d002      	beq.n	80048aa <std+0x46>
 80048a4:	4b09      	ldr	r3, [pc, #36]	@ (80048cc <std+0x68>)
 80048a6:	429c      	cmp	r4, r3
 80048a8:	d103      	bne.n	80048b2 <std+0x4e>
 80048aa:	0020      	movs	r0, r4
 80048ac:	3058      	adds	r0, #88	@ 0x58
 80048ae:	f000 f979 	bl	8004ba4 <__retarget_lock_init_recursive>
 80048b2:	bd10      	pop	{r4, pc}
 80048b4:	08004a0d 	.word	0x08004a0d
 80048b8:	08004a35 	.word	0x08004a35
 80048bc:	08004a6d 	.word	0x08004a6d
 80048c0:	08004a99 	.word	0x08004a99
 80048c4:	20000260 	.word	0x20000260
 80048c8:	200002c8 	.word	0x200002c8
 80048cc:	20000330 	.word	0x20000330

080048d0 <stdio_exit_handler>:
 80048d0:	b510      	push	{r4, lr}
 80048d2:	4a03      	ldr	r2, [pc, #12]	@ (80048e0 <stdio_exit_handler+0x10>)
 80048d4:	4903      	ldr	r1, [pc, #12]	@ (80048e4 <stdio_exit_handler+0x14>)
 80048d6:	4804      	ldr	r0, [pc, #16]	@ (80048e8 <stdio_exit_handler+0x18>)
 80048d8:	f000 f86c 	bl	80049b4 <_fwalk_sglue>
 80048dc:	bd10      	pop	{r4, pc}
 80048de:	46c0      	nop			@ (mov r8, r8)
 80048e0:	20000024 	.word	0x20000024
 80048e4:	08005435 	.word	0x08005435
 80048e8:	20000034 	.word	0x20000034

080048ec <cleanup_stdio>:
 80048ec:	6841      	ldr	r1, [r0, #4]
 80048ee:	4b0b      	ldr	r3, [pc, #44]	@ (800491c <cleanup_stdio+0x30>)
 80048f0:	b510      	push	{r4, lr}
 80048f2:	0004      	movs	r4, r0
 80048f4:	4299      	cmp	r1, r3
 80048f6:	d001      	beq.n	80048fc <cleanup_stdio+0x10>
 80048f8:	f000 fd9c 	bl	8005434 <_fflush_r>
 80048fc:	68a1      	ldr	r1, [r4, #8]
 80048fe:	4b08      	ldr	r3, [pc, #32]	@ (8004920 <cleanup_stdio+0x34>)
 8004900:	4299      	cmp	r1, r3
 8004902:	d002      	beq.n	800490a <cleanup_stdio+0x1e>
 8004904:	0020      	movs	r0, r4
 8004906:	f000 fd95 	bl	8005434 <_fflush_r>
 800490a:	68e1      	ldr	r1, [r4, #12]
 800490c:	4b05      	ldr	r3, [pc, #20]	@ (8004924 <cleanup_stdio+0x38>)
 800490e:	4299      	cmp	r1, r3
 8004910:	d002      	beq.n	8004918 <cleanup_stdio+0x2c>
 8004912:	0020      	movs	r0, r4
 8004914:	f000 fd8e 	bl	8005434 <_fflush_r>
 8004918:	bd10      	pop	{r4, pc}
 800491a:	46c0      	nop			@ (mov r8, r8)
 800491c:	20000260 	.word	0x20000260
 8004920:	200002c8 	.word	0x200002c8
 8004924:	20000330 	.word	0x20000330

08004928 <global_stdio_init.part.0>:
 8004928:	b510      	push	{r4, lr}
 800492a:	4b09      	ldr	r3, [pc, #36]	@ (8004950 <global_stdio_init.part.0+0x28>)
 800492c:	4a09      	ldr	r2, [pc, #36]	@ (8004954 <global_stdio_init.part.0+0x2c>)
 800492e:	2104      	movs	r1, #4
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	4809      	ldr	r0, [pc, #36]	@ (8004958 <global_stdio_init.part.0+0x30>)
 8004934:	2200      	movs	r2, #0
 8004936:	f7ff ff95 	bl	8004864 <std>
 800493a:	2201      	movs	r2, #1
 800493c:	2109      	movs	r1, #9
 800493e:	4807      	ldr	r0, [pc, #28]	@ (800495c <global_stdio_init.part.0+0x34>)
 8004940:	f7ff ff90 	bl	8004864 <std>
 8004944:	2202      	movs	r2, #2
 8004946:	2112      	movs	r1, #18
 8004948:	4805      	ldr	r0, [pc, #20]	@ (8004960 <global_stdio_init.part.0+0x38>)
 800494a:	f7ff ff8b 	bl	8004864 <std>
 800494e:	bd10      	pop	{r4, pc}
 8004950:	20000398 	.word	0x20000398
 8004954:	080048d1 	.word	0x080048d1
 8004958:	20000260 	.word	0x20000260
 800495c:	200002c8 	.word	0x200002c8
 8004960:	20000330 	.word	0x20000330

08004964 <__sfp_lock_acquire>:
 8004964:	b510      	push	{r4, lr}
 8004966:	4802      	ldr	r0, [pc, #8]	@ (8004970 <__sfp_lock_acquire+0xc>)
 8004968:	f000 f91d 	bl	8004ba6 <__retarget_lock_acquire_recursive>
 800496c:	bd10      	pop	{r4, pc}
 800496e:	46c0      	nop			@ (mov r8, r8)
 8004970:	200003a1 	.word	0x200003a1

08004974 <__sfp_lock_release>:
 8004974:	b510      	push	{r4, lr}
 8004976:	4802      	ldr	r0, [pc, #8]	@ (8004980 <__sfp_lock_release+0xc>)
 8004978:	f000 f916 	bl	8004ba8 <__retarget_lock_release_recursive>
 800497c:	bd10      	pop	{r4, pc}
 800497e:	46c0      	nop			@ (mov r8, r8)
 8004980:	200003a1 	.word	0x200003a1

08004984 <__sinit>:
 8004984:	b510      	push	{r4, lr}
 8004986:	0004      	movs	r4, r0
 8004988:	f7ff ffec 	bl	8004964 <__sfp_lock_acquire>
 800498c:	6a23      	ldr	r3, [r4, #32]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <__sinit+0x14>
 8004992:	f7ff ffef 	bl	8004974 <__sfp_lock_release>
 8004996:	bd10      	pop	{r4, pc}
 8004998:	4b04      	ldr	r3, [pc, #16]	@ (80049ac <__sinit+0x28>)
 800499a:	6223      	str	r3, [r4, #32]
 800499c:	4b04      	ldr	r3, [pc, #16]	@ (80049b0 <__sinit+0x2c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1f6      	bne.n	8004992 <__sinit+0xe>
 80049a4:	f7ff ffc0 	bl	8004928 <global_stdio_init.part.0>
 80049a8:	e7f3      	b.n	8004992 <__sinit+0xe>
 80049aa:	46c0      	nop			@ (mov r8, r8)
 80049ac:	080048ed 	.word	0x080048ed
 80049b0:	20000398 	.word	0x20000398

080049b4 <_fwalk_sglue>:
 80049b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049b6:	0014      	movs	r4, r2
 80049b8:	2600      	movs	r6, #0
 80049ba:	9000      	str	r0, [sp, #0]
 80049bc:	9101      	str	r1, [sp, #4]
 80049be:	68a5      	ldr	r5, [r4, #8]
 80049c0:	6867      	ldr	r7, [r4, #4]
 80049c2:	3f01      	subs	r7, #1
 80049c4:	d504      	bpl.n	80049d0 <_fwalk_sglue+0x1c>
 80049c6:	6824      	ldr	r4, [r4, #0]
 80049c8:	2c00      	cmp	r4, #0
 80049ca:	d1f8      	bne.n	80049be <_fwalk_sglue+0xa>
 80049cc:	0030      	movs	r0, r6
 80049ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80049d0:	89ab      	ldrh	r3, [r5, #12]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d908      	bls.n	80049e8 <_fwalk_sglue+0x34>
 80049d6:	220e      	movs	r2, #14
 80049d8:	5eab      	ldrsh	r3, [r5, r2]
 80049da:	3301      	adds	r3, #1
 80049dc:	d004      	beq.n	80049e8 <_fwalk_sglue+0x34>
 80049de:	0029      	movs	r1, r5
 80049e0:	9800      	ldr	r0, [sp, #0]
 80049e2:	9b01      	ldr	r3, [sp, #4]
 80049e4:	4798      	blx	r3
 80049e6:	4306      	orrs	r6, r0
 80049e8:	3568      	adds	r5, #104	@ 0x68
 80049ea:	e7ea      	b.n	80049c2 <_fwalk_sglue+0xe>

080049ec <iprintf>:
 80049ec:	b40f      	push	{r0, r1, r2, r3}
 80049ee:	b507      	push	{r0, r1, r2, lr}
 80049f0:	4905      	ldr	r1, [pc, #20]	@ (8004a08 <iprintf+0x1c>)
 80049f2:	ab04      	add	r3, sp, #16
 80049f4:	6808      	ldr	r0, [r1, #0]
 80049f6:	cb04      	ldmia	r3!, {r2}
 80049f8:	6881      	ldr	r1, [r0, #8]
 80049fa:	9301      	str	r3, [sp, #4]
 80049fc:	f000 f9fa 	bl	8004df4 <_vfiprintf_r>
 8004a00:	b003      	add	sp, #12
 8004a02:	bc08      	pop	{r3}
 8004a04:	b004      	add	sp, #16
 8004a06:	4718      	bx	r3
 8004a08:	20000030 	.word	0x20000030

08004a0c <__sread>:
 8004a0c:	b570      	push	{r4, r5, r6, lr}
 8004a0e:	000c      	movs	r4, r1
 8004a10:	250e      	movs	r5, #14
 8004a12:	5f49      	ldrsh	r1, [r1, r5]
 8004a14:	f000 f874 	bl	8004b00 <_read_r>
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	db03      	blt.n	8004a24 <__sread+0x18>
 8004a1c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004a1e:	181b      	adds	r3, r3, r0
 8004a20:	6563      	str	r3, [r4, #84]	@ 0x54
 8004a22:	bd70      	pop	{r4, r5, r6, pc}
 8004a24:	89a3      	ldrh	r3, [r4, #12]
 8004a26:	4a02      	ldr	r2, [pc, #8]	@ (8004a30 <__sread+0x24>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	81a3      	strh	r3, [r4, #12]
 8004a2c:	e7f9      	b.n	8004a22 <__sread+0x16>
 8004a2e:	46c0      	nop			@ (mov r8, r8)
 8004a30:	ffffefff 	.word	0xffffefff

08004a34 <__swrite>:
 8004a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a36:	001f      	movs	r7, r3
 8004a38:	898b      	ldrh	r3, [r1, #12]
 8004a3a:	0005      	movs	r5, r0
 8004a3c:	000c      	movs	r4, r1
 8004a3e:	0016      	movs	r6, r2
 8004a40:	05db      	lsls	r3, r3, #23
 8004a42:	d505      	bpl.n	8004a50 <__swrite+0x1c>
 8004a44:	230e      	movs	r3, #14
 8004a46:	5ec9      	ldrsh	r1, [r1, r3]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	f000 f844 	bl	8004ad8 <_lseek_r>
 8004a50:	89a3      	ldrh	r3, [r4, #12]
 8004a52:	4a05      	ldr	r2, [pc, #20]	@ (8004a68 <__swrite+0x34>)
 8004a54:	0028      	movs	r0, r5
 8004a56:	4013      	ands	r3, r2
 8004a58:	81a3      	strh	r3, [r4, #12]
 8004a5a:	0032      	movs	r2, r6
 8004a5c:	230e      	movs	r3, #14
 8004a5e:	5ee1      	ldrsh	r1, [r4, r3]
 8004a60:	003b      	movs	r3, r7
 8004a62:	f000 f861 	bl	8004b28 <_write_r>
 8004a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a68:	ffffefff 	.word	0xffffefff

08004a6c <__sseek>:
 8004a6c:	b570      	push	{r4, r5, r6, lr}
 8004a6e:	000c      	movs	r4, r1
 8004a70:	250e      	movs	r5, #14
 8004a72:	5f49      	ldrsh	r1, [r1, r5]
 8004a74:	f000 f830 	bl	8004ad8 <_lseek_r>
 8004a78:	89a3      	ldrh	r3, [r4, #12]
 8004a7a:	1c42      	adds	r2, r0, #1
 8004a7c:	d103      	bne.n	8004a86 <__sseek+0x1a>
 8004a7e:	4a05      	ldr	r2, [pc, #20]	@ (8004a94 <__sseek+0x28>)
 8004a80:	4013      	ands	r3, r2
 8004a82:	81a3      	strh	r3, [r4, #12]
 8004a84:	bd70      	pop	{r4, r5, r6, pc}
 8004a86:	2280      	movs	r2, #128	@ 0x80
 8004a88:	0152      	lsls	r2, r2, #5
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	81a3      	strh	r3, [r4, #12]
 8004a8e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a90:	e7f8      	b.n	8004a84 <__sseek+0x18>
 8004a92:	46c0      	nop			@ (mov r8, r8)
 8004a94:	ffffefff 	.word	0xffffefff

08004a98 <__sclose>:
 8004a98:	b510      	push	{r4, lr}
 8004a9a:	230e      	movs	r3, #14
 8004a9c:	5ec9      	ldrsh	r1, [r1, r3]
 8004a9e:	f000 f809 	bl	8004ab4 <_close_r>
 8004aa2:	bd10      	pop	{r4, pc}

08004aa4 <memset>:
 8004aa4:	0003      	movs	r3, r0
 8004aa6:	1882      	adds	r2, r0, r2
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d100      	bne.n	8004aae <memset+0xa>
 8004aac:	4770      	bx	lr
 8004aae:	7019      	strb	r1, [r3, #0]
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	e7f9      	b.n	8004aa8 <memset+0x4>

08004ab4 <_close_r>:
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	b570      	push	{r4, r5, r6, lr}
 8004ab8:	4d06      	ldr	r5, [pc, #24]	@ (8004ad4 <_close_r+0x20>)
 8004aba:	0004      	movs	r4, r0
 8004abc:	0008      	movs	r0, r1
 8004abe:	602b      	str	r3, [r5, #0]
 8004ac0:	f7fb feb5 	bl	800082e <_close>
 8004ac4:	1c43      	adds	r3, r0, #1
 8004ac6:	d103      	bne.n	8004ad0 <_close_r+0x1c>
 8004ac8:	682b      	ldr	r3, [r5, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d000      	beq.n	8004ad0 <_close_r+0x1c>
 8004ace:	6023      	str	r3, [r4, #0]
 8004ad0:	bd70      	pop	{r4, r5, r6, pc}
 8004ad2:	46c0      	nop			@ (mov r8, r8)
 8004ad4:	2000039c 	.word	0x2000039c

08004ad8 <_lseek_r>:
 8004ad8:	b570      	push	{r4, r5, r6, lr}
 8004ada:	0004      	movs	r4, r0
 8004adc:	0008      	movs	r0, r1
 8004ade:	0011      	movs	r1, r2
 8004ae0:	001a      	movs	r2, r3
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	4d05      	ldr	r5, [pc, #20]	@ (8004afc <_lseek_r+0x24>)
 8004ae6:	602b      	str	r3, [r5, #0]
 8004ae8:	f7fb fec2 	bl	8000870 <_lseek>
 8004aec:	1c43      	adds	r3, r0, #1
 8004aee:	d103      	bne.n	8004af8 <_lseek_r+0x20>
 8004af0:	682b      	ldr	r3, [r5, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d000      	beq.n	8004af8 <_lseek_r+0x20>
 8004af6:	6023      	str	r3, [r4, #0]
 8004af8:	bd70      	pop	{r4, r5, r6, pc}
 8004afa:	46c0      	nop			@ (mov r8, r8)
 8004afc:	2000039c 	.word	0x2000039c

08004b00 <_read_r>:
 8004b00:	b570      	push	{r4, r5, r6, lr}
 8004b02:	0004      	movs	r4, r0
 8004b04:	0008      	movs	r0, r1
 8004b06:	0011      	movs	r1, r2
 8004b08:	001a      	movs	r2, r3
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	4d05      	ldr	r5, [pc, #20]	@ (8004b24 <_read_r+0x24>)
 8004b0e:	602b      	str	r3, [r5, #0]
 8004b10:	f7fb fe54 	bl	80007bc <_read>
 8004b14:	1c43      	adds	r3, r0, #1
 8004b16:	d103      	bne.n	8004b20 <_read_r+0x20>
 8004b18:	682b      	ldr	r3, [r5, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d000      	beq.n	8004b20 <_read_r+0x20>
 8004b1e:	6023      	str	r3, [r4, #0]
 8004b20:	bd70      	pop	{r4, r5, r6, pc}
 8004b22:	46c0      	nop			@ (mov r8, r8)
 8004b24:	2000039c 	.word	0x2000039c

08004b28 <_write_r>:
 8004b28:	b570      	push	{r4, r5, r6, lr}
 8004b2a:	0004      	movs	r4, r0
 8004b2c:	0008      	movs	r0, r1
 8004b2e:	0011      	movs	r1, r2
 8004b30:	001a      	movs	r2, r3
 8004b32:	2300      	movs	r3, #0
 8004b34:	4d05      	ldr	r5, [pc, #20]	@ (8004b4c <_write_r+0x24>)
 8004b36:	602b      	str	r3, [r5, #0]
 8004b38:	f7fb fe5d 	bl	80007f6 <_write>
 8004b3c:	1c43      	adds	r3, r0, #1
 8004b3e:	d103      	bne.n	8004b48 <_write_r+0x20>
 8004b40:	682b      	ldr	r3, [r5, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d000      	beq.n	8004b48 <_write_r+0x20>
 8004b46:	6023      	str	r3, [r4, #0]
 8004b48:	bd70      	pop	{r4, r5, r6, pc}
 8004b4a:	46c0      	nop			@ (mov r8, r8)
 8004b4c:	2000039c 	.word	0x2000039c

08004b50 <__errno>:
 8004b50:	4b01      	ldr	r3, [pc, #4]	@ (8004b58 <__errno+0x8>)
 8004b52:	6818      	ldr	r0, [r3, #0]
 8004b54:	4770      	bx	lr
 8004b56:	46c0      	nop			@ (mov r8, r8)
 8004b58:	20000030 	.word	0x20000030

08004b5c <__libc_init_array>:
 8004b5c:	b570      	push	{r4, r5, r6, lr}
 8004b5e:	2600      	movs	r6, #0
 8004b60:	4c0c      	ldr	r4, [pc, #48]	@ (8004b94 <__libc_init_array+0x38>)
 8004b62:	4d0d      	ldr	r5, [pc, #52]	@ (8004b98 <__libc_init_array+0x3c>)
 8004b64:	1b64      	subs	r4, r4, r5
 8004b66:	10a4      	asrs	r4, r4, #2
 8004b68:	42a6      	cmp	r6, r4
 8004b6a:	d109      	bne.n	8004b80 <__libc_init_array+0x24>
 8004b6c:	2600      	movs	r6, #0
 8004b6e:	f000 fddb 	bl	8005728 <_init>
 8004b72:	4c0a      	ldr	r4, [pc, #40]	@ (8004b9c <__libc_init_array+0x40>)
 8004b74:	4d0a      	ldr	r5, [pc, #40]	@ (8004ba0 <__libc_init_array+0x44>)
 8004b76:	1b64      	subs	r4, r4, r5
 8004b78:	10a4      	asrs	r4, r4, #2
 8004b7a:	42a6      	cmp	r6, r4
 8004b7c:	d105      	bne.n	8004b8a <__libc_init_array+0x2e>
 8004b7e:	bd70      	pop	{r4, r5, r6, pc}
 8004b80:	00b3      	lsls	r3, r6, #2
 8004b82:	58eb      	ldr	r3, [r5, r3]
 8004b84:	4798      	blx	r3
 8004b86:	3601      	adds	r6, #1
 8004b88:	e7ee      	b.n	8004b68 <__libc_init_array+0xc>
 8004b8a:	00b3      	lsls	r3, r6, #2
 8004b8c:	58eb      	ldr	r3, [r5, r3]
 8004b8e:	4798      	blx	r3
 8004b90:	3601      	adds	r6, #1
 8004b92:	e7f2      	b.n	8004b7a <__libc_init_array+0x1e>
 8004b94:	08005944 	.word	0x08005944
 8004b98:	08005944 	.word	0x08005944
 8004b9c:	08005948 	.word	0x08005948
 8004ba0:	08005944 	.word	0x08005944

08004ba4 <__retarget_lock_init_recursive>:
 8004ba4:	4770      	bx	lr

08004ba6 <__retarget_lock_acquire_recursive>:
 8004ba6:	4770      	bx	lr

08004ba8 <__retarget_lock_release_recursive>:
 8004ba8:	4770      	bx	lr
	...

08004bac <_free_r>:
 8004bac:	b570      	push	{r4, r5, r6, lr}
 8004bae:	0005      	movs	r5, r0
 8004bb0:	1e0c      	subs	r4, r1, #0
 8004bb2:	d010      	beq.n	8004bd6 <_free_r+0x2a>
 8004bb4:	3c04      	subs	r4, #4
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	da00      	bge.n	8004bbe <_free_r+0x12>
 8004bbc:	18e4      	adds	r4, r4, r3
 8004bbe:	0028      	movs	r0, r5
 8004bc0:	f000 f8e0 	bl	8004d84 <__malloc_lock>
 8004bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8004c3c <_free_r+0x90>)
 8004bc6:	6813      	ldr	r3, [r2, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d105      	bne.n	8004bd8 <_free_r+0x2c>
 8004bcc:	6063      	str	r3, [r4, #4]
 8004bce:	6014      	str	r4, [r2, #0]
 8004bd0:	0028      	movs	r0, r5
 8004bd2:	f000 f8df 	bl	8004d94 <__malloc_unlock>
 8004bd6:	bd70      	pop	{r4, r5, r6, pc}
 8004bd8:	42a3      	cmp	r3, r4
 8004bda:	d908      	bls.n	8004bee <_free_r+0x42>
 8004bdc:	6820      	ldr	r0, [r4, #0]
 8004bde:	1821      	adds	r1, r4, r0
 8004be0:	428b      	cmp	r3, r1
 8004be2:	d1f3      	bne.n	8004bcc <_free_r+0x20>
 8004be4:	6819      	ldr	r1, [r3, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	1809      	adds	r1, r1, r0
 8004bea:	6021      	str	r1, [r4, #0]
 8004bec:	e7ee      	b.n	8004bcc <_free_r+0x20>
 8004bee:	001a      	movs	r2, r3
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <_free_r+0x4e>
 8004bf6:	42a3      	cmp	r3, r4
 8004bf8:	d9f9      	bls.n	8004bee <_free_r+0x42>
 8004bfa:	6811      	ldr	r1, [r2, #0]
 8004bfc:	1850      	adds	r0, r2, r1
 8004bfe:	42a0      	cmp	r0, r4
 8004c00:	d10b      	bne.n	8004c1a <_free_r+0x6e>
 8004c02:	6820      	ldr	r0, [r4, #0]
 8004c04:	1809      	adds	r1, r1, r0
 8004c06:	1850      	adds	r0, r2, r1
 8004c08:	6011      	str	r1, [r2, #0]
 8004c0a:	4283      	cmp	r3, r0
 8004c0c:	d1e0      	bne.n	8004bd0 <_free_r+0x24>
 8004c0e:	6818      	ldr	r0, [r3, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	1841      	adds	r1, r0, r1
 8004c14:	6011      	str	r1, [r2, #0]
 8004c16:	6053      	str	r3, [r2, #4]
 8004c18:	e7da      	b.n	8004bd0 <_free_r+0x24>
 8004c1a:	42a0      	cmp	r0, r4
 8004c1c:	d902      	bls.n	8004c24 <_free_r+0x78>
 8004c1e:	230c      	movs	r3, #12
 8004c20:	602b      	str	r3, [r5, #0]
 8004c22:	e7d5      	b.n	8004bd0 <_free_r+0x24>
 8004c24:	6820      	ldr	r0, [r4, #0]
 8004c26:	1821      	adds	r1, r4, r0
 8004c28:	428b      	cmp	r3, r1
 8004c2a:	d103      	bne.n	8004c34 <_free_r+0x88>
 8004c2c:	6819      	ldr	r1, [r3, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	1809      	adds	r1, r1, r0
 8004c32:	6021      	str	r1, [r4, #0]
 8004c34:	6063      	str	r3, [r4, #4]
 8004c36:	6054      	str	r4, [r2, #4]
 8004c38:	e7ca      	b.n	8004bd0 <_free_r+0x24>
 8004c3a:	46c0      	nop			@ (mov r8, r8)
 8004c3c:	200003a8 	.word	0x200003a8

08004c40 <sbrk_aligned>:
 8004c40:	b570      	push	{r4, r5, r6, lr}
 8004c42:	4e0f      	ldr	r6, [pc, #60]	@ (8004c80 <sbrk_aligned+0x40>)
 8004c44:	000d      	movs	r5, r1
 8004c46:	6831      	ldr	r1, [r6, #0]
 8004c48:	0004      	movs	r4, r0
 8004c4a:	2900      	cmp	r1, #0
 8004c4c:	d102      	bne.n	8004c54 <sbrk_aligned+0x14>
 8004c4e:	f000 fcbd 	bl	80055cc <_sbrk_r>
 8004c52:	6030      	str	r0, [r6, #0]
 8004c54:	0029      	movs	r1, r5
 8004c56:	0020      	movs	r0, r4
 8004c58:	f000 fcb8 	bl	80055cc <_sbrk_r>
 8004c5c:	1c43      	adds	r3, r0, #1
 8004c5e:	d103      	bne.n	8004c68 <sbrk_aligned+0x28>
 8004c60:	2501      	movs	r5, #1
 8004c62:	426d      	negs	r5, r5
 8004c64:	0028      	movs	r0, r5
 8004c66:	bd70      	pop	{r4, r5, r6, pc}
 8004c68:	2303      	movs	r3, #3
 8004c6a:	1cc5      	adds	r5, r0, #3
 8004c6c:	439d      	bics	r5, r3
 8004c6e:	42a8      	cmp	r0, r5
 8004c70:	d0f8      	beq.n	8004c64 <sbrk_aligned+0x24>
 8004c72:	1a29      	subs	r1, r5, r0
 8004c74:	0020      	movs	r0, r4
 8004c76:	f000 fca9 	bl	80055cc <_sbrk_r>
 8004c7a:	3001      	adds	r0, #1
 8004c7c:	d1f2      	bne.n	8004c64 <sbrk_aligned+0x24>
 8004c7e:	e7ef      	b.n	8004c60 <sbrk_aligned+0x20>
 8004c80:	200003a4 	.word	0x200003a4

08004c84 <_malloc_r>:
 8004c84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c86:	2203      	movs	r2, #3
 8004c88:	1ccb      	adds	r3, r1, #3
 8004c8a:	4393      	bics	r3, r2
 8004c8c:	3308      	adds	r3, #8
 8004c8e:	0005      	movs	r5, r0
 8004c90:	001f      	movs	r7, r3
 8004c92:	2b0c      	cmp	r3, #12
 8004c94:	d234      	bcs.n	8004d00 <_malloc_r+0x7c>
 8004c96:	270c      	movs	r7, #12
 8004c98:	42b9      	cmp	r1, r7
 8004c9a:	d833      	bhi.n	8004d04 <_malloc_r+0x80>
 8004c9c:	0028      	movs	r0, r5
 8004c9e:	f000 f871 	bl	8004d84 <__malloc_lock>
 8004ca2:	4e37      	ldr	r6, [pc, #220]	@ (8004d80 <_malloc_r+0xfc>)
 8004ca4:	6833      	ldr	r3, [r6, #0]
 8004ca6:	001c      	movs	r4, r3
 8004ca8:	2c00      	cmp	r4, #0
 8004caa:	d12f      	bne.n	8004d0c <_malloc_r+0x88>
 8004cac:	0039      	movs	r1, r7
 8004cae:	0028      	movs	r0, r5
 8004cb0:	f7ff ffc6 	bl	8004c40 <sbrk_aligned>
 8004cb4:	0004      	movs	r4, r0
 8004cb6:	1c43      	adds	r3, r0, #1
 8004cb8:	d15f      	bne.n	8004d7a <_malloc_r+0xf6>
 8004cba:	6834      	ldr	r4, [r6, #0]
 8004cbc:	9400      	str	r4, [sp, #0]
 8004cbe:	9b00      	ldr	r3, [sp, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d14a      	bne.n	8004d5a <_malloc_r+0xd6>
 8004cc4:	2c00      	cmp	r4, #0
 8004cc6:	d052      	beq.n	8004d6e <_malloc_r+0xea>
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	0028      	movs	r0, r5
 8004ccc:	18e3      	adds	r3, r4, r3
 8004cce:	9900      	ldr	r1, [sp, #0]
 8004cd0:	9301      	str	r3, [sp, #4]
 8004cd2:	f000 fc7b 	bl	80055cc <_sbrk_r>
 8004cd6:	9b01      	ldr	r3, [sp, #4]
 8004cd8:	4283      	cmp	r3, r0
 8004cda:	d148      	bne.n	8004d6e <_malloc_r+0xea>
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	0028      	movs	r0, r5
 8004ce0:	1aff      	subs	r7, r7, r3
 8004ce2:	0039      	movs	r1, r7
 8004ce4:	f7ff ffac 	bl	8004c40 <sbrk_aligned>
 8004ce8:	3001      	adds	r0, #1
 8004cea:	d040      	beq.n	8004d6e <_malloc_r+0xea>
 8004cec:	6823      	ldr	r3, [r4, #0]
 8004cee:	19db      	adds	r3, r3, r7
 8004cf0:	6023      	str	r3, [r4, #0]
 8004cf2:	6833      	ldr	r3, [r6, #0]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	2a00      	cmp	r2, #0
 8004cf8:	d133      	bne.n	8004d62 <_malloc_r+0xde>
 8004cfa:	9b00      	ldr	r3, [sp, #0]
 8004cfc:	6033      	str	r3, [r6, #0]
 8004cfe:	e019      	b.n	8004d34 <_malloc_r+0xb0>
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	dac9      	bge.n	8004c98 <_malloc_r+0x14>
 8004d04:	230c      	movs	r3, #12
 8004d06:	602b      	str	r3, [r5, #0]
 8004d08:	2000      	movs	r0, #0
 8004d0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004d0c:	6821      	ldr	r1, [r4, #0]
 8004d0e:	1bc9      	subs	r1, r1, r7
 8004d10:	d420      	bmi.n	8004d54 <_malloc_r+0xd0>
 8004d12:	290b      	cmp	r1, #11
 8004d14:	d90a      	bls.n	8004d2c <_malloc_r+0xa8>
 8004d16:	19e2      	adds	r2, r4, r7
 8004d18:	6027      	str	r7, [r4, #0]
 8004d1a:	42a3      	cmp	r3, r4
 8004d1c:	d104      	bne.n	8004d28 <_malloc_r+0xa4>
 8004d1e:	6032      	str	r2, [r6, #0]
 8004d20:	6863      	ldr	r3, [r4, #4]
 8004d22:	6011      	str	r1, [r2, #0]
 8004d24:	6053      	str	r3, [r2, #4]
 8004d26:	e005      	b.n	8004d34 <_malloc_r+0xb0>
 8004d28:	605a      	str	r2, [r3, #4]
 8004d2a:	e7f9      	b.n	8004d20 <_malloc_r+0x9c>
 8004d2c:	6862      	ldr	r2, [r4, #4]
 8004d2e:	42a3      	cmp	r3, r4
 8004d30:	d10e      	bne.n	8004d50 <_malloc_r+0xcc>
 8004d32:	6032      	str	r2, [r6, #0]
 8004d34:	0028      	movs	r0, r5
 8004d36:	f000 f82d 	bl	8004d94 <__malloc_unlock>
 8004d3a:	0020      	movs	r0, r4
 8004d3c:	2207      	movs	r2, #7
 8004d3e:	300b      	adds	r0, #11
 8004d40:	1d23      	adds	r3, r4, #4
 8004d42:	4390      	bics	r0, r2
 8004d44:	1ac2      	subs	r2, r0, r3
 8004d46:	4298      	cmp	r0, r3
 8004d48:	d0df      	beq.n	8004d0a <_malloc_r+0x86>
 8004d4a:	1a1b      	subs	r3, r3, r0
 8004d4c:	50a3      	str	r3, [r4, r2]
 8004d4e:	e7dc      	b.n	8004d0a <_malloc_r+0x86>
 8004d50:	605a      	str	r2, [r3, #4]
 8004d52:	e7ef      	b.n	8004d34 <_malloc_r+0xb0>
 8004d54:	0023      	movs	r3, r4
 8004d56:	6864      	ldr	r4, [r4, #4]
 8004d58:	e7a6      	b.n	8004ca8 <_malloc_r+0x24>
 8004d5a:	9c00      	ldr	r4, [sp, #0]
 8004d5c:	6863      	ldr	r3, [r4, #4]
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	e7ad      	b.n	8004cbe <_malloc_r+0x3a>
 8004d62:	001a      	movs	r2, r3
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	42a3      	cmp	r3, r4
 8004d68:	d1fb      	bne.n	8004d62 <_malloc_r+0xde>
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	e7da      	b.n	8004d24 <_malloc_r+0xa0>
 8004d6e:	230c      	movs	r3, #12
 8004d70:	0028      	movs	r0, r5
 8004d72:	602b      	str	r3, [r5, #0]
 8004d74:	f000 f80e 	bl	8004d94 <__malloc_unlock>
 8004d78:	e7c6      	b.n	8004d08 <_malloc_r+0x84>
 8004d7a:	6007      	str	r7, [r0, #0]
 8004d7c:	e7da      	b.n	8004d34 <_malloc_r+0xb0>
 8004d7e:	46c0      	nop			@ (mov r8, r8)
 8004d80:	200003a8 	.word	0x200003a8

08004d84 <__malloc_lock>:
 8004d84:	b510      	push	{r4, lr}
 8004d86:	4802      	ldr	r0, [pc, #8]	@ (8004d90 <__malloc_lock+0xc>)
 8004d88:	f7ff ff0d 	bl	8004ba6 <__retarget_lock_acquire_recursive>
 8004d8c:	bd10      	pop	{r4, pc}
 8004d8e:	46c0      	nop			@ (mov r8, r8)
 8004d90:	200003a0 	.word	0x200003a0

08004d94 <__malloc_unlock>:
 8004d94:	b510      	push	{r4, lr}
 8004d96:	4802      	ldr	r0, [pc, #8]	@ (8004da0 <__malloc_unlock+0xc>)
 8004d98:	f7ff ff06 	bl	8004ba8 <__retarget_lock_release_recursive>
 8004d9c:	bd10      	pop	{r4, pc}
 8004d9e:	46c0      	nop			@ (mov r8, r8)
 8004da0:	200003a0 	.word	0x200003a0

08004da4 <__sfputc_r>:
 8004da4:	6893      	ldr	r3, [r2, #8]
 8004da6:	b510      	push	{r4, lr}
 8004da8:	3b01      	subs	r3, #1
 8004daa:	6093      	str	r3, [r2, #8]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	da04      	bge.n	8004dba <__sfputc_r+0x16>
 8004db0:	6994      	ldr	r4, [r2, #24]
 8004db2:	42a3      	cmp	r3, r4
 8004db4:	db07      	blt.n	8004dc6 <__sfputc_r+0x22>
 8004db6:	290a      	cmp	r1, #10
 8004db8:	d005      	beq.n	8004dc6 <__sfputc_r+0x22>
 8004dba:	6813      	ldr	r3, [r2, #0]
 8004dbc:	1c58      	adds	r0, r3, #1
 8004dbe:	6010      	str	r0, [r2, #0]
 8004dc0:	7019      	strb	r1, [r3, #0]
 8004dc2:	0008      	movs	r0, r1
 8004dc4:	bd10      	pop	{r4, pc}
 8004dc6:	f000 fb60 	bl	800548a <__swbuf_r>
 8004dca:	0001      	movs	r1, r0
 8004dcc:	e7f9      	b.n	8004dc2 <__sfputc_r+0x1e>

08004dce <__sfputs_r>:
 8004dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd0:	0006      	movs	r6, r0
 8004dd2:	000f      	movs	r7, r1
 8004dd4:	0014      	movs	r4, r2
 8004dd6:	18d5      	adds	r5, r2, r3
 8004dd8:	42ac      	cmp	r4, r5
 8004dda:	d101      	bne.n	8004de0 <__sfputs_r+0x12>
 8004ddc:	2000      	movs	r0, #0
 8004dde:	e007      	b.n	8004df0 <__sfputs_r+0x22>
 8004de0:	7821      	ldrb	r1, [r4, #0]
 8004de2:	003a      	movs	r2, r7
 8004de4:	0030      	movs	r0, r6
 8004de6:	f7ff ffdd 	bl	8004da4 <__sfputc_r>
 8004dea:	3401      	adds	r4, #1
 8004dec:	1c43      	adds	r3, r0, #1
 8004dee:	d1f3      	bne.n	8004dd8 <__sfputs_r+0xa>
 8004df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004df4 <_vfiprintf_r>:
 8004df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004df6:	b0a1      	sub	sp, #132	@ 0x84
 8004df8:	000f      	movs	r7, r1
 8004dfa:	0015      	movs	r5, r2
 8004dfc:	001e      	movs	r6, r3
 8004dfe:	9003      	str	r0, [sp, #12]
 8004e00:	2800      	cmp	r0, #0
 8004e02:	d004      	beq.n	8004e0e <_vfiprintf_r+0x1a>
 8004e04:	6a03      	ldr	r3, [r0, #32]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <_vfiprintf_r+0x1a>
 8004e0a:	f7ff fdbb 	bl	8004984 <__sinit>
 8004e0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e10:	07db      	lsls	r3, r3, #31
 8004e12:	d405      	bmi.n	8004e20 <_vfiprintf_r+0x2c>
 8004e14:	89bb      	ldrh	r3, [r7, #12]
 8004e16:	059b      	lsls	r3, r3, #22
 8004e18:	d402      	bmi.n	8004e20 <_vfiprintf_r+0x2c>
 8004e1a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004e1c:	f7ff fec3 	bl	8004ba6 <__retarget_lock_acquire_recursive>
 8004e20:	89bb      	ldrh	r3, [r7, #12]
 8004e22:	071b      	lsls	r3, r3, #28
 8004e24:	d502      	bpl.n	8004e2c <_vfiprintf_r+0x38>
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d113      	bne.n	8004e54 <_vfiprintf_r+0x60>
 8004e2c:	0039      	movs	r1, r7
 8004e2e:	9803      	ldr	r0, [sp, #12]
 8004e30:	f000 fb6e 	bl	8005510 <__swsetup_r>
 8004e34:	2800      	cmp	r0, #0
 8004e36:	d00d      	beq.n	8004e54 <_vfiprintf_r+0x60>
 8004e38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e3a:	07db      	lsls	r3, r3, #31
 8004e3c:	d503      	bpl.n	8004e46 <_vfiprintf_r+0x52>
 8004e3e:	2001      	movs	r0, #1
 8004e40:	4240      	negs	r0, r0
 8004e42:	b021      	add	sp, #132	@ 0x84
 8004e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e46:	89bb      	ldrh	r3, [r7, #12]
 8004e48:	059b      	lsls	r3, r3, #22
 8004e4a:	d4f8      	bmi.n	8004e3e <_vfiprintf_r+0x4a>
 8004e4c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004e4e:	f7ff feab 	bl	8004ba8 <__retarget_lock_release_recursive>
 8004e52:	e7f4      	b.n	8004e3e <_vfiprintf_r+0x4a>
 8004e54:	2300      	movs	r3, #0
 8004e56:	ac08      	add	r4, sp, #32
 8004e58:	6163      	str	r3, [r4, #20]
 8004e5a:	3320      	adds	r3, #32
 8004e5c:	7663      	strb	r3, [r4, #25]
 8004e5e:	3310      	adds	r3, #16
 8004e60:	76a3      	strb	r3, [r4, #26]
 8004e62:	9607      	str	r6, [sp, #28]
 8004e64:	002e      	movs	r6, r5
 8004e66:	7833      	ldrb	r3, [r6, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <_vfiprintf_r+0x7c>
 8004e6c:	2b25      	cmp	r3, #37	@ 0x25
 8004e6e:	d148      	bne.n	8004f02 <_vfiprintf_r+0x10e>
 8004e70:	1b73      	subs	r3, r6, r5
 8004e72:	9305      	str	r3, [sp, #20]
 8004e74:	42ae      	cmp	r6, r5
 8004e76:	d00b      	beq.n	8004e90 <_vfiprintf_r+0x9c>
 8004e78:	002a      	movs	r2, r5
 8004e7a:	0039      	movs	r1, r7
 8004e7c:	9803      	ldr	r0, [sp, #12]
 8004e7e:	f7ff ffa6 	bl	8004dce <__sfputs_r>
 8004e82:	3001      	adds	r0, #1
 8004e84:	d100      	bne.n	8004e88 <_vfiprintf_r+0x94>
 8004e86:	e0ae      	b.n	8004fe6 <_vfiprintf_r+0x1f2>
 8004e88:	6963      	ldr	r3, [r4, #20]
 8004e8a:	9a05      	ldr	r2, [sp, #20]
 8004e8c:	189b      	adds	r3, r3, r2
 8004e8e:	6163      	str	r3, [r4, #20]
 8004e90:	7833      	ldrb	r3, [r6, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d100      	bne.n	8004e98 <_vfiprintf_r+0xa4>
 8004e96:	e0a6      	b.n	8004fe6 <_vfiprintf_r+0x1f2>
 8004e98:	2201      	movs	r2, #1
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	4252      	negs	r2, r2
 8004e9e:	6062      	str	r2, [r4, #4]
 8004ea0:	a904      	add	r1, sp, #16
 8004ea2:	3254      	adds	r2, #84	@ 0x54
 8004ea4:	1852      	adds	r2, r2, r1
 8004ea6:	1c75      	adds	r5, r6, #1
 8004ea8:	6023      	str	r3, [r4, #0]
 8004eaa:	60e3      	str	r3, [r4, #12]
 8004eac:	60a3      	str	r3, [r4, #8]
 8004eae:	7013      	strb	r3, [r2, #0]
 8004eb0:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004eb2:	4b59      	ldr	r3, [pc, #356]	@ (8005018 <_vfiprintf_r+0x224>)
 8004eb4:	2205      	movs	r2, #5
 8004eb6:	0018      	movs	r0, r3
 8004eb8:	7829      	ldrb	r1, [r5, #0]
 8004eba:	9305      	str	r3, [sp, #20]
 8004ebc:	f000 fb98 	bl	80055f0 <memchr>
 8004ec0:	1c6e      	adds	r6, r5, #1
 8004ec2:	2800      	cmp	r0, #0
 8004ec4:	d11f      	bne.n	8004f06 <_vfiprintf_r+0x112>
 8004ec6:	6822      	ldr	r2, [r4, #0]
 8004ec8:	06d3      	lsls	r3, r2, #27
 8004eca:	d504      	bpl.n	8004ed6 <_vfiprintf_r+0xe2>
 8004ecc:	2353      	movs	r3, #83	@ 0x53
 8004ece:	a904      	add	r1, sp, #16
 8004ed0:	185b      	adds	r3, r3, r1
 8004ed2:	2120      	movs	r1, #32
 8004ed4:	7019      	strb	r1, [r3, #0]
 8004ed6:	0713      	lsls	r3, r2, #28
 8004ed8:	d504      	bpl.n	8004ee4 <_vfiprintf_r+0xf0>
 8004eda:	2353      	movs	r3, #83	@ 0x53
 8004edc:	a904      	add	r1, sp, #16
 8004ede:	185b      	adds	r3, r3, r1
 8004ee0:	212b      	movs	r1, #43	@ 0x2b
 8004ee2:	7019      	strb	r1, [r3, #0]
 8004ee4:	782b      	ldrb	r3, [r5, #0]
 8004ee6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ee8:	d016      	beq.n	8004f18 <_vfiprintf_r+0x124>
 8004eea:	002e      	movs	r6, r5
 8004eec:	2100      	movs	r1, #0
 8004eee:	200a      	movs	r0, #10
 8004ef0:	68e3      	ldr	r3, [r4, #12]
 8004ef2:	7832      	ldrb	r2, [r6, #0]
 8004ef4:	1c75      	adds	r5, r6, #1
 8004ef6:	3a30      	subs	r2, #48	@ 0x30
 8004ef8:	2a09      	cmp	r2, #9
 8004efa:	d950      	bls.n	8004f9e <_vfiprintf_r+0x1aa>
 8004efc:	2900      	cmp	r1, #0
 8004efe:	d111      	bne.n	8004f24 <_vfiprintf_r+0x130>
 8004f00:	e017      	b.n	8004f32 <_vfiprintf_r+0x13e>
 8004f02:	3601      	adds	r6, #1
 8004f04:	e7af      	b.n	8004e66 <_vfiprintf_r+0x72>
 8004f06:	9b05      	ldr	r3, [sp, #20]
 8004f08:	6822      	ldr	r2, [r4, #0]
 8004f0a:	1ac0      	subs	r0, r0, r3
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	4083      	lsls	r3, r0
 8004f10:	4313      	orrs	r3, r2
 8004f12:	0035      	movs	r5, r6
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	e7cc      	b.n	8004eb2 <_vfiprintf_r+0xbe>
 8004f18:	9b07      	ldr	r3, [sp, #28]
 8004f1a:	1d19      	adds	r1, r3, #4
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	9107      	str	r1, [sp, #28]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	db01      	blt.n	8004f28 <_vfiprintf_r+0x134>
 8004f24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f26:	e004      	b.n	8004f32 <_vfiprintf_r+0x13e>
 8004f28:	425b      	negs	r3, r3
 8004f2a:	60e3      	str	r3, [r4, #12]
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	6023      	str	r3, [r4, #0]
 8004f32:	7833      	ldrb	r3, [r6, #0]
 8004f34:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f36:	d10c      	bne.n	8004f52 <_vfiprintf_r+0x15e>
 8004f38:	7873      	ldrb	r3, [r6, #1]
 8004f3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f3c:	d134      	bne.n	8004fa8 <_vfiprintf_r+0x1b4>
 8004f3e:	9b07      	ldr	r3, [sp, #28]
 8004f40:	3602      	adds	r6, #2
 8004f42:	1d1a      	adds	r2, r3, #4
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	9207      	str	r2, [sp, #28]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	da01      	bge.n	8004f50 <_vfiprintf_r+0x15c>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	425b      	negs	r3, r3
 8004f50:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f52:	4d32      	ldr	r5, [pc, #200]	@ (800501c <_vfiprintf_r+0x228>)
 8004f54:	2203      	movs	r2, #3
 8004f56:	0028      	movs	r0, r5
 8004f58:	7831      	ldrb	r1, [r6, #0]
 8004f5a:	f000 fb49 	bl	80055f0 <memchr>
 8004f5e:	2800      	cmp	r0, #0
 8004f60:	d006      	beq.n	8004f70 <_vfiprintf_r+0x17c>
 8004f62:	2340      	movs	r3, #64	@ 0x40
 8004f64:	1b40      	subs	r0, r0, r5
 8004f66:	4083      	lsls	r3, r0
 8004f68:	6822      	ldr	r2, [r4, #0]
 8004f6a:	3601      	adds	r6, #1
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	6023      	str	r3, [r4, #0]
 8004f70:	7831      	ldrb	r1, [r6, #0]
 8004f72:	2206      	movs	r2, #6
 8004f74:	482a      	ldr	r0, [pc, #168]	@ (8005020 <_vfiprintf_r+0x22c>)
 8004f76:	1c75      	adds	r5, r6, #1
 8004f78:	7621      	strb	r1, [r4, #24]
 8004f7a:	f000 fb39 	bl	80055f0 <memchr>
 8004f7e:	2800      	cmp	r0, #0
 8004f80:	d040      	beq.n	8005004 <_vfiprintf_r+0x210>
 8004f82:	4b28      	ldr	r3, [pc, #160]	@ (8005024 <_vfiprintf_r+0x230>)
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d122      	bne.n	8004fce <_vfiprintf_r+0x1da>
 8004f88:	2207      	movs	r2, #7
 8004f8a:	9b07      	ldr	r3, [sp, #28]
 8004f8c:	3307      	adds	r3, #7
 8004f8e:	4393      	bics	r3, r2
 8004f90:	3308      	adds	r3, #8
 8004f92:	9307      	str	r3, [sp, #28]
 8004f94:	6963      	ldr	r3, [r4, #20]
 8004f96:	9a04      	ldr	r2, [sp, #16]
 8004f98:	189b      	adds	r3, r3, r2
 8004f9a:	6163      	str	r3, [r4, #20]
 8004f9c:	e762      	b.n	8004e64 <_vfiprintf_r+0x70>
 8004f9e:	4343      	muls	r3, r0
 8004fa0:	002e      	movs	r6, r5
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	189b      	adds	r3, r3, r2
 8004fa6:	e7a4      	b.n	8004ef2 <_vfiprintf_r+0xfe>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	200a      	movs	r0, #10
 8004fac:	0019      	movs	r1, r3
 8004fae:	3601      	adds	r6, #1
 8004fb0:	6063      	str	r3, [r4, #4]
 8004fb2:	7832      	ldrb	r2, [r6, #0]
 8004fb4:	1c75      	adds	r5, r6, #1
 8004fb6:	3a30      	subs	r2, #48	@ 0x30
 8004fb8:	2a09      	cmp	r2, #9
 8004fba:	d903      	bls.n	8004fc4 <_vfiprintf_r+0x1d0>
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0c8      	beq.n	8004f52 <_vfiprintf_r+0x15e>
 8004fc0:	9109      	str	r1, [sp, #36]	@ 0x24
 8004fc2:	e7c6      	b.n	8004f52 <_vfiprintf_r+0x15e>
 8004fc4:	4341      	muls	r1, r0
 8004fc6:	002e      	movs	r6, r5
 8004fc8:	2301      	movs	r3, #1
 8004fca:	1889      	adds	r1, r1, r2
 8004fcc:	e7f1      	b.n	8004fb2 <_vfiprintf_r+0x1be>
 8004fce:	aa07      	add	r2, sp, #28
 8004fd0:	9200      	str	r2, [sp, #0]
 8004fd2:	0021      	movs	r1, r4
 8004fd4:	003a      	movs	r2, r7
 8004fd6:	4b14      	ldr	r3, [pc, #80]	@ (8005028 <_vfiprintf_r+0x234>)
 8004fd8:	9803      	ldr	r0, [sp, #12]
 8004fda:	e000      	b.n	8004fde <_vfiprintf_r+0x1ea>
 8004fdc:	bf00      	nop
 8004fde:	9004      	str	r0, [sp, #16]
 8004fe0:	9b04      	ldr	r3, [sp, #16]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	d1d6      	bne.n	8004f94 <_vfiprintf_r+0x1a0>
 8004fe6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fe8:	07db      	lsls	r3, r3, #31
 8004fea:	d405      	bmi.n	8004ff8 <_vfiprintf_r+0x204>
 8004fec:	89bb      	ldrh	r3, [r7, #12]
 8004fee:	059b      	lsls	r3, r3, #22
 8004ff0:	d402      	bmi.n	8004ff8 <_vfiprintf_r+0x204>
 8004ff2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004ff4:	f7ff fdd8 	bl	8004ba8 <__retarget_lock_release_recursive>
 8004ff8:	89bb      	ldrh	r3, [r7, #12]
 8004ffa:	065b      	lsls	r3, r3, #25
 8004ffc:	d500      	bpl.n	8005000 <_vfiprintf_r+0x20c>
 8004ffe:	e71e      	b.n	8004e3e <_vfiprintf_r+0x4a>
 8005000:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005002:	e71e      	b.n	8004e42 <_vfiprintf_r+0x4e>
 8005004:	aa07      	add	r2, sp, #28
 8005006:	9200      	str	r2, [sp, #0]
 8005008:	0021      	movs	r1, r4
 800500a:	003a      	movs	r2, r7
 800500c:	4b06      	ldr	r3, [pc, #24]	@ (8005028 <_vfiprintf_r+0x234>)
 800500e:	9803      	ldr	r0, [sp, #12]
 8005010:	f000 f87c 	bl	800510c <_printf_i>
 8005014:	e7e3      	b.n	8004fde <_vfiprintf_r+0x1ea>
 8005016:	46c0      	nop			@ (mov r8, r8)
 8005018:	08005910 	.word	0x08005910
 800501c:	08005916 	.word	0x08005916
 8005020:	0800591a 	.word	0x0800591a
 8005024:	00000000 	.word	0x00000000
 8005028:	08004dcf 	.word	0x08004dcf

0800502c <_printf_common>:
 800502c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800502e:	0016      	movs	r6, r2
 8005030:	9301      	str	r3, [sp, #4]
 8005032:	688a      	ldr	r2, [r1, #8]
 8005034:	690b      	ldr	r3, [r1, #16]
 8005036:	000c      	movs	r4, r1
 8005038:	9000      	str	r0, [sp, #0]
 800503a:	4293      	cmp	r3, r2
 800503c:	da00      	bge.n	8005040 <_printf_common+0x14>
 800503e:	0013      	movs	r3, r2
 8005040:	0022      	movs	r2, r4
 8005042:	6033      	str	r3, [r6, #0]
 8005044:	3243      	adds	r2, #67	@ 0x43
 8005046:	7812      	ldrb	r2, [r2, #0]
 8005048:	2a00      	cmp	r2, #0
 800504a:	d001      	beq.n	8005050 <_printf_common+0x24>
 800504c:	3301      	adds	r3, #1
 800504e:	6033      	str	r3, [r6, #0]
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	069b      	lsls	r3, r3, #26
 8005054:	d502      	bpl.n	800505c <_printf_common+0x30>
 8005056:	6833      	ldr	r3, [r6, #0]
 8005058:	3302      	adds	r3, #2
 800505a:	6033      	str	r3, [r6, #0]
 800505c:	6822      	ldr	r2, [r4, #0]
 800505e:	2306      	movs	r3, #6
 8005060:	0015      	movs	r5, r2
 8005062:	401d      	ands	r5, r3
 8005064:	421a      	tst	r2, r3
 8005066:	d027      	beq.n	80050b8 <_printf_common+0x8c>
 8005068:	0023      	movs	r3, r4
 800506a:	3343      	adds	r3, #67	@ 0x43
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	1e5a      	subs	r2, r3, #1
 8005070:	4193      	sbcs	r3, r2
 8005072:	6822      	ldr	r2, [r4, #0]
 8005074:	0692      	lsls	r2, r2, #26
 8005076:	d430      	bmi.n	80050da <_printf_common+0xae>
 8005078:	0022      	movs	r2, r4
 800507a:	9901      	ldr	r1, [sp, #4]
 800507c:	9800      	ldr	r0, [sp, #0]
 800507e:	9d08      	ldr	r5, [sp, #32]
 8005080:	3243      	adds	r2, #67	@ 0x43
 8005082:	47a8      	blx	r5
 8005084:	3001      	adds	r0, #1
 8005086:	d025      	beq.n	80050d4 <_printf_common+0xa8>
 8005088:	2206      	movs	r2, #6
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	2500      	movs	r5, #0
 800508e:	4013      	ands	r3, r2
 8005090:	2b04      	cmp	r3, #4
 8005092:	d105      	bne.n	80050a0 <_printf_common+0x74>
 8005094:	6833      	ldr	r3, [r6, #0]
 8005096:	68e5      	ldr	r5, [r4, #12]
 8005098:	1aed      	subs	r5, r5, r3
 800509a:	43eb      	mvns	r3, r5
 800509c:	17db      	asrs	r3, r3, #31
 800509e:	401d      	ands	r5, r3
 80050a0:	68a3      	ldr	r3, [r4, #8]
 80050a2:	6922      	ldr	r2, [r4, #16]
 80050a4:	4293      	cmp	r3, r2
 80050a6:	dd01      	ble.n	80050ac <_printf_common+0x80>
 80050a8:	1a9b      	subs	r3, r3, r2
 80050aa:	18ed      	adds	r5, r5, r3
 80050ac:	2600      	movs	r6, #0
 80050ae:	42b5      	cmp	r5, r6
 80050b0:	d120      	bne.n	80050f4 <_printf_common+0xc8>
 80050b2:	2000      	movs	r0, #0
 80050b4:	e010      	b.n	80050d8 <_printf_common+0xac>
 80050b6:	3501      	adds	r5, #1
 80050b8:	68e3      	ldr	r3, [r4, #12]
 80050ba:	6832      	ldr	r2, [r6, #0]
 80050bc:	1a9b      	subs	r3, r3, r2
 80050be:	42ab      	cmp	r3, r5
 80050c0:	ddd2      	ble.n	8005068 <_printf_common+0x3c>
 80050c2:	0022      	movs	r2, r4
 80050c4:	2301      	movs	r3, #1
 80050c6:	9901      	ldr	r1, [sp, #4]
 80050c8:	9800      	ldr	r0, [sp, #0]
 80050ca:	9f08      	ldr	r7, [sp, #32]
 80050cc:	3219      	adds	r2, #25
 80050ce:	47b8      	blx	r7
 80050d0:	3001      	adds	r0, #1
 80050d2:	d1f0      	bne.n	80050b6 <_printf_common+0x8a>
 80050d4:	2001      	movs	r0, #1
 80050d6:	4240      	negs	r0, r0
 80050d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80050da:	2030      	movs	r0, #48	@ 0x30
 80050dc:	18e1      	adds	r1, r4, r3
 80050de:	3143      	adds	r1, #67	@ 0x43
 80050e0:	7008      	strb	r0, [r1, #0]
 80050e2:	0021      	movs	r1, r4
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	3145      	adds	r1, #69	@ 0x45
 80050e8:	7809      	ldrb	r1, [r1, #0]
 80050ea:	18a2      	adds	r2, r4, r2
 80050ec:	3243      	adds	r2, #67	@ 0x43
 80050ee:	3302      	adds	r3, #2
 80050f0:	7011      	strb	r1, [r2, #0]
 80050f2:	e7c1      	b.n	8005078 <_printf_common+0x4c>
 80050f4:	0022      	movs	r2, r4
 80050f6:	2301      	movs	r3, #1
 80050f8:	9901      	ldr	r1, [sp, #4]
 80050fa:	9800      	ldr	r0, [sp, #0]
 80050fc:	9f08      	ldr	r7, [sp, #32]
 80050fe:	321a      	adds	r2, #26
 8005100:	47b8      	blx	r7
 8005102:	3001      	adds	r0, #1
 8005104:	d0e6      	beq.n	80050d4 <_printf_common+0xa8>
 8005106:	3601      	adds	r6, #1
 8005108:	e7d1      	b.n	80050ae <_printf_common+0x82>
	...

0800510c <_printf_i>:
 800510c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800510e:	b08b      	sub	sp, #44	@ 0x2c
 8005110:	9206      	str	r2, [sp, #24]
 8005112:	000a      	movs	r2, r1
 8005114:	3243      	adds	r2, #67	@ 0x43
 8005116:	9307      	str	r3, [sp, #28]
 8005118:	9005      	str	r0, [sp, #20]
 800511a:	9203      	str	r2, [sp, #12]
 800511c:	7e0a      	ldrb	r2, [r1, #24]
 800511e:	000c      	movs	r4, r1
 8005120:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005122:	2a78      	cmp	r2, #120	@ 0x78
 8005124:	d809      	bhi.n	800513a <_printf_i+0x2e>
 8005126:	2a62      	cmp	r2, #98	@ 0x62
 8005128:	d80b      	bhi.n	8005142 <_printf_i+0x36>
 800512a:	2a00      	cmp	r2, #0
 800512c:	d100      	bne.n	8005130 <_printf_i+0x24>
 800512e:	e0bc      	b.n	80052aa <_printf_i+0x19e>
 8005130:	497b      	ldr	r1, [pc, #492]	@ (8005320 <_printf_i+0x214>)
 8005132:	9104      	str	r1, [sp, #16]
 8005134:	2a58      	cmp	r2, #88	@ 0x58
 8005136:	d100      	bne.n	800513a <_printf_i+0x2e>
 8005138:	e090      	b.n	800525c <_printf_i+0x150>
 800513a:	0025      	movs	r5, r4
 800513c:	3542      	adds	r5, #66	@ 0x42
 800513e:	702a      	strb	r2, [r5, #0]
 8005140:	e022      	b.n	8005188 <_printf_i+0x7c>
 8005142:	0010      	movs	r0, r2
 8005144:	3863      	subs	r0, #99	@ 0x63
 8005146:	2815      	cmp	r0, #21
 8005148:	d8f7      	bhi.n	800513a <_printf_i+0x2e>
 800514a:	f7fa ffdb 	bl	8000104 <__gnu_thumb1_case_shi>
 800514e:	0016      	.short	0x0016
 8005150:	fff6001f 	.word	0xfff6001f
 8005154:	fff6fff6 	.word	0xfff6fff6
 8005158:	001ffff6 	.word	0x001ffff6
 800515c:	fff6fff6 	.word	0xfff6fff6
 8005160:	fff6fff6 	.word	0xfff6fff6
 8005164:	003600a1 	.word	0x003600a1
 8005168:	fff60080 	.word	0xfff60080
 800516c:	00b2fff6 	.word	0x00b2fff6
 8005170:	0036fff6 	.word	0x0036fff6
 8005174:	fff6fff6 	.word	0xfff6fff6
 8005178:	0084      	.short	0x0084
 800517a:	0025      	movs	r5, r4
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	3542      	adds	r5, #66	@ 0x42
 8005180:	1d11      	adds	r1, r2, #4
 8005182:	6019      	str	r1, [r3, #0]
 8005184:	6813      	ldr	r3, [r2, #0]
 8005186:	702b      	strb	r3, [r5, #0]
 8005188:	2301      	movs	r3, #1
 800518a:	e0a0      	b.n	80052ce <_printf_i+0x1c2>
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	6809      	ldr	r1, [r1, #0]
 8005190:	1d02      	adds	r2, r0, #4
 8005192:	060d      	lsls	r5, r1, #24
 8005194:	d50b      	bpl.n	80051ae <_printf_i+0xa2>
 8005196:	6806      	ldr	r6, [r0, #0]
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	2e00      	cmp	r6, #0
 800519c:	da03      	bge.n	80051a6 <_printf_i+0x9a>
 800519e:	232d      	movs	r3, #45	@ 0x2d
 80051a0:	9a03      	ldr	r2, [sp, #12]
 80051a2:	4276      	negs	r6, r6
 80051a4:	7013      	strb	r3, [r2, #0]
 80051a6:	4b5e      	ldr	r3, [pc, #376]	@ (8005320 <_printf_i+0x214>)
 80051a8:	270a      	movs	r7, #10
 80051aa:	9304      	str	r3, [sp, #16]
 80051ac:	e018      	b.n	80051e0 <_printf_i+0xd4>
 80051ae:	6806      	ldr	r6, [r0, #0]
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	0649      	lsls	r1, r1, #25
 80051b4:	d5f1      	bpl.n	800519a <_printf_i+0x8e>
 80051b6:	b236      	sxth	r6, r6
 80051b8:	e7ef      	b.n	800519a <_printf_i+0x8e>
 80051ba:	6808      	ldr	r0, [r1, #0]
 80051bc:	6819      	ldr	r1, [r3, #0]
 80051be:	c940      	ldmia	r1!, {r6}
 80051c0:	0605      	lsls	r5, r0, #24
 80051c2:	d402      	bmi.n	80051ca <_printf_i+0xbe>
 80051c4:	0640      	lsls	r0, r0, #25
 80051c6:	d500      	bpl.n	80051ca <_printf_i+0xbe>
 80051c8:	b2b6      	uxth	r6, r6
 80051ca:	6019      	str	r1, [r3, #0]
 80051cc:	4b54      	ldr	r3, [pc, #336]	@ (8005320 <_printf_i+0x214>)
 80051ce:	270a      	movs	r7, #10
 80051d0:	9304      	str	r3, [sp, #16]
 80051d2:	2a6f      	cmp	r2, #111	@ 0x6f
 80051d4:	d100      	bne.n	80051d8 <_printf_i+0xcc>
 80051d6:	3f02      	subs	r7, #2
 80051d8:	0023      	movs	r3, r4
 80051da:	2200      	movs	r2, #0
 80051dc:	3343      	adds	r3, #67	@ 0x43
 80051de:	701a      	strb	r2, [r3, #0]
 80051e0:	6863      	ldr	r3, [r4, #4]
 80051e2:	60a3      	str	r3, [r4, #8]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	db03      	blt.n	80051f0 <_printf_i+0xe4>
 80051e8:	2104      	movs	r1, #4
 80051ea:	6822      	ldr	r2, [r4, #0]
 80051ec:	438a      	bics	r2, r1
 80051ee:	6022      	str	r2, [r4, #0]
 80051f0:	2e00      	cmp	r6, #0
 80051f2:	d102      	bne.n	80051fa <_printf_i+0xee>
 80051f4:	9d03      	ldr	r5, [sp, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00c      	beq.n	8005214 <_printf_i+0x108>
 80051fa:	9d03      	ldr	r5, [sp, #12]
 80051fc:	0030      	movs	r0, r6
 80051fe:	0039      	movs	r1, r7
 8005200:	f7fb f810 	bl	8000224 <__aeabi_uidivmod>
 8005204:	9b04      	ldr	r3, [sp, #16]
 8005206:	3d01      	subs	r5, #1
 8005208:	5c5b      	ldrb	r3, [r3, r1]
 800520a:	702b      	strb	r3, [r5, #0]
 800520c:	0033      	movs	r3, r6
 800520e:	0006      	movs	r6, r0
 8005210:	429f      	cmp	r7, r3
 8005212:	d9f3      	bls.n	80051fc <_printf_i+0xf0>
 8005214:	2f08      	cmp	r7, #8
 8005216:	d109      	bne.n	800522c <_printf_i+0x120>
 8005218:	6823      	ldr	r3, [r4, #0]
 800521a:	07db      	lsls	r3, r3, #31
 800521c:	d506      	bpl.n	800522c <_printf_i+0x120>
 800521e:	6862      	ldr	r2, [r4, #4]
 8005220:	6923      	ldr	r3, [r4, #16]
 8005222:	429a      	cmp	r2, r3
 8005224:	dc02      	bgt.n	800522c <_printf_i+0x120>
 8005226:	2330      	movs	r3, #48	@ 0x30
 8005228:	3d01      	subs	r5, #1
 800522a:	702b      	strb	r3, [r5, #0]
 800522c:	9b03      	ldr	r3, [sp, #12]
 800522e:	1b5b      	subs	r3, r3, r5
 8005230:	6123      	str	r3, [r4, #16]
 8005232:	9b07      	ldr	r3, [sp, #28]
 8005234:	0021      	movs	r1, r4
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	9805      	ldr	r0, [sp, #20]
 800523a:	9b06      	ldr	r3, [sp, #24]
 800523c:	aa09      	add	r2, sp, #36	@ 0x24
 800523e:	f7ff fef5 	bl	800502c <_printf_common>
 8005242:	3001      	adds	r0, #1
 8005244:	d148      	bne.n	80052d8 <_printf_i+0x1cc>
 8005246:	2001      	movs	r0, #1
 8005248:	4240      	negs	r0, r0
 800524a:	b00b      	add	sp, #44	@ 0x2c
 800524c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800524e:	2220      	movs	r2, #32
 8005250:	6809      	ldr	r1, [r1, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	6022      	str	r2, [r4, #0]
 8005256:	2278      	movs	r2, #120	@ 0x78
 8005258:	4932      	ldr	r1, [pc, #200]	@ (8005324 <_printf_i+0x218>)
 800525a:	9104      	str	r1, [sp, #16]
 800525c:	0021      	movs	r1, r4
 800525e:	3145      	adds	r1, #69	@ 0x45
 8005260:	700a      	strb	r2, [r1, #0]
 8005262:	6819      	ldr	r1, [r3, #0]
 8005264:	6822      	ldr	r2, [r4, #0]
 8005266:	c940      	ldmia	r1!, {r6}
 8005268:	0610      	lsls	r0, r2, #24
 800526a:	d402      	bmi.n	8005272 <_printf_i+0x166>
 800526c:	0650      	lsls	r0, r2, #25
 800526e:	d500      	bpl.n	8005272 <_printf_i+0x166>
 8005270:	b2b6      	uxth	r6, r6
 8005272:	6019      	str	r1, [r3, #0]
 8005274:	07d3      	lsls	r3, r2, #31
 8005276:	d502      	bpl.n	800527e <_printf_i+0x172>
 8005278:	2320      	movs	r3, #32
 800527a:	4313      	orrs	r3, r2
 800527c:	6023      	str	r3, [r4, #0]
 800527e:	2e00      	cmp	r6, #0
 8005280:	d001      	beq.n	8005286 <_printf_i+0x17a>
 8005282:	2710      	movs	r7, #16
 8005284:	e7a8      	b.n	80051d8 <_printf_i+0xcc>
 8005286:	2220      	movs	r2, #32
 8005288:	6823      	ldr	r3, [r4, #0]
 800528a:	4393      	bics	r3, r2
 800528c:	6023      	str	r3, [r4, #0]
 800528e:	e7f8      	b.n	8005282 <_printf_i+0x176>
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	680d      	ldr	r5, [r1, #0]
 8005294:	1d10      	adds	r0, r2, #4
 8005296:	6949      	ldr	r1, [r1, #20]
 8005298:	6018      	str	r0, [r3, #0]
 800529a:	6813      	ldr	r3, [r2, #0]
 800529c:	062e      	lsls	r6, r5, #24
 800529e:	d501      	bpl.n	80052a4 <_printf_i+0x198>
 80052a0:	6019      	str	r1, [r3, #0]
 80052a2:	e002      	b.n	80052aa <_printf_i+0x19e>
 80052a4:	066d      	lsls	r5, r5, #25
 80052a6:	d5fb      	bpl.n	80052a0 <_printf_i+0x194>
 80052a8:	8019      	strh	r1, [r3, #0]
 80052aa:	2300      	movs	r3, #0
 80052ac:	9d03      	ldr	r5, [sp, #12]
 80052ae:	6123      	str	r3, [r4, #16]
 80052b0:	e7bf      	b.n	8005232 <_printf_i+0x126>
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	1d11      	adds	r1, r2, #4
 80052b6:	6019      	str	r1, [r3, #0]
 80052b8:	6815      	ldr	r5, [r2, #0]
 80052ba:	2100      	movs	r1, #0
 80052bc:	0028      	movs	r0, r5
 80052be:	6862      	ldr	r2, [r4, #4]
 80052c0:	f000 f996 	bl	80055f0 <memchr>
 80052c4:	2800      	cmp	r0, #0
 80052c6:	d001      	beq.n	80052cc <_printf_i+0x1c0>
 80052c8:	1b40      	subs	r0, r0, r5
 80052ca:	6060      	str	r0, [r4, #4]
 80052cc:	6863      	ldr	r3, [r4, #4]
 80052ce:	6123      	str	r3, [r4, #16]
 80052d0:	2300      	movs	r3, #0
 80052d2:	9a03      	ldr	r2, [sp, #12]
 80052d4:	7013      	strb	r3, [r2, #0]
 80052d6:	e7ac      	b.n	8005232 <_printf_i+0x126>
 80052d8:	002a      	movs	r2, r5
 80052da:	6923      	ldr	r3, [r4, #16]
 80052dc:	9906      	ldr	r1, [sp, #24]
 80052de:	9805      	ldr	r0, [sp, #20]
 80052e0:	9d07      	ldr	r5, [sp, #28]
 80052e2:	47a8      	blx	r5
 80052e4:	3001      	adds	r0, #1
 80052e6:	d0ae      	beq.n	8005246 <_printf_i+0x13a>
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	079b      	lsls	r3, r3, #30
 80052ec:	d415      	bmi.n	800531a <_printf_i+0x20e>
 80052ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052f0:	68e0      	ldr	r0, [r4, #12]
 80052f2:	4298      	cmp	r0, r3
 80052f4:	daa9      	bge.n	800524a <_printf_i+0x13e>
 80052f6:	0018      	movs	r0, r3
 80052f8:	e7a7      	b.n	800524a <_printf_i+0x13e>
 80052fa:	0022      	movs	r2, r4
 80052fc:	2301      	movs	r3, #1
 80052fe:	9906      	ldr	r1, [sp, #24]
 8005300:	9805      	ldr	r0, [sp, #20]
 8005302:	9e07      	ldr	r6, [sp, #28]
 8005304:	3219      	adds	r2, #25
 8005306:	47b0      	blx	r6
 8005308:	3001      	adds	r0, #1
 800530a:	d09c      	beq.n	8005246 <_printf_i+0x13a>
 800530c:	3501      	adds	r5, #1
 800530e:	68e3      	ldr	r3, [r4, #12]
 8005310:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005312:	1a9b      	subs	r3, r3, r2
 8005314:	42ab      	cmp	r3, r5
 8005316:	dcf0      	bgt.n	80052fa <_printf_i+0x1ee>
 8005318:	e7e9      	b.n	80052ee <_printf_i+0x1e2>
 800531a:	2500      	movs	r5, #0
 800531c:	e7f7      	b.n	800530e <_printf_i+0x202>
 800531e:	46c0      	nop			@ (mov r8, r8)
 8005320:	08005921 	.word	0x08005921
 8005324:	08005932 	.word	0x08005932

08005328 <__sflush_r>:
 8005328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800532a:	220c      	movs	r2, #12
 800532c:	5e8b      	ldrsh	r3, [r1, r2]
 800532e:	0005      	movs	r5, r0
 8005330:	000c      	movs	r4, r1
 8005332:	071a      	lsls	r2, r3, #28
 8005334:	d456      	bmi.n	80053e4 <__sflush_r+0xbc>
 8005336:	684a      	ldr	r2, [r1, #4]
 8005338:	2a00      	cmp	r2, #0
 800533a:	dc02      	bgt.n	8005342 <__sflush_r+0x1a>
 800533c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800533e:	2a00      	cmp	r2, #0
 8005340:	dd4e      	ble.n	80053e0 <__sflush_r+0xb8>
 8005342:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005344:	2f00      	cmp	r7, #0
 8005346:	d04b      	beq.n	80053e0 <__sflush_r+0xb8>
 8005348:	2200      	movs	r2, #0
 800534a:	2080      	movs	r0, #128	@ 0x80
 800534c:	682e      	ldr	r6, [r5, #0]
 800534e:	602a      	str	r2, [r5, #0]
 8005350:	001a      	movs	r2, r3
 8005352:	0140      	lsls	r0, r0, #5
 8005354:	6a21      	ldr	r1, [r4, #32]
 8005356:	4002      	ands	r2, r0
 8005358:	4203      	tst	r3, r0
 800535a:	d033      	beq.n	80053c4 <__sflush_r+0x9c>
 800535c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800535e:	89a3      	ldrh	r3, [r4, #12]
 8005360:	075b      	lsls	r3, r3, #29
 8005362:	d506      	bpl.n	8005372 <__sflush_r+0x4a>
 8005364:	6863      	ldr	r3, [r4, #4]
 8005366:	1ad2      	subs	r2, r2, r3
 8005368:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <__sflush_r+0x4a>
 800536e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005370:	1ad2      	subs	r2, r2, r3
 8005372:	2300      	movs	r3, #0
 8005374:	0028      	movs	r0, r5
 8005376:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005378:	6a21      	ldr	r1, [r4, #32]
 800537a:	47b8      	blx	r7
 800537c:	89a2      	ldrh	r2, [r4, #12]
 800537e:	1c43      	adds	r3, r0, #1
 8005380:	d106      	bne.n	8005390 <__sflush_r+0x68>
 8005382:	6829      	ldr	r1, [r5, #0]
 8005384:	291d      	cmp	r1, #29
 8005386:	d846      	bhi.n	8005416 <__sflush_r+0xee>
 8005388:	4b29      	ldr	r3, [pc, #164]	@ (8005430 <__sflush_r+0x108>)
 800538a:	410b      	asrs	r3, r1
 800538c:	07db      	lsls	r3, r3, #31
 800538e:	d442      	bmi.n	8005416 <__sflush_r+0xee>
 8005390:	2300      	movs	r3, #0
 8005392:	6063      	str	r3, [r4, #4]
 8005394:	6923      	ldr	r3, [r4, #16]
 8005396:	6023      	str	r3, [r4, #0]
 8005398:	04d2      	lsls	r2, r2, #19
 800539a:	d505      	bpl.n	80053a8 <__sflush_r+0x80>
 800539c:	1c43      	adds	r3, r0, #1
 800539e:	d102      	bne.n	80053a6 <__sflush_r+0x7e>
 80053a0:	682b      	ldr	r3, [r5, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d100      	bne.n	80053a8 <__sflush_r+0x80>
 80053a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80053a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80053aa:	602e      	str	r6, [r5, #0]
 80053ac:	2900      	cmp	r1, #0
 80053ae:	d017      	beq.n	80053e0 <__sflush_r+0xb8>
 80053b0:	0023      	movs	r3, r4
 80053b2:	3344      	adds	r3, #68	@ 0x44
 80053b4:	4299      	cmp	r1, r3
 80053b6:	d002      	beq.n	80053be <__sflush_r+0x96>
 80053b8:	0028      	movs	r0, r5
 80053ba:	f7ff fbf7 	bl	8004bac <_free_r>
 80053be:	2300      	movs	r3, #0
 80053c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80053c2:	e00d      	b.n	80053e0 <__sflush_r+0xb8>
 80053c4:	2301      	movs	r3, #1
 80053c6:	0028      	movs	r0, r5
 80053c8:	47b8      	blx	r7
 80053ca:	0002      	movs	r2, r0
 80053cc:	1c43      	adds	r3, r0, #1
 80053ce:	d1c6      	bne.n	800535e <__sflush_r+0x36>
 80053d0:	682b      	ldr	r3, [r5, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d0c3      	beq.n	800535e <__sflush_r+0x36>
 80053d6:	2b1d      	cmp	r3, #29
 80053d8:	d001      	beq.n	80053de <__sflush_r+0xb6>
 80053da:	2b16      	cmp	r3, #22
 80053dc:	d11a      	bne.n	8005414 <__sflush_r+0xec>
 80053de:	602e      	str	r6, [r5, #0]
 80053e0:	2000      	movs	r0, #0
 80053e2:	e01e      	b.n	8005422 <__sflush_r+0xfa>
 80053e4:	690e      	ldr	r6, [r1, #16]
 80053e6:	2e00      	cmp	r6, #0
 80053e8:	d0fa      	beq.n	80053e0 <__sflush_r+0xb8>
 80053ea:	680f      	ldr	r7, [r1, #0]
 80053ec:	600e      	str	r6, [r1, #0]
 80053ee:	1bba      	subs	r2, r7, r6
 80053f0:	9201      	str	r2, [sp, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	079b      	lsls	r3, r3, #30
 80053f6:	d100      	bne.n	80053fa <__sflush_r+0xd2>
 80053f8:	694a      	ldr	r2, [r1, #20]
 80053fa:	60a2      	str	r2, [r4, #8]
 80053fc:	9b01      	ldr	r3, [sp, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	ddee      	ble.n	80053e0 <__sflush_r+0xb8>
 8005402:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005404:	0032      	movs	r2, r6
 8005406:	001f      	movs	r7, r3
 8005408:	0028      	movs	r0, r5
 800540a:	9b01      	ldr	r3, [sp, #4]
 800540c:	6a21      	ldr	r1, [r4, #32]
 800540e:	47b8      	blx	r7
 8005410:	2800      	cmp	r0, #0
 8005412:	dc07      	bgt.n	8005424 <__sflush_r+0xfc>
 8005414:	89a2      	ldrh	r2, [r4, #12]
 8005416:	2340      	movs	r3, #64	@ 0x40
 8005418:	2001      	movs	r0, #1
 800541a:	4313      	orrs	r3, r2
 800541c:	b21b      	sxth	r3, r3
 800541e:	81a3      	strh	r3, [r4, #12]
 8005420:	4240      	negs	r0, r0
 8005422:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005424:	9b01      	ldr	r3, [sp, #4]
 8005426:	1836      	adds	r6, r6, r0
 8005428:	1a1b      	subs	r3, r3, r0
 800542a:	9301      	str	r3, [sp, #4]
 800542c:	e7e6      	b.n	80053fc <__sflush_r+0xd4>
 800542e:	46c0      	nop			@ (mov r8, r8)
 8005430:	dfbffffe 	.word	0xdfbffffe

08005434 <_fflush_r>:
 8005434:	690b      	ldr	r3, [r1, #16]
 8005436:	b570      	push	{r4, r5, r6, lr}
 8005438:	0005      	movs	r5, r0
 800543a:	000c      	movs	r4, r1
 800543c:	2b00      	cmp	r3, #0
 800543e:	d102      	bne.n	8005446 <_fflush_r+0x12>
 8005440:	2500      	movs	r5, #0
 8005442:	0028      	movs	r0, r5
 8005444:	bd70      	pop	{r4, r5, r6, pc}
 8005446:	2800      	cmp	r0, #0
 8005448:	d004      	beq.n	8005454 <_fflush_r+0x20>
 800544a:	6a03      	ldr	r3, [r0, #32]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <_fflush_r+0x20>
 8005450:	f7ff fa98 	bl	8004984 <__sinit>
 8005454:	220c      	movs	r2, #12
 8005456:	5ea3      	ldrsh	r3, [r4, r2]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d0f1      	beq.n	8005440 <_fflush_r+0xc>
 800545c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800545e:	07d2      	lsls	r2, r2, #31
 8005460:	d404      	bmi.n	800546c <_fflush_r+0x38>
 8005462:	059b      	lsls	r3, r3, #22
 8005464:	d402      	bmi.n	800546c <_fflush_r+0x38>
 8005466:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005468:	f7ff fb9d 	bl	8004ba6 <__retarget_lock_acquire_recursive>
 800546c:	0028      	movs	r0, r5
 800546e:	0021      	movs	r1, r4
 8005470:	f7ff ff5a 	bl	8005328 <__sflush_r>
 8005474:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005476:	0005      	movs	r5, r0
 8005478:	07db      	lsls	r3, r3, #31
 800547a:	d4e2      	bmi.n	8005442 <_fflush_r+0xe>
 800547c:	89a3      	ldrh	r3, [r4, #12]
 800547e:	059b      	lsls	r3, r3, #22
 8005480:	d4df      	bmi.n	8005442 <_fflush_r+0xe>
 8005482:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005484:	f7ff fb90 	bl	8004ba8 <__retarget_lock_release_recursive>
 8005488:	e7db      	b.n	8005442 <_fflush_r+0xe>

0800548a <__swbuf_r>:
 800548a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548c:	0006      	movs	r6, r0
 800548e:	000d      	movs	r5, r1
 8005490:	0014      	movs	r4, r2
 8005492:	2800      	cmp	r0, #0
 8005494:	d004      	beq.n	80054a0 <__swbuf_r+0x16>
 8005496:	6a03      	ldr	r3, [r0, #32]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <__swbuf_r+0x16>
 800549c:	f7ff fa72 	bl	8004984 <__sinit>
 80054a0:	69a3      	ldr	r3, [r4, #24]
 80054a2:	60a3      	str	r3, [r4, #8]
 80054a4:	89a3      	ldrh	r3, [r4, #12]
 80054a6:	071b      	lsls	r3, r3, #28
 80054a8:	d502      	bpl.n	80054b0 <__swbuf_r+0x26>
 80054aa:	6923      	ldr	r3, [r4, #16]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d109      	bne.n	80054c4 <__swbuf_r+0x3a>
 80054b0:	0021      	movs	r1, r4
 80054b2:	0030      	movs	r0, r6
 80054b4:	f000 f82c 	bl	8005510 <__swsetup_r>
 80054b8:	2800      	cmp	r0, #0
 80054ba:	d003      	beq.n	80054c4 <__swbuf_r+0x3a>
 80054bc:	2501      	movs	r5, #1
 80054be:	426d      	negs	r5, r5
 80054c0:	0028      	movs	r0, r5
 80054c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054c4:	6923      	ldr	r3, [r4, #16]
 80054c6:	6820      	ldr	r0, [r4, #0]
 80054c8:	b2ef      	uxtb	r7, r5
 80054ca:	1ac0      	subs	r0, r0, r3
 80054cc:	6963      	ldr	r3, [r4, #20]
 80054ce:	b2ed      	uxtb	r5, r5
 80054d0:	4283      	cmp	r3, r0
 80054d2:	dc05      	bgt.n	80054e0 <__swbuf_r+0x56>
 80054d4:	0021      	movs	r1, r4
 80054d6:	0030      	movs	r0, r6
 80054d8:	f7ff ffac 	bl	8005434 <_fflush_r>
 80054dc:	2800      	cmp	r0, #0
 80054de:	d1ed      	bne.n	80054bc <__swbuf_r+0x32>
 80054e0:	68a3      	ldr	r3, [r4, #8]
 80054e2:	3001      	adds	r0, #1
 80054e4:	3b01      	subs	r3, #1
 80054e6:	60a3      	str	r3, [r4, #8]
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	1c5a      	adds	r2, r3, #1
 80054ec:	6022      	str	r2, [r4, #0]
 80054ee:	701f      	strb	r7, [r3, #0]
 80054f0:	6963      	ldr	r3, [r4, #20]
 80054f2:	4283      	cmp	r3, r0
 80054f4:	d004      	beq.n	8005500 <__swbuf_r+0x76>
 80054f6:	89a3      	ldrh	r3, [r4, #12]
 80054f8:	07db      	lsls	r3, r3, #31
 80054fa:	d5e1      	bpl.n	80054c0 <__swbuf_r+0x36>
 80054fc:	2d0a      	cmp	r5, #10
 80054fe:	d1df      	bne.n	80054c0 <__swbuf_r+0x36>
 8005500:	0021      	movs	r1, r4
 8005502:	0030      	movs	r0, r6
 8005504:	f7ff ff96 	bl	8005434 <_fflush_r>
 8005508:	2800      	cmp	r0, #0
 800550a:	d0d9      	beq.n	80054c0 <__swbuf_r+0x36>
 800550c:	e7d6      	b.n	80054bc <__swbuf_r+0x32>
	...

08005510 <__swsetup_r>:
 8005510:	4b2d      	ldr	r3, [pc, #180]	@ (80055c8 <__swsetup_r+0xb8>)
 8005512:	b570      	push	{r4, r5, r6, lr}
 8005514:	0005      	movs	r5, r0
 8005516:	6818      	ldr	r0, [r3, #0]
 8005518:	000c      	movs	r4, r1
 800551a:	2800      	cmp	r0, #0
 800551c:	d004      	beq.n	8005528 <__swsetup_r+0x18>
 800551e:	6a03      	ldr	r3, [r0, #32]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <__swsetup_r+0x18>
 8005524:	f7ff fa2e 	bl	8004984 <__sinit>
 8005528:	230c      	movs	r3, #12
 800552a:	5ee2      	ldrsh	r2, [r4, r3]
 800552c:	0713      	lsls	r3, r2, #28
 800552e:	d423      	bmi.n	8005578 <__swsetup_r+0x68>
 8005530:	06d3      	lsls	r3, r2, #27
 8005532:	d407      	bmi.n	8005544 <__swsetup_r+0x34>
 8005534:	2309      	movs	r3, #9
 8005536:	602b      	str	r3, [r5, #0]
 8005538:	2340      	movs	r3, #64	@ 0x40
 800553a:	2001      	movs	r0, #1
 800553c:	4313      	orrs	r3, r2
 800553e:	81a3      	strh	r3, [r4, #12]
 8005540:	4240      	negs	r0, r0
 8005542:	e03a      	b.n	80055ba <__swsetup_r+0xaa>
 8005544:	0752      	lsls	r2, r2, #29
 8005546:	d513      	bpl.n	8005570 <__swsetup_r+0x60>
 8005548:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800554a:	2900      	cmp	r1, #0
 800554c:	d008      	beq.n	8005560 <__swsetup_r+0x50>
 800554e:	0023      	movs	r3, r4
 8005550:	3344      	adds	r3, #68	@ 0x44
 8005552:	4299      	cmp	r1, r3
 8005554:	d002      	beq.n	800555c <__swsetup_r+0x4c>
 8005556:	0028      	movs	r0, r5
 8005558:	f7ff fb28 	bl	8004bac <_free_r>
 800555c:	2300      	movs	r3, #0
 800555e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005560:	2224      	movs	r2, #36	@ 0x24
 8005562:	89a3      	ldrh	r3, [r4, #12]
 8005564:	4393      	bics	r3, r2
 8005566:	81a3      	strh	r3, [r4, #12]
 8005568:	2300      	movs	r3, #0
 800556a:	6063      	str	r3, [r4, #4]
 800556c:	6923      	ldr	r3, [r4, #16]
 800556e:	6023      	str	r3, [r4, #0]
 8005570:	2308      	movs	r3, #8
 8005572:	89a2      	ldrh	r2, [r4, #12]
 8005574:	4313      	orrs	r3, r2
 8005576:	81a3      	strh	r3, [r4, #12]
 8005578:	6923      	ldr	r3, [r4, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10b      	bne.n	8005596 <__swsetup_r+0x86>
 800557e:	21a0      	movs	r1, #160	@ 0xa0
 8005580:	2280      	movs	r2, #128	@ 0x80
 8005582:	89a3      	ldrh	r3, [r4, #12]
 8005584:	0089      	lsls	r1, r1, #2
 8005586:	0092      	lsls	r2, r2, #2
 8005588:	400b      	ands	r3, r1
 800558a:	4293      	cmp	r3, r2
 800558c:	d003      	beq.n	8005596 <__swsetup_r+0x86>
 800558e:	0021      	movs	r1, r4
 8005590:	0028      	movs	r0, r5
 8005592:	f000 f863 	bl	800565c <__smakebuf_r>
 8005596:	230c      	movs	r3, #12
 8005598:	5ee2      	ldrsh	r2, [r4, r3]
 800559a:	2101      	movs	r1, #1
 800559c:	0013      	movs	r3, r2
 800559e:	400b      	ands	r3, r1
 80055a0:	420a      	tst	r2, r1
 80055a2:	d00b      	beq.n	80055bc <__swsetup_r+0xac>
 80055a4:	2300      	movs	r3, #0
 80055a6:	60a3      	str	r3, [r4, #8]
 80055a8:	6963      	ldr	r3, [r4, #20]
 80055aa:	425b      	negs	r3, r3
 80055ac:	61a3      	str	r3, [r4, #24]
 80055ae:	2000      	movs	r0, #0
 80055b0:	6923      	ldr	r3, [r4, #16]
 80055b2:	4283      	cmp	r3, r0
 80055b4:	d101      	bne.n	80055ba <__swsetup_r+0xaa>
 80055b6:	0613      	lsls	r3, r2, #24
 80055b8:	d4be      	bmi.n	8005538 <__swsetup_r+0x28>
 80055ba:	bd70      	pop	{r4, r5, r6, pc}
 80055bc:	0791      	lsls	r1, r2, #30
 80055be:	d400      	bmi.n	80055c2 <__swsetup_r+0xb2>
 80055c0:	6963      	ldr	r3, [r4, #20]
 80055c2:	60a3      	str	r3, [r4, #8]
 80055c4:	e7f3      	b.n	80055ae <__swsetup_r+0x9e>
 80055c6:	46c0      	nop			@ (mov r8, r8)
 80055c8:	20000030 	.word	0x20000030

080055cc <_sbrk_r>:
 80055cc:	2300      	movs	r3, #0
 80055ce:	b570      	push	{r4, r5, r6, lr}
 80055d0:	4d06      	ldr	r5, [pc, #24]	@ (80055ec <_sbrk_r+0x20>)
 80055d2:	0004      	movs	r4, r0
 80055d4:	0008      	movs	r0, r1
 80055d6:	602b      	str	r3, [r5, #0]
 80055d8:	f7fb f956 	bl	8000888 <_sbrk>
 80055dc:	1c43      	adds	r3, r0, #1
 80055de:	d103      	bne.n	80055e8 <_sbrk_r+0x1c>
 80055e0:	682b      	ldr	r3, [r5, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d000      	beq.n	80055e8 <_sbrk_r+0x1c>
 80055e6:	6023      	str	r3, [r4, #0]
 80055e8:	bd70      	pop	{r4, r5, r6, pc}
 80055ea:	46c0      	nop			@ (mov r8, r8)
 80055ec:	2000039c 	.word	0x2000039c

080055f0 <memchr>:
 80055f0:	b2c9      	uxtb	r1, r1
 80055f2:	1882      	adds	r2, r0, r2
 80055f4:	4290      	cmp	r0, r2
 80055f6:	d101      	bne.n	80055fc <memchr+0xc>
 80055f8:	2000      	movs	r0, #0
 80055fa:	4770      	bx	lr
 80055fc:	7803      	ldrb	r3, [r0, #0]
 80055fe:	428b      	cmp	r3, r1
 8005600:	d0fb      	beq.n	80055fa <memchr+0xa>
 8005602:	3001      	adds	r0, #1
 8005604:	e7f6      	b.n	80055f4 <memchr+0x4>
	...

08005608 <__swhatbuf_r>:
 8005608:	b570      	push	{r4, r5, r6, lr}
 800560a:	000e      	movs	r6, r1
 800560c:	001d      	movs	r5, r3
 800560e:	230e      	movs	r3, #14
 8005610:	5ec9      	ldrsh	r1, [r1, r3]
 8005612:	0014      	movs	r4, r2
 8005614:	b096      	sub	sp, #88	@ 0x58
 8005616:	2900      	cmp	r1, #0
 8005618:	da0c      	bge.n	8005634 <__swhatbuf_r+0x2c>
 800561a:	89b2      	ldrh	r2, [r6, #12]
 800561c:	2380      	movs	r3, #128	@ 0x80
 800561e:	0011      	movs	r1, r2
 8005620:	4019      	ands	r1, r3
 8005622:	421a      	tst	r2, r3
 8005624:	d114      	bne.n	8005650 <__swhatbuf_r+0x48>
 8005626:	2380      	movs	r3, #128	@ 0x80
 8005628:	00db      	lsls	r3, r3, #3
 800562a:	2000      	movs	r0, #0
 800562c:	6029      	str	r1, [r5, #0]
 800562e:	6023      	str	r3, [r4, #0]
 8005630:	b016      	add	sp, #88	@ 0x58
 8005632:	bd70      	pop	{r4, r5, r6, pc}
 8005634:	466a      	mov	r2, sp
 8005636:	f000 f853 	bl	80056e0 <_fstat_r>
 800563a:	2800      	cmp	r0, #0
 800563c:	dbed      	blt.n	800561a <__swhatbuf_r+0x12>
 800563e:	23f0      	movs	r3, #240	@ 0xf0
 8005640:	9901      	ldr	r1, [sp, #4]
 8005642:	021b      	lsls	r3, r3, #8
 8005644:	4019      	ands	r1, r3
 8005646:	4b04      	ldr	r3, [pc, #16]	@ (8005658 <__swhatbuf_r+0x50>)
 8005648:	18c9      	adds	r1, r1, r3
 800564a:	424b      	negs	r3, r1
 800564c:	4159      	adcs	r1, r3
 800564e:	e7ea      	b.n	8005626 <__swhatbuf_r+0x1e>
 8005650:	2100      	movs	r1, #0
 8005652:	2340      	movs	r3, #64	@ 0x40
 8005654:	e7e9      	b.n	800562a <__swhatbuf_r+0x22>
 8005656:	46c0      	nop			@ (mov r8, r8)
 8005658:	ffffe000 	.word	0xffffe000

0800565c <__smakebuf_r>:
 800565c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800565e:	2602      	movs	r6, #2
 8005660:	898b      	ldrh	r3, [r1, #12]
 8005662:	0005      	movs	r5, r0
 8005664:	000c      	movs	r4, r1
 8005666:	b085      	sub	sp, #20
 8005668:	4233      	tst	r3, r6
 800566a:	d007      	beq.n	800567c <__smakebuf_r+0x20>
 800566c:	0023      	movs	r3, r4
 800566e:	3347      	adds	r3, #71	@ 0x47
 8005670:	6023      	str	r3, [r4, #0]
 8005672:	6123      	str	r3, [r4, #16]
 8005674:	2301      	movs	r3, #1
 8005676:	6163      	str	r3, [r4, #20]
 8005678:	b005      	add	sp, #20
 800567a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800567c:	ab03      	add	r3, sp, #12
 800567e:	aa02      	add	r2, sp, #8
 8005680:	f7ff ffc2 	bl	8005608 <__swhatbuf_r>
 8005684:	9f02      	ldr	r7, [sp, #8]
 8005686:	9001      	str	r0, [sp, #4]
 8005688:	0039      	movs	r1, r7
 800568a:	0028      	movs	r0, r5
 800568c:	f7ff fafa 	bl	8004c84 <_malloc_r>
 8005690:	2800      	cmp	r0, #0
 8005692:	d108      	bne.n	80056a6 <__smakebuf_r+0x4a>
 8005694:	220c      	movs	r2, #12
 8005696:	5ea3      	ldrsh	r3, [r4, r2]
 8005698:	059a      	lsls	r2, r3, #22
 800569a:	d4ed      	bmi.n	8005678 <__smakebuf_r+0x1c>
 800569c:	2203      	movs	r2, #3
 800569e:	4393      	bics	r3, r2
 80056a0:	431e      	orrs	r6, r3
 80056a2:	81a6      	strh	r6, [r4, #12]
 80056a4:	e7e2      	b.n	800566c <__smakebuf_r+0x10>
 80056a6:	2380      	movs	r3, #128	@ 0x80
 80056a8:	89a2      	ldrh	r2, [r4, #12]
 80056aa:	6020      	str	r0, [r4, #0]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	81a3      	strh	r3, [r4, #12]
 80056b0:	9b03      	ldr	r3, [sp, #12]
 80056b2:	6120      	str	r0, [r4, #16]
 80056b4:	6167      	str	r7, [r4, #20]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00c      	beq.n	80056d4 <__smakebuf_r+0x78>
 80056ba:	0028      	movs	r0, r5
 80056bc:	230e      	movs	r3, #14
 80056be:	5ee1      	ldrsh	r1, [r4, r3]
 80056c0:	f000 f820 	bl	8005704 <_isatty_r>
 80056c4:	2800      	cmp	r0, #0
 80056c6:	d005      	beq.n	80056d4 <__smakebuf_r+0x78>
 80056c8:	2303      	movs	r3, #3
 80056ca:	89a2      	ldrh	r2, [r4, #12]
 80056cc:	439a      	bics	r2, r3
 80056ce:	3b02      	subs	r3, #2
 80056d0:	4313      	orrs	r3, r2
 80056d2:	81a3      	strh	r3, [r4, #12]
 80056d4:	89a3      	ldrh	r3, [r4, #12]
 80056d6:	9a01      	ldr	r2, [sp, #4]
 80056d8:	4313      	orrs	r3, r2
 80056da:	81a3      	strh	r3, [r4, #12]
 80056dc:	e7cc      	b.n	8005678 <__smakebuf_r+0x1c>
	...

080056e0 <_fstat_r>:
 80056e0:	2300      	movs	r3, #0
 80056e2:	b570      	push	{r4, r5, r6, lr}
 80056e4:	4d06      	ldr	r5, [pc, #24]	@ (8005700 <_fstat_r+0x20>)
 80056e6:	0004      	movs	r4, r0
 80056e8:	0008      	movs	r0, r1
 80056ea:	0011      	movs	r1, r2
 80056ec:	602b      	str	r3, [r5, #0]
 80056ee:	f7fb f8a8 	bl	8000842 <_fstat>
 80056f2:	1c43      	adds	r3, r0, #1
 80056f4:	d103      	bne.n	80056fe <_fstat_r+0x1e>
 80056f6:	682b      	ldr	r3, [r5, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d000      	beq.n	80056fe <_fstat_r+0x1e>
 80056fc:	6023      	str	r3, [r4, #0]
 80056fe:	bd70      	pop	{r4, r5, r6, pc}
 8005700:	2000039c 	.word	0x2000039c

08005704 <_isatty_r>:
 8005704:	2300      	movs	r3, #0
 8005706:	b570      	push	{r4, r5, r6, lr}
 8005708:	4d06      	ldr	r5, [pc, #24]	@ (8005724 <_isatty_r+0x20>)
 800570a:	0004      	movs	r4, r0
 800570c:	0008      	movs	r0, r1
 800570e:	602b      	str	r3, [r5, #0]
 8005710:	f7fb f8a5 	bl	800085e <_isatty>
 8005714:	1c43      	adds	r3, r0, #1
 8005716:	d103      	bne.n	8005720 <_isatty_r+0x1c>
 8005718:	682b      	ldr	r3, [r5, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d000      	beq.n	8005720 <_isatty_r+0x1c>
 800571e:	6023      	str	r3, [r4, #0]
 8005720:	bd70      	pop	{r4, r5, r6, pc}
 8005722:	46c0      	nop			@ (mov r8, r8)
 8005724:	2000039c 	.word	0x2000039c

08005728 <_init>:
 8005728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800572a:	46c0      	nop			@ (mov r8, r8)
 800572c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800572e:	bc08      	pop	{r3}
 8005730:	469e      	mov	lr, r3
 8005732:	4770      	bx	lr

08005734 <_fini>:
 8005734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005736:	46c0      	nop			@ (mov r8, r8)
 8005738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800573a:	bc08      	pop	{r3}
 800573c:	469e      	mov	lr, r3
 800573e:	4770      	bx	lr
